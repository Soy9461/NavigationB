/*
 JSG - A JavaScript Graph Library
 Version 1.5.5 - Copyright (c) 2015 Tensegrity Software GmbH. Use and distribution currently only with the consent of Tensegrity Software GmbH! Please read and
 follow the license agreement provided with this distribution. If there are any questions regarding the software license, please contact us.
 Used libraries:
 ! Hammer.JS - v1.0.6dev - 2013-07-31 http://eightmedia.github.com/hammer.js Copyright (c) 2013 Jorik Tangelder (j.tangelder at gmail.com); Licensed under the MIT license
 */
(function (a, b) {
    function c() {
        if (!d.READY) {
            d.event.determineEventTypes();
            for (var a in d.gestures)d.gestures.hasOwnProperty(a) && d.detection.register(d.gestures[a]);
            d.event.onTouch(d.DOCUMENT, d.EVENT_MOVE, d.detection.detect);
            d.event.onTouch(d.DOCUMENT, d.EVENT_END, d.detection.detect);
            d.READY = !0
        }
    }

    var d = function (a, b) {
        return new d.Instance(a, b || {})
    };
    d.defaults = {
        stop_browser_behavior: {
            userSelect: "none",
            touchAction: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    };
    d.HAS_POINTEREVENTS = a.navigator.pointerEnabled || a.navigator.msPointerEnabled;
    d.HAS_TOUCHEVENTS = "ontouchstart"in a;
    d.MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android|silk/i;
    d.NO_MOUSEEVENTS = d.HAS_TOUCHEVENTS && a.navigator.userAgent.match(d.MOBILE_REGEX);
    d.EVENT_TYPES = {};
    d.DIRECTION_DOWN = "down";
    d.DIRECTION_LEFT = "left";
    d.DIRECTION_UP = "up";
    d.DIRECTION_RIGHT = "right";
    d.POINTER_MOUSE = "mouse";
    d.POINTER_TOUCH = "touch";
    d.POINTER_PEN = "pen";
    d.EVENT_START = "start";
    d.EVENT_MOVE = "move";
    d.EVENT_END = "end";
    d.DOCUMENT =
        a.document;
    d.plugins = {};
    d.READY = !1;
    d.Instance = function (a, b) {
        var e = this;
        c();
        this.element = a;
        this.enabled = !0;
        this.options = d.utils.extend(d.utils.extend({}, d.defaults), b || {});
        this.options.stop_browser_behavior && d.utils.stopDefaultBrowserBehavior(this.element, this.options.stop_browser_behavior);
        d.event.onTouch(a, d.EVENT_START, function (a) {
            e.enabled && d.detection.startDetect(e, a)
        });
        return this
    };
    d.Instance.prototype = {
        on: function (a, b) {
            for (var c = a.split(" "), d = 0; d < c.length; d++)this.element.addEventListener(c[d],
                b, !1);
            return this
        }, off: function (a, b) {
            for (var c = a.split(" "), d = 0; d < c.length; d++)this.element.removeEventListener(c[d], b, !1);
            return this
        }, trigger: function (a, b) {
            var c = d.DOCUMENT.createEvent("Event");
            c.initEvent(a, !0, !0);
            c.gesture = b;
            var e = this.element;
            d.utils.hasParent(b.target, e) && (e = b.target);
            e.dispatchEvent(c);
            return this
        }, enable: function (a) {
            this.enabled = a;
            return this
        }
    };
    var e = null, f = !1, g = !1;
    d.event = {
        bindDom: function (a, b, c) {
            b = b.split(" ");
            for (var d = 0; d < b.length; d++)a.addEventListener(b[d], c, !1)
        }, onTouch: function (a,
                              b, c) {
            var l = this;
            this.bindDom(a, d.EVENT_TYPES[b], function (p) {
                var n = p.type.toLowerCase();
                if (!n.match(/mouse/) || !g) {
                    n.match(/touch/) || n.match(/pointerdown/) || n.match(/mouse/) && 1 === p.which ? f = !0 : n.match(/mouse/) && 1 !== p.which && (f = !1);
                    n.match(/touch|pointer/) && (g = !0);
                    var q = 0;
                    if (f) {
                        d.HAS_POINTEREVENTS && b != d.EVENT_END ? q = d.PointerEvent.updatePointer(b, p) : n.match(/touch/) ? q = p.touches.length : g || (q = n.match(/up/) ? 0 : 1);
                        0 < q && b == d.EVENT_END ? b = d.EVENT_MOVE : q || (b = d.EVENT_END);
                        if (q || null === e)e = p;
                        c.call(d.detection, l.collectEventData(a,
                            b, l.getTouchList(e, b), p));
                        d.HAS_POINTEREVENTS && b == d.EVENT_END && (q = d.PointerEvent.updatePointer(b, p))
                    }
                    q || (e = null, g = f = !1, d.PointerEvent.reset())
                }
            })
        }, determineEventTypes: function () {
            var a;
            a = d.HAS_POINTEREVENTS ? d.PointerEvent.getEvents() : d.NO_MOUSEEVENTS ? ["touchstart", "touchmove", "touchend touchcancel"] : ["touchstart mousedown", "touchmove mousemove", "touchend touchcancel mouseup"];
            d.EVENT_TYPES[d.EVENT_START] = a[0];
            d.EVENT_TYPES[d.EVENT_MOVE] = a[1];
            d.EVENT_TYPES[d.EVENT_END] = a[2]
        }, getTouchList: function (a) {
            if (d.HAS_POINTEREVENTS)return d.PointerEvent.getTouchList();
            if (a.touches)return a.touches;
            a.indentifier = 1;
            return [a]
        }, collectEventData: function (a, b, c, e) {
            a = d.POINTER_TOUCH;
            if (e.type.match(/mouse/) || d.PointerEvent.matchType(d.POINTER_MOUSE, e))a = d.POINTER_MOUSE;
            return {
                center: d.utils.getCenter(c),
                timeStamp: (new Date).getTime(),
                target: e.target,
                touches: c,
                eventType: b,
                pointerType: a,
                srcEvent: e,
                preventDefault: function () {
                    this.srcEvent.preventManipulation && this.srcEvent.preventManipulation();
                    this.srcEvent.preventDefault && this.srcEvent.preventDefault()
                },
                stopPropagation: function () {
                    this.srcEvent.stopPropagation()
                },
                stopDetect: function () {
                    return d.detection.stopDetect()
                }
            }
        }
    };
    d.PointerEvent = {
        pointers: {}, getTouchList: function () {
            var a = this, b = [];
            Object.keys(a.pointers).sort().forEach(function (c) {
                b.push(a.pointers[c])
            });
            return b
        }, updatePointer: function (a, b) {
            a == d.EVENT_END ? this.pointers = {} : (b.identifier = b.pointerId, this.pointers[b.pointerId] = b);
            return Object.keys(this.pointers).length
        }, matchType: function (a, b) {
            if (!b.pointerType)return !1;
            var c = {};
            c[d.POINTER_MOUSE] = b.pointerType == b.MSPOINTER_TYPE_MOUSE || b.pointerType ==
            d.POINTER_MOUSE;
            c[d.POINTER_TOUCH] = b.pointerType == b.MSPOINTER_TYPE_TOUCH || b.pointerType == d.POINTER_TOUCH;
            c[d.POINTER_PEN] = b.pointerType == b.MSPOINTER_TYPE_PEN || b.pointerType == d.POINTER_PEN;
            return c[a]
        }, getEvents: function () {
            return ["pointerdown MSPointerDown", "pointermove MSPointerMove", "pointerup pointercancel MSPointerUp MSPointerCancel"]
        }, reset: function () {
            this.pointers = {}
        }
    };
    d.utils = {
        extend: function (a, c, d) {
            for (var e in c)a[e] !== b && d || (a[e] = c[e]);
            return a
        }, hasParent: function (a, b) {
            for (; a;) {
                if (a == b)return !0;
                a = a.parentNode
            }
            return !1
        }, getCenter: function (a) {
            for (var b = [], c = [], d = 0, e = a.length; d < e; d++)b.push(a[d].pageX), c.push(a[d].pageY);
            return {
                pageX: (Math.min.apply(Math, b) + Math.max.apply(Math, b)) / 2,
                pageY: (Math.min.apply(Math, c) + Math.max.apply(Math, c)) / 2
            }
        }, getVelocity: function (a, b, c) {
            return {x: Math.abs(b / a) || 0, y: Math.abs(c / a) || 0}
        }, getAngle: function (a, b) {
            return 180 * Math.atan2(b.pageY - a.pageY, b.pageX - a.pageX) / Math.PI
        }, getDirection: function (a, b) {
            var c = Math.abs(a.pageX - b.pageX), e = Math.abs(a.pageY - b.pageY);
            return c >=
            e ? 0 < a.pageX - b.pageX ? d.DIRECTION_LEFT : d.DIRECTION_RIGHT : 0 < a.pageY - b.pageY ? d.DIRECTION_UP : d.DIRECTION_DOWN
        }, getDistance: function (a, b) {
            var c = b.pageX - a.pageX, d = b.pageY - a.pageY;
            return Math.sqrt(c * c + d * d)
        }, getScale: function (a, b) {
            return 2 <= a.length && 2 <= b.length ? this.getDistance(b[0], b[1]) / this.getDistance(a[0], a[1]) : 1
        }, getRotation: function (a, b) {
            return 2 <= a.length && 2 <= b.length ? this.getAngle(b[1], b[0]) - this.getAngle(a[1], a[0]) : 0
        }, isVertical: function (a) {
            return a == d.DIRECTION_UP || a == d.DIRECTION_DOWN
        }, stopDefaultBrowserBehavior: function (a,
                                                 b) {
            var c, d = "webkit khtml moz Moz ms o ".split(" ");
            if (b && a.style) {
                for (var e = 0; e < d.length; e++)for (var f in b)b.hasOwnProperty(f) && (c = f, d[e] && (c = d[e] + c.substring(0, 1).toUpperCase() + c.substring(1)), a.style[c] = b[f]);
                "none" == b.userSelect && (a.onselectstart = function () {
                    return !1
                })
            }
        }
    };
    d.detection = {
        gestures: [], current: null, previous: null, stopped: !1, startDetect: function (a, b) {
            this.current || (this.stopped = !1, this.current = {
                inst: a,
                startEvent: d.utils.extend({}, b),
                lastEvent: !1,
                name: ""
            }, this.detect(b))
        }, detect: function (a) {
            if (this.current && !this.stopped) {
                a = this.extendEventData(a);
                for (var b = this.current.inst.options, c = 0, e = this.gestures.length; c < e; c++) {
                    var f = this.gestures[c];
                    if (!this.stopped && !1 !== b[f.name] && !1 === f.handler.call(f, a, this.current.inst)) {
                        this.stopDetect();
                        break
                    }
                }
                this.current && (this.current.lastEvent = a);
                a.eventType == d.EVENT_END && !a.touches.length - 1 && this.stopDetect();
                return a
            }
        }, stopDetect: function () {
            this.previous = d.utils.extend({}, this.current);
            this.current = null;
            this.stopped = !0
        }, extendEventData: function (a) {
            var b = this.current.startEvent;
            if (b && (a.touches.length != b.touches.length || a.touches === b.touches)) {
                b.touches = [];
                for (var c = 0, e = a.touches.length; c < e; c++)b.touches.push(d.utils.extend({}, a.touches[c]))
            }
            var c = a.timeStamp - b.timeStamp, e = a.center.pageX - b.center.pageX, f = a.center.pageY - b.center.pageY, g = d.utils.getVelocity(c, e, f), q = d.utils.getCenter(b.touches), r = d.utils.getCenter(a.touches);
            d.utils.extend(a, {
                deltaTime: c,
                deltaX: e,
                deltaY: f,
                velocityX: g.x,
                velocityY: g.y,
                distance: d.utils.getDistance(b.center, a.center),
                angle: d.utils.getAngle(b.center,
                    a.center),
                direction: d.utils.getDirection(b.center, a.center),
                scale: d.utils.getScale(b.touches, a.touches),
                rotation: d.utils.getRotation(b.touches, a.touches),
                move: d.utils.getDistance(q, r),
                startEvent: b
            });
            return a
        }, register: function (a) {
            var c = a.defaults || {};
            c[a.name] === b && (c[a.name] = !0);
            d.utils.extend(d.defaults, c, !0);
            a.index = a.index || 1E3;
            this.gestures.push(a);
            this.gestures.sort(function (a, b) {
                return a.index < b.index ? -1 : a.index > b.index ? 1 : 0
            });
            return this.gestures
        }
    };
    d.gestures = d.gestures || {};
    d.gestures.Hold =
    {
        name: "hold",
        index: 10,
        defaults: {hold_timeout: 500, hold_threshold: 1},
        timer: null,
        handler: function (a, b) {
            switch (a.eventType) {
                case d.EVENT_START:
                    clearTimeout(this.timer);
                    d.detection.current.name = this.name;
                    this.timer = setTimeout(function () {
                        "hold" == d.detection.current.name && b.trigger("hold", a)
                    }, b.options.hold_timeout);
                    break;
                case d.EVENT_MOVE:
                    a.distance > b.options.hold_threshold && clearTimeout(this.timer);
                    break;
                case d.EVENT_END:
                    clearTimeout(this.timer)
            }
        }
    };
    d.gestures.Tap = {
        name: "tap", index: 100, defaults: {
            tap_max_touchtime: 250,
            tap_max_distance: 10, tap_always: !0, doubletap_distance: 20, doubletap_interval: 300
        }, handler: function (a, b) {
            if (a.eventType == d.EVENT_END) {
                var c = d.detection.previous, e = !1;
                a.deltaTime > b.options.tap_max_touchtime || a.distance > b.options.tap_max_distance || (c && ("tap" == c.name && a.timeStamp - c.lastEvent.timeStamp < b.options.doubletap_interval && a.distance < b.options.doubletap_distance) && (b.trigger("doubletap", a), e = !0), e && !b.options.tap_always) || (d.detection.current.name = "tap", b.trigger(d.detection.current.name, a))
            }
        }
    };
    d.gestures.Swipe = {
        name: "swipe",
        index: 40,
        defaults: {swipe_max_touches: 1, swipe_velocity: 0.7},
        handler: function (a, b) {
            a.eventType != d.EVENT_END || 0 < b.options.swipe_max_touches && a.touches.length > b.options.swipe_max_touches || !(a.velocityX > b.options.swipe_velocity || a.velocityY > b.options.swipe_velocity) || (b.trigger(this.name, a), b.trigger(this.name + a.direction, a))
        }
    };
    d.gestures.Drag = {
        name: "drag", index: 50, defaults: {
            drag_min_distance: 10, correct_for_drag_min_distance: !0, drag_max_touches: 1, drag_block_horizontal: !1,
            drag_block_vertical: !1, drag_lock_to_axis: !1, drag_lock_min_distance: 25
        }, triggered: !1, handler: function (a, b) {
            if (d.detection.current.name != this.name && this.triggered)b.trigger(this.name + "end", a), this.triggered = !1; else if (!(0 < b.options.drag_max_touches && a.touches.length > b.options.drag_max_touches))switch (a.eventType) {
                case d.EVENT_START:
                    this.triggered = !1;
                    break;
                case d.EVENT_MOVE:
                    if (a.distance < b.options.drag_min_distance && d.detection.current.name != this.name)break;
                    if (d.detection.current.name != this.name && (d.detection.current.name =
                            this.name, b.options.correct_for_drag_min_distance)) {
                        var c = Math.abs(b.options.drag_min_distance / a.distance);
                        d.detection.current.startEvent.center.pageX += a.deltaX * c;
                        d.detection.current.startEvent.center.pageY += a.deltaY * c;
                        a = d.detection.extendEventData(a)
                    }
                    if (d.detection.current.lastEvent.drag_locked_to_axis || b.options.drag_lock_to_axis && b.options.drag_lock_min_distance <= a.distance)a.drag_locked_to_axis = !0;
                    c = d.detection.current.lastEvent.direction;
                    a.drag_locked_to_axis && c !== a.direction && (d.utils.isVertical(c) ?
                        a.direction = 0 > a.deltaY ? d.DIRECTION_UP : d.DIRECTION_DOWN : a.direction = 0 > a.deltaX ? d.DIRECTION_LEFT : d.DIRECTION_RIGHT);
                    this.triggered || (b.trigger(this.name + "start", a), this.triggered = !0);
                    b.trigger(this.name, a);
                    b.trigger(this.name + a.direction, a);
                    (b.options.drag_block_vertical && d.utils.isVertical(a.direction) || b.options.drag_block_horizontal && !d.utils.isVertical(a.direction)) && a.preventDefault();
                    break;
                case d.EVENT_END:
                    this.triggered && b.trigger(this.name + "end", a), this.triggered = !1
            }
        }
    };
    d.gestures.Transform =
    {
        name: "transform",
        index: 45,
        defaults: {
            transform_min_move: 30,
            transform_min_scale: 0.01,
            transform_min_rotation: 2,
            transform_always_block: !1
        },
        triggered: !1,
        handler: function (a, b) {
            if (d.detection.current.name != this.name && this.triggered)b.trigger(this.name + "end", a), this.triggered = !1; else if (!(2 > a.touches.length))switch (b.options.transform_always_block && a.preventDefault(), a.eventType) {
                case d.EVENT_START:
                    this.triggered = !1;
                    break;
                case d.EVENT_MOVE:
                    var c = Math.abs(1 - a.scale), e = Math.abs(a.rotation), f = Math.abs(a.move);
                    if (c < b.options.transform_min_scale && f < b.options.transform_min_move && e < b.options.transform_min_rotation)break;
                    d.detection.current.name = this.name;
                    this.triggered || (b.trigger(this.name + "start", a), this.triggered = !0);
                    e > b.options.transform_min_rotation && b.trigger("rotate", a);
                    c > b.options.transform_min_scale && (b.trigger("pinch", a), b.trigger("pinch" + (1 > a.scale ? "in" : "out"), a));
                    f > b.options.transform_min_move && b.trigger(this.name, a);
                    break;
                case d.EVENT_END:
                    this.triggered && b.trigger(this.name + "end", a), this.triggered = !1
            }
        }
    };
    d.gestures.Touch = {
        name: "touch",
        index: -Infinity,
        defaults: {prevent_default: !1, prevent_mouseevents: !1},
        handler: function (a, b) {
            b.options.prevent_mouseevents && a.pointerType == d.POINTER_MOUSE ? a.stopDetect() : (b.options.prevent_default && a.preventDefault(), a.eventType == d.EVENT_START && b.trigger(this.name, a))
        }
    };
    d.gestures.Release = {
        name: "release", index: Infinity, handler: function (a, b) {
            a.eventType == d.EVENT_END && b.trigger(this.name, a)
        }
    };
    "function" == typeof define && "object" == typeof define.amd && define.amd ? define(function () {
        return d
    }) :
        "object" === typeof module && "object" === typeof module.exports ? module.exports = d : a.Hammer = d
})(this);
var JSG = JSG || {};
JSG.version = "1.5.5";
JSG.builddate = "2015-02-24";
JSG.namespace = function (a, b) {
    var c = JSG, d = a.split(b || "."), e;
    for (e = "JSG" === d[0] ? 1 : 0; e < d.length; e += 1)"undefined" === typeof c[d[e]] && (c[d[e]] = {}), c = c[d[e]];
    return c
};
JSG.extend = function (a, b) {
    var c = function () {
    };
    c.prototype = b.prototype;
    a.prototype = new c;
    a._super = b.prototype;
    a.prototype.constructor = a
};
JSG.createObjectFromString = function (a, b) {
    var c, d = JSG.getObjectFromString(a, b);
    d && (c = "function" === typeof d ? new d : d);
    return c
};
JSG.getObjectFromString = function (a, b) {
    if (a) {
        var c = a.split(b || "."), d = c.length - 1, e = window, f;
        for (f = 0; e && f < d; f++)e = e[c[f]];
        return e ? e[c[d]] : void 0
    }
};
JSG.arraycopy = function (a, b, c, d, e) {
    var f = e, g;
    for (g = 0; g < e && d + g < c.length; g++)f--, c[d + g] = a[b + g];
    e = b + e;
    for (g = e - f; g < e && g < a.length; g++)c.push(a[g])
};
JSG.hasPropertyWithValue = function (a, b) {
    var c = !1, d;
    for (d in a)if (Object.prototype.hasOwnProperty.call(a, d) && a[d] == b) {
        c = !0;
        break
    }
    return c
};
Math.PI_2 || (Math.PI_2 = Math.PI / 2);
Math.PI_4 || (Math.PI_4 = Math.PI / 4);
Math.PI_8 || (Math.PI_8 = Math.PI / 8);
Array.prototype.move || (Array.prototype.move = function (a, b) {
    var c, d;
    a = parseInt(a, 10);
    b = parseInt(b, 10);
    if (a !== b && 0 <= a && a <= this.length && 0 <= b && b <= this.length) {
        d = this[a];
        if (a < b)for (c = a; c < b; c++)this[c] = this[c + 1]; else for (c = a; c > b; c--)this[c] = this[c - 1];
        this[b] = d;
        return !0
    }
    return !1
});
Array.prototype.addAll || (Array.prototype.addAll = function (a) {
    this.push.apply(this, a)
});
Array.prototype.remove || (Array.prototype.remove = function (a) {
    a = this.indexOf(a);
    return -1 < a ? (this.splice(a, 1), !0) : !1
});
Array.prototype.removeAt || (Array.prototype.removeAt = function (a) {
    if (-1 < a && (a = this.splice(a, 1), void 0 !== a && 0 < a.length))return a[0]
});
Array.prototype.removeAll || (Array.prototype.removeAll = function () {
    this.length = 0
});
Array.prototype.contains || (Array.prototype.contains = function (a) {
    return -1 < this.indexOf(a)
});
Array.prototype.insert || (Array.prototype.insert = function (a, b) {
    if (void 0 === b || 0 > b || b > this.length)b = this.length;
    this.splice(b, 0, a)
});
Array.prototype.insertAt || (Array.prototype.insertAt = function () {
    var a, b;
    a = arguments;
    if (1 < a.length) {
        b = Array.prototype.shift.apply(a);
        if (0 > b || b > this.length)b = this.length;
        a = Array.isArray(a[0]) ? a[0] : Array.prototype.slice.call(a);
        a = [b, 0].concat(a);
        Array.prototype.splice.apply(this, a)
    }
});
Array.prototype.isEmpty || (Array.prototype.isEmpty = function () {
    return 0 === this.length
});
Array.prototype.forEach || (Array.prototype.forEach = function (a) {
    var b, c;
    b = 0;
    for (c = this.length; b < c; b++)a(this[b])
});
Array.prototype.every || (Array.prototype.every = function (a) {
    var b, c;
    b = 0;
    for (c = this.length; b < c && a(this[b]); b++);
});
Array.prototype.filter || (Array.prototype.filter = function (a) {
    var b = [];
    this.forEach(function (c) {
        a(c) && b.push(c)
    });
    return b
});
Array.prototype.last || (Array.prototype.last = function () {
    var a = this.length - 1;
    return 0 > a ? void 0 : this[a]
});
Array.prototype.keep || (Array.prototype.keep = function (a, b) {
    var c;
    for (c = this.length; c < a; c++)this.push(b.call(this));
    this.length = 0 > a ? 0 : a
});
Array.isArray || (Array.isArray = function (a) {
    return void 0 !== a && "[object Array]" === Object.prototype.toString.call(a)
});
Array.toArray || (Array.toArray = function () {
    var a = arguments, b = [];
    if (1 === a.length && ("[object Arguments]" === Object.prototype.toString.call(a[0]) && (a = a[0]), Array.isArray(a[0])))return a[0];
    b.push.apply(b, a);
    return b
});
Array.prototype.insertEmpty || (Array.prototype.insertEmpty = function (a, b, c) {
    a = parseInt(a, 10);
    b = parseInt(b, 10);
    if (void 0 !== c && this.length + b > c)return !1;
    if (0 <= a && a <= this.length && 0 < b) {
        for (c = this.length - 1; c >= a; c--)void 0 === this[c] ? delete this[c + b] : this[c + b] = this[c];
        for (c = 0; c < b; c++)delete this[c + a];
        return !0
    }
    return !1
});
JSG.namespace("JSG.commons");
JSG.commons.Arrays = {};
JSG.Arrays = JSG.commons.Arrays;
JSG.commons.Arrays.move = function (a, b, c) {
    var d;
    b = parseInt(b, 10);
    c = parseInt(c, 10);
    if (b !== c && 0 <= b && b <= a.length && 0 <= c && c <= a.length) {
        d = a[b];
        if (b < c)for (; b < c; b++)a[b] = a[b + 1]; else for (; b > c; b--)a[b] = a[b - 1];
        a[c] = d;
        return !0
    }
    return !1
};
JSG.commons.Arrays.addAll = function (a, b) {
    a.push.apply(a, b)
};
JSG.commons.Arrays.remove = function (a, b) {
    var c = a.indexOf(b);
    return -1 < c ? (a.splice(c, 1), !0) : !1
};
JSG.commons.Arrays.removeAt = function (a, b) {
    var c;
    if (-1 < b && (c = a.splice(b, 1), void 0 !== c && 0 < c.length))return c[0]
};
JSG.commons.Arrays.removeAll = function (a) {
    a.length = 0
};
JSG.commons.Arrays.contains = function (a, b) {
    return -1 < a.indexOf(b)
};
JSG.commons.Arrays.insert = function (a, b, c) {
    if (void 0 === c || 0 > c || c > a.length)c = a.length;
    a.splice(c, 0, b)
};
JSG.commons.Arrays.insertAt = function () {
    var a, b, c;
    b = arguments;
    if (2 < b.length) {
        a = Array.prototype.shift.apply(b);
        c = Array.prototype.shift.apply(b);
        if (0 > c || c > a.length)c = a.length;
        b = Array.isArray(b[0]) ? b[0] : Array.prototype.slice.call(b);
        b = [c, 0].concat(b);
        Array.prototype.splice.apply(a, b)
    }
};
JSG.commons.Arrays.isEmpty = function (a) {
    return 0 === a.length
};
JSG.commons.Arrays.every = function (a, b) {
    var c, d;
    c = 0;
    for (d = a.length; c < d && b(a[c]); c++);
};
JSG.commons.Arrays.keep = function (a, b, c) {
    var d;
    for (d = a.length; d < b; d++)a.push(c.call(a));
    a.length = 0 > b ? 0 : b
};
JSG.commons.Arrays.toArray = function () {
    var a = arguments, b = [];
    if (1 === a.length && ("[object Arguments]" === Object.prototype.toString.call(a[0]) && (a = a[0]), Array.isArray(a[0])))return a[0];
    b.push.apply(b, a);
    return b
};
JSG.commons.Arrays.insertEmpty = function (a, b, c, d) {
    b = parseInt(b, 10);
    c = parseInt(c, 10);
    if (void 0 !== d && a.length + c > d)return !1;
    if (0 <= b && b <= a.length && 0 < c) {
        for (d = a.length - 1; d >= b; d--)void 0 === a[d] ? delete a[d + c] : a[d + c] = a[d];
        for (d = 0; d < c; d++)delete a[d + b];
        return !0
    }
    return !1
};
Number.isNumber || (Number.isNumber = function (a) {
    return void 0 !== a && "[object Number]" === Object.prototype.toString.call(a)
});
Number.canBeNumber || (Number.canBeNumber = function (a) {
    return !isNaN(parseFloat(a)) && isFinite(a)
});
Number.areBothEvenOrOdd || (Number.areBothEvenOrOdd = function (a, b) {
    return void 0 !== a && void 0 !== b ? a.isEven() ? b.isEven() : !b.isEven() : !1
});
Number.prototype.hasSameSignAs || (Number.prototype.hasSameSignAs = function (a) {
    return 0 > this === 0 > a
});
Number.prototype.isEqual || (Number.prototype.isEqual = function (a, b) {
    return void 0 === b ? this === a : void 0 !== a && Math.abs(this - a) < b
});
Number.prototype.isEven || (Number.prototype.isEven = function () {
    return 0 === this % 2
});
Number.prototype.format || (Number.prototype.format = function (a, b, c, d) {
    var e = this, f, g, k;
    a = isNaN(a = Math.abs(a)) ? 2 : a;
    c = void 0 === c ? "." : c;
    b = void 0 === b ? "," : b;
    d = void 0 === d ? "$" : d;
    f = 0 > e ? "-" : "";
    g = parseInt(e = Math.abs(+e || 0).toFixed(a), 10) + "";
    k = 3 < (k = g.length) ? k % 3 : 0;
    return f + d + (k ? g.substr(0, k) + b : "") + g.substr(k).replace(/(\d{3})(?=\d)/g, "$1" + b) + (a ? c + Math.abs(e - g).toFixed(a).slice(2) : "")
});
JSG.namespace("JSG.commons");
JSG.commons.Numbers = {};
JSG.Numbers = JSG.commons.Numbers;
JSG.commons.Numbers.isNumber = function (a) {
    return (a || 0 === a) && "[object Number]" === Object.prototype.toString.call(a)
};
JSG.commons.Numbers.canBeNumber = function (a) {
    return !isNaN(parseFloat(a)) && isFinite(a)
};
JSG.commons.Numbers.haveSameSign = function (a, b) {
    return 0 > a === 0 > b
};
JSG.commons.Numbers.areEqual = function (a, b, c) {
    return void 0 === c ? a === b : void 0 !== b && Math.abs(a - b) < c
};
JSG.commons.Numbers.isEven = function (a) {
    return 0 === a % 2
};
JSG.commons.Numbers.format = function (a, b, c, d, e) {
    var f, g, k;
    b = isNaN(b = Math.abs(b)) ? 2 : b;
    d = void 0 === d ? "." : d;
    c = void 0 === c ? "," : c;
    e = void 0 === e ? "$" : e;
    f = 0 > a ? "-" : "";
    g = parseInt(a = Math.abs(+a || 0).toFixed(b), 10) + "";
    k = 3 < (k = g.length) ? k % 3 : 0;
    return f + e + (k ? g.substr(0, k) + c : "") + g.substr(k).replace(/(\d{3})(?=\d)/g, "$1" + c) + (b ? d + Math.abs(a - g).toFixed(b).slice(2) : "")
};
String.prototype.contains || (String.prototype.contains = function (a) {
    return -1 !== this.indexOf(a)
});
String.prototype.startsWith || (String.prototype.startsWith = function (a) {
    return this.slice(0, a.length) === a
});
String.prototype.endsWith || (String.prototype.endsWith = function (a) {
    return -1 !== this.indexOf(a, this.length - a.length)
});
String.prototype.insert || (String.prototype.insert = function (a, b) {
    return 0 < a ? this.substring(0, a) + b + this.substring(a, this.length) : b + this
});
String.prototype.remove || (String.prototype.remove = function (a, b) {
    return this.substr(0, a) + this.substr(a + b)
});
String.isString || (String.isString = function (a) {
    return "string" === typeof a || a instanceof String
});
String.isEmpty || (String.isEmpty = function (a) {
    return void 0 === a || "" === a
});
String.prototype.encode || (String.prototype.encode = function () {
    var a = this.replace(/%/g, "~25"), a = a.replace(/&/g, "~26"), a = a.replace(/"/g, "~22"), a = a.replace(/\\/g, "~5C"), a = a.replace(/</g, "~3C"), a = a.replace(/>/g, "~3E"), a = a.replace(/\n/g, "~0A"), a = a.replace(/'/g, "~27");
    return a = encodeURIComponent(a)
});
String.prototype.decode || (String.prototype.decode = function () {
    var a = this.replace(/~26/gi, "\x26"), a = a.replace(/~22/gi, '"'), a = a.replace(/~5C/gi, "\\"), a = a.replace(/~3C/gi, "\x3c"), a = a.replace(/~3E/gi, "\x3e"), a = a.replace(/~0A/gi, "\n"), a = a.replace(/~27/gi, "'"), a = decodeURIComponent(a);
    return a.replace(/~25/gi, "%")
});
String.prototype.encodeXML || (String.prototype.encodeXML = function () {
    return this.replace(/&/g, "\x26amp;").replace(/</g, "\x26lt;").replace(/>/g, "\x26gt;").replace(/"/g, "\x26quot;").replace(/'/g, "\x26apos;").replace(/\n/g, "\x26xA;")
});
String.prototype.decodeXML || (String.prototype.decodeXML = function () {
    return this.replace(/&apos;/g, "'").replace(/&quot;/g, '"').replace(/&gt;/g, "\x3e").replace(/&lt;/g, "\x3c").replace(/&amp;/g, "\x26").replace(/&xA;/g, "\n")
});
JSG.namespace("JSG.commons");
JSG.commons.Strings = {};
JSG.Strings = JSG.commons.Strings;
JSG.commons.Strings.isString = function (a) {
    return "string" === typeof a || a instanceof String
};
JSG.commons.Strings.contains = function (a, b) {
    return -1 !== a.indexOf(b)
};
JSG.commons.Strings.startsWith = function (a, b) {
    return a.slice(0, b.length) === b
};
JSG.commons.Strings.endsWith = function (a, b) {
    return -1 !== a.indexOf(b, a.length - b.length)
};
JSG.commons.Strings.insert = function (a, b, c) {
    return 0 < b ? a.substring(0, b) + c + a.substring(b, a.length) : c + a
};
JSG.commons.Strings.remove = function (a, b, c) {
    return a.substr(0, b) + a.substr(b + c)
};
JSG.commons.Strings.isEmpty = function (a) {
    return void 0 === a || "" === a
};
JSG.commons.Strings.encode = function (a) {
    a = a.replace(/%/g, "~25");
    a = a.replace(/&/g, "~26");
    a = a.replace(/"/g, "~22");
    a = a.replace(/\\/g, "~5C");
    a = a.replace(/</g, "~3C");
    a = a.replace(/>/g, "~3E");
    a = a.replace(/\n/g, "~0A");
    a = a.replace(/'/g, "~27");
    return a = encodeURIComponent(a)
};
JSG.commons.Strings.decode = function (a) {
    a = a.replace(/~26/gi, "\x26");
    a = a.replace(/~22/gi, '"');
    a = a.replace(/~5C/gi, "\\");
    a = a.replace(/~3C/gi, "\x3c");
    a = a.replace(/~3E/gi, "\x3e");
    a = a.replace(/~0A/gi, "\n");
    a = a.replace(/~27/gi, "'");
    a = decodeURIComponent(a);
    return a.replace(/~25/gi, "%")
};
JSG.commons.Strings.encodeXML = function (a) {
    return a.replace(/&/g, "\x26amp;").replace(/</g, "\x26lt;").replace(/>/g, "\x26gt;").replace(/"/g, "\x26quot;").replace(/'/g, "\x26apos;").replace(/\n/g, "\x26xA;")
};
JSG.commons.Strings.decodeXML = function (a) {
    return a.replace(/&apos;/g, "'").replace(/&quot;/g, '"').replace(/&gt;/g, "\x3e").replace(/&lt;/g, "\x3c").replace(/&amp;/g, "\x26").replace(/&xA;/g, "\n")
};
function StringBuffer() {
    this.buffer = []
}
StringBuffer.prototype.append = function (a) {
    this.buffer.push(a);
    return this
};
StringBuffer.prototype.isEmpty = function () {
    return 0 === this.buffer.length
};
StringBuffer.prototype.reset = function () {
    this.buffer.length = 0;
    return this
};
StringBuffer.prototype.toString = function () {
    return this.buffer.join("")
};
StringBuffer.prototype._concat = function (a) {
    var b, c, d;
    b = 0;
    c = a.length;
    for (d = ""; b < c; b++)d += a[b];
    return d
};
JSG.namespace("JSG.commons");
JSG.commons.Map = function () {
    this._values = {}
};
JSG.commons.Map.prototype.clear = function () {
    this._values = {}
};
JSG.commons.Map.prototype.copy = function () {
    var a = new JSG.commons.Map;
    a.putAll(this);
    return a
};
JSG.commons.Map.prototype.contains = function (a) {
    return Object.prototype.hasOwnProperty.call(this._values, a) && Object.prototype.propertyIsEnumerable.call(this._values, a)
};
JSG.commons.Map.prototype.isEmpty = function () {
    return 0 === this.keys().length
};
JSG.commons.Map.prototype.get = function (a) {
    return this._values[a]
};
JSG.commons.Map.prototype.put = function (a, b) {
    var c = this._values[a];
    this._values[a] = b;
    return c
};
JSG.commons.Map.prototype.putAll = function (a) {
    var b = this;
    a.iterate(function (a, d) {
        b.put(a, d)
    })
};
JSG.commons.Map.prototype.remove = function (a) {
    var b = this._values[a];
    b && delete this._values[a];
    return b
};
JSG.commons.Map.prototype.size = function () {
    return this.keys().length
};
JSG.commons.Map.prototype.keys = function () {
    var a = [];
    this._forAllPropertiesOf(this._values, function (b, c) {
        a.push(b)
    });
    return a
};
JSG.commons.Map.prototype.elements = function () {
    var a = [];
    this._forAllPropertiesOf(this._values, function (b, c) {
        a.push(c)
    });
    return a
};
JSG.commons.Map.prototype.iterate = function (a) {
    Object.keys ? this._forAllKeysOf(this._values, a) : this._forAllPropertiesOf(this._values, a)
};
JSG.commons.Map.prototype._forAllPropertiesOf = function (a, b) {
    for (var c in a)Object.prototype.hasOwnProperty.call(a, c) && b(c, a[c])
};
JSG.commons.Map.prototype._forAllKeysOf = function (a, b) {
    var c, d, e, f = Object.keys(a);
    c = 0;
    for (d = f.length; c < d; c++)e = f[c], b(e, a[e])
};
JSG.namespace("JSG.commons");
JSG.commons.StableMap = function () {
    JSG.commons.StableMap._super.constructor.apply(this, arguments);
    this._orderedkeys = []
};
JSG.extend(JSG.commons.StableMap, JSG.commons.Map);
JSG.commons.StableMap.prototype.clear = function () {
    JSG.commons.StableMap._super.clear.call(this);
    this._orderedkeys = []
};
JSG.commons.StableMap.prototype.sort = function (a) {
    void 0 !== a && this._orderedkeys.sort(a)
};
JSG.commons.StableMap.prototype.getFirst = function () {
    return 0 < this._orderedkeys.length ? this.get(this._orderedkeys[0]) : void 0
};
JSG.commons.StableMap.prototype.put = function (a, b) {
    this.contains(a) || this._orderedkeys.push(a);
    JSG.commons.StableMap._super.put.call(this, a, b)
};
JSG.commons.StableMap.prototype.insertAt = function (a, b, c) {
    this.contains(b) || JSG.Arrays.insertAt(this._orderedkeys, a, b);
    JSG.commons.StableMap._super.put.call(this, b, c)
};
JSG.commons.StableMap.prototype.indexOf = function (a) {
    return this._orderedkeys.indexOf(a)
};
JSG.commons.StableMap.prototype.remove = function (a) {
    var b = JSG.commons.StableMap._super.remove.call(this, a);
    void 0 !== b && JSG.Arrays.remove(this._orderedkeys, a);
    return b
};
JSG.commons.StableMap.prototype.size = function () {
    return this._orderedkeys.length
};
JSG.commons.StableMap.prototype.keys = function () {
    var a = [];
    this._orderedkeys.forEach(function (b) {
        a.push(b)
    });
    return a
};
JSG.commons.StableMap.prototype.elements = function () {
    var a = this, b = [];
    a._orderedkeys.forEach(function (c) {
        c = a.get(c);
        void 0 !== c && b.push(c)
    });
    return b
};
JSG.commons.StableMap.prototype.iterate = function (a) {
    var b;
    for (b = 0; b < this._orderedkeys.length; b++)this._callFunc(a, b)
};
JSG.commons.StableMap.prototype.iterateReverse = function (a) {
    var b;
    for (b = this._orderedkeys.length - 1; 0 <= b; b--)this._callFunc(a, b)
};
JSG.commons.StableMap.prototype._callFunc = function (a, b) {
    var c = this._orderedkeys[b], d = this.get(c);
    void 0 !== d && a(c, d)
};
JSG.namespace("JSG.commons");
JSG.commons.ImagePool = function () {
    JSG.commons.ImagePool._super.constructor.apply(this, arguments);
    this._views = [];
    this._imagesToBeLoaded = 0
};
JSG.extend(JSG.commons.ImagePool, JSG.commons.Map);
JSG.commons.ImagePool.IMG_NOTAVAIL = "notavailable";
JSG.commons.ImagePool.IMG_EXPANDED = "expanded";
JSG.commons.ImagePool.IMG_COLLAPSED = "collapsed";
JSG.commons.ImagePool.IMG_BOLD = "bold";
JSG.commons.ImagePool.IMG_ITALIC = "italic";
JSG.commons.ImagePool.IMG_UNDERLINE = "underline";
JSG.commons.ImagePool.IMG_LEFT_ALIGN = "leftalign";
JSG.commons.ImagePool.IMG_CENTER_ALIGN = "centeralign";
JSG.commons.ImagePool.IMG_RIGHT_ALIGN = "rightalign";
JSG.commons.ImagePool.IMG_FONTCOLOR = "fontcolor";
JSG.commons.ImagePool.IMG_FONTSIZE_DOWN = "fontsizedown";
JSG.commons.ImagePool.IMG_FONTSIZE_UP = "fontsizeup";
JSG.commons.ImagePool.IMG_BULLETS = "bullets";
JSG.commons.ImagePool.IMG_NUMBERED = "numbered";
JSG.commons.ImagePool.prototype.add = function (a, b) {
    void 0 === b && (b = a);
    if (this.contains(b))return this.get(b);
    this.set(a, b)
};
JSG.commons.ImagePool.prototype.getURL = function (a) {
    if (this.contains(a))return this.get(a).src
};
JSG.commons.ImagePool.prototype.set = function (a, b) {
    var c = this, d;
    d = new Image;
    this._imagesToBeLoaded++;
    d._tryCD = !0;
    d.onerror = function () {
        try {
            d._tryCD && (d.src = c.getCrossDomain(a))
        } catch (b) {
            d.src = void 0
        }
        d._tryCD = !1;
        d.src || c._imagesToBeLoaded--
    };
    d.onload = function () {
        var a;
        c._imagesToBeLoaded--;
        if (0 === c._imagesToBeLoaded)for (a = 0; a < c._views.length; a++)c._views[a].invalidate()
    };
    d.src = a;
    this.put(b, d);
    return d
};
JSG.commons.ImagePool.prototype.validateURL = function (a) {
    return a.match(/^\S+\.(gif|jpg|jpeg|png|JPG|JPEG|PNG|GIF)$/)
};
JSG.commons.ImagePool.prototype.registerEditor = function (a) {
    this._views.push(a)
};
JSG.commons.ImagePool.prototype.unregisterEditor = function (a) {
    JSG.Arrays.remove(this._views, a)
};
JSG.commons.ImagePool.prototype.getCrossDomain = function (a) {
    var b = new XMLHttpRequest;
    b.open("post", "php/crossDomainProxy.php", !1);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.send("url\x3d" + encodeURIComponent(a));
    return b.response
};
JSG.namespace("JSG.commons");
JSG.commons.NamedImage = function (a, b) {
    this.name = a;
    this.image = b
};
JSG.commons.NamedImage.prototype.copy = function () {
    return new JSG.commons.NamedImage(this.name, this.image)
};
JSG.commons.NamedImage.prototype.saveXML = function (a, b) {
    b.writeStartElement(a);
    b.writeAttributeString("name", this.name);
    b.writeAttributeString("image", this.image);
    b.writeEndElement()
};
JSG.commons.NamedImage.prototype.readXML = function (a) {
    this.name = a.getAttribute("name");
    this.image = a.getAttribute("image")
};
JSG.namespace("JSG.commons");
JSG.commons.XML = function () {
};
JSG.commons.XML.iterateChildren = function (a, b, c) {
    for (b = b.firstElementChild; b;)c(a, b), b = b.nextElementSibling
};
JSG.commons.XML.findElementByTagName = function (a, b) {
    var c, d, e;
    if (a && a.hasChildNodes())for (c = 0, d = a.childNodes.length; c < d; c++)if (e = a.childNodes.item(c), e.nodeName === b)return e
};
JSG.commons.XML.findAllElementsByTagName = function (a, b) {
    var c, d, e, f = [];
    if (a && a.hasChildNodes())for (c = 0, d = a.childNodes.length; c < d; c++)e = a.childNodes.item(c), e.nodeName === b && f.push(e);
    return f
};
JSG.commons.XML._enhanceNode = function (a) {
    a && a !== document && (a.getLoadContext || (a.getLoadContext = function () {
        var a = this.parentNode;
        return a && a !== document ? a.getLoadContext() : this._loadctxt
    }), a.setLoadContext || (a.setLoadContext = function (a) {
        var c = this.parentNode;
        c && c !== document ? c.setLoadContext(a) : this._loadctxt = a
    }), JSG.commons.XML._enhanceNode(a.parentNode))
};
JSG.namespace("JSG.commons");
JSG.commons.XMLWriter = function (a, b) {
    a = "UTF-8";
    b = "1.0";
    a && (this._encoding = a);
    b && (this._version = b);
    this._indentChar = "\t";
    this._indentation = 1;
    this._newLine = "\n"
};
JSG.commons.XMLWriter.prototype.writeStartDocument = function () {
    this.close();
    this.tree = []
};
JSG.commons.XMLWriter.prototype.writeEndDocument = function () {
    this.active = this.root;
    this.tree = []
};
JSG.commons.XMLWriter.prototype.writeStartElement = function (a) {
    a = {n: a, a: {}, c: []};
    this.active ? (this.active.c.push(a), this.tree.push(this.active), this.parent = this.active) : this.root = a;
    this.active = a
};
JSG.commons.XMLWriter.prototype.writeEndElement = function (a) {
    var b;
    b = this.tree.pop() || this.root;
    (a = !0 === a ? !0 : !1) && b.c.remove(this.active);
    this.active = b;
    return !a
};
JSG.commons.XMLWriter.prototype.writeAttributeString = function (a, b) {
    this.active && (this.active.a[a] = JSG.Strings.encodeXML(b.toString()))
};
JSG.commons.XMLWriter.prototype.writeAttributeNumber = function (a, b, c) {
    b = Number(b);
    void 0 !== c && (c = Math.pow(10, c), b = Math.round(b * c) / c);
    this.active && (this.active.a[a] = String(b))
};
JSG.commons.XMLWriter.prototype.writeString = function (a) {
    this.active && this.active.c.push(a)
};
JSG.commons.XMLWriter.prototype.writeElementString = function (a, b) {
    this.writeStartElement(a);
    this.writeString(b);
    this.writeEndElement()
};
JSG.commons.XMLWriter.prototype.writeCDATA = function (a) {
    this.writeString("\x3c![CDATA[" + a + "]]\x3e")
};
JSG.commons.XMLWriter.prototype.writeComment = function (a) {
    this.writeString("\x3c!-- " + a + " --\x3e")
};
JSG.commons.XMLWriter.prototype.flush = function () {
    this.tree && this.tree[0] && this.writeEndDocument();
    for (var a = "", b = this._indentation, c = '\x3c?xml version\x3d"' + this._version + '" encoding\x3d"' + this._encoding + '"', c = [c + " ?\x3e"]; b--;)a += this._indentChar;
    this.root && this.format(this.root, "", a, c);
    return c.join(this._newLine)
};
JSG.commons.XMLWriter.prototype.close = function () {
    this.root && this.clean(this.root);
    this.active = this.root = this.tree = void 0
};
JSG.commons.XMLWriter.prototype.getDocument = function () {
    return (new DOMParser).parseFromString(this.flush(), "text/xml")
};
JSG.commons.XMLWriter.prototype.clean = function (a) {
    for (var b = a.c.length; b--;)"object" === typeof a.c[b] && this.clean(a.c[b]);
    a.n = a.a = a.c = void 0
};
JSG.commons.XMLWriter.prototype.format = function (a, b, c, d) {
    var e = b + "\x3c" + a.n, f = a.c.length, g, k = 0;
    for (g in a.a)a.a.hasOwnProperty(g) && (e += " " + g + '\x3d"' + a.a[g] + '"');
    d.push(e + (f ? "\x3e" : "/\x3e"));
    if (f) {
        do if (e = a.c[k++], "string" === typeof e) {
            if (1 === f)return d.push(d.pop() + e + "\x3c/" + a.n + "\x3e");
            d.push(b + c + e)
        } else"object" === typeof e && this.format(e, b + c, c, d); while (k < f);
        d.push(b + "\x3c/" + a.n + "\x3e")
    }
};
JSG.namespace("JSG.geometry");
JSG.geometry.Point = function (a, b) {
    this.x = a;
    this.y = b
};
JSG.geometry.Point.Factory = function () {
    return new JSG.geometry.Point(0, 0)
};
JSG.geometry.Point.prototype.set = function (a, b) {
    this.x = a;
    this.y = b;
    return this
};
JSG.geometry.Point.prototype.setTo = function (a) {
    this.x = a.x;
    this.y = a.y;
    return this
};
JSG.geometry.Point.prototype.add = function (a) {
    this.x += a.x;
    this.y += a.y;
    return this
};
JSG.geometry.Point.prototype.subtract = function (a) {
    this.x -= a.x;
    this.y -= a.y;
    return this
};
JSG.geometry.Point.prototype.rotate = function (a) {
    JSG.geometry.Utils.rotatePoint(this, a);
    return this
};
JSG.geometry.Point.prototype.length = function () {
    return Math.sqrt(this.x * this.x + this.y * this.y)
};
JSG.geometry.Point.prototype.lengthSquared = function () {
    return this.x * this.x + this.y * this.y
};
JSG.geometry.Point.prototype.setLength = function (a) {
    var b = this.length();
    return this.multiply(0 === b ? a : a / b)
};
JSG.geometry.Point.prototype.multiply = function (a) {
    this.x *= a;
    this.y *= a;
    return this
};
JSG.geometry.Point.prototype.normalize = function () {
    var a = this.length();
    0 !== a && (this.x /= a, this.y /= a);
    return this
};
JSG.geometry.Point.prototype.dotProduct = function (a) {
    return this.x * a.x + this.y * a.y
};
JSG.geometry.Point.prototype.angle = function () {
    return Math.atan2(this.y, this.x)
};
JSG.geometry.Point.prototype.translate = function (a, b) {
    this.x += a;
    this.y += b;
    return this
};
JSG.geometry.Point.prototype.swap = function () {
    var a = this.x;
    this.x = this.y;
    this.y = a;
    return this
};
JSG.geometry.Point.prototype.copy = function () {
    var a = new JSG.geometry.Point(0, 0);
    a.setTo(this);
    return a
};
JSG.geometry.Point.prototype.isEqualTo = function (a, b) {
    return void 0 !== a ? void 0 === b ? this.x === a.x && this.y === a.y : Math.abs(this.x - a.x) < b && Math.abs(this.y - a.y) < b : !1
};
JSG.geometry.Point.prototype.isOrthogonalTo = function (a) {
    a = this.dotProduct(a);
    return 0 === a || 0.01 > Math.abs(a)
};
JSG.geometry.Point.prototype.isParallelTo = function (a) {
    a = a.y * this.x - a.x * this.y;
    return 0 === a || 0.01 > Math.abs(a)
};
JSG.geometry.Point.prototype.toString = function () {
    return "(" + this.x.toFixed(2) + "," + this.y.toFixed(2) + ")"
};
JSG.geometry.Point.prototype.saveXML = function (a, b) {
    b.writeStartElement(a);
    b.writeAttributeNumber("x", this.x, 2);
    b.writeAttributeNumber("y", this.y, 2);
    b.writeEndElement()
};
JSG.geometry.Point.prototype.readXML = function (a) {
    this.x = Number(a.getAttribute("x"));
    this.y = Number(a.getAttribute("y"))
};
JSG.geometry.PointCache = function (a, b) {
    this.points = [];
    this.size = a;
    this.maxsize = b;
    var c;
    for (c = 0; c < a; c++)this.points.push(new JSG.geometry.Point(0, 0))
};
JSG.geometry.PointCache.prototype.get = function (a, b, c) {
    var d, e;
    for (d = 0; d < this.size; d++)if (e = this.points[d], !e.__used && !e.__usedBulk)return c ? e.__usedBulk = !0 : e.__used = !0, void 0 !== a && void 0 !== b && e.set(a, b), e;
    e = new JSG.geometry.Point(0, 0);
    this.size < this.maxsize && (c ? e.__usedBulk = !0 : e.__used = !0, this.points.push(e), this.size = this.points.length);
    void 0 !== a && void 0 !== b && e.set(a, b);
    return e
};
JSG.geometry.PointCache.prototype.releaseBulk = function () {
    var a, b;
    for (a = 0; a < this.size; a++)(b = this.points[a]) && b.__usedBulk && (b.__usedBulk = void 0)
};
JSG.geometry.PointCache.prototype.release = function () {
    var a = arguments.length, b, c;
    for (b = 0; b < a; b++)if (c = arguments[b])c.__used && (c.__used = void 0), c.__usedBulk && (c.__usedBulk = void 0)
};
JSG.geometry.PointCache.prototype.inUse = function () {
    var a = 0, b, c;
    for (b = 0; b < this.size; b++)c = this.points[b], (c.__used || c.__usedBulk) && a++;
    return a
};
JSG.ptCache = new JSG.geometry.PointCache(20, 50);
JSG.namespace("JSG.geometry");
JSG.geometry.Rectangle = function (a, b, c, d) {
    this.x = a;
    this.y = b;
    this.width = c;
    this.height = d
};
JSG.geometry.Rectangle.Factory = function () {
    return new JSG.geometry.Rectangle(0, 0, 0, 0)
};
JSG.geometry.Rectangle.prototype.reset = function () {
    this.set(0, 0, 0, 0);
    return this
};
JSG.geometry.Rectangle.prototype.set = function (a, b, c, d) {
    this.x = a;
    this.y = b;
    this.width = c;
    this.height = d;
    return this
};
JSG.geometry.Rectangle.prototype.setTo = function (a) {
    return this.set(a.x, a.y, a.width, a.height)
};
JSG.geometry.Rectangle.prototype.setSize = function (a, b) {
    this.width = a;
    this.height = b;
    return this
};
JSG.geometry.Rectangle.prototype.getLocation = function (a) {
    a = void 0 !== a ? a : new JSG.geometry.Point(0, 0);
    a.set(this.x, this.y);
    return a
};
JSG.geometry.Rectangle.prototype.setLocationTo = function (a) {
    return this.setLocation(a.x, a.y)
};
JSG.geometry.Rectangle.prototype.setLocation = function (a, b) {
    this.x = a;
    this.y = b;
    return this
};
JSG.geometry.Rectangle.prototype.isEqualTo = function (a, b) {
    return void 0 !== a ? void 0 === b ? this.x === a.x && this.y === a.y && this.width === a.width && this.height === a.height : Math.abs(this.x - a.x) < b && Math.abs(this.y - a.y) < b && Math.abs(this.width - a.width) < b && Math.abs(this.height - a.height) < b : !1
};
JSG.geometry.Rectangle.prototype.getRight = function () {
    return this.x + this.width
};
JSG.geometry.Rectangle.prototype.getBottom = function () {
    return this.y + this.height
};
JSG.geometry.Rectangle.prototype.getCenter = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.set(this.x + this.width / 2, this.y + this.height / 2);
    return a
};
JSG.geometry.Rectangle.prototype.getCenterX = function () {
    return this.x + this.width / 2
};
JSG.geometry.Rectangle.prototype.getCenterY = function () {
    return this.y + this.height / 2
};
JSG.geometry.Rectangle.prototype.copy = function () {
    var a = new JSG.geometry.Rectangle(0, 0, 0, 0);
    a.set(this.x, this.y, this.width, this.height);
    return a
};
JSG.geometry.Rectangle.prototype.contains = function (a, b, c, d) {
    var e = a >= this.x && a <= this.x + this.width && b >= this.y && b <= this.y + this.height;
    c && (e = e && a + c <= this.x + this.width);
    d && (e = e && b + d <= this.y + this.height);
    return e
};
JSG.geometry.Rectangle.prototype.containsPoint = function (a) {
    return this.contains(a.x, a.y)
};
JSG.geometry.Rectangle.prototype.containsRect = function (a) {
    return this.contains(a.x, a.y, a.width, a.height)
};
JSG.geometry.Rectangle.prototype.intersect = function (a) {
    return this.x <= a.getRight() && a.x <= this.getRight() && this.y <= a.getBottom() && a.y <= this.getBottom()
};
JSG.geometry.Rectangle.prototype.containsBoundingBox = function (a) {
    var b = this, c = !0;
    a = a.getPoints();
    JSG.Arrays.every(a, function (a) {
        return c = b.containsPoint(a)
    });
    return c
};
JSG.geometry.Rectangle.prototype.union = function (a) {
    var b = Math.max(this.getRight(), a.getRight()), c = Math.max(this.getBottom(), a.getBottom());
    this.x = Math.min(this.x, a.x);
    this.y = Math.min(this.y, a.y);
    this.width = b - this.x;
    this.height = c - this.y;
    return this
};
JSG.geometry.Rectangle.prototype.intersection = function (a, b) {
    if (this.intersect(a)) {
        var c = b || new JSG.geometry.Rectangle(0, 0, 0, 0);
        c.x = Math.max(this.x, a.x);
        c.y = Math.max(this.y, a.y);
        c.width = Math.min(this.getRight(), a.getRight()) - c.x;
        c.height = Math.min(this.getBottom(), a.getBottom()) - c.y;
        return c
    }
};
JSG.geometry.Rectangle.prototype.unionX = function (a) {
    var b = Math.max(this.x + this.width, a.x + a.width);
    this.x = Math.min(this.x, a.x);
    this.width = b - this.x;
    return this
};
JSG.geometry.Rectangle.prototype.unionY = function (a) {
    var b = Math.max(this.y + this.height, a.y + a.height);
    this.y = Math.min(this.y, a.y);
    this.height = b - this.y;
    return this
};
JSG.geometry.Rectangle.prototype.reduceBy = function (a) {
    return this.expandBy(-a)
};
JSG.geometry.Rectangle.prototype.expandBy = function (a) {
    this.x -= a;
    this.y -= a;
    this.width += 2 * a;
    this.height += 2 * a;
    return this
};
JSG.geometry.Rectangle.prototype.translate = function (a, b) {
    this.x += a;
    this.y += b;
    return this
};
JSG.geometry.Rectangle.prototype.swap = function () {
    var a = this.x;
    this.x = this.y;
    this.y = a;
    a = this.width;
    this.width = this.height;
    this.height = a;
    return this
};
JSG.geometry.Rectangle.prototype.sort = function (a) {
    0 > a.width ? (this.x = a.x + a.width, this.width = Math.abs(a.width)) : (this.x = a.x, this.width = a.width);
    0 > a.height ? (this.y = a.y + a.height, this.height = Math.abs(a.height)) : (this.y = a.y, this.height = a.height);
    return this
};
JSG.geometry.Rectangle.prototype.toString = function () {
    return "(" + this.x + "," + this.y + "," + this.width + "," + this.height + ")"
};
JSG.geometry.Rectangle.prototype.toBoundingBox = function () {
    return JSG.geometry.BoundingBox.fromRectangle(this)
};
JSG.geometry.Rectangle.prototype.getPoints = function (a) {
    a = void 0 !== a ? a : [new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0)];
    a[0].set(this.x, this.y);
    a[1].set(this.x + this.width, this.y);
    a[2].set(this.x + this.width, this.y + this.height);
    a[3].set(this.x, this.y + this.height);
    return a
};
JSG.geometry.Rectangle.prototype.readXML = function (a) {
    JSG.commons.XML.iterateChildren(this, a, function (a, c) {
        switch (c.nodeName) {
            case "x":
                this.x = Number(c.textContent);
                break;
            case "y":
                this.y = Number(c.textContent);
                break;
            case "width":
                this.width = Number(c.textContent);
                break;
            case "height":
                this.height = Number(c.textContent)
        }
    })
};
JSG.geometry.RectangleCache = function (a, b) {
    this.rects = [];
    this.size = a;
    this.maxsize = b;
    var c;
    for (c = 0; c < a; c++)this.rects.push(new JSG.geometry.Rectangle(0, 0, 0, 0))
};
JSG.geometry.RectangleCache.prototype.get = function () {
    var a, b;
    for (a = 0; a < this.size; a++)if (b = this.rects[a], !b.__used)return b.reset(), b.__used = !0, b;
    b = new JSG.geometry.Rectangle(0, 0, 0, 0);
    this.size < this.maxsize && (b.__used = !0, this.rects.push(b), this.size = this.rects.length);
    return b
};
JSG.geometry.RectangleCache.prototype.release = function () {
    var a = arguments.length, b, c;
    for (b = 0; b < a; b++)(c = arguments[b]) && c.__used ? c.__used = void 0 : JSG.debug.log("try to release a non cached rectangle...", !0)
};
JSG.geometry.RectangleCache.prototype.inUse = function () {
    var a = 0, b, c;
    for (b = 0; b < this.size; b++)c = this.rects[b], c.__used && a++;
    return a
};
JSG.rectCache = new JSG.geometry.RectangleCache(10, 20);
JSG.namespace("JSG.geometry");
JSG.geometry.PointList = function () {
    this._points = []
};
JSG.geometry.PointList.prototype.copy = function () {
    var a = new JSG.geometry.PointList;
    a.addPoints(this._points);
    return a
};
JSG.geometry.PointList.prototype.forEach = function (a) {
    var b, c;
    b = 0;
    for (c = this._points.length; b < c; b++)a(this._points[b], b)
};
JSG.geometry.PointList.prototype.saveXML = function (a, b) {
    var c;
    b.writeStartElement(a);
    for (c = 0; c < this._points.length; c++)b.writeStartElement("point"), b.writeAttributeNumber("x", this._points[c].x, 2), b.writeAttributeNumber("y", this._points[c].y, 2), b.writeEndElement();
    b.writeEndElement()
};
JSG.geometry.PointList.prototype.clear = function () {
    this._points = []
};
JSG.geometry.PointList.prototype.getPoints = function () {
    return this._points
};
JSG.geometry.PointList.prototype.length = function () {
    return this._points.length
};
JSG.geometry.PointList.prototype.setPoints = function (a) {
    this._points = a
};
JSG.geometry.PointList.prototype.setTo = function (a) {
    var b;
    if (void 0 !== a)for (a = a._points, this.keepPoints(a.length), b = 0; b < a.length; b++)this._points[b].setTo(a[b])
};
JSG.geometry.PointList.prototype.getPointAt = function (a) {
    return 0 <= a && a < this._points.length ? this._points[a] : void 0
};
JSG.geometry.PointList.prototype.isEmpty = function () {
    return 0 === this._points.length
};
JSG.geometry.PointList.prototype.setPointAtTo = function (a, b) {
    this.setPointAt(a, b.x, b.y)
};
JSG.geometry.PointList.prototype.setPointAt = function (a, b, c) {
    0 <= a && a < this._points.length && this._points[a].set(b, c)
};
JSG.geometry.PointList.prototype.addPoint = function (a) {
    this._points.push(a.copy())
};
JSG.geometry.PointList.prototype.addPointAt = function (a, b) {
    0 <= a && (a < this._points.length ? this._points.insert(b.copy(), a) : this._points.push(b.copy()))
};
JSG.geometry.PointList.prototype.addPoints = function (a) {
    var b, c;
    b = 0;
    for (c = a.length; b < c; b++)this._points.push(a[b].copy())
};
JSG.geometry.PointList.prototype.removePointAt = function (a) {
    0 <= a && a < this._points.length && JSG.Arrays.removeAt(this._points, a)
};
JSG.geometry.PointList.prototype.keepPoints = function (a) {
    var b;
    for (b = this._points.length; b < a; b++)this._points.push(new JSG.geometry.Point(0, 0));
    this._points.length = a
};
JSG.geometry.PointList.prototype.getCenter = function (a) {
    var b = this.getBoundingRect(JSG.rectCache.get());
    a = b.getCenter(a);
    JSG.rectCache.release(b);
    return a
};
JSG.geometry.PointList.prototype.rotate = function (a, b) {
    var c, d;
    c = 0;
    for (d = this._points.length; c < d; c++)this._points[c] = JSG.geometry.Utils.getRotatedPoint(this._points[c], b, a)
};
JSG.geometry.PointList.prototype.scale = function (a, b) {
    var c, d;
    c = 0;
    for (d = this._points.length; c < d; c++)this._points[c].x *= a, this._points[c].y *= b
};
JSG.geometry.PointList.prototype.translateTo = function (a) {
    this.translate(a.x, a.y)
};
JSG.geometry.PointList.prototype.translate = function (a, b) {
    var c, d;
    c = 0;
    for (d = this._points.length; c < d; c++)this._points[c].x += a, this._points[c].y += b
};
JSG.geometry.PointList.prototype.movePointAt = function (a, b, c) {
    0 > a || a >= this._points.length || (this._points[a].x += b, this._points[a].y += c)
};
JSG.geometry.PointList.prototype.getBoundingRect = function (a) {
    a = a || new JSG.geometry.Rectangle(0, 0, 0, 0);
    var b, c, d, e, f, g;
    if (0 === this._points.length)a.set(0, 0, 0, 0); else {
        b = this._points[0].x;
        c = this._points[0].y;
        d = b;
        e = c;
        f = 1;
        for (g = this._points.length; f < g; f++)b = Math.min(b, this._points[f].x), c = Math.min(c, this._points[f].y), d = Math.max(d, this._points[f].x), e = Math.max(e, this._points[f].y);
        a.set(b, c, Math.abs(d - b), Math.abs(e - c))
    }
    return a
};
JSG.geometry.PointList.prototype.getBoundingBox = function (a) {
    a = a || new JSG.geometry.BoundingBox(0, 0);
    var b, c, d, e, f, g;
    if (0 !== this._points.length) {
        b = this._points[0].x;
        c = this._points[0].y;
        d = b;
        e = c;
        f = 1;
        for (g = this._points.length; f < g; f++)b = Math.min(b, this._points[f].x), c = Math.min(c, this._points[f].y), d = Math.max(d, this._points[f].x), e = Math.max(e, this._points[f].y);
        a.setTopLeft(b, c);
        a.setSize(Math.abs(d - b), Math.abs(e - c))
    }
    a.setAngle(0);
    return a
};
JSG.geometry.PointList.prototype.contains = function (a) {
    return JSG.geometry.Utils.isPointInPolygon(this._points, a)
};
JSG.geometry.PointList.prototype.distance = function (a, b) {
    var c, d, e, f, g = JSG.geometry.Utils.getLinePointDistance;
    d = 1;
    for (e = this._points.length; d < e; d++)f = g(this._points[d - 1], this._points[d], a), isNaN(f) || (c = void 0 === c ? f : Math.min(c, f));
    b && 1 < this._points.length && (f = g(this._points[d - 1], this._points[0], a), isNaN(f) || (c = Math.min(c, f)));
    return c
};
JSG.geometry.PointList.prototype.getOffsetFromPoint = function (a, b, c, d) {
    var e, f, g, k, h = JSG.geometry.Utils.getLineLength;
    f = 0;
    for (g = this._points.length; f < g; f++) {
        if (!d && (e = h(a, this._points[f]), !isNaN(e) && e < b))return new JSG.geometry.Point(a.x - this._points[f].x, a.y - this._points[f].y);
        if (d && (f || c) && (f ? k = new JSG.geometry.Point((this._points[f].x + this._points[f - 1].x) / 2, (this._points[f].y + this._points[f - 1].y) / 2) : c && (k = new JSG.geometry.Point((this._points[g - 1].x + this._points[0].x) / 2, (this._points[g - 1].y + this._points[0].y) /
            2)), e = h(a, k), !isNaN(e) && e < b))return new JSG.geometry.Point(a.x - k.x, a.y - k.y)
    }
};
JSG.geometry.PointList.prototype.getOffsetFromSegment = function (a, b, c, d) {
    var e, f, g, k, h, m, l = JSG.geometry.Utils;
    h = 1;
    for (m = this._points.length; h < m; h++)l.getLineLength(a, this._points[h]), f = l.getLinePointDistance(this._points[h - 1], this._points[h], a), isNaN(f) || (void 0 === e ? (e = f, g = h - 1, k = h) : e > f && (e = f, g = h - 1, k = h));
    d && this._points.length && (f = l.getLinePointDistance(this._points[h - 1], this._points[0], a), !isNaN(f) && e > f && (e = f, g = h - 1, k = 0));
    if (e < c && void 0 !== g && void 0 !== k)return l.getLinePointOffset(this._points[g], this._points[k],
        b)
};
JSG.geometry.PointList.prototype.size = function () {
    return this._points.length
};
JSG.namespace("JSG.geometry");
JSG.geometry.Matrix = function () {
    this._rotmatrix = [1, 0, 0, 1];
    this._isRotated = !1
};
JSG.geometry.Matrix.fromString = function (a) {
    var b = new JSG.geometry.Matrix;
    a = a.split(",");
    var c;
    for (c = 0; 4 > c; c++)b._rotmatrix[c] = Number(a[c]);
    return b
};
JSG.geometry.Matrix.prototype.hasRotation = function () {
    return this._isRotated
};
JSG.geometry.Matrix.prototype.isEqualTo = function (a, b) {
    var c;
    for (c = 0; 4 > c; c++)if (this._rotmatrix[c] !== a._rotmatrix[c])return !1;
    return !0
};
JSG.geometry.Matrix.prototype.copy = function () {
    var a = new JSG.geometry.Matrix;
    a.setTo(this);
    return a
};
JSG.geometry.Matrix.prototype.getAngle = function () {
    return this._isRotated ? Math.atan2(this._rotmatrix[1], this._rotmatrix[0]) : 0
};
JSG.geometry.Matrix.prototype.rotate = function (a) {
    function b(a) {
        a.set(a.x * d - a.y * c, a.x * c + a.y * d)
    }

    if (1 !== this._rotmatrix[0] || 0 !== this._rotmatrix[1] || 0 !== this._rotmatrix[2] || 1 !== this._rotmatrix[3] || a) {
        var c = Math.sin(a), d = Math.cos(a), e;
        a = JSG.ptCache.get(this._rotmatrix[0], this._rotmatrix[1]);
        b(a);
        this._rotmatrix[0] = a.x;
        this._rotmatrix[1] = a.y;
        e = JSG.ptCache.get(this._rotmatrix[2], this._rotmatrix[3]);
        b(e);
        this._rotmatrix[2] = e.x;
        this._rotmatrix[3] = e.y;
        this._isRotated = !(1 === this._rotmatrix[0] && 0 === this._rotmatrix[1] &&
        0 === this._rotmatrix[2] && 1 === this._rotmatrix[3]);
        JSG.ptCache.release(a, e)
    }
};
JSG.geometry.Matrix.prototype.rotatePoint = function (a) {
    if (this._isRotated) {
        var b = a.copy();
        a.x = this._rotmatrix[0] * b.x + this._rotmatrix[2] * b.y;
        a.y = this._rotmatrix[1] * b.x + this._rotmatrix[3] * b.y
    }
    return a
};
JSG.geometry.Matrix.prototype.rotatePointInverse = function (a) {
    if (this._isRotated) {
        var b = a.copy();
        a.x = this._rotmatrix[0] * b.x + this._rotmatrix[1] * b.y;
        a.y = this._rotmatrix[2] * b.x + this._rotmatrix[3] * b.y
    }
    return a
};
JSG.geometry.Matrix.prototype.setAngle = function (a) {
    this.setToIdentity();
    a && this.rotate(a)
};
JSG.geometry.Matrix.prototype.setToIdentity = function () {
    this._rotmatrix[0] = 1;
    this._rotmatrix[1] = 0;
    this._rotmatrix[2] = 0;
    this._rotmatrix[3] = 1;
    this._isRotated = !1
};
JSG.geometry.Matrix.prototype.setTo = function (a) {
    this._rotmatrix = a._rotmatrix.slice(0);
    this._isRotated = a._isRotated
};
JSG.geometry.Matrix.prototype.toString = function () {
    return this._rotmatrix.toString()
};
JSG.namespace("JSG.geometry");
JSG.geometry.BoundingBox = function (a, b) {
    this._rotmatrix = new JSG.geometry.Matrix;
    this._topleft = new JSG.geometry.Point(0, 0);
    this._bottomright = new JSG.geometry.Point(0, 0);
    this.setSize(a, b)
};
JSG.geometry.BoundingBox.Factory = function () {
    return new JSG.geometry.BoundingBox(0, 0)
};
JSG.geometry.BoundingBox.fromRectangle = function (a) {
    a = a || new JSG.geometry.Rectangle(0, 0, 0, 0);
    var b = new JSG.geometry.BoundingBox(a.width, a.height);
    b.translate(a.x, a.y);
    JSG.debug.log("bbox#fromRectangle: " + a.x + "," + a.y + "," + a.width + "," + a.height);
    return b
};
JSG.geometry.BoundingBox.prototype._tmppoints = [new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0)];
JSG.geometry.BoundingBox.prototype.saveXML = function (a, b) {
    b.writeStartElement(a);
    b.writeAttributeString("rotation", this._rotmatrix.toString());
    this._topleft.saveXML("tl", b);
    this._bottomright.saveXML("rb", b);
    b.writeEndElement()
};
JSG.geometry.BoundingBox.prototype.readXML = function (a) {
    if (null !== a.getAttribute("rotation")) {
        var b = a.getAttribute("rotation");
        this._rotmatrix.setTo(JSG.geometry.Matrix.fromString(b))
    }
    JSG.commons.XML.iterateChildren(this, a, function (a, b) {
        switch (b.nodeName) {
            case "tl":
                this._topleft.readXML(b);
                break;
            case "rt":
                this._bottomright.readXML(b)
        }
    })
};
JSG.geometry.BoundingBox.prototype.copy = function () {
    var a = new JSG.geometry.BoundingBox(0, 0);
    a.setTo(this);
    return a
};
JSG.geometry.BoundingBox.prototype.containsPoint = function (a) {
    var b = this.getPoints(this._tmppoints);
    return JSG.geometry.Utils.isPointInPolygon(b, a)
};
JSG.geometry.BoundingBox.prototype.isEqualTo = function (a, b) {
    return this._topleft.isEqualTo(a._topleft, b) && this._bottomright.isEqualTo(a._bottomright, b) && this._rotmatrix.isEqualTo(a._rotmatrix, b) ? !0 : !1
};
JSG.geometry.BoundingBox.prototype.expandBy = function (a, b) {
    void 0 === b && (b = a);
    var c, d, e;
    c = this.getWidth() + 2 * a;
    d = this.getHeight() + 2 * b;
    e = JSG.ptCache.get(-a, -b);
    this.rotateLocalPoint(e);
    this._topleft.add(e);
    this.setSize(c, d);
    JSG.ptCache.release(e)
};
JSG.geometry.BoundingBox.prototype.reduceBy = function (a) {
    this.expandBy(-a)
};
JSG.geometry.BoundingBox.prototype.getCenter = function (a, b) {
    var c = a || new JSG.geometry.Point(0, 0);
    c.set(this.getWidth() / 2, this.getHeight() / 2);
    this.rotateLocalPoint(c);
    return !0 === b ? c.add(this._topleft) : c
};
JSG.geometry.BoundingBox.prototype.getTopLeft = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.setTo(this._topleft);
    return a
};
JSG.geometry.BoundingBox.prototype.getLeft = function () {
    return this._topleft.x
};
JSG.geometry.BoundingBox.prototype.getRight = function () {
    return this._bottomright.x
};
JSG.geometry.BoundingBox.prototype.getTop = function () {
    return this._topleft.y
};
JSG.geometry.BoundingBox.prototype.getBottom = function () {
    return this._bottomright.y
};
JSG.geometry.BoundingBox.prototype.getBottomRight = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.setTo(this._bottomright);
    return this.rotatePoint(a)
};
JSG.geometry.BoundingBox.prototype.getTopRight = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.set(this._bottomright.x, this._topleft.y);
    return this.rotatePoint(a)
};
JSG.geometry.BoundingBox.prototype.getBottomLeft = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.set(this._topleft.x, this._bottomright.y);
    return this.rotatePoint(a)
};
JSG.geometry.BoundingBox.prototype.getCornerAt = function (a, b) {
    var c = b || new JSG.geometry.Point(0, 0);
    switch (a) {
        case 0:
            c.setTo(this._topleft);
            break;
        case 1:
            c.set(this._bottomright.x, this._topleft.y);
            break;
        case 2:
            c.setTo(this._bottomright);
            break;
        case 3:
            c.set(this._topleft.x, this._bottomright.y)
    }
    return this.rotatePoint(c)
};
JSG.geometry.BoundingBox.prototype.getWidth = function () {
    return this._bottomright.x - this._topleft.x
};
JSG.geometry.BoundingBox.prototype.getHeight = function () {
    return this._bottomright.y - this._topleft.y
};
JSG.geometry.BoundingBox.prototype.getSize = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.set(this.getWidth(), this.getHeight());
    return a
};
JSG.geometry.BoundingBox.prototype.reset = function () {
    this._topleft.set(0, 0);
    this._bottomright.set(0, 0);
    this._rotmatrix.setAngle(0)
};
JSG.geometry.BoundingBox.prototype.setTopLeftTo = function (a) {
    this.setTopLeft(a.x, a.y)
};
JSG.geometry.BoundingBox.prototype.setTopLeft = function (a, b) {
    var c = this.getWidth(), d = this.getHeight();
    this._topleft.x = a;
    this._topleft.y = b;
    this._bottomright.x = a + c;
    this._bottomright.y = b + d
};
JSG.geometry.BoundingBox.prototype.setBottomRightTo = function (a) {
    this.setBottomRight(a.x, a.y)
};
JSG.geometry.BoundingBox.prototype.setBottomRight = function (a, b) {
    this._bottomright.x = a;
    this._bottomright.y = b;
    this.rotatePointInverse(this._bottomright)
};
JSG.geometry.BoundingBox.prototype.setSizeTo = function (a) {
    this.setSize(a.x, a.y)
};
JSG.geometry.BoundingBox.prototype.setSize = function (a, b) {
    this.setWidth(a);
    this.setHeight(b)
};
JSG.geometry.BoundingBox.prototype.setWidth = function (a) {
    this._bottomright.x = this._topleft.x + a
};
JSG.geometry.BoundingBox.prototype.setTop = function (a) {
    var b = this.getHeight();
    this._topleft.y = a;
    this.setHeight(b)
};
JSG.geometry.BoundingBox.prototype.setLeft = function (a) {
    var b = this.getWidth();
    this._topleft.x = a;
    this.setWidth(b)
};
JSG.geometry.BoundingBox.prototype.setHeight = function (a) {
    this._bottomright.y = this._topleft.y + a
};
JSG.geometry.BoundingBox.prototype.setTo = function (a) {
    this._topleft.setTo(a._topleft);
    this._bottomright.setTo(a._bottomright);
    this._rotmatrix.setTo(a._rotmatrix);
    return this
};
JSG.geometry.BoundingBox.prototype.rotate = function (a) {
    this._rotmatrix.rotate(a)
};
JSG.geometry.BoundingBox.prototype.rotateAroundPoint = function (a, b) {
    this.setTopLeftTo(JSG.geometry.Utils.getRotatedPoint(this._topleft, a, b));
    this.rotate(b)
};
JSG.geometry.BoundingBox.prototype.getAngle = function () {
    return this._rotmatrix.getAngle()
};
JSG.geometry.BoundingBox.prototype.setAngle = function (a) {
    this._rotmatrix.setAngle(a)
};
JSG.geometry.BoundingBox.prototype.getRotationMatrix = function () {
    return this._rotmatrix
};
JSG.geometry.BoundingBox.prototype.setRotationMatrixTo = function (a) {
    this._rotmatrix.setTo(a)
};
JSG.geometry.BoundingBox.prototype.translateTo = function (a) {
    this.translate(a.x, a.y)
};
JSG.geometry.BoundingBox.prototype.translate = function (a, b) {
    this._topleft.translate(a, b);
    this._bottomright.translate(a, b)
};
JSG.geometry.BoundingBox.prototype.toRectangle = function (a) {
    a = a || new JSG.geometry.Rectangle(0, 0, 0, 0);
    a.set(this._topleft.x, this._topleft.y, this.getWidth(), this.getHeight());
    return a
};
JSG.geometry.BoundingBox.prototype.getBoundingRectangle = function (a) {
    a = a || new JSG.geometry.Rectangle(0, 0, 0, 0);
    var b, c, d, e, f;
    if (this._rotmatrix.hasRotation()) {
        f = this.getPoints(this._tmppoints);
        if (0 === f.length)return a;
        a.x = b = f[0].x;
        a.y = c = f[0].y;
        d = 1;
        for (e = f.length; d < e; d++)a.x = Math.min(a.x, f[d].x), a.y = Math.min(a.y, f[d].y), b = Math.max(b, f[d].x), c = Math.max(c, f[d].y);
        a.width = b - a.x;
        a.height = c - a.y
    } else a.x = this._topleft.x, a.y = this._topleft.y, a.width = this.getWidth(), a.height = this.getHeight();
    return a
};
JSG.geometry.BoundingBox.prototype.toString = function () {
    var a = this.getPoints(this._tmppoints);
    return "{(" + a[0].x.toFixed(2) + "," + a[0].y.toFixed(2) + "), (" + a[2].x.toFixed(2) + "," + a[2].y.toFixed(2) + ")}(" + this.getWidth().toFixed(2) + "," + this.getHeight().toFixed(2) + ")"
};
JSG.geometry.BoundingBox.prototype.toPointsString = function () {
    var a = this.getPoints(this._tmppoints);
    return "(" + a[0].toString() + "," + a[1].toString() + "," + a[2].toString() + "," + a[3].toString() + ")"
};
JSG.geometry.BoundingBox.prototype.union = function (a) {
    var b = this._topleft.x, c = this._topleft.y, d = this._bottomright.x, e = this._bottomright.y;
    a.rotateAroundPoint(this._topleft, -this.getAngle());
    a.getPoints(this._tmppoints).forEach(function (a) {
        a.x < b ? b = a.x : a.x > d && (d = a.x);
        a.y < c ? c = a.y : a.y > e && (e = a.y)
    });
    a.rotateAroundPoint(this._topleft, this.getAngle());
    a = new JSG.geometry.Point(b, c);
    this.rotatePoint(a);
    this._topleft.setTo(a);
    this.setSize(d - b, e - c)
};
JSG.geometry.BoundingBox.prototype.enclosePoints = function (a) {
    function b(a) {
        a.x < c ? c = a.x : a.x > e && (e = a.x);
        a.y < d ? d = a.y : a.y > f && (f = a.y)
    }

    var c = this._topleft.x, d = this._topleft.y, e = this._bottomright.x, f = this._bottomright.y, g = new JSG.geometry.Point(0, 0), k;
    for (k = 0; k < a.length; k++)g.setTo(a[k]), this.rotatePointInverse(g), b(g);
    (function (a, b, c, d, e) {
        b = new JSG.geometry.Point(b, c);
        a.rotatePoint(b);
        a._topleft.setTo(b);
        a.setSize(d, e)
    })(this, c, d, e - c, f - d)
};
JSG.geometry.BoundingBox.prototype.rotatePoint = function (a) {
    if (!this._rotmatrix.hasRotation())return a;
    a.subtract(this._topleft);
    a = this._rotmatrix.rotatePoint(a);
    return a.add(this._topleft)
};
JSG.geometry.BoundingBox.prototype.rotatePointInverse = function (a) {
    if (!this._rotmatrix.hasRotation())return a;
    a.subtract(this._topleft);
    a = this._rotmatrix.rotatePointInverse(a);
    return a.add(this._topleft)
};
JSG.geometry.BoundingBox.prototype.rotateLocalPoint = function (a) {
    return this._rotmatrix.rotatePoint(a)
};
JSG.geometry.BoundingBox.prototype.rotateLocalPointInverse = function (a) {
    return this._rotmatrix.rotatePointInverse(a)
};
JSG.geometry.BoundingBox.prototype.getPoints = function (a) {
    a = this.getPointsUnrotated(a);
    var b;
    if (this._rotmatrix.hasRotation())for (b = 0; b < a.length; b++)this.rotatePoint(a[b]);
    return a
};
JSG.geometry.BoundingBox.prototype.getPointsUnrotated = function (a) {
    function b(a) {
        a >= c.length && c.push(new JSG.geometry.Point(0, 0));
        return c[a]
    }

    var c = a || [];
    b(0).setTo(this._topleft);
    b(1).set(this._bottomright.x, this._topleft.y);
    b(2).setTo(this._bottomright);
    b(3).set(this._topleft.x, this._bottomright.y);
    return c
};
JSG.geometry.BoundingBox.prototype.transformPoint = function (a) {
    a.subtract(this._topleft);
    this.rotateLocalPointInverse(a)
};
JSG.geometry.BoundingBox.prototype.determineSiblingCornersToPoint = function (a, b, c) {
    function d(a) {
        a = JSG.geometry.Utils.toDegrees(JSG.geometry.Utils.getAngleBetweenPoints(g, a));
        return 0 > a ? 360 + a : a
    }

    function e(a) {
        var c = d(h.getCornerAt(a, b));
        c < k && c > l && (l = c, m = a);
        -1 === l && c > p && (m = a, p = c)
    }

    var f, g, k, h = this, m = 0, l = -1, p = -1;
    f = this.getTopLeft();
    g = this.getCenter().add(f);
    k = d(a);
    e(0);
    e(1);
    e(2);
    e(3);
    this.getCornerAt(m, b);
    this.getCornerAt((m + 1) % 4, c)
};
JSG.geometry.BoundingBox.prototype.getIntersectionIndex = function (a, b, c) {
    var d = JSG.ptCache.get(), e = JSG.ptCache.get(), f = JSG.ptCache.get(), g = -1, k;
    for (k = 0; 4 > k; k++)if (this.getCornerAt(k, d), this.getCornerAt((k + 1) % 4, e), JSG.geometry.Utils.doLinesIntersect(a, b, d, e, f) && JSG.geometry.Utils.isPointInDirectionOfLine(f, a, b) && JSG.geometry.Utils.isPointOnLineSegment(f, d, e)) {
        g = k;
        break
    }
    void 0 !== c && c.setTo(f);
    JSG.ptCache.release(d, e, f);
    return g
};
JSG.geometry.BoundingBox.prototype.getOrthoFromCenterToIndex = function (a, b) {
    var c = b || new JSG.geometry.Point;
    if (-1 < a) {
        var d = this.getCornerAt(a % 4, JSG.ptCache.get()), e = this.getCornerAt((a + 1) % 4, JSG.ptCache.get()), c = this.getCenter(c, !0);
        JSG.geometry.Utils.getOrthogonalProjectionOfPoint(c, d, e);
        JSG.ptCache.release(d, e)
    }
    return c
};
JSG.geometry.BoundingBox.prototype.isIntersectedByLine = function (a, b) {
    var c = !1, d = JSG.ptCache.get(), e = JSG.ptCache.get(), f = JSG.ptCache.get(), g = JSG.geometry.Utils, k;
    for (k = 0; 4 > k; k++)if (this.getCornerAt(k, d), this.getCornerAt((k + 1) % 4, e), g.getIntersectionOfLines(a, b, d, e, f, !0) && g.isPointOnLineSegment(f, d, e)) {
        c = !0;
        break
    }
    JSG.ptCache.release(d, e, f);
    return c
};
JSG.geometry.BoundingBox.prototype.doesIntersectWith = function (a) {
    var b = !1, c, d, e, f;
    void 0 !== a && (b = this.getCenter().add(this._topleft), c = a.getCenter().add(a._topleft), d = c.copy().subtract(b).length(), e = this._getIntersectionPoint(b, c, JSG.ptCache.get()), f = a._getIntersectionPoint(c, b, JSG.ptCache.get()), b = void 0 !== e && void 0 !== f ? e.subtract(b).length() + f.subtract(c).length() > d : !0);
    JSG.ptCache.release(e, f);
    return b
};
JSG.geometry.BoundingBox.prototype._getIntersectionPoint = function (a, b, c) {
    var d, e = JSG.ptCache.get(), f = JSG.ptCache.get();
    c = c || new JSG.geometry.Point(0, 0);
    var g;
    for (g = 0; 4 > g; g++)if (this.getCornerAt(g, e), this.getCornerAt((g + 1) % 4, f), JSG.geometry.Utils.getIntersectionOfLines(a, b, e, f, c, !1) && JSG.geometry.Utils.isPointInDirectionOfLine(c, a, b)) {
        d = c;
        break
    }
    JSG.ptCache.release(e, f);
    return d
};
JSG.geometry.BoundingBoxCache = function (a, b) {
    var c;
    this.boxes = [];
    this.size = a;
    this.maxsize = b;
    for (c = 0; c < a; c++)this.boxes.push(new JSG.geometry.BoundingBox(0, 0))
};
JSG.geometry.BoundingBoxCache.prototype.get = function () {
    var a, b;
    for (a = 0; a < this.size; a++)if (b = this.boxes[a], !b.__used)return b.reset(), b.__used = !0, b;
    b = new JSG.geometry.BoundingBox(0, 0);
    this.size < this.maxsize && (b.__used = !0, this.boxes.push(b), this.size = this.boxes.length);
    return b
};
JSG.geometry.BoundingBoxCache.prototype.release = function () {
    var a = arguments.length, b, c;
    for (b = 0; b < a; b++)(c = arguments[b]) && c.__used && (c.__used = void 0)
};
JSG.geometry.BoundingBoxCache.prototype.inUse = function () {
    var a = 0, b, c;
    for (b = 0; b < this.size; b++)c = this.boxes[b], c.__used && a++;
    return a
};
JSG.boxCache = new JSG.geometry.BoundingBoxCache(10, 20);
JSG.namespace("JSG.geometry");
JSG.geometry.Utils = function () {
};
JSG.geometry.Utils.toRadians = function (a) {
    return a / 180 * Math.PI
};
JSG.geometry.Utils.toDegrees = function (a, b) {
    var c = 180 * (a / Math.PI);
    return b ? Math.round(c) : c
};
JSG.geometry.Utils.round = function (a) {
    return ~~(a + (0 < a ? 0.5 : -0.5))
};
JSG.geometry.Utils.roundUp = function (a) {
    return Math.ceil(a - 0.5)
};
JSG.geometry.Utils.roundTo = function (a, b) {
    var c = Math.pow(10, b);
    return Math.round(a * c) / c
};
JSG.geometry.Utils.getLinePointDistance = function (a, b, c) {
    function d(a, b) {
        return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y)
    }

    return Math.sqrt(function (a, b, c) {
        var k = d(b, c);
        if (0 === k)return d(a, b);
        k = ((a.x - b.x) * (c.x - b.x) + (a.y - b.y) * (c.y - b.y)) / k;
        return 0 > k ? d(a, b) : 1 < k ? d(a, c) : d(a, {x: b.x + k * (c.x - b.x), y: b.y + k * (c.y - b.y)})
    }(c, a, b))
};
JSG.geometry.Utils.getLinePointOffset = function (a, b, c, d) {
    function e(a, b) {
        var c = d || new JSG.geometry.Point(0, 0);
        c.set(a.x - b.x, a.y - b.y);
        return c
    }

    return function (a, b, c) {
        var d = (b.x - c.x) * (b.x - c.x) + (b.y - c.y) * (b.y - c.y);
        if (0 === d)return e(a, b);
        d = ((a.x - b.x) * (c.x - b.x) + (a.y - b.y) * (c.y - b.y)) / d;
        return 0 > d ? e(a, b) : 1 < d ? e(a, c) : e(a, {x: b.x + d * (c.x - b.x), y: b.y + d * (c.y - b.y)})
    }(c, a, b)
};
JSG.geometry.Utils.getOrthogonalProjectionOfPoint = function (a, b, c) {
    var d, e;
    d = a.copy().subtract(b);
    c = c.copy().subtract(b);
    d = d.x * c.x + d.y * c.y;
    0 !== d && (d /= c.x * c.x + c.y * c.y);
    e = new JSG.geometry.Point(0, 0);
    e.set(d * c.x, d * c.y).add(b);
    a.setTo(e);
    return a
};
JSG.geometry.Utils.areLinesOrthogonal = function (a, b, c, d) {
    a = b.copy().subtract(a);
    c = d.copy().subtract(c);
    c = a.x * c.x + a.y * c.y;
    return 0 === c || 0.01 > Math.abs(c)
};
JSG.geometry.Utils.areLinesParallel = function (a, b, c, d) {
    a = (d.y - c.y) * (b.x - a.x) - (d.x - c.x) * (b.y - a.y);
    return 0 === a || 0.01 > Math.abs(a)
};
JSG.geometry.Utils.areLinesOnTop = function (a, b, c, d) {
    d = (d.x - c.x) * (a.y - c.y) - (d.y - c.y) * (a.x - c.x);
    a = (b.x - a.x) * (a.y - c.y) - (b.y - a.y) * (a.x - c.x);
    return (0 === d || 1E-4 > Math.abs(d)) && (0 === a || 1E-4 > Math.abs(a))
};
JSG.geometry.Utils.arePointsParallel = function (a, b) {
    var c = b.y * a.x - b.x * a.y;
    return 0 === c || 0.01 > Math.abs(c)
};
JSG.geometry.Utils.getOrthogonalPointTo = function (a, b, c) {
    c = void 0 !== c ? c : new JSG.geometry.Point(0, 0);
    a = c.setTo(b).subtract(a);
    b = -a.y;
    a.y = a.x;
    a.x = b;
    return c
};
JSG.geometry.Utils.getOrthogonalPointToPoint = function (a, b) {
    var c = void 0 !== b ? b : new JSG.geometry.Point(0, 0);
    c.x = -a.y;
    c.y = a.x;
    return c
};
JSG.geometry.Utils.getSquaredDistance = function (a, b) {
    var c;
    c = b.copy().subtract(a);
    return c.x * c.x + c.y * c.y
};
JSG.geometry.Utils.getLineLength = function (a, b) {
    return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y))
};
JSG.geometry.Utils.getAngleBetweenLines = function (a, b, c) {
    var d;
    d = void 0 !== c ? c.x : 0;
    c = void 0 !== c ? c.y : 0;
    a = Math.atan2(c - a.y, d - a.x);
    return Math.atan2(c - b.y, d - b.x) - a
};
JSG.geometry.Utils.getAngleBetweenPoints = function (a, b) {
    return Math.atan2(b.y - a.y, b.x - a.x)
};
JSG.geometry.Utils.getRotatedPoint = function (a, b, c) {
    c += Math.atan2(a.y - b.y, a.x - b.x);
    a = this.getLineLength(a, b);
    return new JSG.geometry.Point(b.x + Math.cos(c) * a, b.y + Math.sin(c) * a)
};
JSG.geometry.Utils.rotatePoint = function (a, b) {
    var c, d, e;
    0 !== b && (c = Math.sin(b), d = Math.cos(b), e = a.x * d - a.y * c, c = a.x * c + a.y * d, a.set(e, c));
    return a
};
JSG.geometry.Utils.rotatePointAround = function (a, b, c) {
    var d, e;
    0 !== c && (d = Math.sin(c), e = Math.cos(c), c = a.x + e * (b.x - a.x) - d * (b.y - a.y), a = a.y + d * (b.x - a.x) + e * (b.y - a.y), b.set(c, a));
    return b
};
JSG.geometry.Utils.isPointInPolygon = function (a, b) {
    var c, d = a[0], e = !1, f;
    for (f = 1; f <= a.length; f++) {
        c = a[f % a.length];
        if (this.isPointOnLineSegment(b, d, c)) {
            e = !0;
            break
        }
        (d.y < b.y && c.y >= b.y || c.y < b.y && d.y >= b.y) && d.x + (b.y - d.y) / (c.y - d.y) * (c.x - d.x) < b.x && (e = !e);
        d = c
    }
    return e
};
JSG.geometry.Utils.isPointOnLineSegment = function (a, b, c) {
    function d(a, b, c) {
        return (a.x - b) * (a.x - b) + (a.y - c) * (a.y - c)
    }

    return 0.1 > function (a, b, c) {
            var k;
            k = d(b, c.x, c.y);
            0 === k ? k = d(a, b.x, b.y) : (k = ((a.x - b.x) * (c.x - b.x) + (a.y - b.y) * (c.y - b.y)) / k, k = 0 > k ? d(a, b.x, b.y) : 1 < k ? d(a, c.x, c.y) : d(a, b.x + k * (c.x - b.x), b.y + k * (c.y - b.y)));
            return k
        }(a, b, c)
};
JSG.geometry.Utils.isPointInDirectionOfLine = function (a, b, c) {
    var d = JSG.ptCache.get(), e = JSG.ptCache.get();
    d.setTo(c);
    d.subtract(b);
    e.setTo(a);
    e.subtract(b);
    a = d.dotProduct(e);
    JSG.ptCache.release(d, e);
    return 0.1 < a
};
JSG.geometry.Utils.getIntersectionOfLines = function (a, b, c, d, e, f) {
    var g;
    g = (d.y - c.y) * (b.x - a.x) - (d.x - c.x) * (b.y - a.y);
    if (0 === g)return !1;
    d = (d.x - c.x) * (a.y - c.y) - (d.y - c.y) * (a.x - c.x);
    c = (b.x - a.x) * (a.y - c.y) - (b.y - a.y) * (a.x - c.x);
    d /= g;
    g = c / g;
    return f || 0 <= d && 1 >= d && 0 <= g && 1 >= g ? (e.x = a.x + d * (b.x - a.x), e.y = a.y + d * (b.y - a.y), !0) : !1
};
JSG.geometry.Utils.doLinesIntersect = function (a, b, c, d, e) {
    var f, g, k, h, m;
    f = a.x;
    g = a.y;
    a = b.x;
    k = b.y;
    b = c.x;
    h = c.y;
    c = d.x;
    d = d.y;
    m = (f - a) * (h - d) - (g - k) * (b - c);
    if (0 === m)return !1;
    e.set(((f * k - g * a) * (b - c) - (f - a) * (b * d - h * c)) / m, ((f * k - g * a) * (h - d) - (g - k) * (b * d - h * c)) / m);
    return !0
};
JSG.namespace("JSG.geometry");
JSG.geometry.Constants = function () {
};
JSG.geometry.Constants.RAD_45 = JSG.geometry.Utils.toRadians(45);
JSG.geometry.Constants.RAD_135 = JSG.geometry.Utils.toRadians(135);
JSG.geometry.Constants.RAD_5 = JSG.geometry.Utils.toRadians(5);
JSG.geometry.Constants.RAD_175 = JSG.geometry.Utils.toRadians(175);
JSG.namespace("JSG.anim");
JSG.anim.Animation = function (a, b) {
    this.type = a;
    this.context = b;
    this._timer = void 0
};
JSG.anim.Animation.prototype.start = function (a, b) {
    var c = new Date, d = this;
    this._timer = setInterval(function () {
        var e = (new Date - c) / b;
        1 < e && (e = 1, d.stop());
        e = d.type.progressFactor(e);
        a.call(d.context, e)
    }, 10)
};
JSG.anim.Animation.prototype.stop = function () {
    clearInterval(this._timer)
};
JSG.namespace("JSG.anim");
JSG.anim.AnimationType = function () {
    function a(a, b) {
        this.str = a;
        this.factorFunc = b
    }

    var b = new JSG.commons.Map;
    a.prototype.toString = function () {
        return this.str
    };
    a.prototype.progressFactor = function (a) {
        return this.factorFunc(a)
    };
    b.put("linear", new a("linear", function (a) {
        return a
    }));
    b.put("easeout", new a("easeout", function (a) {
        a:{
            a = 1 - a;
            var b, e;
            b = 0;
            for (e = 1; ; b += e, e /= 2)if (a >= (7 - 4 * b) / 11) {
                a = -Math.pow((11 - 6 * b - 11 * a) / 4, 2) + Math.pow(e, 2);
                break a
            }
            a = void 0
        }
        return 1 - a
    }));
    b.put("circ", new a("circ", function (a) {
        return 1 - Math.sin(Math.acos(a))
    }));
    return {LINEAR: b.get("linear"), EASE_OUT: b.get("easeout"), CIRC: b.get("circ")}
}();
JSG.namespace("JSG.ui.events");
JSG.ui.events.Event = function (a, b, c) {
    this.type = c;
    this.event = b;
    this.doRepaint = this.isConsumed = !1;
    this.canvasRect = a.getBoundingClientRect();
    this.canvasId = a.id;
    a = document.documentElement;
    b.clientX && b.clientY ? (this.location.set(b.clientX - this.canvasRect.left - a.scrollLeft, b.clientY - this.canvasRect.top - a.scrollTop), JSG.ui.events.currentClientX = b.clientX, JSG.ui.events.currentClientY = b.clientY) : JSG.ui.events.currentClientX && JSG.ui.events.currentClientY ? this.location.set(JSG.ui.events.currentClientX - this.canvasRect.left -
    a.scrollLeft, JSG.ui.events.currentClientY - this.canvasRect.top - a.scrollTop) : this.location.set(0, 0);
    this.windowLocation.set(b.pageX, b.pageY)
};
JSG.ui.events.Event.prototype.location = new JSG.geometry.Point(0, 0);
JSG.ui.events.Event.prototype.windowLocation = new JSG.geometry.Point(0, 0);
JSG.ui.events.Event.prototype.isInCanvas = function () {
    return JSG.debug.USE_DOC_DISPATCHER ? "canvas" === this.event.target.tagName.toLowerCase() ? this.event.target.id === this.canvasId : !1 : "canvas" === this.event.target.tagName.toLowerCase()
};
JSG.ui.events.Event.prototype.consume = function () {
    this.isConsumed = !0;
    this.event.stopPropagation && this.event.stopPropagation();
    this.event.stopImmediatePropagation && this.event.stopImmediatePropagation();
    this.event.preventDefault();
    this.event.cancelBubble = !0
};
JSG.namespace("JSG.ui.events");
JSG.ui.events.MouseEventType = {DOWN: 0, MOVE: 1, UP: 2, EXIT: 4, DBLCLK: 8, WHEEL: 16};
JSG.ui.events.ButtonType = {LEFT: 0, RIGHT: 2};
JSG.ui.events.KeyType = {CTRL: 1, ALT: 2, SHIFT: 4, META: 8, ESC: 27};
JSG.ui.events.MouseEvent = function () {
    JSG.ui.events.MouseEvent._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.ui.events.MouseEvent, JSG.ui.events.Event);
JSG.ui.events.MouseEvent.fromEvent = function (a, b, c) {
    a = new JSG.ui.events.MouseEvent(a, b, c);
    a.key = JSG.ui.events.currentKey;
    a.keepFocus = !1;
    return a
};
JSG.ui.events.MouseEvent.prototype.isClicked = function (a) {
    return void 0 !== this.event.button && this.event.button === a
};
JSG.ui.events.MouseEvent.prototype.isPressed = function (a) {
    switch (a) {
        case JSG.ui.events.KeyType.CTRL:
            return this.event.ctrlKey;
        case JSG.ui.events.KeyType.ALT:
            return this.event.altKey;
        case JSG.ui.events.KeyType.META:
            return this.event.metaKey;
        case JSG.ui.events.KeyType.SHIFT:
            return this.event.shiftKey;
        default:
            return a === JSG.ui.events.currentKey
    }
};
JSG.namespace("JSG.ui.events");
JSG.ui.events.GestureEventType = {
    CANCEL: Math.pow(2, 10),
    DRAGSTART: Math.pow(2, 11),
    DRAG: Math.pow(2, 12),
    DRAGEND: Math.pow(2, 13),
    TRANSFORMSTART: Math.pow(2, 14),
    TRANSFORM: Math.pow(2, 15),
    TRANSFORMEND: Math.pow(2, 16),
    TAPDOWN: Math.pow(2, 17),
    TAPUP: Math.pow(2, 18),
    DBLTAP: Math.pow(2, 19),
    PINCHSTART: Math.pow(2, 20),
    PINCH: Math.pow(2, 21),
    PINCHEND: Math.pow(2, 22),
    SWIPE: Math.pow(2, 23),
    ROTATESTART: Math.pow(2, 24),
    ROTATE: Math.pow(2, 25),
    ROTATEEND: Math.pow(2, 26),
    PANSTART: Math.pow(2, 27),
    PAN: Math.pow(2, 28),
    PANEND: Math.pow(2, 29),
    HOLD: Math.pow(2, 30),
    TOUCH: Math.pow(2, 31)
};
JSG.ui.events.GestureEvent = function () {
    JSG.ui.events.GestureEvent._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.ui.events.GestureEvent, JSG.ui.events.Event);
JSG.ui.events.GestureEvent.fromEvent = function (a, b, c) {
    var d = new JSG.ui.events.GestureEvent(a.canvas, b.srcEvent, c);
    JSG.debug._isActive && JSG.ui.events.GestureEvent.eventType2string(c);
    switch (c) {
        case JSG.ui.events.GestureEventType.DRAGSTART:
        case JSG.ui.events.GestureEventType.TAPDOWN:
            if (1 < b.touches.length)return;
            d.type = JSG.ui.events.MouseEventType.DOWN;
            break;
        case JSG.ui.events.GestureEventType.DRAG:
            if (1 < b.touches.length)return;
            d.type = JSG.ui.events.MouseEventType.MOVE;
            break;
        case JSG.ui.events.GestureEventType.DRAGEND:
        case JSG.ui.events.GestureEventType.TAPUP:
            if (1 <
                b.touches.length)return;
            d.type = JSG.ui.events.MouseEventType.UP;
            break;
        case JSG.ui.events.GestureEventType.DBLTAP:
            if (1 < b.touches.length)return;
            d.type = JSG.ui.events.MouseEventType.DBLCLK;
            break;
        default:
            d.type = c
    }
    d.gesture = b;
    d.gestureType = c;
    d.key = JSG.ui.events.currentKey;
    d.cs = a.graphics.getCoordinateSystem();
    a = document.documentElement;
    d.gesture.touches.length ? (d.location.set(d.gesture.touches[0].clientX - d.canvasRect.left - a.scrollLeft, d.gesture.touches[0].clientY - d.canvasRect.top - a.scrollTop), d.windowLocation.set(d.gesture.touches[0].pageX,
        d.gesture.touches[0].pageY)) : (d.location.set(d.event.changedTouches[0].clientX - d.canvasRect.left - a.scrollLeft, d.event.changedTouches[0].clientY - d.canvasRect.top - a.scrollTop), d.windowLocation.set(d.event.changedTouches[0].pageX, d.event.changedTouches[0].pageY));
    d.event.preventDefault();
    d.event.stopPropagation();
    d.gesture.preventDefault();
    d.gesture.stopPropagation();
    return d
};
JSG.ui.events.GestureEvent.prototype.isPressed = function (a) {
    switch (a) {
        case JSG.ui.events.KeyType.CTRL:
            return this.event.ctrlKey;
        case JSG.ui.events.KeyType.ALT:
            return this.event.altKey;
        case JSG.ui.events.KeyType.META:
            return this.event.metaKey;
        case JSG.ui.events.KeyType.SHIFT:
            return this.event.shiftKey;
        default:
            return a === JSG.ui.events.currentKey
    }
};
JSG.ui.events.GestureEvent.prototype.isInCanvas = function () {
    var a = this.gesture.touches[0].clientX, b = this.gesture.touches[0].clientY, c = this.canvasRect;
    return a >= c.left && a <= c.right && b >= c.top && b <= c.bottom
};
JSG.ui.events.GestureEvent.eventType2string = function (a) {
    switch (a) {
        case JSG.ui.events.GestureEventType.DRAGSTART:
            a = "drag_start";
            break;
        case JSG.ui.events.GestureEventType.DRAG:
            a = "drag";
            break;
        case JSG.ui.events.GestureEventType.DRAGEND:
            a = "drag_end";
            break;
        case JSG.ui.events.GestureEventType.TAPDOWN:
            a = "tapdown";
            break;
        case JSG.ui.events.GestureEventType.TAPUP:
            a = "tapup";
            break;
        case JSG.ui.events.GestureEventType.DBLTAP:
            a = "doubletap";
            break;
        case JSG.ui.events.GestureEventType.CANCEL:
            a = "cancel";
            break;
        case JSG.ui.events.GestureEventType.TRANSFORMSTART:
            a =
                "transform_start";
            break;
        case JSG.ui.events.GestureEventType.TRANSFORM:
            a = "transform";
            break;
        case JSG.ui.events.GestureEventType.TRANSFORMEND:
            a = "transform_end";
            break;
        case JSG.ui.events.GestureEventType.PINCHSTART:
            a = "pinch_start";
            break;
        case JSG.ui.events.GestureEventType.PINCH:
            a = "pinch";
            break;
        case JSG.ui.events.GestureEventType.PINCHEND:
            a = "pinch_end";
            break;
        case JSG.ui.events.GestureEventType.SWIPE:
            a = "swipe";
            break;
        case JSG.ui.events.GestureEventType.ROTATESTART:
            a = "rotate_start";
            break;
        case JSG.ui.events.GestureEventType.ROTATE:
            a =
                "rotate";
            break;
        case JSG.ui.events.GestureEventType.ROTATEEND:
            a = "rotate_end";
            break;
        case JSG.ui.events.GestureEventType.PANSTART:
            a = "pan_start";
            break;
        case JSG.ui.events.GestureEventType.PAN:
            a = "pan";
            break;
        case JSG.ui.events.GestureEventType.PANEND:
            a = "pan_end";
            break;
        case JSG.ui.events.GestureEventType.HOLD:
            a = "hold";
            break
    }
    return a
};
JSG.ui.events.GestureEvent.prototype.isClicked = function (a) {
    return this.event.button && this.event.button === a
};
JSG.namespace("JSG.ui.events");
JSG.ui.events.DragEventType = {DROP: 0, ENTER: 1, EXIT: 2, LEAVE: 4, OVER: 8};
JSG.ui.events.DragEvent = function () {
    JSG.ui.events.DragEvent._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.ui.events.DragEvent, JSG.ui.events.Event);
JSG.ui.events.DragEvent.fromEvent = function (a, b, c) {
    a = new JSG.ui.events.DragEvent(a, b, c);
    a.event.preventDefault();
    return a
};
JSG.namespace("JSG.ui.events");
JSG.ui.events.KeyEventType = {DOWN: 0, UP: 1};
JSG.ui.events.KeyEvent = function () {
    JSG.ui.events.KeyEvent._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.ui.events.KeyEvent, JSG.ui.events.Event);
JSG.ui.events.currentKey = void 0;
JSG.ui.events.KeyEvent.fromEvent = function (a, b, c) {
    a = new JSG.ui.events.KeyEvent(a, b, c);
    a.key = b.keyCode;
    JSG.ui.events.currentKey = c === JSG.ui.events.KeyEventType.DOWN ? b.keyCode : void 0;
    return a
};
JSG.ui.events.KeyEvent.containsModifierKey = function (a) {
    var b = !1;
    switch (a.key) {
        case 16:
        case 17:
        case 18:
            b = !0
    }
    return b
};
JSG.ui.events.KeyEvent.prototype.isPressed = function (a) {
    return (this.key & a) === a
};
JSG.namespace("JSG.ui");
JSG.ui.Cursor = function () {
};
JSG.ui.Cursor.Style = {
    AUTO: "auto",
    CROSSHAIR: "crosshair",
    MOVE: "move",
    EXECUTE: "pointer",
    TEXT: "text",
    RESIZE_E: "e-resize",
    RESIZE_W: "w-resize",
    RESIZE_N: "n-resize",
    RESIZE_S: "s-resize",
    RESIZE_NE: "ne-resize",
    RESIZE_NW: "nw-resize",
    RESIZE_SE: "se-resize",
    RESIZE_SW: "sw-resize",
    CROSS: "crosshair",
    ROTATE: "move",
    SHEET: "sheet",
    SHEETCOLUMN: "sheetcolumn",
    SHEETROW: "sheetrow",
    SHEETCOLUMNSIZE: "sheetcolumnsize",
    SHEETROWSIZE: "sheetrowsize"
};
JSG.namespace("JSG.ui.graphics");
JSG.ui.graphics.DocumentEventDispatcher = function () {
    function a(a) {
        var b = d.get(a);
        b || (b = [], d.put(a, b));
        return b
    }

    function b(a, b) {
        var c, d;
        for (c = 0; c < b.length; c++)if (b[c].scope === a) {
            d = b[c];
            break
        }
        return d
    }

    function c(b) {
        return function (c) {
            var d, k = a(b);
            for (d = 0; d < k.length; d++) {
                var h = k[d];
                h.func.call(h.scope, c)
            }
        }
    }

    var d = new JSG.commons.Map;
    return {
        addEventListener: function (d, f, g) {
            if (d && f && g) {
                var k = a(d);
                b(f, k) || k.push({scope: f, func: g});
                1 === k.length && (document[d] = c(d))
            }
        }, removeEventListener: function (c, d) {
            if (c &&
                d) {
                var g = a(c), k = b(d, g);
                JSG.Arrays.remove(g, k);
                0 === g.length && (document[c] = void 0)
            }
        }
    }
}();
JSG.namespace("JSG.ui.graphics");
JSG.ui.graphics.DisplayMode = {ENDLESS: 0, PAGE: 1};
JSG.ui.graphics.CoordinateSystem = function () {
    this._majorUnit = 100;
    this._minorUnit = 10;
    this._zoom = 1;
    this._dpiX = JSG.dpi.x;
    this._dpiY = JSG.dpi.y
};
JSG.ui.graphics.CoordinateSystem.prototype.getZoom = function () {
    return this._zoom
};
JSG.ui.graphics.CoordinateSystem.prototype.setZoom = function (a) {
    this._zoom = a
};
JSG.ui.graphics.CoordinateSystem.prototype.logToDeviceX = function (a) {
    return a * this._zoom
};
JSG.ui.graphics.CoordinateSystem.prototype.logToDeviceY = function (a) {
    return a * this._zoom
};
JSG.ui.graphics.CoordinateSystem.prototype.deviceToLogX = function (a) {
    return a / this._zoom
};
JSG.ui.graphics.CoordinateSystem.prototype.deviceToLogY = function (a) {
    return a / this._zoom
};
JSG.ui.graphics.CoordinateSystem.prototype.deviceToLogXNoZoom = function (a) {
    return a
};
JSG.ui.graphics.CoordinateSystem.prototype.deviceToLogYNoZoom = function (a) {
    return a
};
JSG.ui.graphics.CoordinateSystem.prototype.deviceToLogPoint = function (a, b) {
    var c = b || new JSG.geometry.Point(0, 0);
    c.x = this.deviceToLogX(a.x);
    c.y = this.deviceToLogY(a.y);
    return c
};
JSG.ui.graphics.CoordinateSystem.prototype.metricToLogX = function (a) {
    return a / 2540 * this._dpiX
};
JSG.ui.graphics.CoordinateSystem.prototype.metricToLogXNoZoom = function (a) {
    return a / 2540 * this._dpiX / this._zoom
};
JSG.ui.graphics.CoordinateSystem.prototype.metricToLogY = function (a) {
    return a / 2540 * this._dpiY
};
JSG.ui.graphics.CoordinateSystem.prototype.metricToLogYNoZoom = function (a) {
    return a / 2540 * this._dpiY / this._zoom
};
JSG.ui.graphics.CoordinateSystem.prototype.getMajorUnit = function () {
    return this._majorUnit
};
JSG.ui.graphics.CoordinateSystem.prototype.getMinorUnit = function () {
    return this._minorUnit
};
JSG.ui.graphics.CoordinateSystem.prototype.getMajorUnitString = function (a) {
    return a
};
JSG.ui.graphics.CoordinateSystem.prototype.getMinorUnitString = function (a) {
    return a
};
JSG.ui.graphics.CoordinateSystem.prototype.toSVGUnit = function (a) {
    return a
};
JSG.ui.graphics.CoordinateSystem.prototype.round = function (a) {
    return a
};
JSG.ui.graphics.CoordinateSystem.prototype.roundToMiddle = function (a) {
    return a
};
JSG.namespace("JSG.ui.graphics");
JSG.ui.graphics.MetricCoordinateSystem = function () {
    JSG.ui.graphics.MetricCoordinateSystem._super.constructor.apply(this, arguments);
    this._majorUnit = 1E3;
    this._minorUnit = 500
};
JSG.extend(JSG.ui.graphics.MetricCoordinateSystem, JSG.ui.graphics.CoordinateSystem);
JSG.ui.graphics.MetricCoordinateSystem.prototype.logToDeviceX = function (a) {
    return a / 2540 * this._dpiX * this._zoom
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.logToDeviceXNoZoom = function (a) {
    return a / 2540 * this._dpiX
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.logToDeviceY = function (a) {
    return a / 2540 * this._dpiY * this._zoom
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.logToDeviceYNoZoom = function (a) {
    return a / 2540 * this._dpiY
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.deviceToLogX = function (a) {
    return 2540 * a / this._dpiX / this._zoom
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.deviceToLogY = function (a) {
    return 2540 * a / this._dpiY / this._zoom
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.deviceToLogXNoZoom = function (a) {
    return 2540 * a / this._dpiX
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.deviceToLogYNoZoom = function (a) {
    return 2540 * a / this._dpiY
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.metricToLogX = function (a) {
    return a
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.metricToDeviceX = function (a) {
    return a / 2540 * this._dpiX
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.metricToDeviceY = function (a) {
    return a / 2540 * this._dpiY
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.metricToLogY = function (a) {
    return a
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.metricToLogXNoZoom = function (a) {
    return a / this._zoom
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.metricToLogYNoZoom = function (a) {
    return a / this._zoom
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.getMajorUnitString = function (a) {
    return a / this._majorUnit
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.getMinorUnitString = function (a) {
    return a / this._minorUnit
};
JSG.ui.graphics.MetricCoordinateSystem.prototype.toSVGUnit = function (a) {
    return Math.round(100 * this.logToDeviceX(a)) / 100
};
JSG.namespace("JSG.ui.graphics");
JSG.ui.graphics.Graphics = function (a, b) {
    this._context2D = a.getContext("2d");
    this._cs = b;
    this._lineWidth = JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE;
    this._lineStyle = JSG.graph.attr.FormatAttributes.LineStyle.SOLID;
    this._lineArrowEnd = this._lineArrowStart = JSG.graph.attr.FormatAttributes.ArrowStyle.NONE;
    this._lineCorner = 0;
    this._patternMap = new JSG.commons.Map;
    this._pattern = this._patternStyle = void 0;
    this._fillStyle = JSG.graph.attr.FormatAttributes.FillStyle.SOLID;
    this._fillColor = "#FFFFFF";
    this._fontName =
        "Verdana";
    this._fontSize = 10;
    this._fontStyle = JSG.graph.attr.TextFormatAttributes.FontStyle.NORMAL;
    this._horizontalAlignment = JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER;
    this.translateStack = [];
    this.m = [1, 0, 0, 1, 0, 0];
    this.antialias = !1
};
JSG.ui.graphics.Graphics.RECT_POINTS = [new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0)];
JSG.ui.graphics.Graphics.prototype.isContextDefined = function () {
    return void 0 === this._context2D ? !1 : !0
};
JSG.ui.graphics.Graphics.prototype.getCoordinateSystem = function () {
    return this._cs
};
JSG.ui.graphics.Graphics.prototype.setCoordinateSystem = function (a) {
    this._cs = a
};
JSG.ui.graphics.Graphics.prototype.save = function () {
    this._context2D.save();
    this.translateStack.push(this.m.slice())
};
JSG.ui.graphics.Graphics.prototype.restore = function () {
    this._context2D.restore();
    this.m = this.translateStack[this.translateStack.length - 1];
    this.translateStack.pop()
};
JSG.ui.graphics.Graphics.prototype.getContext = function () {
    return this._context2D
};
JSG.ui.graphics.Graphics.prototype.setTransparency = function (a) {
    this._context2D.globalAlpha = a / 100
};
JSG.ui.graphics.Graphics.prototype.translate = function (a, b) {
    this.translateM(a, b)
};
JSG.ui.graphics.Graphics.prototype.scale = function (a, b) {
    this.scaleM(a, b)
};
JSG.ui.graphics.Graphics.prototype.rotate = function (a) {
    this.rotateM(a)
};
JSG.ui.graphics.Graphics.prototype.clip = function () {
    this._context2D.clip()
};
JSG.ui.graphics.Graphics.prototype.setClip = function (a) {
    var b = this._cs.deviceToLogX(1);
    a = JSG.rectCache.get().setTo(a);
    a.x -= b;
    a.y -= b;
    a.height += b;
    a.width += b;
    b = a.getPoints(JSG.ui.graphics.Graphics.RECT_POINTS);
    this.setClipArea(void 0, b, void 0);
    JSG.rectCache.release(a)
};
JSG.ui.graphics.Graphics.prototype.setImageClip = function (a) {
    this.beginPath();
    var b = this.transformPoint(a.x, a.y, JSG.ptCache.get());
    b.x -= 0.5;
    b.y -= 0.5;
    this._context2D.rect(b.x, b.y, JSG.geometry.Utils.round(a.width), JSG.geometry.Utils.round(a.height));
    this.closePath();
    this.clip();
    JSG.ptCache.release(b)
};
JSG.ui.graphics.Graphics.prototype.setClipArea = function (a, b, c) {
    if (0 !== b.length) {
        var d, e;
        this.beginPath();
        this.moveTo(b[0].x, b[0].y);
        if (void 0 !== c && void 0 !== a) {
            d = 1;
            for (e = b.length; d < e; d++)this.bezierCurveTo(a[d - 1].x, a[d - 1].y, c[d].x, c[d].y, b[d].x, b[d].y);
            this.bezierCurveTo(a[b.length - 1].x, a[b.length - 1].y, c[0].x, c[0].y, b[0].x, b[0].y)
        } else for (d = 1, e = b.length; d < e; d++)this.lineTo(b[d].x, b[d].y);
        this.closePath();
        this.clip()
    }
};
JSG.ui.graphics.Graphics.prototype.setFillColor = function (a) {
    this._context2D.fillStyle !== a && (this._fillColor = this._context2D.fillStyle = a)
};
JSG.ui.graphics.Graphics.prototype.getFillColor = function () {
    return this._fillColor
};
JSG.ui.graphics.Graphics.prototype.setLineColor = function (a) {
    this._context2D.strokeStyle !== a && (this._context2D.strokeStyle = a)
};
JSG.ui.graphics.Graphics.prototype.setLineStyle = function (a) {
    this._lineStyle = a
};
JSG.ui.graphics.Graphics.prototype.setFillStyle = function (a) {
    this._fillStyle = a
};
JSG.ui.graphics.Graphics.prototype.setTextAlign = function (a) {
    this._horizontalAlignment = a
};
JSG.ui.graphics.Graphics.prototype.setTextAlignment = function (a) {
    switch (a) {
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT:
            this._context2D.textAlign = "left";
            break;
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER:
            this._context2D.textAlign = "center";
            break;
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT:
            this._context2D.textAlign = "right"
    }
    this._horizontalAlignment = a
};
JSG.ui.graphics.Graphics.prototype.setTextBaseline = function (a) {
    this._context2D.textBaseline = a
};
JSG.ui.graphics.Graphics.prototype.setFontName = function (a) {
    this._fontName = a
};
JSG.ui.graphics.Graphics.prototype.setFontSize = function (a) {
    this._fontSize = a
};
JSG.ui.graphics.Graphics.prototype.setFontStyle = function (a) {
    this._fontStyle = a
};
JSG.ui.graphics.Graphics.prototype.setFont = function () {
    var a = "";
    this._fontStyle & JSG.graph.attr.TextFormatAttributes.FontStyle.BOLD && (a += "bold ");
    this._fontStyle & JSG.graph.attr.TextFormatAttributes.FontStyle.ITALIC && (a += "italic ");
    var b = this._fontSize * this._cs.getZoom(), a = a + (b + "pt " + this._fontName);
    a !== this._context2D.font && (this._context2D.font = a);
    switch (this._horizontalAlignment) {
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT:
            this._context2D.textAlign = "left";
            break;
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER:
            this._context2D.textAlign =
                "center";
            break;
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT:
            this._context2D.textAlign = "right"
    }
};
JSG.ui.graphics.Graphics.prototype.drawEllipse = function (a) {
    if (this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.NONE && 0 !== a.width && 0 !== a.height) {
        var b = 0.5522848 * (a.width / 2), c = 0.5522848 * (a.height / 2), d = a.x + a.width, e = a.y + a.height, f = a.x + a.width / 2, g = a.y + a.height / 2;
        this.beginPath();
        this.moveTo(a.x, g);
        this.bezierCurveTo(a.x, g - c, f - b, a.y, f, a.y);
        this.bezierCurveTo(f + b, a.y, d, g - c, d, g);
        this.bezierCurveTo(d, g + c, f + b, e, f, e);
        this.bezierCurveTo(f - b, e, a.x, g + c, a.x, g);
        this.closePath();
        this.stroke()
    }
};
JSG.ui.graphics.Graphics.prototype.drawLine = function (a, b) {
    if (this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.NONE) {
        this.beginPath();
        var c;
        if (this._lineStyle === JSG.graph.attr.FormatAttributes.LineStyle.SOLID || this._context2D.setLineDash)this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.SOLID && this._context2D.setLineDash && (c = Math.max(this._context2D.lineWidth, 1), c = this.getDashPattern(c, 5 * c, 3 * c, 2 * c), this._context2D.setLineDash(c)), this.moveTo(a.x, a.y), this.lineTo(b.x, b.y); else {
            var d =
                c = Math.max(this._lineWidth, this._cs.deviceToLogX(1)), e = 5 * c, f = 3 * c;
            c = [2, 2];
            switch (this._lineStyle) {
                case JSG.graph.attr.FormatAttributes.LineStyle.DASH:
                    c = [e, f];
                    break;
                case JSG.graph.attr.FormatAttributes.LineStyle.DASHDOT:
                    c = [e, f, d, f];
                    break;
                case JSG.graph.attr.FormatAttributes.LineStyle.DASHDOTDOT:
                    c = [d, f, e, f, d, f];
                    break;
                case JSG.graph.attr.FormatAttributes.LineStyle.DOT:
                    c = [d, f]
            }
            var g = function (a, b) {
                return a <= b
            }, e = function (a, b) {
                return a >= b
            }, f = function (a, b) {
                return Math.min(a, b)
            }, k = function (a, b) {
                return Math.max(a,
                    b)
            }, d = {thereYet: e, cap: f}, e = {thereYet: e, cap: f}, h = function (a, b) {
                var c = Math.pow(10, b);
                return Math.round(a * c) / c
            }, f = a.copy(), m = b.copy();
            if (isNaN(m.x) || isNaN(m.y) || isNaN(f.x) || isNaN(f.y)) {
                JSG.debug.log("invalid parameters in Graphics#drawLine !!!");
                return
            }
            f.x = h(a.x, 5);
            f.y = h(a.y, 5);
            m.x = h(b.x, 5);
            m.y = h(b.y, 5);
            0 < f.y - m.y && (e.thereYet = g, e.cap = k);
            0 < f.x - m.x && (d.thereYet = g, d.cap = k);
            this.moveTo(f.x, f.y);
            for (var g = f.x, k = f.y, h = 0, l = !0; !d.thereYet(g, m.x) || !e.thereYet(k, m.y);) {
                d.thereYet(g, m.x);
                e.thereYet(k, m.y);
                var p =
                    Math.atan2(m.y - f.y, m.x - f.x), n = c[h], g = d.cap(m.x, g + Math.cos(p) * n), k = e.cap(m.y, k + Math.sin(p) * n);
                l ? this.lineTo(g, k) : this.moveTo(g, k);
                h = (h + 1) % c.length;
                l = !l
            }
        }
        this.stroke();
        this._context2D.setLineDash && this._context2D.setLineDash([])
    }
};
JSG.ui.graphics.Graphics.prototype.drawArrow = function (a, b, c) {
    if (c !== JSG.graph.attr.FormatAttributes.ArrowStyle.NONE) {
        var d = this.getArrowWidthByType(c), e = 1.57;
        switch (c) {
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMONDLONG:
                e = 0.785;
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLEDLONG:
                e = 3.14 / 6;
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLEDSMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWHALFFILLED:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWHALFFILLEDSMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROW:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWSMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWSINGLESIDE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSEFILLED:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSEFILLEDSMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSESMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLESMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLESMALLAROUND:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLEDOUBLELINE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DOUBLELINE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.SQUARE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.SQUARESMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAGONALLINE:
                e =
                    3.14 / 3;
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMOND:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMONDSMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWNNARROWFILLED:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWNARROWFILLEDSMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWDOUBLEFILLED:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWDOUBLEFILLEDSMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWDOUBLE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWDOUBLESMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSENARROW:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSENARROWSMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.LINEARROWREVERSE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLEARROWREVERSE:
                e =
                    1.57;
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMONDNARROW:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMONDNARROWSMALL:
                e = 3.14 / 1.5
        }
        a = Math.atan2(b.y - a.y, b.x - a.x);
        var f = e / 2, e = d / 2 / Math.sin(e / 2), g = !0;
        this.beginPath();
        switch (c) {
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWDOUBLE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWDOUBLESMALL:
                this.moveTo(b.x - e * Math.cos(a - f) - e * Math.cos(a), b.y - e * Math.sin(a - f) - e * Math.sin(a));
                this.lineTo(b.x - e * Math.cos(a), b.y - e * Math.sin(a));
                this.lineTo(b.x -
                e * Math.cos(a + f) - e * Math.cos(a), b.y - e * Math.sin(a + f) - e * Math.sin(a));
                this.moveTo(b.x - e * Math.cos(a - f), b.y - e * Math.sin(a - f));
                this.lineTo(b.x, b.y);
                this.lineTo(b.x - e * Math.cos(a + f), b.y - e * Math.sin(a + f));
                g = !1;
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROW:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWSMALL:
                this.moveTo(b.x - e * Math.cos(a - f), b.y - e * Math.sin(a - f));
                this.lineTo(b.x, b.y);
                this.lineTo(b.x - e * Math.cos(a + f), b.y - e * Math.sin(a + f));
                g = !1;
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWDOUBLEFILLED:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWDOUBLEFILLEDSMALL:
                this.moveTo(b.x -
                e * Math.cos(a), b.y - e * Math.sin(a));
                this.lineTo(b.x - e * Math.cos(a - f) - e * Math.cos(a), b.y - e * Math.sin(a - f) - e * Math.sin(a));
                this.lineTo(b.x - e * Math.cos(a + f) - e * Math.cos(a), b.y - e * Math.sin(a + f) - e * Math.sin(a));
                this.lineTo(b.x - e * Math.cos(a), b.y - e * Math.sin(a));
                this.moveTo(b.x, b.y);
                this.lineTo(b.x - e * Math.cos(a - f), b.y - e * Math.sin(a - f));
                this.lineTo(b.x - e * Math.cos(a + f), b.y - e * Math.sin(a + f));
                this.closePath();
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLEDSMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLEDLONG:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWNNARROWFILLED:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWNARROWFILLEDSMALL:
                this.moveTo(b.x,
                    b.y);
                this.lineTo(b.x - e * Math.cos(a - f), b.y - e * Math.sin(a - f));
                this.lineTo(b.x - e * Math.cos(a + f), b.y - e * Math.sin(a + f));
                this.closePath();
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWHALFFILLED:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWHALFFILLEDSMALL:
                this.moveTo(b.x, b.y);
                this.lineTo(b.x - e * Math.cos(a - f), b.y - e * Math.sin(a - f));
                this.lineTo(b.x - e / 3 * Math.cos(a), b.y - e / 3 * Math.sin(a));
                this.lineTo(b.x - e * Math.cos(a + f), b.y - e * Math.sin(a + f));
                this.closePath();
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSESMALL:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSENARROW:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSENARROWSMALL:
                g = !1;
                this.moveTo(b.x - d / 2 * Math.sin(a), b.y + d / 2 * Math.cos(a));
                this.lineTo(b.x - e * Math.cos(a), b.y - e * Math.sin(a));
                this.lineTo(b.x + d / 2 * Math.sin(a), b.y - d / 2 * Math.cos(a));
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSEFILLED:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSEFILLEDSMALL:
                this.moveTo(b.x - e * Math.cos(a), b.y - e * Math.sin(a));
                this.lineTo(b.x - d / 2 * Math.sin(a), b.y + d / 2 * Math.cos(a));
                this.lineTo(b.x + d / 2 * Math.sin(a), b.y - d / 2 * Math.cos(a));
                this.closePath();
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWSINGLESIDE:
                this.moveTo(b.x,
                    b.y);
                this.lineTo(b.x - e * Math.cos(a - f), b.y - e * Math.sin(a - f));
                this.lineTo(b.x - e * Math.cos(a), b.y - e * Math.sin(a));
                this.closePath();
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.LINEARROWREVERSE:
                g = !1;
                this.moveTo(b.x - d / 2 * Math.sin(a), b.y + d / 2 * Math.cos(a));
                this.lineTo(b.x - e * Math.cos(a), b.y - e * Math.sin(a));
                this.lineTo(b.x + d / 2 * Math.sin(a), b.y - d / 2 * Math.cos(a));
                this.moveTo(b.x - 1.2 * e * Math.cos(a - f), b.y - 1.2 * e * Math.sin(a - f));
                this.lineTo(b.x - 1.2 * e * Math.cos(a + f), b.y - 1.2 * e * Math.sin(a + f));
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLEARROWREVERSE:
                this.moveTo(b.x -
                d / 2 * Math.sin(a), b.y + d / 2 * Math.cos(a));
                this.lineTo(b.x - e * Math.cos(a), b.y - e * Math.sin(a));
                this.lineTo(b.x + d / 2 * Math.sin(a), b.y - d / 2 * Math.cos(a));
                this.stroke();
                this.beginPath();
                this.circle(b.x - 1.5 * d * Math.cos(a), b.y - 1.5 * d * Math.sin(a), d / 2);
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLESMALL:
                this.circle(b.x - d / 2 * Math.cos(a), b.y - d / 2 * Math.sin(a), d / 2);
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLESMALLAROUND:
                this.circle(b.x, b.y,
                    d / 2);
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMOND:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMONDSMALL:
                this.moveTo(b.x, b.y);
                this.lineTo(b.x - e * Math.cos(a - f), b.y - e * Math.sin(a - f));
                this.lineTo(b.x - 1.5 * e * Math.cos(a), b.y - 1.5 * e * Math.sin(a));
                this.lineTo(b.x - e * Math.cos(a + f), b.y - e * Math.sin(a + f));
                this.closePath();
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMONDLONG:
                this.moveTo(b.x, b.y);
                this.lineTo(b.x - e * Math.cos(a - f), b.y - e * Math.sin(a - f));
                this.lineTo(b.x - 2 * e * Math.cos(a),
                    b.y - 2 * e * Math.sin(a));
                this.lineTo(b.x - e * Math.cos(a + f), b.y - e * Math.sin(a + f));
                this.closePath();
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMONDNARROW:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMONDNARROWSMALL:
                this.moveTo(b.x, b.y);
                this.lineTo(b.x - e * Math.cos(a - f), b.y - e * Math.sin(a - f));
                this.lineTo(b.x - e * Math.cos(a), b.y - e * Math.sin(a));
                this.lineTo(b.x - e * Math.cos(a + f), b.y - e * Math.sin(a + f));
                this.closePath();
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLEDOUBLELINE:
                this.circle(b.x -
                1.6 * d * Math.cos(a), b.y - 1.6 * d * Math.sin(a), d / 2);
                this.fill();
                g = !1;
                this.moveTo(b.x - d / 2 * Math.cos(a) + d / 2 * Math.sin(a), b.y - d / 2 * Math.sin(a) - d / 2 * Math.cos(a));
                this.lineTo(b.x - d / 2 * Math.cos(a) - d / 2 * Math.sin(a), b.y - d / 2 * Math.sin(a) + d / 2 * Math.cos(a));
                this.moveTo(b.x - d * Math.cos(a) + d / 2 * Math.sin(a), b.y - d * Math.sin(a) - d / 2 * Math.cos(a));
                this.lineTo(b.x - d * Math.cos(a) - d / 2 * Math.sin(a), b.y - d * Math.sin(a) + d / 2 * Math.cos(a));
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DOUBLELINE:
                this.moveTo(b.x - d / 2 * Math.cos(a) + d / 2 * Math.sin(a),
                    b.y - d / 2 * Math.sin(a) - d / 2 * Math.cos(a));
                this.lineTo(b.x - d / 2 * Math.cos(a) - d / 2 * Math.sin(a), b.y - d / 2 * Math.sin(a) + d / 2 * Math.cos(a));
                this.moveTo(b.x - d * Math.cos(a) + d / 2 * Math.sin(a), b.y - d * Math.sin(a) - d / 2 * Math.cos(a));
                this.lineTo(b.x - d * Math.cos(a) - d / 2 * Math.sin(a), b.y - d * Math.sin(a) + d / 2 * Math.cos(a));
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAGONALLINE:
                this.moveTo(b.x - 2 * d * Math.cos(a) + d / 2 * Math.sin(a), b.y - 2 * d * Math.sin(a) - d / 2 * Math.cos(a));
                this.lineTo(b.x - d * Math.cos(a) - d / 2 * Math.sin(a), b.y - d * Math.sin(a) + d /
                2 * Math.cos(a));
                break;
            case JSG.graph.attr.FormatAttributes.ArrowStyle.SQUARE:
            case JSG.graph.attr.FormatAttributes.ArrowStyle.SQUARESMALL:
                this.moveTo(b.x - d * Math.cos(a) + d / 2 * Math.sin(a), b.y - d * Math.sin(a) - d / 2 * Math.cos(a)), this.lineTo(b.x - d * Math.cos(a) - d / 2 * Math.sin(a), b.y - d * Math.sin(a) + d / 2 * Math.cos(a)), this.lineTo(b.x - d / 2 * Math.sin(a), b.y + d / 2 * Math.cos(a)), this.lineTo(b.x + d / 2 * Math.sin(a), b.y - d / 2 * Math.cos(a)), this.closePath()
        }
        g && this._fillStyle !== JSG.graph.attr.FormatAttributes.FillStyle.NONE && this.fill();
        this.stroke();
        return d
    }
};
JSG.ui.graphics.Graphics.prototype.getArrowWidthByType = function (a) {
    switch (a) {
        case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLEDSMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWSMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWNARROWFILLEDSMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWHALFFILLEDSMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWDOUBLEFILLEDSMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWDOUBLESMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSEFILLEDSMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSESMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWREVERSENARROWSMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.CIRCLESMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMONDSMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.DIAMONDNARROWSMALL:
        case JSG.graph.attr.FormatAttributes.ArrowStyle.SQUARESMALL:
            return this._cs.metricToLogX(175)
    }
    return this._cs.metricToLogX(250)
};
JSG.ui.graphics.Graphics.prototype.setLineWidth = function (a) {
    var b = this._cs.metricToLogX(a);
    b !== this._context2D.lineWidth && (this._context2D.lineWidth = b);
    this._lineWidth = a
};
JSG.ui.graphics.Graphics.prototype.setLineCorner = function (a) {
    this._lineCorner = a
};
JSG.ui.graphics.Graphics.prototype.setLineArrowStart = function (a) {
    this._lineArrowStart = a
};
JSG.ui.graphics.Graphics.prototype.setLineArrowEnd = function (a) {
    this._lineArrowEnd = a
};
JSG.ui.graphics.Graphics.prototype.setShadow = function (a, b, c, d, e) {
    this._context2D.shadowColor = a;
    this._context2D.shadowOffsetX = this._cs.metricToLogX(b);
    this._context2D.shadowOffsetY = this._cs.metricToLogX(c);
    this._context2D.shadowBlur = d
};
JSG.ui.graphics.Graphics.prototype.resetShadow = function () {
    this._context2D.shadowOffsetX = 0;
    this._context2D.shadowOffsetY = 0;
    this._context2D.shadowBlur = 0;
    this._context2D.shadowColor = "#000000"
};
JSG.ui.graphics.Graphics.prototype.setPattern = function (a, b, c) {
    JSG.imagePool.add(b);
    this._pattern = b;
    this._bounds = a;
    this._patternStyle = c
};
JSG.ui.graphics.Graphics.prototype.setGradientLinear = function (a, b, c, d) {
    if (this.isContextDefined()) {
        a = this.evaluateLinearGradientVector(a, d);
        a = this.createLinearGradient(a[0].x, a[0].y, a[1].x, a[1].y);
        try {
            a.addColorStop(0, b), a.addColorStop(1, c), this._context2D.fillStyle = a
        } catch (e) {
            this._context2D.fillStyle = "#FFFFFF"
        }
    }
};
JSG.ui.graphics.Graphics.prototype.evaluateLinearGradientVector = function (a, b) {
    var c = a.getPoints(), d = [new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0)];
    b = Math.round(b);
    b %= 360;
    if (90 === b)d[0].set(c[0].x, c[0].y), d[1].set(c[3].x, c[3].y); else if (0 === b)d[0].set(c[0].x, c[0].y), d[1].set(c[1].x, c[1].y); else if (180 === b)d[0].set(c[1].x, c[1].y), d[1].set(c[0].x, c[0].y); else if (270 === b)d[0].set(c[3].x, c[3].y), d[1].set(c[0].x, c[0].y); else {
        var e, f;
        0 <= b && 90 > b ? (e = c[0], f = c[2]) : 90 < b && 180 >= b ? (e = c[1], f = c[3]) : 180 <
        b && 270 >= b ? (e = c[2], f = c[0]) : 270 < b && (e = c[3], f = c[1]);
        var g = Math.tan(JSG.geometry.Utils.toRadians(b)), k = e, h = JSG.ptCache.get(e.x + 200, 0);
        h.y = g * h.x + (k.y - g * k.x);
        var m = Math.tan(JSG.geometry.Utils.toRadians(b + 90)), g = f;
        f = JSG.ptCache.get(f.x + 200, 0);
        f.y = m * f.x + (g.y - m * g.x);
        m = JSG.ptCache.get(0, 0);
        JSG.geometry.Utils.getIntersectionOfLines(k, h, g, f, m, !0) ? (d[0].set(e.x, e.y), d[1].set(m.x, m.y)) : (d[0].set(c[0].x, c[0].y), d[1].set(c[3].x, c[3].y));
        JSG.ptCache.release(h, f, m)
    }
    return d
};
JSG.ui.graphics.Graphics.prototype.createLinearGradient = function (a, b, c, d) {
    if (this.isContextDefined())return a = this.transformPoint(a, b, JSG.ptCache.get()), c = this.transformPoint(c, d, JSG.ptCache.get()), d = this._context2D.createLinearGradient(a.x, a.y, c.x, c.y), JSG.ptCache.release(a, c), d
};
JSG.ui.graphics.Graphics.prototype.setGradientRadial = function (a, b, c, d, e) {
    var f = d, g = e;
    50 > d && (f = 100 - d);
    50 > e && (g = 100 - e);
    d = 0 !== a.width ? d / 100 * a.width : 0;
    e = 0 !== a.height ? e / 100 * a.height : 0;
    a = this.createRadialGradient(a.x + d, a.y + e, 0, a.x + d, a.y + e, Math.max(a.width * f / 100, a.height * g / 100));
    try {
        a.addColorStop(0, b), a.addColorStop(1, c), this._context2D.fillStyle = a
    } catch (k) {
        this._context2D.fillStyle = "#FFFFFF"
    }
};
JSG.ui.graphics.Graphics.prototype.createRadialGradient = function (a, b, c, d, e, f) {
    if (this.isContextDefined())return a = this.transformPoint(a, b, JSG.ptCache.get()), d = this.transformPoint(d, e, JSG.ptCache.get()), c = this._context2D.createRadialGradient(a.x, a.y, c, d.x, d.y, f), JSG.ptCache.release(a, d), c
};
JSG.ui.graphics.Graphics.prototype.drawImage = function (a, b, c, d, e) {
    if (this.isContextDefined() && void 0 !== a) {
        if ("undefined" !== typeof a.naturalWidth && 0 === a.naturalWidth && (a = JSG.imagePool.get(JSG.commons.ImagePool.IMG_NOTAVAIL), void 0 === a || 0 === a.naturalWidth))return;
        b = this.transformPoint(b, c, JSG.ptCache.get());
        this._fillOperation || (b.x -= 0.5, b.y -= 0.5);
        (c = this.getRotation()) && d && e ? (this._context2D.translate(b.x, b.y), this._context2D.rotate(c), this._context2D.drawImage(a, 0, 0, d, e), this._context2D.rotate(-c),
            this._context2D.translate(-b.x, -b.y)) : void 0 === d ? this._context2D.drawImage(a, b.x, b.y) : this._context2D.drawImage(a, b.x, b.y, d, e);
        JSG.ptCache.release(b)
    }
};
JSG.ui.graphics.Graphics.prototype.drawRect = function (a) {
    this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.NONE && this.drawPolyline(a.getPoints(JSG.ui.graphics.Graphics.RECT_POINTS), !0)
};
JSG.ui.graphics.Graphics.prototype.fillRect = function (a) {
    var b = this._cs.deviceToLogX(1), c = this._cs.deviceToLogY(1);
    a.width += b;
    a.height += c;
    this.fillPolyline(a.getPoints(JSG.ui.graphics.Graphics.RECT_POINTS));
    a.width -= b;
    a.height -= c
};
JSG.ui.graphics.Graphics.prototype.fillText = function (a, b, c) {
    if (this._fontStyle & JSG.graph.attr.TextFormatAttributes.FontStyle.UNDERLINE) {
        var d = JSG.ptCache.get(0, 0), e = JSG.ptCache.get(0, 0), f = this.measureText(a).width, g = 0;
        switch (this._horizontalAlignment) {
            case JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT:
                d.x = b;
                e.x = b + f;
                break;
            case JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER:
                d.x = b - f / 2;
                e.x = b + f / 2 + 1;
                break;
            case JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT:
                d.x = b - f, e.x = b
        }
        f = this._fontSize /
        72 * JSG.dpi.y * this._cs.getZoom();
        switch (this._context2D.textBaseline) {
            case "baseline":
            case "alphabetic":
            case "bottom":
                d.y = e.y = c + 2;
                break;
            case "middle":
                d.y = e.y = c + f / 2 + 2
        }
        14 < this._fontSize && (g = this._lineWidth, this._context2D.lineWidth = this._fontSize / 10, e.y = d.y += this._fontSize / 10);
        this.beginPath();
        d = this.transformPoint(d.x, d.y, d);
        this._context2D.moveTo(d.x, d.y);
        e = this.transformPoint(e.x, e.y, e);
        this._context2D.lineTo(e.x, e.y);
        this.stroke();
        JSG.ptCache.release(d, e);
        14 < this._fontSize && (this._context2D.lineWidth =
            g)
    }
    b = this.transformPoint(b, c, JSG.ptCache.get());
    (c = this.getRotation()) ? (this._context2D.translate(b.x, b.y), this._context2D.rotate(c), this._context2D.fillText(a, 0, 0), this._context2D.rotate(-c), this._context2D.translate(-b.x, -b.y)) : this._context2D.fillText(a, b.x, b.y);
    JSG.ptCache.release(b)
};
JSG.ui.graphics.Graphics.prototype.drawText = function (a, b, c) {
    b = this.transformPoint(b, c, JSG.ptCache.get());
    this._context2D.strokeText(a, b.x, b.y);
    JSG.ptCache.release(b)
};
JSG.ui.graphics.Graphics.prototype.measureText = function (a) {
    return this._context2D.measureText(a)
};
JSG.ui.graphics.Graphics.prototype.drawPolyline = function (a, b, c) {
    if (!(this._lineStyle === JSG.graph.attr.FormatAttributes.LineStyle.NONE || 2 > a.length)) {
        var d, e;
        if (d = this._cs.metricToLogX(this._lineCorner)) {
            e = [];
            var f = [], g = [];
            this.getRoundedPolygonBezier(f, g, e, a, b, d);
            this.drawBezier(f, e, g, b, c);
            JSG.ptCache.releaseBulk()
        } else if (this._lineStyle === JSG.graph.attr.FormatAttributes.LineStyle.SOLID || this._context2D.setLineDash) {
            this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.SOLID && this._context2D.setLineDash &&
            (d = Math.max(this._context2D.lineWidth, 1), d = this.getDashPattern(d, 5 * d, 3 * d, 2 * d), this._context2D.setLineDash(d));
            this.beginPath();
            this.moveTo(a[0].x, a[0].y);
            d = 1;
            for (e = a.length; d < e; d++)this.lineTo(a[d].x, a[d].y);
            b && this.closePath();
            this.stroke();
            this._context2D.setLineDash && this._context2D.setLineDash([])
        } else {
            d = 1;
            for (e = a.length; d < e; d++)this.drawLine(a[d - 1], a[d]);
            b && this.drawLine(a[d - 1], a[0])
        }
        b || (this._context2D.setLineDash && this._context2D.setLineDash([]), b = this.drawArrow(a[1], a[0], this._lineArrowStart),
            d = this.drawArrow(a[a.length - 2], a[a.length - 1], this._lineArrowEnd), this._updateRenderContextBBox(c, "startArrow", a[0], b), this._updateRenderContextBBox(c, "endArrow", a[a.length - 1], d))
    }
};
JSG.ui.graphics.Graphics.prototype._updateRenderContextBBox = function (a, b, c, d) {
    if (void 0 !== a && void 0 !== d) {
        var e = a[b], e = void 0 !== e ? e : new JSG.geometry.BoundingBox(0, 0);
        e.reset();
        e.setSize(d, d);
        e.setTopLeft(c.x - d / 2, c.y);
        a[b] = e
    }
};
JSG.ui.graphics.Graphics.prototype.getRoundedPolygonBezier = function (a, b, c, d, e, f) {
    e || (b.push(d[0]), c.push(d[0]));
    var g, k;
    g = 1;
    for (k = e ? d.length + 1 : d.length; g < k; g++)if (g < k - 1 || e) {
        var h, m, l;
        g === d.length ? (h = d[1], m = d[d.length - 1], l = d[0]) : (h = g === d.length - 1 ? d[0] : d[g + 1], m = d[g - 1], l = d[g]);
        var p = JSG.geometry.Utils.getLineLength(l, m) / 2, n = JSG.geometry.Utils.getLineLength(l, h) / 2, p = Math.min(2 * f, Math.min(p, n));
        m = Math.atan2(l.y - m.y, l.x - m.x);
        p = p / 2 / Math.sin(Math.PI / 4);
        n = Math.sin(m) * p;
        m = Math.cos(m) * p;
        (!e || 1 < g) && a.push(JSG.ptCache.get(l.x -
        m, l.y - n, !0));
        c.length && b.push(c[c.length - 1]);
        c.push(JSG.ptCache.get(l.x - m, l.y - n, !0));
        a.push(JSG.ptCache.get(l.x - 0.45 * m, l.y - 0.45 * n, !0));
        m = Math.atan2(h.y - l.y, h.x - l.x);
        n = Math.sin(m) * p;
        m = Math.cos(m) * p;
        b.push(JSG.ptCache.get(l.x + 0.45 * m, l.y + 0.45 * n, !0));
        c.push(JSG.ptCache.get(l.x + m, l.y + n, !0));
        e && g === k - 1 && (JSG.Arrays.insertAt(b, 0, c[c.length - 1]), a.push(c[0]))
    } else a.push(d[g]), b.push(c[c.length - 1]), c.push(d[g]), a.push(d[g])
};
JSG.ui.graphics.Graphics.prototype.fillPolyline = function (a) {
    if (0 !== a.length) {
        this._fillOperation = !0;
        var b = this._cs.metricToLogX(this._lineCorner);
        if (b) {
            var c = [], d = [], e = [];
            this.getRoundedPolygonBezier(d, e, c, a, !0, b);
            this.fillBezier(d, c, e);
            JSG.ptCache.releaseBulk()
        } else {
            this.beginPath();
            this.moveTo(a[0].x, a[0].y);
            b = 1;
            for (c = a.length; b < c; b++)this.lineTo(a[b].x, a[b].y);
            this.closePath();
            this.fill(void 0, a, void 0)
        }
        this._fillOperation = !1
    }
};
JSG.ui.graphics.Graphics.prototype.fillWithPattern = function (a, b, c) {
    function d(a, b, c, d) {
        if (f._context2D.shadowOffsetX || f._context2D.shadowOffsetY)f._context2D.fillStyle = f._fillColor, f._context2D.fill(), f._context2D.shadowOffsetX = 0, f._context2D.shadowOffsetY = 0, f._context2D.shadowBlur = 0;
        f.save();
        f.setClipArea(b, c, d);
        f.translate(g.x, g.y);
        f._patternStyle === JSG.graph.attr.FormatAttributes.PatternStyle.STRETCH ? f.drawImage(a, -f._bounds.width / 2, -f._bounds.height / 2, f._bounds.width, f._bounds.height) : f._patternStyle ===
        JSG.graph.attr.FormatAttributes.PatternStyle.STRETCHPROPORTIONAL ? (b = 1, c = 0 !== f._bounds.width ? f._bounds.height / f._bounds.width : f._bounds.height, a.naturalWidth && (b = a.naturalHeight / a.naturalWidth), f._bounds.width && b > c ? f.drawImage(a, -f._bounds.height / b / 2, -f._bounds.height / 2, f._bounds.height / b, f._bounds.height) : f.drawImage(a, -f._bounds.width / 2, -f._bounds.width * b / 2, f._bounds.width, f._bounds.width * b)) : f.drawImage(a, -f._cs.deviceToLogX(a.naturalWidth / 2) * f._cs.getZoom(), -f._cs.deviceToLogY(a.naturalHeight /
        2) * f._cs.getZoom(), f._cs.deviceToLogX(a.naturalWidth) * f._cs.getZoom(), f._cs.deviceToLogY(a.naturalHeight) * f._cs.getZoom());
        f.restore()
    }

    function e(a, b, c, d) {
        b = f.transformPoint(0, 0, JSG.ptCache.get());
        f._context2D.translate(b.x, b.y);
        k && f._context2D.rotate(k);
        f._patternMap.contains(a.src) ? c = f._patternMap.get(a.src) : (1 === f._cs.getZoom() ? c = f._context2D.createPattern(a, "repeat") : (c = document.createElement("canvas"), c.width = a.naturalWidth * f._cs.getZoom(), c.height = a.naturalHeight * f._cs.getZoom(), c.getContext("2d").drawImage(a,
            0, 0, c.width, c.height), c = f._context2D.createPattern(c, "repeat")), f._patternMap.put(a.src, c));
        void 0 !== c && (f._context2D.fillStyle = c, f._context2D.fill());
        k && f._context2D.rotate(-k);
        f._context2D.translate(-b.x, -b.y);
        JSG.ptCache.release(b)
    }

    var f = this, g, k = this.getRotation();
    if (b) {
        var h = this.getImage(this._pattern);
        void 0 !== h && (g = this._bounds.getCenter(JSG.ptCache.get()), this._patternStyle === JSG.graph.attr.FormatAttributes.PatternStyle.REPEAT ? e(h, a, b, c) : d(h, a, b, c), JSG.ptCache.release(g))
    }
};
JSG.ui.graphics.Graphics.prototype.getImage = function (a) {
    a = JSG.imagePool.get(a);
    if (void 0 === a || !1 === a.complete)if (a = JSG.imagePool.get(JSG.commons.ImagePool.IMG_NOTAVAIL), !a)return;
    "undefined" !== typeof a.naturalWidth && 0 === a.naturalWidth && (a = JSG.imagePool.get(JSG.commons.ImagePool.IMG_NOTAVAIL));
    return a
};
JSG.ui.graphics.Graphics.prototype.getRectFromPoints = function (a, b) {
    if (4 === a.length && a[0].x === a[3].x && a[1].x === a[2].x && a[0].y === a[1].y && a[2].y === a[3].y)return (b || new JSG.geometry.Rectangle).set(a[0].x, a[0].y, a[1].x - a[0].x, a[3].y - a[0].y)
};
JSG.ui.graphics.Graphics.prototype.drawBezier = function (a, b, c, d, e) {
    function f(a, b, c, d, e) {
        var f = 1 - a;
        return f * f * f * b + 3 * f * f * a * c + 3 * f * a * a * d + a * a * a * e
    }

    if (this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.NONE && !(2 > b.length)) {
        this.beginPath();
        var g, k, h, m;
        if (this._lineStyle === JSG.graph.attr.FormatAttributes.LineStyle.SOLID || this._context2D.setLineDash) {
            this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.SOLID && this._context2D.setLineDash && (g = Math.max(this._context2D.lineWidth, 1), m = this.getDashPattern(g,
                5 * g, 3 * g, 2 * g), this._context2D.setLineDash(m));
            this.moveTo(b[0].x, b[0].y);
            g = 1;
            for (k = b.length; g < k; g++)this.bezierCurveTo(a[g - 1].x, a[g - 1].y, c[g].x, c[g].y, b[g].x, b[g].y);
            d && (this.bezierCurveTo(a[b.length - 1].x, a[b.length - 1].y, c[0].x, c[0].y, b[0].x, b[0].y), this.closePath())
        } else {
            g = Math.max(this._lineWidth, this._cs.deviceToLogX(1));
            m = this.getDashPattern(g, 5 * g, 3 * g, 2 * g);
            k = d ? b.length : b.length - 1;
            var l = b[0].copy(), p = l.copy(), n = l.copy(), q = JSG.ptCache.get(0, 0), r = !1, t = !1, u = 0, w = m[u];
            this.moveTo(l.x, l.y);
            for (g = 0; g <
            k; g++)for (h = 0; 1 > h; h += 1 / 150) {
                g === b.length - 1 ? (q.x = f(h, b[g].x, a[g].x, c[0].x, b[0].x), q.y = f(h, b[g].y, a[g].y, c[0].y, b[0].y)) : (q.x = f(h, b[g].x, a[g].x, c[g + 1].x, b[g + 1].x), q.y = f(h, b[g].y, a[g].y, c[g + 1].y, b[g + 1].y));
                var v = JSG.geometry.Utils.getLineLength(l, q);
                v > w / 2 && !t && (n = q.copy(), t = !0);
                v > w && (r ? (p.x = q.x, p.y = q.y, this.moveTo(q.x, q.y), r = !1) : (this.bezierCurveTo(n.x, n.y, n.x, n.y, q.x, q.y), r = !0), t = !1, l.x = q.x, l.y = q.y, u = (u + 1) % m.length, w = m[u])
            }
            JSG.ptCache.release(q)
        }
        this.stroke();
        d || (this._context2D.setLineDash && this._context2D.setLineDash([]),
            a = this.drawArrow(a[0], b[0], this._lineArrowStart), c = this.drawArrow(c[c.length - 1], b[b.length - 1], this._lineArrowEnd), this._updateRenderContextBBox(e, "startArrow", b[0], a), this._updateRenderContextBBox(e, "endArrow", b[b.length - 1], c))
    }
};
JSG.ui.graphics.Graphics.prototype.getDashPattern = function (a, b, c, d) {
    var e = [b, c];
    switch (this._lineStyle) {
        case JSG.graph.attr.FormatAttributes.LineStyle.DASH:
            e = [b, c];
            break;
        case JSG.graph.attr.FormatAttributes.LineStyle.DASHDOT:
            e = [b, c, a, c];
            break;
        case JSG.graph.attr.FormatAttributes.LineStyle.DASHDOTDOT:
            e = [a, c, b, c, a, c];
            break;
        case JSG.graph.attr.FormatAttributes.LineStyle.DOT:
            e = [a, d]
    }
    return e
};
JSG.ui.graphics.Graphics.prototype.fillBezier = function (a, b, c) {
    if (this._fillStyle !== JSG.graph.attr.FormatAttributes.FillStyle.NONE && !(2 > b.length)) {
        var d, e;
        this.beginPath();
        this.moveTo(b[0].x, b[0].y);
        d = 1;
        for (e = b.length; d < e; d++)this.bezierCurveTo(a[d - 1].x, a[d - 1].y, c[d].x, c[d].y, b[d].x, b[d].y);
        this.bezierCurveTo(a[b.length - 1].x, a[b.length - 1].y, c[0].x, c[0].y, b[0].x, b[0].y);
        this.closePath();
        this.fill(a, b, c)
    }
};
JSG.ui.graphics.Graphics.prototype.fillEllipse = function (a) {
    if (0 !== a.width && 0 !== a.height) {
        var b = 0.5522848 * (a.width / 2), c = 0.5522848 * (a.height / 2), d = a.x + a.width, e = a.y + a.height, f = a.x + a.width / 2, g = a.y + a.height / 2;
        this.beginPath();
        this.moveTo(a.x, g);
        this.bezierCurveTo(a.x, g - c, f - b, a.y, f, a.y);
        this.bezierCurveTo(f + b, a.y, d, g - c, d, g);
        this.bezierCurveTo(d, g + c, f + b, e, f, e);
        this.bezierCurveTo(f - b, e, a.x, g + c, a.x, g);
        this.closePath();
        this.fill()
    }
};
JSG.ui.graphics.Graphics.prototype.moveTo = function (a, b) {
    var c = this.transformPoint(a, b, JSG.ptCache.get());
    this._context2D.moveTo(c.x, c.y);
    JSG.ptCache.release(c)
};
JSG.ui.graphics.Graphics.prototype.lineTo = function (a, b) {
    var c = this.transformPoint(a, b, JSG.ptCache.get());
    this._context2D.lineTo(c.x, c.y);
    JSG.ptCache.release(c)
};
JSG.ui.graphics.Graphics.prototype.bezierCurveTo = function (a, b, c, d, e, f) {
    e = this.transformPoint(e, f, JSG.ptCache.get());
    a = this.transformPoint(a, b, JSG.ptCache.get());
    c = this.transformPoint(c, d, JSG.ptCache.get());
    this._context2D.bezierCurveTo(a.x, a.y, c.x, c.y, e.x, e.y);
    JSG.ptCache.release(e, a, c)
};
JSG.ui.graphics.Graphics.prototype.arc = function (a, b, c, d, e, f) {
    a = this.transformPoint(a, b, JSG.ptCache.get());
    this._context2D.arc(a.x, a.y, c, d, e, f);
    JSG.ptCache.release(a)
};
JSG.ui.graphics.Graphics.prototype.circle = function (a, b, c) {
    this.arc(a, b, c, 0, 2 * Math.PI, !0)
};
JSG.ui.graphics.Graphics.prototype.beginPath = function () {
    this._context2D.beginPath()
};
JSG.ui.graphics.Graphics.prototype.closePath = function () {
    this._context2D.closePath()
};
JSG.ui.graphics.Graphics.prototype.stroke = function () {
    this._context2D.stroke()
};
JSG.ui.graphics.Graphics.prototype.fill = function (a, b, c) {
    b && this._fillStyle === JSG.graph.attr.FormatAttributes.FillStyle.PATTERN ? this.fillWithPattern(a, b, c) : this._context2D.fill()
};
JSG.ui.graphics.Graphics.prototype.startGroup = function () {
};
JSG.ui.graphics.Graphics.prototype.endGroup = function () {
};
JSG.ui.graphics.Graphics.prototype.drawMarker = function (a, b) {
    var c, d;
    JSG.touchDevice ? b ? (c = this._lineWidth, d = a.copy(), d.expandBy(this._cs.metricToLogXNoZoom(1E3)), this.setTransparency(20), this.fillEllipse(d), d = a.copy(), d.reduceBy(this._cs.metricToLogXNoZoom(50)), this.setTransparency(100), this.fillEllipse(d), d = a.copy(), d.expandBy(this._cs.metricToLogXNoZoom(950)), this.setLineWidth(50), this.drawEllipse(d), this.setLineWidth(c)) : (c = this._fillColor, d = a.copy(), this.setFillColor("#FFFFFF"), this.fillEllipse(a),
        this.setFillColor(c), d.reduceBy(this._cs.metricToLogXNoZoom(50)), this.fillEllipse(d), this.drawEllipse(a)) : (this.fillEllipse(a), d = a.copy(), d.expandBy(this._cs.metricToLogXNoZoom(50)), this.drawEllipse(d))
};
JSG.ui.graphics.Graphics.prototype.multiply = function (a) {
    var b = this.m[1] * a.m[0] + this.m[3] * a.m[1], c = this.m[0] * a.m[2] + this.m[2] * a.m[3], d = this.m[1] * a.m[2] + this.m[3] * a.m[3], e = this.m[0] * a.m[4] + this.m[2] * a.m[5] + this.m[4], f = this.m[1] * a.m[4] + this.m[3] * a.m[5] + this.m[5];
    this.m[0] = this.m[0] * a.m[0] + this.m[2] * a.m[1];
    this.m[1] = b;
    this.m[2] = c;
    this.m[3] = d;
    this.m[4] = e;
    this.m[5] = f
};
JSG.ui.graphics.Graphics.prototype.invert = function (a) {
    var b = [1, 0, 0, 1, 0, 0], c = 1 / (a[0] * a[3] - a[1] * a[2]);
    b[0] = a[3] * c;
    b[1] = -a[1] * c;
    b[2] = -a[2] * c;
    b[3] = a[0] * c;
    b[4] = c * (a[2] * a[5] - a[3] * a[4]);
    b[5] = c * (a[1] * a[4] - a[0] * a[5]);
    return b
};
JSG.ui.graphics.Graphics.prototype.rotateM = function (a) {
    var b = Math.cos(a);
    a = Math.sin(a);
    var c = this.m[1] * b + this.m[3] * a, d = this.m[0] * -a + this.m[2] * b, e = this.m[1] * -a + this.m[3] * b;
    this.m[0] = this.m[0] * b + this.m[2] * a;
    this.m[1] = c;
    this.m[2] = d;
    this.m[3] = e
};
JSG.ui.graphics.Graphics.prototype.translateM = function (a, b) {
    this.m[4] += this.m[0] * a + this.m[2] * b;
    this.m[5] += this.m[1] * a + this.m[3] * b
};
JSG.ui.graphics.Graphics.prototype.scaleM = function (a, b) {
    this.m[0] *= a;
    this.m[1] *= a;
    this.m[2] *= b;
    this.m[3] *= b
};
JSG.ui.graphics.Graphics.prototype.transformPoint = function (a, b, c) {
    c = c || new JSG.geometry.Point(0, 0);
    var d = a * this.m[0] + b * this.m[2] + this.m[4];
    a = a * this.m[1] + b * this.m[3] + this.m[5];
    this.antialias ? (c.x = d, c.y = a) : this._fillOperation ? (c.x = JSG.geometry.Utils.roundUp(d), c.y = JSG.geometry.Utils.roundUp(a)) : (c.x = JSG.geometry.Utils.roundUp(d) + 0.5, c.y = JSG.geometry.Utils.roundUp(a) + 0.5);
    return c
};
JSG.ui.graphics.Graphics.prototype.getRotation = function (a, b) {
    return Math.atan2(this.m[3], -this.m[1]) - Math.PI / 2
};
JSG.namespace("JSG.ui.graphics");
JSG.ui.graphics.ScalableGraphics = function (a, b) {
    JSG.ui.graphics.ScalableGraphics._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.ui.graphics.ScalableGraphics, JSG.ui.graphics.Graphics);
JSG.ui.graphics.ScalableGraphics.prototype.drawImage = function (a, b, c, d, e) {
    void 0 === d ? JSG.ui.graphics.ScalableGraphics._super.drawImage.call(this, a, this._cs.logToDeviceX(b), this._cs.logToDeviceY(c)) : JSG.ui.graphics.ScalableGraphics._super.drawImage.call(this, a, this._cs.logToDeviceX(b), this._cs.logToDeviceY(c), this._cs.logToDeviceX(d), this._cs.logToDeviceY(e))
};
JSG.ui.graphics.ScalableGraphics.prototype.fillText = function (a, b, c) {
    JSG.ui.graphics.ScalableGraphics._super.fillText.call(this, a, this._cs.logToDeviceX(b), this._cs.logToDeviceY(c))
};
JSG.ui.graphics.ScalableGraphics.prototype.drawText = function (a, b, c) {
    JSG.ui.graphics.ScalableGraphics._super.drawText.call(this, a, this._cs.logToDeviceX(b), this._cs.logToDeviceY(c))
};
JSG.ui.graphics.ScalableGraphics.prototype.moveTo = function (a, b) {
    JSG.ui.graphics.ScalableGraphics._super.moveTo.call(this, this._cs.logToDeviceX(a), this._cs.logToDeviceY(b))
};
JSG.ui.graphics.ScalableGraphics.prototype.lineTo = function (a, b) {
    JSG.ui.graphics.ScalableGraphics._super.lineTo.call(this, this._cs.logToDeviceX(a), this._cs.logToDeviceY(b))
};
JSG.ui.graphics.ScalableGraphics.prototype.bezierCurveTo = function (a, b, c, d, e, f) {
    JSG.ui.graphics.ScalableGraphics._super.bezierCurveTo.call(this, this._cs.logToDeviceX(a), this._cs.logToDeviceY(b), this._cs.logToDeviceX(c), this._cs.logToDeviceY(d), this._cs.logToDeviceX(e), this._cs.logToDeviceY(f))
};
JSG.ui.graphics.ScalableGraphics.prototype.arc = function (a, b, c, d, e, f) {
    JSG.ui.graphics.ScalableGraphics._super.arc.call(this, this._cs.logToDeviceX(a), this._cs.logToDeviceY(b), this._cs.logToDeviceX(c), d, e, f)
};
JSG.ui.graphics.ScalableGraphics.prototype.translate = function (a, b) {
    JSG.ui.graphics.ScalableGraphics._super.translate.call(this, this._cs.logToDeviceX(a), this._cs.logToDeviceY(b))
};
JSG.ui.graphics.ScalableGraphics.prototype.scale = function (a, b) {
    JSG.ui.graphics.ScalableGraphics._super.scale.call(this, this._cs.logToDeviceX(a), this._cs.logToDeviceX(b))
};
JSG.ui.graphics.ScalableGraphics.prototype.setImageClip = function (a) {
    var b = JSG.rectCache.get();
    b.set(this._cs.logToDeviceX(a.x), this._cs.logToDeviceY(a.y), this._cs.logToDeviceX(a.width), this._cs.logToDeviceY(a.height));
    JSG.ui.graphics.ScalableGraphics._super.setImageClip.call(this, b);
    JSG.rectCache.release(b)
};
JSG.ui.graphics.ScalableGraphics.prototype.setShadow = function (a, b, c, d, e) {
    this.isContextDefined() && (this._context2D.shadowColor = a, this._context2D.shadowOffsetX = this._cs.logToDeviceX(b), this._context2D.shadowOffsetY = this._cs.logToDeviceY(c), this._context2D.shadowBlur = d)
};
JSG.ui.graphics.ScalableGraphics.prototype.createLinearGradient = function (a, b, c, d) {
    if (this.isContextDefined())return JSG.ui.graphics.ScalableGraphics._super.createLinearGradient.call(this, this._cs.logToDeviceX(a), this._cs.logToDeviceY(b), this._cs.logToDeviceX(c), this._cs.logToDeviceY(d))
};
JSG.ui.graphics.ScalableGraphics.prototype.createRadialGradient = function (a, b, c, d, e, f) {
    if (this.isContextDefined())return JSG.ui.graphics.ScalableGraphics._super.createRadialGradient.call(this, this._cs.logToDeviceX(a), this._cs.logToDeviceY(b), this._cs.logToDeviceX(c), this._cs.logToDeviceX(d), this._cs.logToDeviceY(e), this._cs.logToDeviceX(f))
};
JSG.ui.graphics.ScalableGraphics.prototype.setLineWidth = function (a) {
    if (this.isContextDefined()) {
        var b;
        b = a === JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE ? JSG.touchDevice ? 1 : 1.01 : Math.max(0.01, this._cs.logToDeviceX(a));
        b !== this._context2D.lineWidth && (this._context2D.lineWidth = b)
    }
    this._lineWidth = a
};
JSG.namespace("JSG.ui.graphics");
JSG.ui.graphics.SVGraphics = function (a, b) {
    this._cs = b;
    this._file = a;
    this._currentPath = "";
    this._id = 1;
    this._lineColor = "#FFFFFF";
    this._lineWidth = 1;
    this._patternFill = this._gradientFill = "";
    this._clip = void 0;
    this._transparency = 1;
    this._transform = "";
    this._baseline = "baseline"
};
JSG.extend(JSG.ui.graphics.SVGraphics, JSG.ui.graphics.ScalableGraphics);
JSG.ui.graphics.SVGraphics.prototype.setTransparency = function (a) {
    this._transparency = a / 100
};
JSG.ui.graphics.SVGraphics.prototype.setFillColor = function (a) {
    this._fillColor = a
};
JSG.ui.graphics.SVGraphics.prototype.setLineColor = function (a) {
    this._lineColor = a
};
JSG.ui.graphics.SVGraphics.prototype.setLineWidth = function (a) {
    this._lineWidth = a === JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE ? 1 : Math.max(0.01, this._cs.toSVGUnit(a))
};
JSG.ui.graphics.SVGraphics.prototype.save = function () {
};
JSG.ui.graphics.SVGraphics.prototype.restore = function () {
    this._clip = void 0
};
JSG.ui.graphics.SVGraphics.prototype.setShadow = function (a, b, c, d, e) {
    if (0 === b && 0 === c)this._shadow = void 0; else {
        this._shadow = "shadow" + this._id;
        this._file.writeStartElement("defs");
        this._file.writeStartElement("filter");
        this._file.writeAttributeString("id", this._shadow);
        this._file.writeAttributeString("filterUnits", "userSpaceOnUse");
        this._file.writeAttributeString("x", "-50");
        this._file.writeAttributeString("y", "-50");
        this._file.writeAttributeString("width", this._cs.toSVGUnit(e.width) + 100);
        this._file.writeAttributeString("height",
            this._cs.toSVGUnit(e.height) + 100);
        var f = a.replace(/^\s*#|\s*$/g, "");
        3 === f.length && (f = f.replace(/(.)/g, "$1$1"));
        a = parseInt(f.substr(0, 2), 16);
        e = parseInt(f.substr(2, 2), 16);
        f = parseInt(f.substr(4, 2), 16);
        this._file.writeStartElement("feColorMatrix");
        this._file.writeAttributeString("color-interpolation-filters", "sRGB");
        this._file.writeAttributeString("type", "matrix");
        this._file.writeAttributeString("result", "colored");
        this._file.writeAttributeString("values", "0 0 0 " + this.svgRound(a / 255) + " 0 0 0 0 " + this.svgRound(e /
        255) + " 0 0 0 0 " + this.svgRound(f / 255) + " 0 0 0 0 1 0");
        this._file.writeEndElement();
        this._file.writeStartElement("feGaussianBlur");
        this._file.writeAttributeString("in", "colored");
        this._file.writeAttributeString("result", "blur");
        this._file.writeAttributeString("stdDeviation", Math.min(2.3, Math.ceil(d / 3)));
        this._file.writeEndElement();
        this._file.writeStartElement("feOffset");
        this._file.writeAttributeString("in", "blur");
        this._file.writeAttributeString("result", "offsetBlur");
        this._file.writeAttributeString("dx",
            Math.ceil(this._cs.toSVGUnit(b)));
        this._file.writeAttributeString("dy", Math.ceil(this._cs.toSVGUnit(c)));
        this._file.writeEndElement();
        this._file.writeStartElement("feMerge");
        this._file.writeStartElement("feMergeNode");
        this._file.writeAttributeString("in", "offsetBlur");
        this._file.writeEndElement();
        this._file.writeStartElement("feMergeNode");
        this._file.writeAttributeString("in", "SourceGraphic");
        this._file.writeEndElement();
        this._file.writeEndElement();
        this._file.writeEndElement();
        this._file.writeEndElement();
        this._id++
    }
};
JSG.ui.graphics.SVGraphics.prototype.resetShadow = function () {
    this._shadow = void 0
};
JSG.ui.graphics.SVGraphics.prototype.setGradientRadial = function (a, b, c, d, e) {
    this._gradientFill = "gradient" + this._id;
    var f = d, g = e;
    50 > d && (f = 100 - d);
    50 > e && (g = 100 - e);
    this._file.writeStartElement("defs");
    this._file.writeStartElement("radialGradient");
    this._file.writeAttributeString("id", this._gradientFill);
    this._file.writeAttributeString("gradientUnits", "userSpaceOnUse");
    this._file.writeAttributeString("cx", this._cs.toSVGUnit(a.x + d / 100 * a.width));
    this._file.writeAttributeString("cy", this._cs.toSVGUnit(a.y +
    e / 100 * a.height));
    this._file.writeAttributeString("r", this._cs.toSVGUnit(Math.max(a.width * f / 100, a.height * g / 100)));
    this._file.writeAttributeString("fx", this._cs.toSVGUnit(a.x + d / 100 * a.width));
    this._file.writeAttributeString("fy", this._cs.toSVGUnit(a.y + e / 100 * a.height));
    this._file.writeStartElement("stop");
    this._file.writeAttributeString("offset", "0%");
    this._file.writeAttributeString("stop-color", b);
    this._file.writeEndElement();
    this._file.writeStartElement("stop");
    this._file.writeAttributeString("offset",
        "100%");
    this._file.writeAttributeString("stop-color", c);
    this._file.writeEndElement();
    this._file.writeEndElement();
    this._file.writeEndElement();
    this._id++
};
JSG.ui.graphics.SVGraphics.prototype.setGradientLinear = function (a, b, c, d) {
    this._gradientFill = "gradient" + this._id;
    a = this.evaluateLinearGradientVector(a, d);
    this._file.writeStartElement("defs");
    this._file.writeStartElement("linearGradient");
    this._file.writeAttributeString("id", this._gradientFill);
    this._file.writeAttributeString("gradientUnits", "userSpaceOnUse");
    this._file.writeAttributeString("x1", this._cs.toSVGUnit(a[0].x));
    this._file.writeAttributeString("y1", this._cs.toSVGUnit(a[0].y));
    this._file.writeAttributeString("x2",
        this._cs.toSVGUnit(a[1].x));
    this._file.writeAttributeString("y2", this._cs.toSVGUnit(a[1].y));
    this._file.writeStartElement("stop");
    this._file.writeAttributeString("offset", "0%");
    this._file.writeAttributeString("stop-color", b);
    this._file.writeEndElement();
    this._file.writeStartElement("stop");
    this._file.writeAttributeString("offset", "100%");
    this._file.writeAttributeString("stop-color", c);
    this._file.writeEndElement();
    this._file.writeEndElement();
    this._file.writeEndElement();
    this._id++
};
JSG.ui.graphics.SVGraphics.prototype.setPattern = function (a, b, c) {
    this._patternFill = "pattern" + this._id;
    this._patternStyle = c;
    JSG.imagePool.add(b);
    var d = this.getImage(b);
    if (void 0 !== d) {
        this._file.writeStartElement("defs");
        this._file.writeStartElement("pattern");
        this._file.writeAttributeString("id", this._patternFill);
        this._file.writeAttributeString("patternUnits", "userSpaceOnUse");
        switch (c) {
            case JSG.graph.attr.FormatAttributes.PatternStyle.REPEAT:
                this._file.writeAttributeString("x", this._cs.toSVGUnit(a.x));
                this._file.writeAttributeString("y", this._cs.toSVGUnit(a.y));
                this._file.writeAttributeString("width", d.naturalWidth);
                this._file.writeAttributeString("height", d.naturalHeight);
                break;
            case JSG.graph.attr.FormatAttributes.PatternStyle.CENTER:
                this._file.writeAttributeString("x", 0);
                this._file.writeAttributeString("y", 0);
                this._file.writeAttributeString("width", this._cs.toSVGUnit(a.width));
                this._file.writeAttributeString("height", this._cs.toSVGUnit(a.height));
                break;
            case JSG.graph.attr.FormatAttributes.PatternStyle.STRETCH:
                this._file.writeAttributeString("x",
                    this._cs.toSVGUnit(a.x));
                this._file.writeAttributeString("y", this._cs.toSVGUnit(a.y));
                this._file.writeAttributeString("width", this._cs.toSVGUnit(a.width));
                this._file.writeAttributeString("height", this._cs.toSVGUnit(a.height));
                break;
            case JSG.graph.attr.FormatAttributes.PatternStyle.STRETCHPROPORTIONAL:
                this._file.writeAttributeString("x", this._cs.toSVGUnit(a.x)), this._file.writeAttributeString("y", this._cs.toSVGUnit(a.y)), this._file.writeAttributeString("width", this._cs.toSVGUnit(a.width)), this._file.writeAttributeString("height",
                    this._cs.toSVGUnit(a.height))
        }
        this._file.writeStartElement("image");
        if (0 === b.indexOf("http")) {
            var e = b.replace(/&/g, "\x26amp;");
            this._file.writeAttributeString("xlink:href", e)
        } else this._file.writeAttributeString("xlink:href", "../../../" + b);
        switch (c) {
            case JSG.graph.attr.FormatAttributes.PatternStyle.REPEAT:
                this._file.writeAttributeString("x", 0);
                this._file.writeAttributeString("y", 0);
                this._file.writeAttributeString("width", d.naturalWidth);
                this._file.writeAttributeString("height", d.naturalHeight);
                break;
            case JSG.graph.attr.FormatAttributes.PatternStyle.STRETCH:
                this._file.writeAttributeString("x", 0);
                this._file.writeAttributeString("y", 0);
                this._file.writeAttributeString("width", this._cs.toSVGUnit(a.width));
                this._file.writeAttributeString("height", this._cs.toSVGUnit(a.height));
                this._file.writeAttributeString("preserveAspectRatio", "none");
                break;
            case JSG.graph.attr.FormatAttributes.PatternStyle.STRETCHPROPORTIONAL:
                this._file.writeAttributeString("x", 0);
                this._file.writeAttributeString("y", 0);
                this._file.writeAttributeString("width",
                    this._cs.toSVGUnit(a.width));
                this._file.writeAttributeString("height", this._cs.toSVGUnit(a.height));
                this._file.writeAttributeString("preserveAspectRatio", "xMidYMid");
                break;
            case JSG.graph.attr.FormatAttributes.PatternStyle.CENTER:
                this._file.writeAttributeString("x", this._cs.toSVGUnit(a.x + a.width / 2) - d.naturalWidth / 2), this._file.writeAttributeString("y", this._cs.toSVGUnit(a.y + a.height / 2) - d.naturalHeight / 2), this._file.writeAttributeString("width", d.naturalWidth), this._file.writeAttributeString("height",
                    d.naturalHeight)
        }
        this._file.writeEndElement();
        this._file.writeEndElement();
        this._file.writeEndElement();
        this._id++;
        this._pattern = b;
        this._bounds = a;
        this._patternStyle = c
    }
};
JSG.ui.graphics.SVGraphics.prototype.getFillAttribute = function () {
    var a = "";
    switch (this._fillStyle) {
        case JSG.graph.attr.FormatAttributes.FillStyle.NONE:
            a = "fill:none";
            break;
        case JSG.graph.attr.FormatAttributes.FillStyle.SOLID:
            a = this._fillColor;
            break;
        case JSG.graph.attr.FormatAttributes.FillStyle.GRADIENT:
            a = "url(#" + this._gradientFill + ")";
            break;
        case JSG.graph.attr.FormatAttributes.FillStyle.PATTERN:
            a = "url(#" + this._patternFill + ")"
    }
    return a
};
JSG.ui.graphics.SVGraphics.prototype.fillRect = function (a) {
    this._file.writeStartElement("rect");
    this._file.writeAttributeString("x", this._cs.toSVGUnit(a.x));
    this._file.writeAttributeString("y", this._cs.toSVGUnit(a.y));
    this._file.writeAttributeString("width", this._cs.toSVGUnit(a.width));
    this._file.writeAttributeString("height", this._cs.toSVGUnit(a.height));
    a = this.getFillAttribute();
    this._file.writeAttributeString("style", "stroke:none;fill:" + a + ";fill-opacity:" + this._transparency);
    this._file.writeEndElement()
};
JSG.ui.graphics.SVGraphics.prototype.drawRect = function (a) {
    this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.NONE && (this._file.writeStartElement("rect"), this._file.writeAttributeString("x", this._cs.toSVGUnit(a.x)), this._file.writeAttributeString("y", this._cs.toSVGUnit(a.y)), this._file.writeAttributeString("width", this._cs.toSVGUnit(a.width)), this._file.writeAttributeString("height", this._cs.toSVGUnit(a.height)), a = this.getStrokeDash(), void 0 === a ? this._file.writeAttributeString("style", "stroke:" +
    this._lineColor + ";stroke-width:" + this._lineWidth + ";fill:none") : this._file.writeAttributeString("style", "stroke:" + this._lineColor + ";stroke-width:" + this._lineWidth + ";stroke-dasharray:" + a + ";fill:none"), this._file.writeEndElement())
};
JSG.ui.graphics.SVGraphics.prototype.fillPolyline = function (a) {
    function b(a, b) {
        c._file.writeStartElement("polygon");
        var d = "", e, f;
        e = 0;
        for (f = a.length; e < f; e++)d += c._cs.toSVGUnit(a[e].x), d += ",", d += c._cs.toSVGUnit(a[e].y), e < f - 1 && (d += ",");
        c._file.writeAttributeString("points", d);
        c._file.writeAttributeString("style", "stroke:none;fill:" + b + ";fill-opacity:" + c._transparency);
        void 0 !== c._shadow && c._file.writeAttributeString("filter", "url(#" + c._shadow + ")");
        c._file.writeEndElement()
    }

    var c = this;
    if (0 !== a.length) {
        var d =
            this._cs.metricToLogX(this._lineCorner), e = this.getFillAttribute();
        if (d) {
            var e = [], f = [], g = [];
            this.getRoundedPolygonBezier(f, g, e, a, !0, d);
            this.fillBezier(f, e, g)
        } else this._fillStyle === JSG.graph.attr.FormatAttributes.FillStyle.PATTERN && (this._patternStyle === JSG.graph.attr.FormatAttributes.PatternStyle.CENTER && "#FFFFFF" !== this._fillColor) && b(a, this._fillColor), b(a, e)
    }
};
JSG.ui.graphics.SVGraphics.prototype.drawPolyline = function (a, b) {
    if (this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.NONE && 0 !== a.length) {
        var c = this._cs.metricToLogX(this._lineCorner);
        if (c) {
            var d = [], e = [], f = [];
            this.getRoundedPolygonBezier(e, f, d, a, b, c);
            this.drawBezier(e, d, f, b)
        } else {
            b ? this._file.writeStartElement("polygon") : this._file.writeStartElement("polyline");
            c = "";
            d = 0;
            for (e = a.length; d < e; d++)c += this._cs.toSVGUnit(a[d].x), c += ",", c += this._cs.toSVGUnit(a[d].y), d < e - 1 && (c += ",");
            d = this.getStrokeDash();
            this._file.writeAttributeString("points", c);
            void 0 === d ? this._file.writeAttributeString("style", "stroke:" + this._lineColor + ";stroke-width:" + this._lineWidth + ";fill:none") : this._file.writeAttributeString("style", "stroke:" + this._lineColor + ";stroke-width:" + this._lineWidth + ";stroke-dasharray:" + d + ";fill:none");
            this._file.writeEndElement()
        }
        b || (this._lineStyle = JSG.graph.attr.FormatAttributes.LineStyle.SOLID, this.drawArrow(a[1], a[0], this._lineArrowStart), this.drawArrow(a[a.length - 2], a[a.length - 1], this._lineArrowEnd))
    }
};
JSG.ui.graphics.SVGraphics.prototype.drawBezier = function (a, b, c, d) {
    if (this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.NONE && !(2 > b.length)) {
        this.beginPath();
        var e, f;
        this.moveTo(b[0].x, b[0].y);
        e = 1;
        for (f = b.length; e < f; e++)this.bezierCurveTo(a[e - 1].x, a[e - 1].y, c[e].x, c[e].y, b[e].x, b[e].y);
        d && (this.bezierCurveTo(a[b.length - 1].x, a[b.length - 1].y, c[0].x, c[0].y, b[0].x, b[0].y), this.closePath());
        this.stroke();
        d || (this._lineStyle = JSG.graph.attr.FormatAttributes.LineStyle.SOLID, this.drawArrow(a[0], b[0],
            this._lineArrowStart), this.drawArrow(c[c.length - 1], b[b.length - 1], this._lineArrowEnd))
    }
};
JSG.ui.graphics.SVGraphics.prototype.getStrokeDash = function () {
    var a;
    if (this._lineStyle !== JSG.graph.attr.FormatAttributes.LineStyle.SOLID) {
        var b = this._lineWidth, c = 5 * this._lineWidth, d = 3 * this._lineWidth;
        switch (this._lineStyle) {
            case JSG.graph.attr.FormatAttributes.LineStyle.DASH:
                a = c + ", " + d;
                break;
            case JSG.graph.attr.FormatAttributes.LineStyle.DASHDOT:
                a = c + ", " + d + ", " + b + ", " + d;
                break;
            case JSG.graph.attr.FormatAttributes.LineStyle.DASHDOTDOT:
                a = b + ", " + d + ", " + c + ", " + d + ", " + b + ", " + d;
                break;
            case JSG.graph.attr.FormatAttributes.LineStyle.DOT:
                a =
                    b + ", " + b
        }
    }
    return a
};
JSG.ui.graphics.SVGraphics.prototype.setFont = function () {
};
JSG.ui.graphics.SVGraphics.prototype.setTextAlignment = function (a) {
    this._horizontalAlignment = a
};
JSG.ui.graphics.SVGraphics.prototype.setTextBaseline = function (a) {
    this._baseline = a
};
JSG.ui.graphics.SVGraphics.prototype.fillText = function (a, b, c) {
    this._file.writeStartElement("text");
    b = this._cs.toSVGUnit(b);
    c = this._cs.toSVGUnit(c);
    switch (this._baseline) {
        case "top":
            c += this._fontSize / 72 * JSG.dpi.y * this._cs.getZoom();
            break;
        case "middle":
            c += this._fontSize / 144 * JSG.dpi.y * this._cs.getZoom()
    }
    this._file.writeAttributeString("x", b);
    this._file.writeAttributeString("y", c);
    switch (this._horizontalAlignment) {
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT:
            this._file.writeAttributeString("text-anchor",
                "start");
            break;
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER:
            this._file.writeAttributeString("text-anchor", "middle");
            break;
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT:
            this._file.writeAttributeString("text-anchor", "end")
    }
    this._file.writeAttributeString("font-family", this._fontName);
    this._file.writeAttributeString("font-size", Math.round(this._fontSize * this._cs.getZoom()) + "pt");
    this._fontStyle & JSG.graph.attr.TextFormatAttributes.FontStyle.BOLD && this._file.writeAttributeString("font-weight",
        "bold");
    this._fontStyle & JSG.graph.attr.TextFormatAttributes.FontStyle.ITALIC && this._file.writeAttributeString("font-style", "italic");
    this._fontStyle & JSG.graph.attr.TextFormatAttributes.FontStyle.UNDERLINE && this._file.writeAttributeString("text-decoration", "underline");
    c = this.getFillAttribute();
    this._file.writeAttributeString("fill", c);
    a = String(a).replace(/&/g, "\x26amp;");
    a = a.replace(/</g, "\x26lt;");
    a = a.replace(/>/g, "\x26gt;");
    a = a.replace("\"'", "\x26quot;");
    this._file.writeString(a);
    this._file.writeEndElement()
};
JSG.ui.graphics.SVGraphics.prototype.drawText = function (a, b, c) {
};
JSG.ui.graphics.SVGraphics.prototype.drawLine = function (a, b) {
    var c = this.getStrokeDash();
    this._file.writeStartElement("line");
    this._file.writeAttributeString("x1", this._cs.toSVGUnit(a.x));
    this._file.writeAttributeString("y1", this._cs.toSVGUnit(a.y));
    this._file.writeAttributeString("x2", this._cs.toSVGUnit(b.x));
    this._file.writeAttributeString("y2", this._cs.toSVGUnit(b.y));
    void 0 === c ? this._file.writeAttributeString("style", "stroke:" + this._lineColor + ";stroke-width:" + this._lineWidth + ";fill:" + this._fillColor) :
        this._file.writeAttributeString("style", "stroke:" + this._lineColor + ";stroke-width:" + this._lineWidth + ";stroke-dasharray:" + c + ";fill:" + this._fillColor);
    this._file.writeEndElement()
};
JSG.ui.graphics.SVGraphics.prototype.beginPath = function () {
    this._currentPath = ""
};
JSG.ui.graphics.SVGraphics.prototype.closePath = function () {
    this._currentPath += "Z"
};
JSG.ui.graphics.SVGraphics.prototype.moveTo = function (a, b) {
    this._currentPath += "M" + this._cs.toSVGUnit(a) + "," + this._cs.toSVGUnit(b)
};
JSG.ui.graphics.SVGraphics.prototype.lineTo = function (a, b) {
    this._currentPath += "L" + this._cs.toSVGUnit(a) + "," + this._cs.toSVGUnit(b)
};
JSG.ui.graphics.SVGraphics.prototype.circle = function (a, b, c) {
    this._file.writeStartElement("circle");
    this._file.writeAttributeString("cx", this._cs.toSVGUnit(a));
    this._file.writeAttributeString("cy", this._cs.toSVGUnit(b));
    this._file.writeAttributeString("r", this._cs.toSVGUnit(c));
    a = this.getFillAttribute();
    this._file.writeAttributeString("style", "stroke:" + this._lineColor + ";stroke-width:" + this._lineWidth + ";fill:" + a);
    this._file.writeEndElement()
};
JSG.ui.graphics.SVGraphics.prototype.arc = function (a, b, c, d, e, f) {
    this._currentPath += "M" + this._cs.toSVGUnit(a - c) + "," + this._cs.toSVGUnit(b);
    this._currentPath += " A" + this._cs.toSVGUnit(c) + "," + this._cs.toSVGUnit(c) + " 0 1,1 " + this._cs.toSVGUnit(a - c) + "," + this._cs.toSVGUnit(b)
};
JSG.ui.graphics.SVGraphics.prototype.bezierCurveTo = function (a, b, c, d, e, f) {
    this._currentPath += "C" + this._cs.toSVGUnit(a) + "," + this._cs.toSVGUnit(b) + " " + this._cs.toSVGUnit(c) + "," + this._cs.toSVGUnit(d) + " " + this._cs.toSVGUnit(e) + "," + this._cs.toSVGUnit(f)
};
JSG.ui.graphics.SVGraphics.prototype.stroke = function () {
    var a = this.getStrokeDash();
    this._file.writeStartElement("path");
    this._file.writeAttributeString("d", this._currentPath);
    void 0 === a ? this._file.writeAttributeString("style", "stroke:" + this._lineColor + ";stroke-width:" + this._lineWidth + ";fill:none") : this._file.writeAttributeString("style", "stroke:" + this._lineColor + ";stroke-width:" + this._lineWidth + ";stroke-dasharray:" + a + ";fill:none");
    this._file.writeEndElement()
};
JSG.ui.graphics.SVGraphics.prototype.fill = function () {
    this._patternStyle === JSG.graph.attr.FormatAttributes.PatternStyle.CENTER && "#FFFFFF" !== this._fillColor && (this._file.writeStartElement("path"), this._file.writeAttributeString("d", this._currentPath), this._file.writeAttributeString("style", "stroke:none;fill:" + this._fillColor), this._file.writeEndElement());
    var a = this.getFillAttribute();
    this._file.writeStartElement("path");
    this._file.writeAttributeString("d", this._currentPath);
    this._file.writeAttributeString("style",
        "stroke:none;fill:" + a + ";fill-opacity:" + this._transparency);
    void 0 !== this._shadow && this._file.writeAttributeString("filter", "url(#" + this._shadow + ")");
    this._file.writeEndElement()
};
JSG.ui.graphics.SVGraphics.prototype.translate = function (a, b) {
    this._transform += "translate(" + this._cs.toSVGUnit(a) + "," + this._cs.toSVGUnit(b) + ")";
    this._file.writeAttributeString("transform", this._transform)
};
JSG.ui.graphics.SVGraphics.prototype.rotate = function (a) {
    this._transform += " rotate(" + JSG.geometry.Utils.toDegrees(a) + ")";
    this._file.writeAttributeString("transform", this._transform)
};
JSG.ui.graphics.SVGraphics.prototype.scale = function (a, b) {
};
JSG.ui.graphics.SVGraphics.prototype.startGroup = function () {
    void 0 !== this._clip && (this._file.writeStartElement("g"), this._file.writeAttributeString("clip-path", "url(#" + this._clip + ")"));
    this._file.writeStartElement("g");
    this._transform = ""
};
JSG.ui.graphics.SVGraphics.prototype.endGroup = function () {
    this._file.writeEndElement();
    void 0 !== this._clip && this._file.writeEndElement()
};
JSG.ui.graphics.SVGraphics.prototype.clip = function () {
};
JSG.ui.graphics.SVGraphics.prototype.setClip = function (a) {
    a = a.getPoints();
    this.setClipArea(void 0, a, void 0)
};
JSG.ui.graphics.SVGraphics.prototype.setClipArea = function (a, b, c) {
    this._clip = "clip" + this._id;
    this._file.writeStartElement("clipPath");
    this._file.writeAttributeString("id", this._clip);
    this.beginPath();
    this.moveTo(b[0].x, b[0].y);
    var d, e;
    if (a && c) {
        d = 1;
        for (e = b.length; d < e; d++)this.bezierCurveTo(a[d - 1].x, a[d - 1].y, c[d].x, c[d].y, b[d].x, b[d].y);
        this.bezierCurveTo(a[b.length - 1].x, a[b.length - 1].y, c[0].x, c[0].y, b[0].x, b[0].y)
    } else for (d = 1, e = b.length; d < e; d++)this.lineTo(b[d].x, b[d].y);
    this.closePath();
    this._file.writeStartElement("path");
    this._file.writeAttributeString("d", this._currentPath);
    this._file.writeEndElement();
    this._file.writeEndElement();
    this._id++
};
JSG.ui.graphics.SVGraphics.prototype.svgRound = function (a) {
    return Math.round(100 * a) / 100
};
JSG.namespace("JSG.ui.graphics");
JSG.ui.graphics.GraphicSystem = function (a, b) {
    function c(a) {
        a.location.x = s.graphics.getCoordinateSystem().deviceToLogX(a.location.x);
        a.location.y = s.graphics.getCoordinateSystem().deviceToLogY(a.location.y);
        a.event.preventDefault();
        s.interactionHandler ? s.interactionHandler.handleMouseEvent(a) : s.root.handleMouseEvent(a)
    }

    function d(a) {
        a.location.x = s.graphics.getCoordinateSystem().deviceToLogX(a.location.x);
        a.location.y = s.graphics.getCoordinateSystem().deviceToLogY(a.location.y);
        if (s.interactionHandler)switch (a.type) {
            case JSG.ui.events.MouseEventType.DOWN:
            case JSG.ui.events.MouseEventType.MOVE:
            case JSG.ui.events.MouseEventType.UP:
            case JSG.ui.events.MouseEventType.DBLCLK:
                s.interactionHandler.handleMouseEvent(a);
                break;
            default:
                s.interactionHandler.handleGestureEvent(a)
        }
    }

    function e(a) {
        s.interactionHandler ? s.interactionHandler.handleDragEvent(a) : s.root.handleDragEvent(a)
    }

    function f(a) {
        a.preventDefault()
    }

    function g(a) {
        a = JSG.ui.events.GestureEvent.fromEvent(s, event.gesture, JSG.ui.events.GestureEventType.CANCEL);
        d(a);
        s.paint();
        s.currentEvent = 0
    }

    function k(a) {
        "mousedown" !== a.gesture.srcEvent.type && (JSG.debug.log("Touch"), s.currentEvent = JSG.ui.events.GestureEventType.TOUCH, (a = JSG.ui.events.GestureEvent.fromEvent(s,
            a.gesture, JSG.ui.events.GestureEventType.DRAGSTART)) && d(a), s.paint())
    }

    function h(a) {
        "mousedown" !== a.gesture.srcEvent.type && (JSG.debug.log("Hold"), g(a))
    }

    function m(a) {
        0 === s.currentEvent && (JSG.debug.log("DragStart"), s.currentEvent = JSG.ui.events.GestureEventType.DRAG, (a = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.DRAGSTART)) && d(a), s.paint())
    }

    function l(a) {
        if ("move" !== a.gesture.srcEvent.type) {
            var b;
            s.currentEvent === JSG.ui.events.GestureEventType.TOUCH ? (s.currentEvent =
                JSG.ui.events.GestureEventType.DRAG, b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.DRAG)) : s.currentEvent === JSG.ui.events.GestureEventType.DRAG && (b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.DRAG));
            b && d(b);
            s.paint()
        }
    }

    function p(a) {
        "mouseup" !== a.gesture.srcEvent.type && s.currentEvent === JSG.ui.events.GestureEventType.DRAG && ((a = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.DRAGEND)) && d(a), s.paint(),
            s.currentEvent = 0)
    }

    function n(a) {
        "mouseup" !== a.gesture.srcEvent.type && s.currentEvent !== JSG.ui.events.GestureEventType.DBLTAP && ((a = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.TAPUP)) && d(a), s.paint(), s.currentEvent = 0)
    }

    function q(a) {
        if ("mouseup" !== a.gesture.srcEvent.type) {
            JSG.debug.log("DoubleTap");
            var b;
            s.currentEvent === JSG.ui.events.GestureEventType.TOUCH && (JSG.debug.log("DragEnd"), (b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.DRAGEND)) &&
            d(b));
            (b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.DBLTAP)) && d(b);
            s.paint();
            s.currentEvent = JSG.ui.events.GestureEventType.DBLTAP
        }
    }

    function r(a) {
        s.currentEvent === JSG.ui.events.GestureEventType.DRAG ? g(a) : (s.currentEvent === JSG.ui.events.GestureEventType.TOUCH && g(a), s.currentEvent = JSG.ui.events.GestureEventType.TRANSFORMSTART)
    }

    function t(a) {
        var b;
        s.currentEvent === JSG.ui.events.GestureEventType.PAN ? (JSG.debug.log("Pan"), b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture,
            JSG.ui.events.GestureEventType.PAN)) : s.currentEvent === JSG.ui.events.GestureEventType.TRANSFORMSTART && (JSG.debug.log("PanStart"), s.currentEvent = JSG.ui.events.GestureEventType.PAN, b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.PANSTART));
        b && (d(b), s.paint())
    }

    function u(a) {
        var b;
        s.currentEvent === JSG.ui.events.GestureEventType.ROTATE ? (JSG.debug.log("Rotate"), b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.ROTATE)) : s.currentEvent === JSG.ui.events.GestureEventType.TRANSFORMSTART &&
        (JSG.debug.log("RotateStart"), s.currentEvent = JSG.ui.events.GestureEventType.ROTATE, b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.ROTATESTART));
        b && (d(b), s.paint())
    }

    function w(a) {
        var b;
        s.currentEvent === JSG.ui.events.GestureEventType.PINCH ? (JSG.debug.log("Pinch"), b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.PINCH)) : s.currentEvent === JSG.ui.events.GestureEventType.TRANSFORMSTART && (JSG.debug.log("PinchStart"), s.currentEvent = JSG.ui.events.GestureEventType.PINCH,
            b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.PINCHSTART));
        b && (d(b), s.paint())
    }

    function v(a) {
    }

    function y(a) {
        var b;
        s.currentEvent === JSG.ui.events.GestureEventType.ROTATE ? (JSG.debug.log("RotateEnd"), b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.ROTATEEND)) : s.currentEvent === JSG.ui.events.GestureEventType.PINCH ? (JSG.debug.log("PinchEnd"), b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.PINCHEND)) :
        s.currentEvent === JSG.ui.events.GestureEventType.PAN && (JSG.debug.log("PanEnd"), b = JSG.ui.events.GestureEvent.fromEvent(s, a.gesture, JSG.ui.events.GestureEventType.PANEND));
        b && (d(b), s.paint());
        s.currentEvent = 0
    }

    function C(a) {
        a = JSG.ui.events.DragEvent.fromEvent(s.canvas, a, JSG.ui.events.DragEventType.ENTER);
        a.cs = s.graphics.getCoordinateSystem();
        e(a)
    }

    function F(a) {
        a.preventDefault && a.preventDefault();
        a = JSG.ui.events.DragEvent.fromEvent(s.canvas, a, JSG.ui.events.DragEventType.OVER);
        a.cs = s.graphics.getCoordinateSystem();
        e(a)
    }

    function z(a) {
        a = JSG.ui.events.DragEvent.fromEvent(s.canvas, a, JSG.ui.events.DragEventType.LEAVE);
        a.cs = s.graphics.getCoordinateSystem();
        e(a)
    }

    function D(a) {
        a = JSG.ui.events.DragEvent.fromEvent(s.canvas, a, JSG.ui.events.DragEventType.EXIT);
        a.cs = s.graphics.getCoordinateSystem();
        e(a)
    }

    function x(a) {
        var b = JSG.ui.events.DragEvent.fromEvent(s.canvas, a, JSG.ui.events.DragEventType.DROP);
        b.cs = s.graphics.getCoordinateSystem();
        e(b);
        a.preventDefault && a.preventDefault();
        s.paint();
        return !1
    }

    function B(a) {
        var b = (new Date).getTime();
        s._dblClk = 300 > b - s._lastClick;
        s._lastClick = b;
        s._dblClk || (s.currentEvent = JSG.ui.events.GestureEventType.DRAG, a = JSG.ui.events.MouseEvent.fromEvent(s.canvas, a, JSG.ui.events.MouseEventType.DOWN), a.cs = s.graphics.getCoordinateSystem(), a.isClicked(JSG.ui.events.ButtonType.RIGHT) || (c(a), s.paint()), a.keepFocus || s.canvas.focus())
    }

    function E(a) {
        a = JSG.ui.events.MouseEvent.fromEvent(s.canvas, a, JSG.ui.events.MouseEventType.MOVE);
        a.cs = s.graphics.getCoordinateSystem();
        if (a.isInCanvas() || void 0 !== s.interactionHandler &&
            s.interactionHandler.isDragging)c(a), a.doRepaint && s.paint()
    }

    function G(a) {
        s._dblClk ? s._dblClk = !1 : (a = JSG.ui.events.MouseEvent.fromEvent(s.canvas, a, JSG.ui.events.MouseEventType.UP), a.cs = s.graphics.getCoordinateSystem(), !a.isClicked(JSG.ui.events.ButtonType.RIGHT) && (a.isInCanvas() || void 0 !== s.interactionHandler && s.interactionHandler.isDragging) && (c(a), s.paint()))
    }

    function H() {
        JSG.keepFocus || (document.onmousemove = E, document.onmouseup = G)
    }

    function I(a) {
        a = JSG.ui.events.MouseEvent.fromEvent(s.canvas, a, JSG.ui.events.MouseEventType.DBLCLK);
        a.cs = s.graphics.getCoordinateSystem();
        c(a);
        s.paint()
    }

    function J(a) {
        a = JSG.ui.events.MouseEvent.fromEvent(s.canvas, a, JSG.ui.events.MouseEventType.DOWN);
        a.cs = s.graphics.getCoordinateSystem();
        c(a);
        return !1
    }

    function K(a) {
        JSG.ui.events.MouseEvent.fromEvent(s.canvas, a, JSG.ui.events.MouseEventType.WHEEL).cs = s.graphics.getCoordinateSystem();
        c(JSG.ui.events.MouseEvent.fromEvent(s.canvas, a, JSG.ui.events.MouseEventType.WHEEL));
        s.paint()
    }

    function L(a) {
        s.onKeyEvent(a, JSG.ui.events.KeyEventType.DOWN)
    }

    function M(a) {
        return s.onKeyEvent(a,
            JSG.ui.events.KeyEventType.UP)
    }

    var s = this;
    this.canvas = "string" === typeof a || a instanceof String ? document.getElementById(a) : a;
    this.graphics = new JSG.ui.graphics.ScalableGraphics(this.canvas, b);
    this.root = new JSG.ui.View;
    this._context = {isPainting: !1};
    var A;
    this.canvas.addEventListener("mousedown", B, !1);
    JSG.debug.USE_DOC_DISPATCHER ? (JSG.ui.graphics.DocumentEventDispatcher.addEventListener("onmouseup", this, G), JSG.ui.graphics.DocumentEventDispatcher.addEventListener("onmousemove", this, E)) : this.canvas.addEventListener("mousemove",
        H, !1);
    JSG.touchDevice && (this.canvas.addEventListener("touchstart", f, !0), this.canvas.addEventListener("touchmove", f, !0), this.canvas.addEventListener("touchend", f, !0), this.canvas.addEventListener("touchcancel", g, !0), A = Hammer(this.canvas, {
        transform_min_rotation: 5,
        transform_min_scale: 0.1,
        tap_max_touchtime: 2500,
        hold_timeout: 2500
    }), A.on("dragstart", m), A.on("drag", l), A.on("dragend", p), A.on("tap", n), A.on("doubletap", q), A.on("hold", h), A.on("rotate", u), A.on("pinch", w), A.on("swipe", v), A.on("touch", k), A.on("transformstart",
        r), A.on("transform", t), A.on("transformend", y));
    this.canvas.addEventListener("contextmenu", J, !1);
    this.canvas.addEventListener(JSG.isFF ? "DOMMouseScroll" : "mousewheel", K, !1);
    this.canvas.addEventListener("dblclick", I, !1);
    this.canvas.addEventListener("dragenter", C, !1);
    this.canvas.addEventListener("dragover", F, !1);
    this.canvas.addEventListener("dragleave", z, !1);
    this.canvas.addEventListener("dragexit", D, !1);
    this.canvas.addEventListener("drop", x, !1);
    this.canvas.addEventListener("keyup", M, !1);
    this.canvas.addEventListener("keydown",
        L, !1);
    this.currentEvent = 0;
    this._lastClick = (new Date).getTime();
    this._dblClk = !1;
    this.removeEventListeners = function () {
        var a = s.canvas;
        a.removeEventListener("mousedown", B, !1);
        a.removeEventListener("mousemove", H, !1);
        JSG.touchDevice && void 0 !== A && (a.removeEventListener("touchstart", f, !1), a.removeEventListener("touchmove", f, !1), a.removeEventListener("touchcancel", g, !1), a.removeEventListener("touchend", f, !1), A.off("dragstart", m), A.off("drag", l), A.off("dragend", p), A.off("tap", n), A.off("doubletap", q), A.off("hold",
            h), A.off("rotate", u), A.off("pinch", w), A.off("swipe", v), A.off("transformstart", r), A.off("transform", t), A.off("transformend", y));
        a.removeEventListener("contextmenu", J, !1);
        a.removeEventListener(JSG.isFF ? "DOMMouseScroll" : "mousewheel", K, !1);
        a.removeEventListener("dblclick", I, !1);
        a.removeEventListener("dragenter", C, !1);
        a.removeEventListener("dragover", F, !1);
        a.removeEventListener("dragleave", z, !1);
        a.removeEventListener("dragexit", D, !1);
        a.removeEventListener("drop", x, !1);
        a.removeEventListener("keyup", M, !1);
        a.removeEventListener("keydown", L, !1);
        JSG.debug.USE_DOC_DISPATCHER ? (JSG.ui.graphics.DocumentEventDispatcher.removeEventListener("onmouseup", this), JSG.ui.graphics.DocumentEventDispatcher.removeEventListener("onmousemove", this)) : (document.onmouseup = void 0, document.onmousemove = void 0)
    }
};
JSG.ui.graphics.GraphicSystem.prototype = {
    setCoordinateSystem: function (a) {
        this.graphics.setCoordinateSystem(a)
    }, getGraphics: function () {
        return this.graphics
    }, getGraphicsContext: function () {
        return this.graphics.getContext()
    }, getCanvas: function () {
        return this.canvas
    }, getSize: function (a) {
        return (void 0 !== a ? a : new JSG.geometry.Point(0, 0)).set(this.canvas.width, this.canvas.height)
    }, resize: function (a, b) {
        this.interactionHandler && this.interactionHandler.handleResizeCanvas(a, b);
        this.canvas.width = a;
        this.canvas.height =
            b;
        this.paint()
    }, setContent: function (a) {
        this.root = a;
        this.paint()
    }, getCursor: function () {
        return this.canvas.style.cursor
    }, setCursor: function (a) {
        this.canvas.style.cursor = a
    }, paint: function (a) {
        var b = this._context;
        !1 === b.isPainting && (b.isPainting = !0, this._doPaint(a), b.isPainting = !1)
    }, _doPaint: function (a) {
        if (!JSG.drawingDisabled || a)this.graphics._context2D.setTransform(1, 0, 0, 1, 0, 0), this.graphics._context2D.clearRect(0, 0, this.canvas.width, this.canvas.height), this.root.draw(this.graphics);
        JSG.debug.DUMP_CACHE_SIZE &&
        (JSG.debug.log("size of caches after paint:", !0), JSG.debug.log("\tbox cache: " + JSG.boxCache.boxes.length + " -\x3e in use: " + JSG.boxCache.inUse(), !0), JSG.debug.log("\trect cache: " + JSG.rectCache.rects.length + " -\x3e in use: " + JSG.rectCache.inUse(), !0), JSG.debug.log("\tpoint cache: " + JSG.ptCache.points.length + " -\x3e in use: " + JSG.ptCache.inUse(), !0))
    }, setInteractionHandler: function (a) {
        this.interactionHandler && this.interactionHandler.unregisterGraphicSystem();
        (this.interactionHandler = a) && this.interactionHandler.registerGraphicSystem(this)
    },
    onKeyEvent: function (a, b) {
        var c = JSG.ui.events.KeyEvent.fromEvent(this.canvas, a, b);
        c.cs = this.graphics.getCoordinateSystem();
        this._notifyKeyEvent(c);
        c.doRepaint && this.paint();
        c.doPreventDefault && a.preventDefault && a.preventDefault();
        return c
    }, _notifyKeyEvent: function (a) {
        a.location.x = this.graphics.getCoordinateSystem().deviceToLogX(a.location.x);
        a.location.y = this.graphics.getCoordinateSystem().deviceToLogY(a.location.y);
        this.interactionHandler ? this.interactionHandler.handleKeyEvent(a) : this.root.handleKeyEvent(a)
    },
    destroy: function () {
        this.removeEventListeners();
        this.setInteractionHandler(void 0);
        this.graphics = this.root = void 0
    }
};
JSG.namespace("JSG.ui");
JSG.ui.View = function () {
    this._subviews = [];
    this._parent = void 0;
    this._isVisible = !0;
    this._resizeListeners = [];
    this._valid = !0
};
JSG.ui.View.prototype.copy = function () {
    var a, b, c = this.newInstance();
    a = 0;
    for (b = this._subviews.length; a < b; a++) {
        var d = this._subviews[a].copy();
        c.addView(d)
    }
    c._parent = this._parent;
    c._isVisible = this._isVisible;
    return c
};
JSG.ui.View.prototype.newInstance = function () {
    return new JSG.ui.View
};
JSG.ui.View.prototype.getParent = function () {
    return this._parent
};
JSG.ui.View.prototype.addView = function (a, b) {
    0 <= b ? this._subviews.insert(a, b) : this._subviews.push(a);
    a._parent = this;
    return a
};
JSG.ui.View.prototype.removeView = function (a) {
    return JSG.Arrays.remove(this._subviews, a)
};
JSG.ui.View.prototype.removeAllViews = function () {
    this._subviews = []
};
JSG.ui.View.prototype.hasSubviews = function () {
    return 0 < this._subviews.length
};
JSG.ui.View.prototype.getSubviews = function () {
    return this._subviews
};
JSG.ui.View.prototype.getSubviewAt = function (a) {
    return 0 > a || a > this._subviews.length ? void 0 : this._subviews[a]
};
JSG.ui.View.prototype.invalidate = function () {
    this._valid = !1;
    var a, b;
    a = 0;
    for (b = this._subviews.length; a < b; a++)this._subviews[a].layout();
    this.layout()
};
JSG.ui.View.prototype.revalidate = function () {
    this.invalidate();
    this._parent && this._parent.revalidate()
};
JSG.ui.View.prototype.validate = function () {
    if (!this.isValid()) {
        this._valid = !0;
        this.relayout();
        var a, b;
        a = 0;
        for (b = this._subviews.length; a < b; a++)this._subviews[a].validate()
    }
};
JSG.ui.View.prototype.relayout = function () {
};
JSG.ui.View.prototype.setValid = function (a) {
    this._valid = !0 === a
};
JSG.ui.View.prototype.isValid = function () {
    return this._valid
};
JSG.ui.View.prototype.isVisible = function () {
    return this._isVisible
};
JSG.ui.View.prototype.setVisible = function (a) {
    this._isVisible = a
};
JSG.ui.View.prototype.getBoundingBox = function () {
};
JSG.ui.View.prototype.getAngle = function () {
    return 0
};
JSG.ui.View.prototype.containsPoint = function (a, b) {
    return !1
};
JSG.ui.View.prototype.layout = function () {
};
JSG.ui.View.prototype.draw = function (a) {
};
JSG.ui.View.prototype.drawSubViews = function (a) {
    var b, c;
    b = 0;
    for (c = this._subviews.length; b < c; b++)this._subviews[b].draw(a)
};
JSG.ui.View.prototype.translateFromParent = function (a) {
    return a
};
JSG.ui.View.prototype.translateToParent = function (a) {
    return a
};
JSG.ui.View.prototype.handleMouseEvent = function (a) {
    var b, c;
    b = 0;
    for (c = this._subviews.length; b < c; b++)this._subviews[b].handleMouseEvent(a)
};
JSG.ui.View.prototype.handleDragEvent = function (a) {
    var b, c, d = !1;
    b = 0;
    for (c = this._subviews.length; b < c && !d; b++)d |= this._subviews[b].handleDragEvent(a);
    return d
};
JSG.ui.View.prototype.handleKeyEvent = function (a) {
    var b, c, d = !1;
    b = 0;
    for (c = this._subviews.length; b < c && !d; b++)d |= this._subviews[b].handleKeyEvent(a);
    return d
};
JSG.ui.View.prototype.addResizeListener = function (a) {
    this._resizeListeners.push(a)
};
JSG.ui.View.prototype.removeResizeListener = function (a) {
    JSG.Arrays.remove(this._resizeListeners, a)
};
JSG.ui.View.prototype._fireOnResize = function () {
    var a = this;
    this._resizeListeners.forEach(function (b, c, d) {
        b.onResize(a)
    })
};
JSG.ui.View.prototype.getIndex = function () {
    return this._parent ? this._parent._subviews.indexOf(this) : -1
};
JSG.ui.View.prototype.moveToIndex = function (a) {
    var b = this._parent._subviews.indexOf(this);
    JSG.Arrays.move(this._parent._subviews, b, a)
};
JSG.ui.View.prototype.moveToTop = function () {
    var a = this._parent._subviews.indexOf(this);
    JSG.Arrays.move(this._parent._subviews, a, this._parent._subviews.length - 1)
};
JSG.ui.View.prototype.moveUp = function () {
    var a = this._parent._subviews.indexOf(this);
    a < this._parent._subviews.length - 1 && JSG.Arrays.move(this._parent._subviews, a, a + 1)
};
JSG.ui.View.prototype.moveToBottom = function () {
    var a = this._parent._subviews.indexOf(this);
    JSG.Arrays.move(this._parent._subviews, a, 0)
};
JSG.ui.View.prototype.moveDown = function () {
    var a = this._parent._subviews.indexOf(this);
    0 < a && JSG.Arrays.move(this._parent._subviews, a, a - 1)
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.Operand = function (a, b) {
    this.type = b;
    this.value = a
};
JSG.graph.expr.Operand.NUMBER = 1;
JSG.graph.expr.Operand.STRING = 2;
JSG.graph.expr.Operand.REFERENCE = 4;
JSG.graph.expr.Operand.fromString = function (a, b, c) {
    b = JSG.graph.expr.Reference.fromString(a, b, c);
    if (void 0 !== b)return new JSG.graph.expr.Operand(b, JSG.graph.expr.Operand.REFERENCE);
    if (0 < a.length)return isNaN(a) ? new JSG.graph.expr.Operand(a, JSG.graph.expr.Operand.STRING) : new JSG.graph.expr.Operand(Number(a), JSG.graph.expr.Operand.NUMBER)
};
JSG.graph.expr.Operand.prototype.copy = function () {
    var a = new JSG.graph.expr.Operand(this.value, this.type);
    this.type === JSG.graph.expr.Operand.REFERENCE && (a.value = this.value.copy());
    return a
};
JSG.graph.expr.Operand.prototype.isEqualTo = function (a) {
    return void 0 !== a && this.type === a.type && this.value === a.value
};
JSG.graph.expr.Operand.prototype.setTo = function (a) {
    this.set(a.value, a.type)
};
JSG.graph.expr.Operand.prototype.set = function (a, b) {
    this.type = b;
    this.value = b === JSG.graph.expr.Operand.REFERENCE ? a.copy() : a
};
JSG.graph.expr.Operand.prototype.isOperand = function () {
    return !0
};
JSG.graph.expr.Operand.prototype.getValue = function () {
    return this.type === JSG.graph.expr.Operand.REFERENCE ? this.value.getValue() : this.value
};
JSG.graph.expr.Operand.prototype.toString = function (a) {
    return this.type === JSG.graph.expr.Operand.REFERENCE ? this.value.toString(a) : this.value.toString()
};
JSG.graph.expr.StringConstant = function (a) {
    JSG.graph.expr.StringConstant._super.constructor.call(this, a, JSG.graph.expr.Operand.STRING)
};
JSG.extend(JSG.graph.expr.StringConstant, JSG.graph.expr.Operand);
JSG.graph.expr.StringConstant.ENCODING = "%22";
JSG.graph.expr.StringConstant.ENCODE_REGEX = /"/g;
JSG.graph.expr.StringConstant.DECODE_REGEX = RegExp(JSG.graph.expr.StringConstant.ENCODING, "gi");
JSG.graph.expr.StringConstant.isStringConstant = function (a) {
    return JSG.Strings.isString(a) ? JSG.Strings.startsWith(a, '"') && JSG.Strings.endsWith(a, '"') || JSG.Strings.startsWith(a, JSG.graph.expr.StringConstant.ENCODING) && JSG.Strings.endsWith(a, JSG.graph.expr.StringConstant.ENCODING) : !1
};
JSG.graph.expr.StringConstant.encode = function (a) {
    return JSG.Strings.encode(a)
};
JSG.graph.expr.StringConstant.decode = function (a) {
    return JSG.Strings.decode(a)
};
JSG.graph.expr.StringConstant.prototype.copy = function () {
    return new JSG.graph.expr.StringConstant(this.value)
};
JSG.graph.expr.StringConstant.prototype.setTo = function (a) {
    a instanceof JSG.graph.expr.StringConstant && this.set(a.value)
};
JSG.graph.expr.StringConstant.prototype.set = function (a) {
    JSG.Strings.isString(a) && (this.value = a)
};
JSG.graph.expr.StringConstant.prototype.toString = function (a) {
    return JSG.graph.expr.StringConstant.ENCODING + this.value.toString() + JSG.graph.expr.StringConstant.ENCODING
};
JSG.namespace("JSG.graph.expr.Operator");
JSG.graph.expr.Operator = function (a, b) {
    this.priority = b;
    this.asString = a
};
JSG.graph.expr.Operator.prototype.isOperand = function () {
    return !1
};
JSG.graph.expr.Operators = function () {
    function a(a) {
        b.put(a.asString, a)
    }

    var b = new JSG.commons.Map;
    a(new JSG.graph.expr.Operator("+", 2));
    a(new JSG.graph.expr.Operator("-", 2));
    a(new JSG.graph.expr.Operator("*", 4));
    a(new JSG.graph.expr.Operator("/", 4));
    a(new JSG.graph.expr.Operator("(", 0));
    a(new JSG.graph.expr.Operator(")", 0));
    return {
        isOperator: function (a) {
            return b.contains(a)
        }, fromString: function (a) {
            return b.get(a)
        }
    }
}();
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.Reference = function (a, b, c) {
    this._item = a;
    this._property = b;
    this._propertyObject = c;
    this._str = void 0
};
JSG.graph.expr.Reference.fromString = function (a, b, c) {
    var d = a, e;
    b = b || (c ? c.getGraph() : void 0);
    var f, g = c;
    JSG.Strings.startsWith(a, "Item.") && b ? (f = a.indexOf("!"), c = a.substring(5, f), e = new JSG.graph.expr.Reference, g = b.getItemById(Number(c)), a = a.substring(f + 1)) : JSG.Strings.startsWith(a, "Parent") && (f = a.indexOf("!"), c && (g = c.getParent(), a = a.substring(f + 1), e = new JSG.graph.expr.Reference));
    if (c = g)return b = a.toUpperCase(), c = this.getReference(c, b), !c && e && (c = e, c._str = d, c._property = a), c
};
JSG.graph.expr.Reference.getReference = function (a, b) {
    var c;
    if (c = JSG.graph.properties.PropertiesProvider.getProperties(a))if (c = c.getProperty(b))return new JSG.graph.expr.Reference(a, c, a);
    if (c = JSG.graph.properties.PropertiesProvider.getFormatProperties())if (c = c.getProperty(b))return new JSG.graph.expr.Reference(a, c, a.getFormat());
    if (c = JSG.graph.properties.PropertiesProvider.getTextFormatProperties())if (c = c.getProperty(b))return new JSG.graph.expr.Reference(a, c, a.getTextFormat());
    if (c = JSG.graph.properties.PropertiesProvider.getItemAttributesProperties())if (c =
            c.getProperty(b))return new JSG.graph.expr.Reference(a, c, a.getItemAttributes());
    if (c = JSG.graph.properties.PropertiesProvider.getReshapeProperties(a))if (c = c.getProperty(b))return new JSG.graph.expr.Reference(a, c, a);
    return a.getAttributeAtPath(b) ? new JSG.graph.expr.AttributeReference(a, b) : a.getCustomReference(b)
};
JSG.graph.expr.Reference.prototype.isResolved = function () {
    return !!this._item
};
JSG.graph.expr.Reference.prototype.copy = function () {
    var a = new JSG.graph.expr.Reference(this._item, this._property, this._propertyObject);
    a._str = this._str;
    return a
};
JSG.graph.expr.Reference.prototype.getValue = function () {
    if (this.isResolved()) {
        var a = this._property.getValue(this._propertyObject);
        return a && a.getValue ? a.getValue() : a
    }
    return this._str
};
JSG.graph.expr.Reference.prototype.toString = function (a) {
    if (this.isResolved()) {
        var b = this.getPropertyString();
        return a ? a === this._item ? b : a._parent === this._item ? "Parent!" + b : "Item." + this._item.getId() + "!" + b : "Item." + this._item.getId() + "!" + b
    }
    return this._str
};
JSG.graph.expr.Reference.prototype.getPropertyString = function () {
    return this.isResolved() ? this._property.id : this._property
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.AttributeReference = function (a, b) {
    JSG.graph.expr.AttributeReference._super.constructor.call(this, a);
    this._item = a;
    this._path = b
};
JSG.extend(JSG.graph.expr.AttributeReference, JSG.graph.expr.Reference);
JSG.graph.expr.AttributeReference.prototype.copy = function () {
    return new JSG.graph.expr.AttributeReference(this._item, this._path)
};
JSG.graph.expr.AttributeReference.prototype.getAttributeOwner = function () {
    return this._item
};
JSG.graph.expr.AttributeReference.prototype.getAttribute = function () {
    return this._item.getAttributeAtPath(this._path)
};
JSG.graph.expr.AttributeReference.prototype.getValue = function () {
    var a = this.getAttribute();
    return a ? a.getValue() : "undefined"
};
JSG.graph.expr.AttributeReference.prototype.getPropertyString = function () {
    var a = this.getAttribute();
    return a ? a.getPath() : ""
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.Term = function (a, b, c) {
    this.type = "term";
    this._operand = a;
    this.setLeft(b);
    this.setRight(c)
};
JSG.graph.expr.Term.fromNumber = function (a) {
    return new JSG.graph.expr.Term(new JSG.graph.expr.Operand(a, JSG.graph.expr.Operand.NUMBER))
};
JSG.graph.expr.Term.fromString = function (a) {
    return new JSG.graph.expr.Term(new JSG.graph.expr.Operand(a, JSG.graph.expr.Operand.STRING))
};
JSG.graph.expr.Term.fromReference = function (a) {
    return new JSG.graph.expr.Term(new JSG.graph.expr.Operand(a, JSG.graph.expr.Operand.REFERENCE))
};
JSG.graph.expr.Term.prototype.newInstance = function () {
    return new JSG.graph.expr.Term
};
JSG.graph.expr.Term.prototype.copy = function () {
    var a = this.newInstance();
    a.setTo(this);
    return a
};
JSG.graph.expr.Term.prototype.isEqualTo = function (a) {
    if (a) {
        var b = this._left ? this._left.isEqualTo(a._left) : !a._left;
        return (b = b && (this._right ? this._right.isEqualTo(a._right) : !a._right)) && (this._operand ? this._operand.isEqualTo(a._operand) : !a._operand)
    }
    return !1
};
JSG.graph.expr.Term.prototype.hasCycle = function (a) {
    var b = this._cycleCheck;
    b.start = a || {id: void 0, property: void 0};
    b.start.hasCycle = !1;
    this.traverse(b);
    return b.start.hasCycle
};
JSG.graph.expr.Term.prototype._cycleCheck = function (a) {
    var b;
    b = a.getOperand();
    a = this.start;
    b && b.type === JSG.graph.expr.Operand.REFERENCE && ((b = b.value, a.property) ? b.isResolved() && (a.hasCycle = b._item && b._item.getId() == a.id && b.getPropertyString() === a.property) : (a.id = b._item ? b._item.getId() : void 0, a.property = b.getPropertyString()));
    return !a.hasCycle
};
JSG.graph.expr.Term.prototype.traverse = function (a, b) {
    var c, d;
    b = b || a;
    if (c = !(a && !a.call(b, this)))if (this._operand && this._operand.type === JSG.graph.expr.Operand.REFERENCE)c = this._followReference(this._operand.value, a, b); else if (c = (d = this.getTerm("_left")) ? d.traverse(a, b) : c)c = (d = this.getTerm("_right")) ? d.traverse(a, b) : c;
    return c
};
JSG.graph.expr.Term.prototype._followReference = function (a, b, c) {
    return (a = (a = a._property && a._property.getValue ? a._property.getValue(a._propertyObject) : void 0) && a.getTerm ? a.getTerm() : void 0) ? a.traverse(b, c) : !0
};
JSG.graph.expr.Term.prototype.setTo = function (a) {
    a && (this.setLeft(a._left), this.setRight(a._right), this._operand = void 0, a._operand && (this._operand = a._operand.copy()))
};
JSG.graph.expr.Term.prototype.setLeft = function (a) {
    this._setTerm("_left", a)
};
JSG.graph.expr.Term.prototype.setRight = function (a) {
    this._setTerm("_right", a)
};
JSG.graph.expr.Term.prototype._setTerm = function (a, b) {
    this[a] = void 0;
    b && (this[a] = b.copy())
};
JSG.graph.expr.Term.prototype.getTerm = function (a) {
    return this[a]
};
JSG.graph.expr.Term.prototype.getLeft = function () {
    return this.getTerm("_left")
};
JSG.graph.expr.Term.prototype.getRight = function () {
    return this.getTerm("_right")
};
JSG.graph.expr.Term.prototype.getOperand = function () {
    return this._operand
};
JSG.graph.expr.Term.prototype.getValue = function () {
    return this._operand ? this._operand.getValue() : void 0
};
JSG.graph.expr.Term.prototype.toString = function (a) {
    return this._operand ? this._operand.toString(a) : "undefined"
};
JSG.graph.expr.Term.prototype.toStringWithBrackets = function (a) {
    a = this.toString(a);
    this._operand || (a = "(" + a + ")");
    return a
};
JSG.graph.expr.Term.Add = function (a, b) {
    JSG.graph.expr.Term.Add._super.constructor.call(this, void 0, a, b);
    this.type = "add"
};
JSG.extend(JSG.graph.expr.Term.Add, JSG.graph.expr.Term);
JSG.graph.expr.Term.Add.prototype.newInstance = function () {
    return new JSG.graph.expr.Term.Add
};
JSG.graph.expr.Term.Add.prototype.getValue = function () {
    var a = this._left.getValue(), b = this._right.getValue();
    return a + b
};
JSG.graph.expr.Term.Add.prototype.toString = function (a) {
    return this._left.toStringWithBrackets(a) + " + " + this._right.toStringWithBrackets(a)
};
JSG.graph.expr.Term.Sub = function (a, b) {
    JSG.graph.expr.Term.Sub._super.constructor.call(this, void 0, a, b);
    this.type = "sub"
};
JSG.extend(JSG.graph.expr.Term.Sub, JSG.graph.expr.Term);
JSG.graph.expr.Term.Sub.prototype.newInstance = function () {
    return new JSG.graph.expr.Term.Sub
};
JSG.graph.expr.Term.Sub.prototype.getValue = function () {
    var a = this._left.getValue(), b = this._right.getValue();
    return a - b
};
JSG.graph.expr.Term.Sub.prototype.toString = function (a) {
    return this._left.toStringWithBrackets(a) + " - " + this._right.toStringWithBrackets(a)
};
JSG.graph.expr.Term.Mul = function (a, b) {
    JSG.graph.expr.Term.Mul._super.constructor.call(this, void 0, a, b);
    this.type = "mul"
};
JSG.extend(JSG.graph.expr.Term.Mul, JSG.graph.expr.Term);
JSG.graph.expr.Term.Mul.prototype.newInstance = function () {
    return new JSG.graph.expr.Term.Mul
};
JSG.graph.expr.Term.Mul.prototype.getValue = function () {
    var a = this._left.getValue(), b = this._right.getValue();
    return a * b
};
JSG.graph.expr.Term.Mul.prototype.toString = function (a) {
    return this._left.toStringWithBrackets(a) + " * " + this._right.toStringWithBrackets(a)
};
JSG.graph.expr.Term.Div = function (a, b) {
    JSG.graph.expr.Term.Div._super.constructor.call(this, void 0, a, b);
    this.type = "div"
};
JSG.extend(JSG.graph.expr.Term.Div, JSG.graph.expr.Term);
JSG.graph.expr.Term.Div.prototype.newInstance = function () {
    return new JSG.graph.expr.Term.Div
};
JSG.graph.expr.Term.Div.prototype.getValue = function () {
    var a, b;
    return this._left && this._right ? (a = this._left.getValue(), b = this._right.getValue(), 0 !== b ? a / b : 0) : 0
};
JSG.graph.expr.Term.Div.prototype.toString = function (a) {
    return this._left.toStringWithBrackets(a) + " / " + this._right.toStringWithBrackets(a)
};
JSG.graph.expr.Term.Bool = function (a, b) {
    JSG.graph.expr.Term.Bool._super.constructor.call(this, void 0, a, b);
    this.type = "bool"
};
JSG.extend(JSG.graph.expr.Term.Bool, JSG.graph.expr.Term);
JSG.graph.expr.Term.Bool.createFrom = function (a, b, c) {
    b = new JSG.graph.expr.Term.Bool(b, c);
    b._getBoolValue = JSG.graph.expr.Term.Bool._createBoolFuncFrom(a) || b._getBoolValue;
    b._operator = a;
    return b
};
JSG.graph.expr.Term.Bool._createBoolFuncFrom = function (a) {
    var b, c = JSG.graph.expr.Term.Bool;
    switch (a) {
        case "!":
            b = c._not;
            break;
        case "!\x3d":
            b = c._notEqual;
            break;
        case "\x3d\x3d":
            b = c._equal;
            break;
        case "\x3e":
            b = c._greater;
            break;
        case "\x3e\x3d":
            b = c._greaterEqual;
            break;
        case "\x3c":
            b = c._less;
            break;
        case "\x3c\x3d":
            b = c._lessEqual;
            break;
        case "\x26":
            b = c._and;
            break;
        case "|":
            b = c._or
    }
    return b
};
JSG.graph.expr.Term.Bool.prototype.newInstance = function () {
    var a = new JSG.graph.expr.Term.Bool;
    a._getBoolValue = this._getBoolValue;
    a._operator = this._operator;
    return a
};
JSG.graph.expr.Term.Bool._not = function (a, b) {
    return !a
};
JSG.graph.expr.Term.Bool._equal = function (a, b) {
    return a == b
};
JSG.graph.expr.Term.Bool._notEqual = function (a, b) {
    return a != b
};
JSG.graph.expr.Term.Bool._greater = function (a, b) {
    return a > b
};
JSG.graph.expr.Term.Bool._greaterEqual = function (a, b) {
    return a >= b
};
JSG.graph.expr.Term.Bool._less = function (a, b) {
    return a < b
};
JSG.graph.expr.Term.Bool._lessEqual = function (a, b) {
    return a <= b
};
JSG.graph.expr.Term.Bool._and = function (a, b) {
    return a && b
};
JSG.graph.expr.Term.Bool._or = function (a, b) {
    return a || b
};
JSG.graph.expr.Term.Bool.prototype.getValue = function () {
    var a, b, c = JSG.graph.expr.Term.Bool._isResolved;
    if (this._left) {
        if (!c(this._left._operand))return !1;
        a = this._left.getValue()
    }
    if (this._right) {
        if (!c(this._right._operand))return !1;
        b = this._right.getValue()
    }
    return this._getBoolValue(a, b)
};
JSG.graph.expr.Term.Bool._isResolved = function (a) {
    return a && a.type === JSG.graph.expr.Operand.REFERENCE ? a.value.isResolved() : !0
};
JSG.graph.expr.Term.Bool.prototype._getBoolValue = function (a, b) {
    return !0
};
JSG.graph.expr.Term.Bool.prototype.toString = function (a) {
    return this._left.toStringWithBrackets(a) + this._operator + this._right.toStringWithBrackets(a)
};
JSG.graph.expr.Term.Cond = function (a, b, c) {
    JSG.graph.expr.Term.Cond._super.constructor.call(this, void 0, b, c);
    this.type = "cond";
    this._condition = a
};
JSG.extend(JSG.graph.expr.Term.Cond, JSG.graph.expr.Term);
JSG.graph.expr.Term.Cond.prototype.newInstance = function () {
    var a = new JSG.graph.expr.Term.Cond;
    a._setTerm("_condition", this._condition);
    return a
};
JSG.graph.expr.Term.Cond.prototype.getValue = function () {
    return JSG.graph.expr.Term.Bool._isResolved(this._condition._operand) && this._condition.getValue() ? this._left.getValue() : this._right.getValue()
};
JSG.graph.expr.Term.Cond.prototype.isEqualTo = function (a) {
    return JSG.graph.expr.Term.Cond._super.isEqualTo.call(this, a) && (this._condition ? this._condition.isEqualTo(a._condition) : !a._condition)
};
JSG.graph.expr.Term.Cond.prototype.isTrue = function () {
    return JSG.graph.expr.Term.Bool._isResolved(this._condition._operand) ? !!this._condition.getValue() : !1
};
JSG.graph.expr.Term.Cond.prototype.traverse = function (a, b) {
    var c = JSG.graph.expr.Term.Cond._super.traverse.call(this, a, b), d = this.getTerm("_condition");
    c && d && (c = d.traverse(a, b));
    return c
};
JSG.graph.expr.Term.Cond.prototype.setCondition = function (a) {
    this._setTerm("_condition", a)
};
JSG.graph.expr.Term.Cond.prototype.getCondition = function () {
    return this.getTerm("_condition")
};
JSG.graph.expr.Term.Cond.prototype.getTrue = function () {
    return this.getTerm("_left")
};
JSG.graph.expr.Term.Cond.prototype.getFalse = function () {
    return this.getTerm("_right")
};
JSG.graph.expr.Term.Cond.prototype.setTo = function (a) {
    JSG.graph.expr.Term.Cond._super.setTo.call(this, a);
    this._setTerm("_condition", a._condition)
};
JSG.graph.expr.Term.Cond.prototype.toString = function (a) {
    return "?(" + this._condition.toStringWithBrackets(a) + " , " + this._left.toStringWithBrackets(a) + " , " + this._right.toStringWithBrackets(a) + ")"
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.Expression = function (a, b, c) {
    this._isLocked = !1;
    this._constraint = new JSG.graph.expr.ExpressionConstraint;
    this._formula = this._value = this._term = void 0;
    this.set(a, b, c);
    this._isDirty = !1;
    this._ctxtPath = void 0
};
JSG.graph.expr.Expression.prototype.newInstance = function () {
    return new JSG.graph.expr.Expression
};
JSG.graph.expr.Expression.prototype.copy = function () {
    var a = this.newInstance(), b = void 0 !== this._formula ? this._formula : void 0 !== this._term ? this._term.toString() : void 0;
    a.set(this.getValue(), b);
    a._constraint = void 0 !== this._constraint ? this._constraint.copy() : void 0;
    return a
};
JSG.graph.expr.Expression.prototype.isEqualTo = function (a) {
    return void 0 !== a ? this._formula === a._formula && this.isValueEqualTo(a._value) : !1
};
JSG.graph.expr.Expression.prototype.isEqualToExpressionOrValue = function (a) {
    return a instanceof JSG.graph.expr.Expression ? this.isEqualTo(a) : void 0 === this._formula ? this.isValueEqualTo(a) : !1
};
JSG.graph.expr.Expression.prototype.isValueEqualTo = function (a) {
    return this._value === a
};
JSG.graph.expr.Expression.prototype.getPureValue = function () {
    return this.getValue()
};
JSG.graph.expr.Expression.prototype.getValue = function () {
    if (this._term) {
        var a = this._term.getValue();
        void 0 === a ? this._term = void 0 : this._value = this._constraint ? this._constraint.getValue(a) : a
    }
    return this._value
};
JSG.graph.expr.Expression.prototype.getFormula = function () {
    return this._formula
};
JSG.graph.expr.Expression.prototype.getTerm = function () {
    return this._term
};
JSG.graph.expr.Expression.prototype.getConstraint = function () {
    return this._constraint
};
JSG.graph.expr.Expression.prototype.isLocked = function () {
    return this._isLocked
};
JSG.graph.expr.Expression.prototype.setLocked = function (a) {
    return this._isLocked !== a ? (this._isLocked = a, !0) : !1
};
JSG.graph.expr.Expression.prototype.hasFormula = function () {
    return void 0 !== this._formula
};
JSG.graph.expr.Expression.prototype.hasTerm = function () {
    return void 0 !== this._term
};
JSG.graph.expr.Expression.prototype.setConstraint = function (a) {
    return void 0 !== a && this._constraint !== a ? (this._constraint = a, !0) : !1
};
JSG.graph.expr.Expression.prototype.setValue = function (a) {
    return this._isLocked || this._constraint && !this._constraint.isValid(a) ? !1 : this.isValueEqualTo(a) ? !1 : (this._value = a, !0)
};
JSG.graph.expr.Expression.prototype.setFormula = function (a) {
    return this._isLocked || this._formula === a ? !1 : (this._formula = a, this._isDirty = !0)
};
JSG.graph.expr.Expression.prototype.setTerm = function (a) {
    return this._isLocked || this._equalTerms(this._term, a) ? !1 : (this._isDirty = void 0 !== this._formula, this._term = void 0 !== a ? a.copy() : void 0, !0)
};
JSG.graph.expr.Expression.prototype._equalTerms = function (a, b) {
    return a ? a.isEqualTo(b) : !b
};
JSG.graph.expr.Expression.prototype.setTo = function (a) {
    var b = !1;
    void 0 !== a && (this._isLocked = !1, b = this.set(a.getValue(), a.getFormula(), a.getTerm()), this._isLocked = a._isLocked);
    return b
};
JSG.graph.expr.Expression.prototype.set = function (a, b, c) {
    var d = !1, d = this.setValue(a) || d, d = this.setTerm(c) || d;
    return d = this.setFormula(b) || d
};
JSG.graph.expr.Expression.prototype.setExpressionOrValue = function (a) {
    return a instanceof JSG.graph.expr.Expression ? this.setTo(a) : this.set(a)
};
JSG.graph.expr.Expression.prototype.invalidateTerm = function () {
    this._isDirty = !0
};
JSG.graph.expr.Expression.prototype.evaluate = function (a) {
    if (void 0 === this._formula)this._ctxtPath = void 0; else if (this._isDirty || !this._isContextEqualTo(a)) {
        var b = void 0 !== a ? a.getGraph() : void 0, c = this._isLocked;
        this._isLocked = !1;
        try {
            this.setTerm(JSG.graph.expr.FormulaParser.parse(this._formula, b, a)), this._isDirty = !1
        } catch (d) {
            JSG.debug.logError("Failed to evaluate formula '" + this._formula + "'!", d)
        }
        this._isLocked = c
    }
};
JSG.graph.expr.Expression.prototype._isContextEqualTo = function (a) {
    a = void 0 !== a ? a.createPath() : void 0;
    if (void 0 !== a) {
        a = a.toString();
        var b = this._ctxtPath === a;
        this._ctxtPath = a;
        return b
    }
    this._ctxtPath = void 0;
    return !1
};
JSG.graph.expr.Expression.prototype.resolveParentReference = function (a, b) {
    if (void 0 !== this._formula && -1 !== this._formula.toLowerCase().indexOf("parent"))if (b)this.setFormula(void 0); else if (void 0 !== a) {
        var c = "Item." + this.getParent().getId();
        this.setFormula(this._formula.replace("Parent", c))
    }
};
JSG.graph.expr.Expression.prototype.toString = function (a) {
    if (void 0 !== this._formula)return this._formula;
    if (void 0 !== this._term)return this._term.toString(a);
    a = this.getValue();
    return void 0 !== a ? a.toString() : ""
};
JSG.graph.expr.Expression.prototype._setTerm = function (a) {
    var b = this._isLocked;
    this._isLocked = !1;
    this.setTerm(a);
    this._isLocked = b
};
JSG.graph.expr.Expression.prototype.saveXML = function (a, b, c) {
    b.writeStartElement(a);
    void 0 !== this._formula ? this._writeFormulaAttribute(b) : void 0 !== this._term && this._writeTermAttribute(b);
    this._writeValueAttribute(b, c);
    a = typeof this._value;
    "n" !== a[0] && b.writeAttributeString("t", a[0]);
    this._isLocked && b.writeAttributeString("locked", "true");
    this._constraint && this._constraint.doSave(this) && this._writeConstraint("cstr", b);
    b.writeEndElement()
};
JSG.graph.expr.Expression.prototype._writeFormulaAttribute = function (a, b) {
    b = b || this._formula;
    a.writeAttributeString("f", JSG.Strings.encode(b))
};
JSG.graph.expr.Expression.prototype._writeTermAttribute = function (a) {
    a.writeAttributeString("f", JSG.Strings.encode(this._term.toString()))
};
JSG.graph.expr.Expression.prototype._writeValueAttribute = function (a, b) {
    void 0 !== this._value && a.writeAttributeString("v", JSG.Strings.encode(this._value.toString()))
};
JSG.graph.expr.Expression.prototype._writeConstraint = function (a, b) {
    b.writeStartElement(a);
    b.writeAttributeString("cl", this._constraint.getClassString());
    this._constraint.saveXML(b);
    b.writeEndElement()
};
JSG.graph.expr.Expression.prototype.readXML = function (a) {
    var b = this._readValueAttribute(a), c = this._readFormulaAttribute(a), d = this._readConstraint(a);
    a = a.getAttribute("locked");
    this._isLocked = !1;
    this.set(b, c);
    this.setConstraint(d);
    this._isLocked = a && "true" === a
};
JSG.graph.expr.Expression.prototype._readFormulaAttribute = function (a) {
    a = a.getAttribute("f");
    if (null !== a)return a = JSG.Strings.decode(a), void 0 !== JSG.connectionRestorer && -1 !== a.indexOf("Item.", 0) && JSG.connectionRestorer.expressions.push(this), a
};
JSG.graph.expr.Expression.prototype._readValueAttribute = function (a) {
    var b = a.getAttribute("t");
    a = a.getAttribute("v");
    null === b && (b = "number");
    return a = null === a ? 0 : "number" === b || "n" === b ? Number(a) : "boolean" === b || "b" === b ? "true" === a ? !0 : !1 : JSG.Strings.decode(a)
};
JSG.graph.expr.Expression.prototype._readConstraint = function (a) {
    var b, c = (a = JSG.commons.XML.findElementByTagName(a, "cstr")) && a.getAttribute("cl");
    c && (b = JSG.createObjectFromString(c)) && b.readXML(a);
    return b
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.ExpressionProxy = function (a) {
    this._expression = a;
    var b = a.getTerm(), b = void 0 !== b ? b.copy() : void 0;
    JSG.graph.expr.ExpressionProxy._super.constructor.call(this, a.getValue(), a.getFormula(), b)
};
JSG.extend(JSG.graph.expr.ExpressionProxy, JSG.graph.expr.Expression);
JSG.graph.expr.ExpressionProxy.prototype.getExpression = function () {
    return this._expression
};
JSG.graph.expr.ExpressionProxy.prototype.copy = function () {
    return new JSG.graph.expr.ExpressionProxy(this._expression)
};
JSG.graph.expr.ExpressionProxy.prototype.isEqualTo = function (a) {
    return this._expression.isEqualTo(a)
};
JSG.graph.expr.ExpressionProxy.prototype.getFormula = function () {
    return this._expression.getFormula()
};
JSG.graph.expr.ExpressionProxy.prototype.getTerm = function () {
    return this._expression.getTerm()
};
JSG.graph.expr.ExpressionProxy.prototype.getValue = function () {
    return this._expression.getValue()
};
JSG.graph.expr.ExpressionProxy.prototype.hasFormula = function () {
    return this._expression.hasFormula()
};
JSG.graph.expr.ExpressionProxy.prototype.isLocked = function () {
    return this._expression.isLocked()
};
JSG.graph.expr.ExpressionProxy.prototype.setLocked = function (a) {
    this._expression.setLocked(a)
};
JSG.graph.expr.ExpressionProxy.prototype.setConstraint = function (a) {
    this._expression.setConstraint(a)
};
JSG.graph.expr.ExpressionProxy.prototype.setFormula = function (a) {
    this._expression.setFormula(a)
};
JSG.graph.expr.ExpressionProxy.prototype.setTerm = function (a) {
    this._expression.setTerm(a)
};
JSG.graph.expr.ExpressionProxy.prototype.setValue = function (a) {
    this._expression.setValue(a)
};
JSG.graph.expr.ExpressionProxy.prototype.evaluate = function (a) {
    this._expression.evaluate(a)
};
JSG.graph.expr.ExpressionProxy.prototype.toString = function (a) {
    return this._expression.toString(a)
};
JSG.graph.expr.ExpressionProxy.prototype._setTerm = function (a) {
    this._expression._setTerm(a)
};
JSG.graph.expr.ExpressionProxy.prototype.saveXML = function (a, b) {
    this._expression.saveXML(a, b)
};
JSG.graph.expr.ExpressionProxy.prototype.readXML = function (a) {
    this._expression.readXML(a)
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.ExpressionConstraint = function (a) {
    this.defValue = a;
    this.isDefault = !0
};
JSG.graph.expr.ExpressionConstraint.CLASSNAME = "JSG.graph.expr.ExpressionConstraint";
JSG.graph.expr.ExpressionConstraint.prototype.getClassString = function () {
    return JSG.graph.expr.ExpressionConstraint.CLASSNAME
};
JSG.graph.expr.ExpressionConstraint.prototype.doSave = function (a) {
    return !this.isDefault
};
JSG.graph.expr.ExpressionConstraint.prototype.saveXML = function (a) {
    var b = this._typeOf(this.defValue), c = !(this.defValue || 0 === this.defValue);
    a.writeStartElement("ec");
    c || (a.writeAttributeString("def", this.defValue), b && a.writeAttributeString("t", b));
    return a.writeEndElement(c)
};
JSG.graph.expr.ExpressionConstraint.prototype._typeOf = function (a) {
    var b;
    if (a || 0 === a)b = (b = typeof a) ? b[0].toLowerCase() : void 0;
    return b
};
JSG.graph.expr.ExpressionConstraint.prototype.readXML = function (a) {
    var b;
    JSG.commons.XML.findElementByTagName(a, "ec") && (b = a.getAttribute("def")) && (this.defValue = this._convert(b, a.getAttribute("t")))
};
JSG.graph.expr.ExpressionConstraint.prototype._convert = function (a, b) {
    switch (b) {
        case "n":
            a = Number(a);
            break;
        case "b":
            a = "true" === a ? !0 : !1
    }
    return a
};
JSG.graph.expr.ExpressionConstraint.prototype.copy = function () {
    return new JSG.graph.expr.ExpressionConstraint(this.defValue)
};
JSG.graph.expr.ExpressionConstraint.prototype.isValid = function (a) {
    return JSG.Strings.isString(a) || JSG.Numbers.isNumber(a) || !0 === a || !1 === a
};
JSG.graph.expr.ExpressionConstraint.prototype.getValue = function (a) {
    return this.isValid(a) ? a : JSG.Numbers.canBeNumber(a) ? Number(a) : this.defValue
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.ConstExpression = function (a, b, c) {
    JSG.graph.expr.ConstExpression._super.constructor.call(this, a, b, c);
    this._term = c;
    this._value = a;
    this._formula = b
};
JSG.extend(JSG.graph.expr.ConstExpression, JSG.graph.expr.Expression);
JSG.graph.expr.ConstExpression.fromExpression = function (a) {
    function b(a) {
        return a && a.copy ? a.copy() : a
    }

    b(a.getValue());
    var c = b(a.getTerm()), c = new JSG.graph.expr.ConstExpression(a.getValue(), a.getFormula(), c);
    JSG.graph.expr.ConstExpression._super.setConstraint.call(c, b(a.getConstraint()));
    return c
};
JSG.graph.expr.ConstExpression.prototype.newInstance = function () {
    return new JSG.graph.expr.ConstExpression(this.getValue(), this.getFormula(), this.getTerm())
};
JSG.graph.expr.ConstExpression.prototype.copy = function () {
    return this.newInstance()
};
JSG.graph.expr.ConstExpression.prototype.setLocked = function (a) {
    return !1
};
JSG.graph.expr.ConstExpression.prototype.setConstraint = function (a) {
    return !1
};
JSG.graph.expr.ConstExpression.prototype.setValue = function (a) {
    return !1
};
JSG.graph.expr.ConstExpression.prototype.setFormula = function (a) {
    return !1
};
JSG.graph.expr.ConstExpression.prototype.setTerm = function (a) {
    return !1
};
JSG.graph.expr.ConstExpression.prototype.setTo = function (a) {
    return !1
};
JSG.graph.expr.ConstExpression.prototype.set = function (a, b, c) {
    return !1
};
JSG.graph.expr.ConstExpression.prototype.setExpressionOrValue = function (a) {
    return !1
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.BooleanExpression = function (a, b, c) {
    JSG.graph.expr.BooleanExpression._super.constructor.call(this);
    this._constraint = new JSG.graph.expr.BooleanConstraint;
    this.set(a, b, c)
};
JSG.extend(JSG.graph.expr.BooleanExpression, JSG.graph.expr.Expression);
JSG.graph.expr.BooleanExpression.prototype.newInstance = function () {
    return new JSG.graph.expr.BooleanExpression
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.NumberExpression = function (a, b, c) {
    JSG.graph.expr.NumberExpression._super.constructor.call(this);
    this._constraint = new JSG.graph.expr.NumberConstraint(0);
    this.set(a, b, c)
};
JSG.extend(JSG.graph.expr.NumberExpression, JSG.graph.expr.Expression);
JSG.graph.expr.NumberExpression.prototype.newInstance = function () {
    return new JSG.graph.expr.NumberExpression
};
JSG.graph.expr.NumberExpression.prototype.isValueEqualTo = function (a) {
    return void 0 === this._value ? void 0 === a : JSG.Numbers.areEqual(this._value, a, 1E-6)
};
JSG.graph.expr.NumberExpression.prototype.setValue = function (a) {
    a = this._constraint ? this._constraint.getValue(a) : a;
    return JSG.graph.expr.NumberExpression._super.setValue.call(this, a)
};
JSG.graph.expr.NumberExpression.prototype._writeValueAttribute = function (a, b) {
    a.writeAttributeString("v", this._value.toFixed(void 0 === b ? this._constraint.decimals : b))
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.StringExpression = function (a, b, c) {
    JSG.graph.expr.StringExpression._super.constructor.call(this);
    this._constraint = new JSG.graph.expr.StringConstraint;
    this.set(a, b, c)
};
JSG.extend(JSG.graph.expr.StringExpression, JSG.graph.expr.Expression);
JSG.graph.expr.StringExpression.prototype.newInstance = function () {
    return new JSG.graph.expr.StringExpression
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.ObjectExpression = function (a) {
    JSG.graph.expr.ObjectExpression._super.constructor.call(this);
    this._constraint = new JSG.graph.expr.ObjectConstraint;
    this.set(a)
};
JSG.extend(JSG.graph.expr.ObjectExpression, JSG.graph.expr.Expression);
JSG.graph.expr.ObjectExpression.prototype.newInstance = function () {
    var a = this._value && this._value.copy ? this._value.copy() : this.value;
    return new JSG.graph.expr.ObjectExpression(a)
};
JSG.graph.expr.ObjectExpression.prototype.copy = function () {
    var a = this.newInstance();
    a._constraint = void 0 !== this._constraint ? this._constraint.copy() : void 0;
    return a
};
JSG.graph.expr.ObjectExpression.prototype.isEqualTo = function (a) {
    return a ? this.isValueEqualTo(a._value) : !1
};
JSG.graph.expr.ObjectExpression.prototype.isEqualToExpressionOrValue = function (a) {
    return a instanceof JSG.graph.expr.ObjectExpression ? this.isEqualTo(a) : this.isValueEqualTo(a)
};
JSG.graph.expr.ObjectExpression.prototype.getValue = function () {
    return this._value
};
JSG.graph.expr.ObjectExpression.prototype.setFormula = function (a) {
    return !1
};
JSG.graph.expr.ObjectExpression.prototype.setTerm = function (a) {
    return !1
};
JSG.graph.expr.ObjectExpression.prototype.set = function (a, b, c) {
    return this.setValue(a)
};
JSG.graph.expr.ObjectExpression.prototype.evaluate = function (a) {
};
JSG.graph.expr.ObjectExpression.prototype.resolveParentReference = function (a, b) {
};
JSG.graph.expr.ObjectExpression.prototype.toString = function (a) {
    return this._value && this._value.toString ? this._value.toString() : "n.d."
};
JSG.graph.expr.ObjectExpression.prototype.saveXML = function (a, b) {
    b.writeStartElement(a);
    this._writeValue(b);
    b.writeEndElement()
};
JSG.graph.expr.ObjectExpression.prototype._writeValue = function (a) {
    void 0 !== this._value && (this._value.saveXML && this._value.getClassName) && (a.writeAttributeString("cl", this._value.getClassName()), this._value.saveXML(a))
};
JSG.graph.expr.ObjectExpression.prototype.readXML = function (a) {
    this._isLocked = !1;
    this.set(this._readValue(a));
    void 0 !== a.getAttribute("locked") && (this._isLocked = !0)
};
JSG.graph.expr.ObjectExpression.prototype._readValue = function (a) {
    var b = a.getAttribute("cl");
    (b = JSG.createObjectFromString(b)) && b.readXML && b.readXML(a);
    return b
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.MapExpression = function (a, b, c) {
    JSG.graph.expr.MapExpression._super.constructor.call(this);
    this._value = new JSG.commons.Map
};
JSG.extend(JSG.graph.expr.MapExpression, JSG.graph.expr.Expression);
JSG.graph.expr.MapExpression.prototype.isEmpty = function () {
    return this._value.isEmpty()
};
JSG.graph.expr.MapExpression.prototype.hasElement = function (a) {
    return this._value.contains(a)
};
JSG.graph.expr.MapExpression.prototype.putElement = function (a, b) {
    return this._value.put(a, b)
};
JSG.graph.expr.MapExpression.prototype.getElement = function (a) {
    return this._value.get(a)
};
JSG.graph.expr.MapExpression.prototype.removeElement = function (a) {
    return this._value.remove(a)
};
JSG.graph.expr.MapExpression.prototype.newInstance = function () {
    return new JSG.graph.expr.MapExpression
};
JSG.graph.expr.MapExpression.prototype.copy = function () {
    var a = this.newInstance();
    this._value.iterate(function (b, c) {
        var d = void 0 !== c.copy ? c.copy() : c;
        a.putElement(b, d)
    });
    return a
};
JSG.graph.expr.MapExpression.prototype.isValueEqualTo = function (a) {
    return this._value === a
};
JSG.graph.expr.MapExpression.prototype.getValue = function () {
    return this._value.elements()
};
JSG.graph.expr.MapExpression.prototype.iterate = function (a) {
    this._value.iterate(a)
};
JSG.graph.expr.MapExpression.prototype.setConstraint = function (a) {
    return !1
};
JSG.graph.expr.MapExpression.prototype.setValue = function (a) {
    return !1
};
JSG.graph.expr.MapExpression.prototype.setFormula = function (a) {
    return !1
};
JSG.graph.expr.MapExpression.prototype.setTerm = function (a) {
    return !1
};
JSG.graph.expr.MapExpression.prototype.setTo = function (a) {
    return !1
};
JSG.graph.expr.MapExpression.prototype.set = function (a, b, c) {
    return !1
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.AttributeExpression = function (a) {
    JSG.graph.expr.AttributeExpression._super.constructor.call(this, "", a)
};
JSG.extend(JSG.graph.expr.AttributeExpression, JSG.graph.expr.StringExpression);
JSG.graph.expr.AttributeExpression.prototype.newInstance = function () {
    return new JSG.graph.expr.AttributeExpression
};
JSG.graph.expr.AttributeExpression.prototype.getAttribute = function () {
    var a = this._getAttributeReference();
    return void 0 !== a ? a.getAttribute() : void 0
};
JSG.graph.expr.AttributeExpression.prototype.getAttributeOwner = function () {
    var a = this._getAttributeReference();
    return void 0 !== a ? a.getAttributeOwner() : void 0
};
JSG.graph.expr.AttributeExpression.prototype._getAttributeReference = function () {
    if (void 0 !== this._term) {
        var a = this._term.getOperand();
        if (void 0 !== a && a.value instanceof JSG.graph.expr.AttributeReference)return a.value
    }
};
JSG.graph.expr.AttributeExpression.prototype.getValue = function () {
    void 0 !== this._term && (this._value = this._term.getValue());
    return this._value
};
JSG.graph.expr.AttributeExpression.prototype.saveXML = function (a, b, c) {
    b.writeStartElement(a);
    void 0 !== this._formula && (a = c ? this.resolveFormula(c) : this._formula, this._writeFormulaAttribute(b, a));
    this._isLocked && b.writeAttributeString("locked", "true");
    b.writeEndElement()
};
JSG.graph.expr.AttributeExpression.prototype.resolveFormula = function (a) {
    a = "Item." + a.getParent().getId();
    return this._formula.replace("Parent", a)
};
JSG.graph.expr.AttributeExpression.prototype.readXML = function (a) {
    this._isLocked = !1;
    this.setFormula(this._readFormulaAttribute(a));
    null !== a.getAttribute("locked") && (this._isLocked = !0)
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.FormulaParser = function () {
    function a() {
        for (; z < D && (!x || x === w || x === u);)x = B.charCodeAt(z++)
    }

    function b(a, b) {
        JSG.throwException("FormularParser Error", a + " at index " + b)
    }

    function c(a, b, d) {
        var e;
        if ("unaryop" === a.type)"-" === a.operator || "+" === a.operator ? (b = c(a.arg, b, d), e = new JSG.graph.expr.Term(JSG.graph.expr.Operand.fromString(a.operator + "1")), a = new JSG.graph.expr.Term.Mul(e, b)) : (e = c(a.arg, b, d), a = JSG.graph.expr.Term.Bool.createFrom(a.operator, e)); else if ("binaryop" === a.type)switch (e = c(a.left,
            b, d), b = c(a.right, b, d), a.operator) {
            case "+":
                a = new JSG.graph.expr.Term.Add(e, b);
                break;
            case "-":
                a = new JSG.graph.expr.Term.Sub(e, b);
                break;
            case "*":
                a = new JSG.graph.expr.Term.Mul(e, b);
                break;
            case "/":
                a = new JSG.graph.expr.Term.Div(e, b);
                break;
            default:
                a = JSG.graph.expr.Term.Bool.createFrom(a.operator, e, b)
        } else if ("condition" === a.type) {
            e = c(a.condition, b, d);
            var f = c(a.onTrue, b, d);
            a = c(a.onFalse, b, d);
            a = new JSG.graph.expr.Term.Cond(e, f, a)
        } else"string" === a.type && !0 === a.constant ? b = new JSG.graph.expr.StringConstant(a.value) :
        (b = JSG.graph.expr.Operand.fromString(a.value, b, d)) || "" !== a.value || (b = new JSG.graph.expr.Operand(a.value, JSG.graph.expr.Operand.STRING)), a = new JSG.graph.expr.Term(b);
        return a
    }

    function d(a) {
        var b;
        if ("unaryop" === a.type)b = "!" === a.operator ? !a.arg.value : "-" === a.operator ? -a.arg.value : a.arg.value; else if ("binaryop" === a.type) {
            var c = d(a.left), e = d(a.right);
            switch (a.operator) {
                case "+":
                    b = c + e;
                    break;
                case "-":
                    b = c - e;
                    break;
                case "*":
                    b = c * e;
                    break;
                case "/":
                    b = c / e;
                    break;
                case "\x3e":
                    b = c > e;
                    break;
                case "\x3e\x3d":
                    b = c >= e;
                    break;
                case "\x3c":
                    b = c < e;
                    break;
                case "\x3c\x3d":
                    b = c <= e;
                    break;
                case "\x3d\x3d":
                    b = c === e;
                    break;
                case "!\x3d":
                    b = c !== e;
                    break;
                case "|":
                    b = c || e;
                    break;
                case "\x26":
                    b = c && e
            }
        } else b = "condition" === a.type ? d(a.condition) ? d(a.onTrue) : d(a.onFalse) : a.value;
        return b
    }

    function e() {
        var c, d, e, k, l, m;
        a();
        k = g();
        if (m = f()) {
            (l = g()) || b("Missing expression after " + m, z);
            for (c = [k, m, l]; d = f();) {
                e = h(d);
                if (0 === e)break;
                for (; 2 < c.length && e <= h(c[c.length - 2]);)l = c.pop(), m = c.pop(), k = c.pop(), k = {
                    type: "binaryop",
                    operator: m,
                    left: k,
                    right: l
                }, c.push(k);
                (l =
                    g()) || b("Missing expression after " + m, z);
                c.push(d, l)
            }
            k = c[c.length - 1];
            for (d = c.length - 1; 1 < d; d -= 2)k = {type: "binaryop", operator: c[d - 1], left: c[d - 2], right: k}
        }
        return k
    }

    function f() {
        a();
        var b = 0, c = String.fromCharCode(x);
        B.charCodeAt(z) === r && (c += "\x3d", b = 1);
        if (C.hasOwnProperty(c) || F.hasOwnProperty(c))return z += b, x = B.charCodeAt(z++), c
    }

    function g() {
        a();
        var c;
        if (x === q || 48 <= x && 57 >= x) {
            for (c = ""; x === q || 48 <= x && 57 >= x || 101 === x || 69 === x;) {
                c += String.fromCharCode(x);
                if (101 === x || 69 === x)c += B.charAt(z++);
                x = B.charCodeAt(z++)
            }
            c =
            {type: "number", value: c}
        } else if (x === t) {
            var d, f;
            x = B.charCodeAt(z++);
            a();
            x === l ? (x = B.charCodeAt(z++), c = k(!0), d = k(), f = k(), x !== p && b("Expecting ')'", z), x = B.charCodeAt(z++)) : b("Expecting '('", z);
            c = {type: "condition", condition: c, onTrue: d, onFalse: f}
        } else if (x === m) {
            for (c = ""; z < D;)if (x = B.charCodeAt(z++), x === m) {
                x = B.charCodeAt(z++);
                break
            } else c += String.fromCharCode(x), x === v && (c += B.charAt(z++));
            c = {type: "string", value: c, constant: !0}
        } else if (x === l)x = B.charCodeAt(z++), c = e(), a(), x !== p && b("Missing )", z), x = B.charCodeAt(z++);
        else if (c = String.fromCharCode(x), y.hasOwnProperty(c))c = String.fromCharCode(x), x = B.charCodeAt(z++), c = {
            type: "unaryop",
            operator: c,
            arg: g()
        }; else if (x === p || x === n)c = {type: "string", value: ""}; else {
            for (c = String.fromCharCode(x); z < D;) {
                x = B.charCodeAt(z++);
                d = !0;
                switch (x) {
                    case m:
                    case l:
                    case p:
                    case n:
                    case r:
                    case t:
                    case u:
                    case w:
                    case v:
                        d = !1
                }
                (d = !d) || (d = B.charCodeAt(z), f = String.fromCharCode(x), d === r && (f += "\x3d"), d = C.hasOwnProperty(f) || F.hasOwnProperty(f));
                if (d)break;
                c += String.fromCharCode(x)
            }
            c = {type: "identifier", value: c}
        }
        return c
    }

    function k(c) {
        var d = e();
        d || b("Expecting expression", z);
        a();
        x === n ? x = B.charCodeAt(z++) : c && b("Expecting ','", z);
        return d
    }

    function h(a) {
        var b = 0;
        C.hasOwnProperty(a) ? b = C[a] : F.hasOwnProperty(a) && (b = F[a]);
        return b
    }

    var m = 34, l = 40, p = 41, n = 44, q = 46, r = 61, t = 63, u = 32, w = 9, v = 220, y = {
        "-": 12,
        "+": 12,
        "!": 12
    }, C = {"*": 10, "/": 10, "+": 8, "-": 8}, F = {
        "\x3e": 6,
        "\x3e\x3d": 6,
        "\x3c": 6,
        "\x3c\x3d": 6,
        "\x3d\x3d": 4,
        "!\x3d": 4,
        "|": 2,
        "\x26": 2
    }, z = 0, D, x, B;
    return {
        parse: function (a, b, d) {
            B = a;
            x = void 0;
            z = 0;
            D = a.length;
            a = e();
            return c(a, b, d)
        }, resultOf: function (a) {
            return d(a)
        }
    }
}();
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.BooleanConstraint = function (a) {
    JSG.graph.expr.BooleanConstraint._super.constructor.call(this, !!a || !1)
};
JSG.extend(JSG.graph.expr.BooleanConstraint, JSG.graph.expr.ExpressionConstraint);
JSG.graph.expr.BooleanConstraint.CLASSNAME = "JSG.graph.expr.BooleanConstraint";
JSG.graph.expr.BooleanConstraint.prototype.getClassString = function () {
    return JSG.graph.expr.BooleanConstraint.CLASSNAME
};
JSG.graph.expr.BooleanConstraint.prototype.copy = function () {
    return new JSG.graph.expr.BooleanConstraint(this.defValue)
};
JSG.graph.expr.BooleanConstraint.prototype.isValid = function (a) {
    return !0 === a || !1 === a
};
JSG.graph.expr.BooleanConstraint.prototype.getValue = function (a) {
    return this.isValid(a) ? a : JSG.Numbers.isNumber(a) ? 0 === a ? !1 : !0 : JSG.Strings.isString(a) ? "" === a ? !1 : !0 : this.defValue
};
JSG.graph.expr.BooleanConstraint.prototype.getNumericValue = function (a) {
    return this.getValue() ? 1 : 0
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.NumberConstraint = function (a) {
    JSG.graph.expr.NumberConstraint._super.constructor.call(this, a || 0);
    this.decimals = 0
};
JSG.extend(JSG.graph.expr.NumberConstraint, JSG.graph.expr.ExpressionConstraint);
JSG.graph.expr.NumberConstraint.CLASSNAME = "JSG.graph.expr.NumberConstraint";
JSG.graph.expr.NumberConstraint.prototype.getClassString = function () {
    return JSG.graph.expr.NumberConstraint.CLASSNAME
};
JSG.graph.expr.NumberConstraint.prototype.copy = function () {
    var a = new JSG.graph.expr.NumberConstraint(this.defValue);
    a.decimals = this.decimals;
    return a
};
JSG.graph.expr.NumberConstraint.prototype.isValid = function (a) {
    return JSG.Numbers.isNumber(a) || JSG.Numbers.canBeNumber(a)
};
JSG.graph.expr.NumberConstraint.prototype.getValue = function (a) {
    a = !1 === a ? 0 : !0 === a ? 1 : a;
    return JSG.Numbers.isNumber(a) ? a : JSG.Numbers.canBeNumber(a) ? Number(a) : this.defValue
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.RangeConstraint = function (a, b) {
    JSG.graph.expr.RangeConstraint._super.constructor.call(this, b);
    this.range = a
};
JSG.extend(JSG.graph.expr.RangeConstraint, JSG.graph.expr.ExpressionConstraint);
JSG.graph.expr.RangeConstraint.fromPropertiesOf = function (a, b) {
    var c, d = [];
    for (c in a)a.hasOwnProperty(c) && d.push(a[c]);
    return new JSG.graph.expr.RangeConstraint(d, b)
};
JSG.graph.expr.RangeConstraint.CLASSNAME = "JSG.graph.expr.RangeConstraint";
JSG.graph.expr.RangeConstraint.prototype.getClassString = function () {
    return JSG.graph.expr.RangeConstraint.CLASSNAME
};
JSG.graph.expr.RangeConstraint.prototype.saveXML = function (a) {
    var b, c, d;
    b = 0;
    for (c = this.range.length; b < c; b++)d = this.range[b], this._saveValue("val", d, this._typeOf(d), a);
    d = this.defValue;
    this._saveValue("def", d, this._typeOf(d), a);
    return 0 < c
};
JSG.graph.expr.RangeConstraint.prototype._saveValue = function (a, b, c, d) {
    if (b || 0 === b)switch (c) {
        case "b":
        case "n":
        case "s":
            d.writeStartElement(a);
            d.writeAttributeString("v", b.toString());
            d.writeAttributeString("t", c);
            d.writeEndElement();
            break;
        default:
            this._saveObjectValue(a, b, d)
    }
};
JSG.graph.expr.RangeConstraint.prototype._saveObjectValue = function (a, b, c) {
    b.saveXML && b.getClassName && (c.writeStartElement(a), c.writeAttributeString("cl", b.getClassName()), b.saveXML(c), c.writeEndElement())
};
JSG.graph.expr.RangeConstraint.prototype.readXML = function (a) {
    var b, c, d, e = [], f = JSG.commons.XML.findAllElementsByTagName(a, "val");
    b = 0;
    for (c = f.length; b < c; b++)((d = this._readValue(f[b])) || 0 === d) && e.push(d);
    this.range = e;
    this.defValue = this._readValue(JSG.commons.XML.findElementByTagName(a, "def"))
};
JSG.graph.expr.RangeConstraint.prototype._readValue = function (a) {
    var b;
    if (a)switch (b = a.getAttribute("t"), b) {
        case "b":
        case "n":
        case "s":
            b = this._convert(a.getAttribute("v"), b);
            break;
        default:
            b = this._readObjectValue(a)
    }
    return b
};
JSG.graph.expr.RangeConstraint.prototype._readObjectValue = function (a) {
    var b = a.getAttribute("cl");
    (b = JSG.createObjectFromString(b)) && b.readXML && b.readXML(a);
    return b
};
JSG.graph.expr.RangeConstraint.prototype.copy = function () {
    return new JSG.graph.expr.RangeConstraint(this.range, this.defValue)
};
JSG.graph.expr.RangeConstraint.prototype.isValid = function (a) {
    var b, c, d = !1;
    b = 0;
    for (c = this.range.length; b < c; b++)if (this.range[b] === a) {
        d = !0;
        break
    }
    return d
};
JSG.graph.expr.RangeConstraint.prototype.getValue = function (a) {
    return this.isValid(a) ? a : this.defValue
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.NumberRangeConstraint = function (a, b, c) {
    JSG.graph.expr.NumberRangeConstraint._super.constructor.call(this, c);
    this.min = a;
    this.max = b
};
JSG.extend(JSG.graph.expr.NumberRangeConstraint, JSG.graph.expr.NumberConstraint);
JSG.graph.expr.NumberRangeConstraint.CLASSNAME = "JSG.graph.expr.NumberRangeConstraint";
JSG.graph.expr.NumberRangeConstraint.prototype.getClassString = function () {
    return JSG.graph.expr.NumberRangeConstraint.CLASSNAME
};
JSG.graph.expr.NumberRangeConstraint.prototype.saveXML = function (a) {
    a.writeStartElement("nrc");
    a.writeAttributeNumber("min", this.min);
    a.writeAttributeNumber("max", this.max);
    a.writeAttributeNumber("def", this.defValue);
    return a.writeEndElement()
};
JSG.graph.expr.NumberRangeConstraint.prototype.readXML = function (a) {
    function b(b, d) {
        var e = a.getAttribute(b), e = e ? Number(e) : void 0;
        return isNaN(e) ? d : e
    }

    JSG.commons.XML.findElementByTagName(a, "nrc") && (this.min = b("min", 0), this.max = b("max", 0), this.defValue = b("def", 0))
};
JSG.graph.expr.NumberRangeConstraint.prototype.copy = function () {
    return new JSG.graph.expr.NumberRangeConstraint(this.min, this.max, this.defValue)
};
JSG.graph.expr.NumberRangeConstraint.prototype.isValid = function (a) {
    return JSG.Numbers.isNumber(a) && a >= this.min && a <= this.max
};
JSG.graph.expr.NumberRangeConstraint.prototype.getValue = function (a) {
    return a = JSG.Numbers.isNumber(a) ? Math.max(Math.min(a, this.max), this.min) : this.defValue
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.ObjectConstraint = function (a) {
    JSG.graph.expr.ObjectConstraint._super.constructor.call(this, a)
};
JSG.extend(JSG.graph.expr.ObjectConstraint, JSG.graph.expr.ExpressionConstraint);
JSG.graph.expr.ObjectConstraint.CLASSNAME = "JSG.graph.expr.ObjectConstraint";
JSG.graph.expr.ObjectConstraint.prototype.getClassString = function () {
    return JSG.graph.expr.ObjectConstraint.CLASSNAME
};
JSG.graph.expr.ObjectConstraint.prototype.copy = function () {
    return new JSG.graph.expr.ObjectConstraint(this.defValue)
};
JSG.graph.expr.ObjectConstraint.prototype.isValid = function (a) {
    return !0
};
JSG.graph.expr.ObjectConstraint.prototype.getValue = function (a) {
    return this.isValid(a) ? a : this.defValue || a
};
JSG.namespace("JSG.graph.expr");
JSG.graph.expr.StringConstraint = function (a) {
    JSG.graph.expr.StringConstraint._super.constructor.call(this, a || "")
};
JSG.extend(JSG.graph.expr.StringConstraint, JSG.graph.expr.ExpressionConstraint);
JSG.graph.expr.StringConstraint.CLASSNAME = "JSG.graph.expr.StringConstraint";
JSG.graph.expr.StringConstraint.prototype.getClassString = function () {
    return JSG.graph.expr.StringConstraint.CLASSNAME
};
JSG.graph.expr.StringConstraint.prototype.copy = function () {
    return new JSG.graph.expr.StringConstraint(this.defValue)
};
JSG.graph.expr.StringConstraint.prototype.isValid = function (a) {
    return JSG.Strings.isString(a)
};
JSG.graph.expr.StringConstraint.prototype.getValue = function (a) {
    return this.isValid(a) ? a : a && a.toString ? a.toString() : this.defValue
};
JSG.namespace("JSG.graph");
JSG.graph.Pin = function (a) {
    this._item = a;
    this._pin = new JSG.graph.Coordinate;
    this._localpin = new JSG.graph.Coordinate
};
JSG.graph.Pin.EventID = {PIN: "pin", PINX: "pinx", PINY: "piny", LOCAL: "local", LOCALX: "localx", LOCALY: "localy"};
JSG.graph.Pin.prototype.copy = function () {
    var a = new JSG.graph.Pin;
    a.setTo(this);
    return a
};
JSG.graph.Pin.prototype.saveXML = function (a, b, c) {
    b.writeStartElement(a);
    !0 === c ? (a = this._pin.copy(), c = this._pin.toPoint(JSG.ptCache.get()), c = this._item.getTranslatedPoint(c, this._item.getGraph()), a.getX().setValue(c.x), a.getY().setValue(c.y), a.saveXML("p", b), JSG.ptCache.release(c)) : this._pin.saveXML("p", b);
    this._localpin.saveXML("lp", b);
    b.writeEndElement()
};
JSG.graph.Pin.prototype.readXML = function (a) {
    if (a) {
        var b = !0;
        JSG.commons.XML.iterateChildren(this, a, function (a, d) {
            switch (d.nodeName) {
                case "p":
                    a._pin.readXML(d);
                    b = !1;
                    break;
                case "lp":
                    a._localpin.readXML(d)
            }
        });
        b && this._pin.readXML(a)
    }
};
JSG.graph.Pin.prototype.evaluate = function () {
    this._pin.evaluate(this._item);
    this._localpin.evaluate(this._item)
};
JSG.graph.Pin.prototype.invalidateTerms = function () {
    this._pin.invalidateTerms();
    this._localpin.invalidateTerms()
};
JSG.graph.Pin.prototype.resolveParentReference = function (a) {
    this._pin.resolveParentReference(this._item, a);
    this._localpin.resolveParentReference(this._item, a)
};
JSG.graph.Pin.prototype.lockPin = function (a) {
    this._pin.lock(a)
};
JSG.graph.Pin.prototype.lockLocalPin = function (a) {
    this._localpin.lock(a)
};
JSG.graph.Pin.prototype.getX = function () {
    return this._pin.getX()
};
JSG.graph.Pin.prototype.getY = function () {
    return this._pin.getY()
};
JSG.graph.Pin.prototype.getLocalX = function () {
    return this._localpin.getX()
};
JSG.graph.Pin.prototype.getLocalY = function () {
    return this._localpin.getY()
};
JSG.graph.Pin.prototype.getPoint = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    return this._pin.toPoint(a)
};
JSG.graph.Pin.prototype.getLocalPoint = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    return this._localpin.toPoint(a)
};
JSG.graph.Pin.prototype.getCoordinate = function (a) {
    a = a || new JSG.graph.Coordinate;
    a.setTo(this._pin);
    return a
};
JSG.graph.Pin.prototype.getLocalCoordinate = function (a) {
    a = a || new JSG.graph.Coordinate;
    a.setTo(this._localpin);
    return a
};
JSG.graph.Pin.prototype.setX = function (a) {
    this._pin.getX().isEqualToExpressionOrValue(a) || this._setInternal(JSG.graph.Pin.EventID.PINX, this._pin, this._pin.setX, a)
};
JSG.graph.Pin.prototype.setY = function (a) {
    this._pin.getY().isEqualToExpressionOrValue(a) || this._setInternal(JSG.graph.Pin.EventID.PINY, this._pin, this._pin.setY, a)
};
JSG.graph.Pin.prototype.setPointTo = function (a) {
    this._pin.getX().isEqualToExpressionOrValue(a.x) && this._pin.getY().isEqualToExpressionOrValue(a.y) || this._setInternal(JSG.graph.Pin.EventID.PIN, this._pin, this._pin.setToPoint, a)
};
JSG.graph.Pin.prototype.setPoint = function (a, b) {
    this.setPointTo(new JSG.geometry.Point(a, b))
};
JSG.graph.Pin.prototype.setLocalX = function (a) {
    this._localpin.getX().isEqualToExpressionOrValue(a) || this._setInternal(JSG.graph.Pin.EventID.LOCALX, this._localpin, this._localpin.setX, a)
};
JSG.graph.Pin.prototype.setLocalY = function (a) {
    this._localpin.getY().isEqualToExpressionOrValue(a) || this._setInternal(JSG.graph.Pin.EventID.LOCALY, this._localpin, this._localpin.setY, a)
};
JSG.graph.Pin.prototype.setLocalPointTo = function (a) {
    this._localpin.getX().isEqualToExpressionOrValue(a.x) && this._localpin.getY().isEqualToExpressionOrValue(a.y) || this._setInternal(JSG.graph.Pin.EventID.LOCAL, this._localpin, this._localpin.setToPoint, a)
};
JSG.graph.Pin.prototype.setLocalPoint = function (a, b) {
    this.setLocalPointTo(new JSG.geometry.Point(a, b))
};
JSG.graph.Pin.prototype.setCoordinateTo = function (a) {
    this._pin.getX().isEqualTo(a.getX()) && this._pin.getY().isEqualTo(a.getY()) || this._setInternal(JSG.graph.Pin.EventID.PIN, this._pin, this._pin.setTo, a)
};
JSG.graph.Pin.prototype.setCoordinate = function (a, b) {
    this.setCoordinateTo(new JSG.graph.Coordinate(a, b))
};
JSG.graph.Pin.prototype.setLocalCoordinateTo = function (a) {
    this._setInternal(JSG.graph.Pin.EventID.LOCAL, this._localpin, this._localpin.setTo, a)
};
JSG.graph.Pin.prototype.setLocalCoordinate = function (a, b) {
    this.setLocalCoordinateTo(new JSG.graph.Coordinate(a, b))
};
JSG.graph.Pin.prototype.setTo = function (a) {
    this.setCoordinateTo(a._pin);
    this.setLocalCoordinateTo(a._localpin)
};
JSG.graph.Pin.prototype.translate = function (a, b) {
    var c = this._pin.toPoint();
    c.x += a;
    c.y += b;
    this.setPoint(c.x, c.y)
};
JSG.graph.Pin.prototype.rotate = function (a, b) {
    if (0 !== a) {
        var c = this._pin.toPoint(), c = void 0 !== b ? JSG.geometry.Utils.rotatePointAround(b, c, a) : JSG.geometry.Utils.rotatePoint(c, a);
        this.setPoint(c.x, c.y)
    }
};
JSG.graph.Pin.prototype._setInternal = function (a, b, c, d) {
    function e(a, b) {
        void 0 !== a && void 0 !== b && a.sendPostEvent(b)
    }

    a = function (a, b, c) {
        var d;
        void 0 !== a && (d = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.PIN, c), d.detailId = b, d.source = a, a.sendPreEvent(d));
        return d
    }(this._item, a, d);
    !0 === (void 0 !== a ? a.doIt : !0) && (c.call(b, d), e(this._item, a))
};
JSG.namespace("JSG.graph");
JSG.graph.Size = function (a, b) {
    this._wExpr = new JSG.graph.expr.NumberExpression(0);
    this._hExpr = new JSG.graph.expr.NumberExpression(0);
    a && this._wExpr.setExpressionOrValue(a);
    b && this._hExpr.setExpressionOrValue(b)
};
JSG.graph.Size.prototype.isEqualTo = function (a) {
    return 2 === arguments.length ? this._wExpr.isEqualToExpressionOrValue(arguments[0]) && this._hExpr.isEqualToExpressionOrValue(arguments[1]) : void 0 !== a && this._wExpr.isEqualTo(a._wExpr) && this._hExpr.isEqualTo(a._hExpr)
};
JSG.graph.Size.prototype.copy = function () {
    return new JSG.graph.Size(this._wExpr.copy(), this._hExpr.copy())
};
JSG.graph.Size.prototype.evaluate = function (a) {
    this._wExpr.evaluate(a);
    this._hExpr.evaluate(a)
};
JSG.graph.Size.prototype.invalidateTerms = function () {
    this._hExpr.invalidateTerm();
    this._wExpr.invalidateTerm()
};
JSG.graph.Size.prototype.resolveParentReference = function (a, b) {
    this._wExpr.resolveParentReference(a, b);
    this._hExpr.resolveParentReference(a, b)
};
JSG.graph.Size.prototype.getWidth = function () {
    return this._wExpr
};
JSG.graph.Size.prototype.getHeight = function () {
    return this._hExpr
};
JSG.graph.Size.prototype.setTo = function (a) {
    this.set(a._wExpr, a._hExpr)
};
JSG.graph.Size.prototype.set = function (a, b) {
    this.setWidth(a);
    this.setHeight(b)
};
JSG.graph.Size.prototype.setWidth = function (a) {
    this._wExpr.setExpressionOrValue(a)
};
JSG.graph.Size.prototype.setHeight = function (a) {
    this._hExpr.setExpressionOrValue(a)
};
JSG.graph.Size.prototype.toPoint = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.x = this.getWidth().getValue();
    a.y = this.getHeight().getValue();
    return a
};
JSG.graph.Size.prototype.toRectangle = function (a) {
    a = a || new JSG.geometry.Rectangle(0, 0, 0, 0);
    a.width = this.getWidth().getValue();
    a.height = this.getHeight().getValue();
    return a
};
JSG.graph.Size.prototype.toString = function () {
    return "(" + this.getWidth().getValue().toFixed(2) + "," + this.getHeight().getValue().toFixed(2) + ")"
};
JSG.graph.Size.prototype.saveXML = function (a, b) {
    b.writeStartElement(a);
    this._wExpr.saveXML("w", b);
    this._hExpr.saveXML("h", b);
    b.writeEndElement()
};
JSG.graph.Size.prototype.readXML = function (a) {
    JSG.commons.XML.iterateChildren(this, a, function (a, c) {
        switch (c.nodeName) {
            case "w":
            case "width":
                a._wExpr.readXML(c);
                break;
            case "h":
            case "height":
                a._hExpr.readXML(c)
        }
    })
};
JSG.namespace("JSG.graph");
JSG.graph.Coordinate = function (a, b) {
    this._xExpression = a || new JSG.graph.expr.NumberExpression(0);
    this._yExpression = b || new JSG.graph.expr.NumberExpression(0)
};
JSG.graph.Coordinate.fromPoint = function (a) {
    return new JSG.graph.Coordinate.fromXY(a.x, a.y)
};
JSG.graph.Coordinate.fromXY = function (a, b) {
    return new JSG.graph.Coordinate(new JSG.graph.expr.NumberExpression(a), new JSG.graph.expr.NumberExpression(b))
};
JSG.graph.Coordinate.fromRelativeXY = function (a, b) {
    return new JSG.graph.Coordinate(new JSG.graph.expr.Expression(0, a + " * WIDTH"), new JSG.graph.expr.Expression(0, b + " * HEIGHT"))
};
JSG.graph.Coordinate.Factory = function () {
    return new JSG.graph.Coordinate.fromXY(0, 0)
};
JSG.graph.Coordinate.prototype.saveXML = function (a, b) {
    b.writeStartElement(a);
    this._xExpression.saveXML("x", b);
    this._yExpression.saveXML("y", b);
    b.writeEndElement()
};
JSG.graph.Coordinate.prototype.readXML = function (a) {
    JSG.commons.XML.iterateChildren(this, a, function (a, c) {
        switch (c.nodeName) {
            case "x":
                a._xExpression.readXML(c);
                break;
            case "y":
                a._yExpression.readXML(c)
        }
    })
};
JSG.graph.Coordinate.prototype.isEqualTo = function (a) {
    return 2 === arguments.length ? this._xExpression.isEqualToExpressionOrValue(arguments[0]) && this._yExpression.isEqualToExpressionOrValue(arguments[1]) : void 0 !== a && this._xExpression.isEqualTo(a._xExpression) && this._yExpression.isEqualTo(a._yExpression)
};
JSG.graph.Coordinate.prototype.copy = function () {
    var a = new JSG.graph.Coordinate;
    a.set(this._xExpression.copy(), this._yExpression.copy());
    return a
};
JSG.graph.Coordinate.prototype.evaluate = function (a) {
    this._xExpression.evaluate(a);
    this._yExpression.evaluate(a)
};
JSG.graph.Coordinate.prototype.invalidateTerms = function () {
    this._xExpression.invalidateTerm();
    this._yExpression.invalidateTerm()
};
JSG.graph.Coordinate.prototype.resolveParentReference = function (a, b) {
    this._xExpression.resolveParentReference(a, b);
    this._yExpression.resolveParentReference(a, b)
};
JSG.graph.Coordinate.prototype.lock = function (a) {
    this.lockX(a);
    this.lockY(a)
};
JSG.graph.Coordinate.prototype.lockX = function (a) {
    this._xExpression.setLocked(void 0 !== a ? a : !1)
};
JSG.graph.Coordinate.prototype.lockY = function (a) {
    this._yExpression.setLocked(void 0 !== a ? a : !1)
};
JSG.graph.Coordinate.prototype.getX = function () {
    return this._xExpression
};
JSG.graph.Coordinate.prototype.getY = function () {
    return this._yExpression
};
JSG.graph.Coordinate.prototype.setTo = function (a) {
    return void 0 !== a ? this.set(a._xExpression, a._yExpression) : !1
};
JSG.graph.Coordinate.prototype.setToPoint = function (a) {
    return this.set(a.x, a.y)
};
JSG.graph.Coordinate.prototype.set = function (a, b) {
    var c = !1, c = this.setX(a) || c;
    return c = this.setY(b) || c
};
JSG.graph.Coordinate.prototype.setX = function (a) {
    return this._xExpression.setExpressionOrValue(a)
};
JSG.graph.Coordinate.prototype.setY = function (a) {
    return this._yExpression.setExpressionOrValue(a)
};
JSG.graph.Coordinate.prototype.translate = function (a, b) {
    this._xExpression.set(this._xExpression.getValue() + a);
    this._yExpression.set(this._yExpression.getValue() + b)
};
JSG.graph.Coordinate.prototype.toPoint = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.set(this._xExpression.getValue(), this._yExpression.getValue());
    return a
};
JSG.graph.Coordinate.prototype.toString = function () {
    return "(" + this._xExpression.toString() + ", " + this._yExpression.toString() + ")"
};
JSG.namespace("JSG.graph");
JSG.graph.CoordinateProxy = function (a) {
    JSG.graph.CoordinateProxy._super.constructor.call(this);
    this._coordinate = a
};
JSG.extend(JSG.graph.CoordinateProxy, JSG.graph.Coordinate);
JSG.graph.CoordinateProxy.prototype.getCoordinate = function () {
    return this._coordinate
};
JSG.graph.CoordinateProxy.prototype.saveXML = function (a, b) {
    var c = this.toPoint(JSG.ptCache.get());
    this._coordinate.getX().setValue(c.x);
    this._coordinate.getY().setValue(c.y);
    this._coordinate.saveXML(a, b);
    JSG.ptCache.release(c)
};
JSG.graph.CoordinateProxy.prototype.readXML = function (a) {
    this._coordinate.readXML(a)
};
JSG.graph.CoordinateProxy.prototype.copy = function () {
    return new JSG.graph.CoordinateProxy(this._coordinate)
};
JSG.graph.CoordinateProxy.prototype.evaluate = function (a) {
    this._coordinate.evaluate(a)
};
JSG.graph.CoordinateProxy.prototype.lockX = function (a) {
    this._coordinate.lockX(a)
};
JSG.graph.CoordinateProxy.prototype.lockY = function (a) {
    this._coordinate.lockY(a)
};
JSG.graph.CoordinateProxy.prototype.getX = function () {
    return this._coordinate.getX()
};
JSG.graph.CoordinateProxy.prototype.getY = function () {
    return this._coordinate.getY()
};
JSG.graph.CoordinateProxy.prototype.setX = function (a) {
    this._coordinate.setX(a)
};
JSG.graph.CoordinateProxy.prototype.setY = function (a) {
    this._coordinate.setY(a)
};
JSG.graph.CoordinateProxy.prototype.translate = function (a, b) {
    this._coordinate.translate(a, b)
};
JSG.graph.CoordinateProxy.prototype.toPoint = function (a) {
    return this._coordinate.toPoint(a)
};
JSG.namespace("JSG.graph");
JSG.graph.ReshapeType = {
    XRELATIVETOWIDTH: 0,
    XRELATIVETOHEIGHT: 1,
    YRELATIVETOHEIGHT: 2,
    YRELATIVETOWIDTH: 3,
    XRELATIVETOWIDTHFROMRIGHT: 4,
    XRELATIVETOHEIGHTFROMRIGHT: 5,
    YRELATIVETOHEIGHTFROMBOTTOM: 6,
    YRELATIVETOWIDTHFROMBOTTOM: 7,
    XABSOLUTEWIDTH: 8,
    YABSOLUTEHEIGHT: 9,
    XABSOLUTEWIDTHFROMRIGHT: 10,
    YABSOLUTEHEIGHTFROMBOTTOM: 11
};
JSG.graph.ReshapeCoordinate = function (a, b, c, d, e, f, g, k, h) {
    JSG.graph.ReshapeCoordinate._super.constructor.apply(this, arguments);
    this._name = g;
    this._type = k;
    this._xMin = c;
    this._xMax = d;
    this._yMin = e;
    this._yMax = f;
    this._vertical = h
};
JSG.extend(JSG.graph.ReshapeCoordinate, JSG.graph.Coordinate);
JSG.graph.ReshapeCoordinate.prototype.copy = function () {
    var a = new JSG.graph.ReshapeCoordinate;
    a.setTo(this);
    return a
};
JSG.graph.ReshapeCoordinate.prototype.saveXML = function (a, b) {
    b.writeStartElement(a);
    b.writeAttributeString("name", this._name);
    b.writeAttributeString("direction", this._vertical);
    b.writeAttributeString("type", this._type);
    this._xMin && b.writeAttributeNumber("xMin", this._xMin, 2);
    this._xMax && b.writeAttributeNumber("xMax", this._xMax, 2);
    this._yMin && b.writeAttributeNumber("yMin", this._yMin, 2);
    this._yMax && b.writeAttributeNumber("yMax", this._yMax, 2);
    this._xExpression.saveXML("x", b, 2);
    this._yExpression.saveXML("y",
        b, 2);
    b.writeEndElement()
};
JSG.graph.ReshapeCoordinate.prototype.readXML = function (a) {
    var b = a.getAttribute("name");
    null !== b && (this._name = b);
    null !== a.getAttribute("direction") && (this._vertical = "true" === a.getAttribute("direction") ? !0 : !1);
    b = a.getAttribute("type");
    null !== b && (this._type = Number(b));
    b = a.getAttribute("xMin");
    this._xMin = null !== b ? Number(b) : 0;
    b = a.getAttribute("xMax");
    this._xMax = null !== b ? Number(b) : 0;
    b = a.getAttribute("yMin");
    this._yMin = null !== b ? Number(b) : 0;
    b = a.getAttribute("yMax");
    this._yMax = null !== b ? Number(b) : 0;
    JSG.commons.XML.iterateChildren(this,
        a, function (a, b) {
            switch (b.nodeName) {
                case "x":
                    a._xExpression.readXML(b);
                    break;
                case "y":
                    a._yExpression.readXML(b)
            }
        })
};
JSG.graph.ReshapeCoordinate.prototype.setTo = function (a) {
    void 0 !== a && (this.set(a._xExpression, a._yExpression), this._name = a._name, this._type = a._type, this._xMin = a._xMin, this._xMax = a._xMax, this._yMin = a._yMin, this._yMax = a._yMax, this._vertical = a._vertical)
};
JSG.graph.ReshapeCoordinate.prototype.getXMin = function () {
    return this._xMin
};
JSG.graph.ReshapeCoordinate.prototype.getXMax = function () {
    return this._xMax
};
JSG.graph.ReshapeCoordinate.prototype.getYMin = function () {
    return this._yMin
};
JSG.graph.ReshapeCoordinate.prototype.getYMax = function () {
    return this._yMax
};
JSG.graph.ReshapeCoordinate.prototype.getName = function () {
    return this._name
};
JSG.graph.ReshapeCoordinate.prototype.getVertical = function () {
    return this._vertical
};
JSG.graph.ReshapeCoordinate.prototype.getType = function () {
    return this._type
};
JSG.namespace("JSG.graph");
JSG.graph.Utils = function () {
};
JSG.graph.Utils.traverseUp = function (a, b, c) {
    if (a && a !== b)for (var d = !0; d && a && a !== b;)d = c(a), a = a.getParent(), d = void 0 !== d ? d : !0
};
JSG.graph.Utils.traverseDown = function (a, b, c) {
    if (a && b && a !== b) {
        for (var d = []; b && b !== a;)d.push(b), b = b._parent;
        a = !0;
        for (b = d.length - 1; a && 0 <= b; b--)a = c(d[b]), a = void 0 !== a ? a : !0
    }
};
JSG.graph.Utils.traverseItemUp = function (a, b, c) {
    for (var d = !0; d && a !== b && void 0 !== a;)d = c(a), a = a.getParent(), d = void 0 !== d ? d : !0
};
JSG.graph.Utils.traverseItemDown = function (a, b, c) {
    for (var d = []; void 0 !== b && b !== a;)d.push(b), b = b._parent;
    a = !0;
    for (b = d.length - 1; a && 0 <= b; b--)a = c(d[b]), a = void 0 !== a ? a : !0
};
JSG.graph.Utils.traverseItem = function (a, b, c) {
    if (a) {
        var d, e;
        b.call(c || b, a);
        d = 0;
        for (e = a.getItemCount(); d < e; d++)JSG.graph.Utils.traverseItem(a.getItemAt(d), b, c)
    }
};
JSG.graph.Utils.translatePointUp = function (a, b, c) {
    JSG.graph.Utils.traverseItemUp(b, c, function (b) {
        b.translateToParent(a)
    });
    return a
};
JSG.graph.Utils.translatePointDown = function (a, b, c) {
    JSG.graph.Utils.traverseItemDown(b, c, function (b) {
        b.translateFromParent(a)
    });
    return a
};
JSG.graph.Utils.translateBoundingBoxUp = function (a, b, c) {
    JSG.graph.Utils.traverseItemUp(b, c, function (b) {
        b.translateBoundingBoxToParent(a)
    });
    return a
};
JSG.graph.Utils.translateBoundingBoxDown = function (a, b, c) {
    JSG.graph.Utils.traverseItemDown(b, c, function (b) {
        b.translateBoundingBoxFromParent(a)
    });
    return a
};
JSG.graph.Utils.getGraph = function (a) {
    for (a = a.getParent(); void 0 !== a && !(a instanceof JSG.graph.model.Graph);)a = a.getParent();
    return a
};
JSG.graph.Utils.findCommonParent = function (a, b, c) {
    var d = void 0 !== a ? a.createPath() : void 0, e = void 0 !== b ? b.createPath() : void 0, d = JSG.graph.model.Path.getCommonPrefix(d, e);
    c = c || a.getGraph() || b.getGraph();
    return c.findItemByPath(d)
};
JSG.graph.Utils.getFontMetrics = function (a) {
    return this.getFontMetricsEx(a.getFontName().getValue(), a.getFontSize().getValue())
};
JSG.graph.Utils.getFontMetricsEx = function (a, b) {
    function c(a) {
        var b = 0, c = 0;
        if (a.offsetParent) {
            do b += a.offsetLeft, c += a.offsetTop; while (a = a.offsetParent)
        } else b += a.offsetLeft, c += a.offsetTop;
        return [b, c]
    }

    var d = b + "pt " + a, e;
    if (JSG.fontMetricsCache.contains(d) && (e = JSG.fontMetricsCache.get(d), void 0 !== e))return e;
    var f = new JSG.ui.graphics.MetricCoordinateSystem;
    e = function (a, b) {
        var d = document.createElement("span");
        d.style.fontFamily = a;
        d.style.fontSize = b + "pt";
        d.style.lineHeight = 1.2;
        d.innerHTML = "A\u00c4BCjgq|";
        var e = document.createElement("div");
        e.style.display = "inline-block";
        e.style.width = "1px";
        e.style.height = "0px";
        var f = document.createElement("div");
        f.appendChild(d);
        f.appendChild(e);
        f.style.height = "0px";
        f.style.overflow = "hidden";
        document.body.appendChild(f);
        e.style.verticalAlign = "baseline";
        var p = c(e), n = c(d), q = p[1] - n[1];
        e.style.verticalAlign = "bottom";
        p = c(e);
        n = c(d);
        d = p[1] - n[1];
        e = d - q;
        document.body.removeChild(f);
        return {baseline: q, height: d, descent: e}
    }(a, b);
    e.baseline = f.deviceToLogYNoZoom(e.baseline);
    e.height =
        f.deviceToLogYNoZoom(e.height);
    e.descent = f.deviceToLogYNoZoom(e.descent);
    JSG.fontMetricsCache.put(d, e);
    return e
};
JSG.graph.Utils.colorFromRGB = function (a, b, c) {
    return "#" + (16777216 + (a << 16) + (b << 8) + c).toString(16).slice(1, 7)
};
JSG.graph.Utils.createDummyPortFrom = function (a, b) {
    return {
        getParent: function () {
            return a
        }, getConnectionPoint: function (a, d) {
            a = void 0 !== a ? a : this.getParent();
            return JSG.graph.Utils.translatePointUp(b.copy(), this.getParent(), a)
        }
    }
};
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.Event = function (a, b) {
    this.id = a;
    this.doIt = !0;
    this.value = b;
    this.source = this.data = this.detailId = void 0
};
JSG.graph.model.events.Event.prototype.getId = function () {
    return this.id
};
JSG.graph.model.events.Event.ALL = "event.all";
JSG.graph.model.events.Event.ATTRIBUTE = "event.attribute";
JSG.graph.model.events.Event.LAYOUTATTRIBUTES = "event.layoutattributes";
JSG.graph.model.events.Event.FORMAT = "event.format";
JSG.graph.model.events.Event.PAGE = "event.page";
JSG.graph.model.events.Event.TEXTFORMAT = "event.textformat";
JSG.graph.model.events.Event.ANGLE = "event.angle";
JSG.graph.model.events.Event.BBOX = "event.bbox";
JSG.graph.model.events.Event.INDEX = "event.index";
JSG.graph.model.events.Event.ITEMADD = "event.itemadd";
JSG.graph.model.events.Event.ITEMREMOVE = "event.itemremove";
JSG.graph.model.events.Event.LAYER = "event.layer";
JSG.graph.model.events.Event.LINK = "event.link";
JSG.graph.model.events.Event.NAME = "event.name";
JSG.graph.model.events.Event.PARENT = "event.parent";
JSG.graph.model.events.Event.PIN = "event.pin";
JSG.graph.model.events.Event.SHAPE = "event.shape";
JSG.graph.model.events.Event.SHAPEPOINTS = "event.shapepoints";
JSG.graph.model.events.Event.SIZE = "event.size";
JSG.graph.model.events.Event.COLLAPSEDSIZE = "event.collapsedsize";
JSG.graph.model.events.Event.TYPE = "event.type";
JSG.graph.model.events.Event.TEXT = "event.text";
JSG.graph.model.events.Event.PATH = "event.path";
JSG.graph.model.events.Event.NODE = "event.node";
JSG.graph.model.events.Event.PORTADD = "event.portadd";
JSG.graph.model.events.Event.PORTREMOVE = "event.portremove";
JSG.graph.model.events.Event.PORTSREMOVEBULK = "event.portsremovebulk";
JSG.graph.model.events.Event.EDGEATTACHED = "event.edgeattached";
JSG.graph.model.events.Event.EDGEDETACHED = "event.edgedetached";
JSG.graph.model.events.Event.RESHAPE = "reshape";
JSG.graph.model.events.Event.GRAPH = "graph";
JSG.graph.model.events.Event.GRAPHSETTINGS = "graphsettings";
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.ShapeEvent = function (a, b) {
    JSG.graph.model.events.ShapeEvent._super.constructor.call(this);
    this.id = JSG.graph.model.events.Event.SHAPE;
    this.detailId = a;
    this.value = b;
    this.count = this.index = void 0
};
JSG.extend(JSG.graph.model.events.ShapeEvent, JSG.graph.model.events.Event);
JSG.graph.model.events.ShapeEvent.INSERTPOINTS = "insertpoints";
JSG.graph.model.events.ShapeEvent.REPLACEPOINTS = "replacepoint";
JSG.graph.model.events.ShapeEvent.SETPOINTSAT = "setpointat";
JSG.graph.model.events.ShapeEvent.REMOVEPOINTS = "removepoints";
JSG.graph.model.events.ShapeEvent.COORD_ADD = "coordinateadd";
JSG.graph.model.events.ShapeEvent.COORDS_INSERT_AT = "coordinatesinsert";
JSG.graph.model.events.ShapeEvent.COORDS_REMOVE_AT = "coordnatesremove";
JSG.graph.model.events.ShapeEvent.COORDS_REPLACE_AT = "coordinatesreplace";
JSG.graph.model.events.ShapeEvent.COORDS_REPLACE_ALL = "coordinatesreplaceall";
JSG.graph.model.events.ShapeEvent.COORD_CP = "coordinatescp";
JSG.graph.model.events.ShapeEvent.COORD_ADD_CPTO = "coordinateaddcpto";
JSG.graph.model.events.ShapeEvent.COORD_ADD_CPFROM = "coordinateaddcpfrom";
JSG.graph.model.events.ShapeEvent.COORDS_SET_CPTO = "coordinatessetcpto";
JSG.graph.model.events.ShapeEvent.COORDS_SET_CPFROM = "coordinatessetcpfrom";
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.NodeEvent = function (a, b) {
    JSG.graph.model.events.NodeEvent._super.constructor.call(this);
    this.id = JSG.graph.model.events.Event.NODE;
    this.detailId = a;
    this.value = b
};
JSG.extend(JSG.graph.model.events.NodeEvent, JSG.graph.model.events.Event);
JSG.graph.model.events.NodeEvent.PORTADD = "portadd";
JSG.graph.model.events.NodeEvent.PORTREMOVE = "portremove";
JSG.graph.model.events.NodeEvent.PORTREMOVEALL = "portremoveall";
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.EventListener = function () {
};
JSG.graph.model.events.EventListener.prototype.handlePreEvent = function (a) {
};
JSG.graph.model.events.EventListener.prototype.handlePostEvent = function (a) {
};
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.EventDispatcher = function () {
    this._events = [];
    this._listeners = [];
    this._eventsEnabled = !0
};
JSG.graph.model.events.EventDispatcher.prototype.areEventsEnabled = function () {
    return this._eventsEnabled
};
JSG.graph.model.events.EventDispatcher.prototype.enableEvents = function () {
    this._eventsEnabled = !0
};
JSG.graph.model.events.EventDispatcher.prototype.disableEvents = function () {
    var a = this._eventsEnabled;
    this._eventsEnabled = !1;
    return a
};
JSG.graph.model.events.EventDispatcher.prototype.registerListener = function (a, b) {
    this._events.push(a);
    this._listeners.push(b)
};
JSG.graph.model.events.EventDispatcher.prototype.unregisterListener = function (a, b) {
    var c;
    for (c = 0; c < this._events.length; c++)if (this._events[c] === a && this._listeners[c] === b) {
        JSG.Arrays.removeAt(this._events, c);
        JSG.Arrays.removeAt(this._listeners, c);
        break
    }
};
JSG.graph.model.events.EventDispatcher.prototype.sendPreEvent = function (a) {
    if (!0 === this._eventsEnabled) {
        var b = a.id, c = JSG.graph.model.events.Event.ALL, d;
        for (d = 0; d < this._events.length; d++)this._events[d] !== b && this._events[d] !== c || void 0 === this._listeners[d] || this._listeners[d].handlePreEvent(a)
    }
};
JSG.graph.model.events.EventDispatcher.prototype.sendPostEvent = function (a) {
    if (!0 === this._eventsEnabled) {
        var b = a.id, c = JSG.graph.model.events.Event.ALL, d;
        for (d = 0; d < this._events.length; d++)this._events[d] !== b && this._events[d] !== c || void 0 === this._listeners[d] || this._listeners[d].handlePostEvent(a)
    }
};
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.AttributeChangeEvent = function (a, b, c) {
    JSG.graph.model.events.AttributeChangeEvent._super.constructor.call(this);
    this.id = JSG.graph.model.events.Event.ATTRIBUTE;
    this.detailId = a;
    this._attribute = b;
    this._newValue = c;
    this._oldValue = void 0 === b || b instanceof JSG.graph.attr.AttributeList ? void 0 : b.getExpression().copy()
};
JSG.extend(JSG.graph.model.events.AttributeChangeEvent, JSG.graph.model.events.Event);
JSG.graph.model.events.AttributeChangeEvent.ADD = "attribute.add";
JSG.graph.model.events.AttributeChangeEvent.REMOVE = "attribute.remove";
JSG.graph.model.events.AttributeChangeEvent.CHANGE = "attribute.change";
JSG.graph.model.events.AttributeChangeEvent.VALUE = "attribute.value";
JSG.graph.model.events.AttributeChangeEvent.BULK = "attribute.bulk";
JSG.graph.model.events.AttributeChangeEvent.prototype.isCategory = function (a) {
    var b = this._attribute instanceof JSG.graph.attr.AttributeList ? this._attribute : this._attribute.getAttributeList();
    return (b ? b.getName() : void 0) === a
};
JSG.graph.model.events.AttributeChangeEvent.prototype.hasAttribute = function (a) {
    var b = !1, c = this._attribute.getName(), d = JSG.Arrays.toArray(arguments), e;
    for (e = 0; e < d.length; e++)if (d[e] === c) {
        b = !0;
        break
    }
    return b
};
JSG.graph.model.events.AttributeChangeEvent.prototype.getAttribute = function () {
    return this._attribute
};
JSG.graph.model.events.AttributeChangeEvent.prototype.getNewValue = function () {
    return this._newValue
};
JSG.graph.model.events.AttributeChangeEvent.prototype.getOldValue = function () {
    return this._oldValue
};
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.AttributeListener = function () {
    JSG.graph.model.events.AttributeListener._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.model.events.AttributeListener, JSG.graph.model.events.EventListener);
JSG.graph.model.events.AttributeListener.prototype.handlePreEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.ATTRIBUTE:
            this.attributeWillChange(a);
            break;
        case b.LAYOUTATTRIBUTES:
            this.layoutAttributeWillChange(a)
    }
};
JSG.graph.model.events.AttributeListener.prototype.handlePostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.ATTRIBUTE:
            this.attributeDidChange(a);
            break;
        case b.LAYOUTATTRIBUTES:
            this.layoutAttributeDidChange(a)
    }
};
JSG.graph.model.events.AttributeListener.prototype.attributeWillChange = function (a) {
};
JSG.graph.model.events.AttributeListener.prototype.layoutAttributeWillChange = function (a) {
};
JSG.graph.model.events.AttributeListener.prototype.attributeDidChange = function (a) {
};
JSG.graph.model.events.AttributeListener.prototype.layoutAttributeDidChange = function (a) {
};
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.PageEvent = function (a, b) {
    JSG.graph.model.events.PageEvent._super.constructor.call(this);
    this.id = JSG.graph.model.events.Event.PAGE;
    this.detailId = a;
    this.value = b
};
JSG.extend(JSG.graph.model.events.PageEvent, JSG.graph.model.events.Event);
JSG.graph.model.events.PageEvent.prototype.getPageId = function () {
    return this.detailId
};
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.FormatListener = function () {
    JSG.graph.model.events.FormatListener._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.model.events.FormatListener, JSG.graph.model.events.EventListener);
JSG.graph.model.events.FormatListener.prototype.handlePreEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.FORMAT:
            this.formatWillChange(a);
            break;
        case b.TEXTFORMAT:
            this.textFormatWillChange(a)
    }
};
JSG.graph.model.events.FormatListener.prototype.handlePostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.FORMAT:
            this.formatDidChange(a);
            break;
        case b.TEXTFORMAT:
            this.textFormatDidChange(a)
    }
};
JSG.graph.model.events.FormatListener.prototype.formatWillChange = function (a) {
};
JSG.graph.model.events.FormatListener.prototype.textFormatWillChange = function (a) {
};
JSG.graph.model.events.FormatListener.prototype.formatDidChange = function (a) {
};
JSG.graph.model.events.FormatListener.prototype.textFormatDidChange = function (a) {
};
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.GraphItemListener = function () {
    JSG.graph.model.events.GraphItemListener._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.model.events.GraphItemListener, JSG.graph.model.events.EventListener);
JSG.graph.model.events.GraphItemListener.prototype.handlePreEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.ANGLE:
            this.angleWillChange(a);
            break;
        case b.BBOX:
            this.boundingBoxWillChange(a);
            break;
        case b.INDEX:
            this.indexWillChange(a);
            break;
        case b.ITEMADD:
            this.itemWillBeAdded(a);
            break;
        case b.ITEMREMOVE:
            this.itemWillBeRemoved(a);
            break;
        case b.PARENT:
            this.parentWillChange(a);
            break;
        case b.PIN:
            this.pinWillChange(a);
            break;
        case b.SIZE:
            this.sizeWillChange(a)
    }
};
JSG.graph.model.events.GraphItemListener.prototype.handlePostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.ANGLE:
            this.angleDidChange(a);
            break;
        case b.BBOX:
            this.boundingBoxDidChange(a);
            break;
        case b.INDEX:
            this.indexDidChange(a);
            break;
        case b.ITEMADD:
            this.itemWasAdded(a);
            break;
        case b.ITEMREMOVE:
            this.itemWasRemoved(a);
            break;
        case b.PARENT:
            this.parentDidChange(a);
            break;
        case b.PIN:
            this.pinDidChange(a);
            break;
        case b.SIZE:
            this.sizeDidChange(a);
            break;
        case b.PATH:
            this.pathDidChange(a)
    }
};
JSG.graph.model.events.GraphItemListener.prototype.angleWillChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.angleDidChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.boundingBoxWillChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.boundingBoxDidChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.sizeWillChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.sizeDidChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.pinWillChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.pinDidChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.parentWillChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.parentDidChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.pathDidChange = function () {
};
JSG.graph.model.events.GraphItemListener.prototype.indexWillChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.indexDidChange = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.itemWillBeAdded = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.itemWasAdded = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.itemWillBeRemoved = function (a) {
};
JSG.graph.model.events.GraphItemListener.prototype.itemWasRemoved = function (a) {
};
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.ShapeListener = function () {
    JSG.graph.model.events.ShapeListener._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.model.events.ShapeListener, JSG.graph.model.events.EventListener);
JSG.graph.model.events.ShapeListener.prototype.handlePreEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.SHAPE:
            this.shapeWillChange(a);
            break;
        case b.SHAPEPOINTS:
            this.shapePointsWillChange(a)
    }
};
JSG.graph.model.events.ShapeListener.prototype.handlePostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.SHAPE:
            this.shapeDidChange(a);
            break;
        case b.SHAPEPOINTS:
            this.shapePointsDidChange(a)
    }
};
JSG.graph.model.events.ShapeListener.prototype.shapeWillChange = function (a) {
};
JSG.graph.model.events.ShapeListener.prototype.shapePointsWillChange = function (a) {
};
JSG.graph.model.events.ShapeListener.prototype.shapeDidChange = function (a) {
};
JSG.graph.model.events.ShapeListener.prototype.shapePointsDidChange = function (a) {
};
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.PortListener = function () {
    JSG.graph.model.events.PortListener._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.model.events.PortListener, JSG.graph.model.events.EventListener);
JSG.graph.model.events.Event.PORTADD = "event.portadd";
JSG.graph.model.events.Event.PORTREMOVE = "event.portremove";
JSG.graph.model.events.PortListener.prototype.handlePreEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.PORTADD:
            this.portWillBeAdded(a);
            break;
        case b.PORTREMOVE:
            this.portWillBeRemoved(a);
            break;
        case b.PORTSREMOVEBULK:
            this.portsWillBeRemovedBulk(a)
    }
};
JSG.graph.model.events.PortListener.prototype.handlePostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.PORTADD:
            this.portWasAdded(a);
            break;
        case b.PORTREMOVE:
            this.portWasRemoved(a);
            break;
        case b.PORTSREMOVEBULK:
            this.portsWereRemovedBulk(a)
    }
};
JSG.graph.model.events.PortListener.prototype.portWillBeAdded = function (a) {
};
JSG.graph.model.events.PortListener.prototype.portWasAdded = function (a) {
};
JSG.graph.model.events.PortListener.prototype.portWillBeRemoved = function (a) {
};
JSG.graph.model.events.PortListener.prototype.portWasRemoved = function (a) {
};
JSG.graph.model.events.PortListener.prototype.portsWillBeRemovedBulk = function (a) {
};
JSG.graph.model.events.PortListener.prototype.portsWereRemovedBulk = function (a) {
};
JSG.namespace("JSG.graph.model.events");
JSG.graph.model.events.EdgeListener = function () {
    JSG.graph.model.events.EdgeListener._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.model.events.EdgeListener, JSG.graph.model.events.EventListener);
JSG.graph.model.events.EdgeListener.prototype.handlePreEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.EDGEATTACHED:
            this.edgeWillBeAttached(a);
            break;
        case b.EDGEDETACHED:
            this.edgeWillBeDetached(a)
    }
};
JSG.graph.model.events.EdgeListener.prototype.handlePostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.EDGEATTACHED:
            this.edgeWasAttached(a);
            break;
        case b.EDGEDETACHED:
            this.edgeWasDetached(a)
    }
};
JSG.graph.model.events.EdgeListener.prototype.edgeWillBeAttached = function (a) {
};
JSG.graph.model.events.EdgeListener.prototype.edgeWasAttached = function (a) {
};
JSG.graph.model.events.EdgeListener.prototype.edgeWillBeDetached = function (a) {
};
JSG.graph.model.events.EdgeListener.prototype.edgeWasDetached = function (a) {
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.AttributeUtils = function () {
};
JSG.graph.attr.AttributeUtils.createItemAttributePath = function (a) {
    return JSG.graph.attr.ItemAttributes.NAME + JSG.graph.attr.Attribute.PATH_DELIMITER + a
};
JSG.graph.attr.AttributeUtils.createTextAttributePath = function (a) {
    return JSG.graph.attr.TextFormatAttributes.NAME + JSG.graph.attr.Attribute.PATH_DELIMITER + a
};
JSG.graph.attr.AttributeUtils.createPath = function () {
    var a = "", b = arguments;
    1 < b.length && (a = (Array.isArray(b[0]) ? b[0] : Array.prototype.slice.call(b)).join(JSG.graph.attr.Attribute.PATH_DELIMITER));
    return a
};
JSG.graph.attr.AttributeUtils.findAttributeByPath = function (a, b) {
    var c = a ? a.split(JSG.graph.attr.Attribute.PATH_DELIMITER) : [];
    return 0 < c.length ? this._lookUpAttribute(c, b) : void 0
};
JSG.graph.attr.AttributeUtils._lookUpAttribute = function (a, b) {
    if (0 === a.length || void 0 === b)return b;
    var c = a.shift(), c = this._same(c, b.getName()) ? b : b instanceof JSG.graph.attr.AttributeList ? b.getAttribute(c) : void 0;
    return this._lookUpAttribute(a, c)
};
JSG.graph.attr.AttributeUtils._same = function (a, b) {
    return a === b || a.toUpperCase() === b.toUpperCase()
};
JSG.graph.attr.AttributeUtils.addAttributeAtPath = function (a, b, c) {
    a = this.findAttributeByPath(this._getParentPath(a, b), c);
    if (a instanceof JSG.graph.attr.AttributeList)return a.addAttribute(b), b
};
JSG.graph.attr.AttributeUtils._getParentPath = function (a, b) {
    var c = b.getName(), c = a.indexOf(c, a.length - c.length);
    -1 !== c && (a = a.substring(0, c - 1));
    return a
};
JSG.graph.attr.AttributeUtils.removeAttributeAtPath = function (a, b) {
    var c = this.findAttributeByPath(a, b);
    return this.removeAttribute(c)
};
JSG.graph.attr.AttributeUtils.removeAttribute = function (a) {
    var b = void 0 !== a ? a._list : void 0;
    return void 0 !== b ? b.removeAttribute(a) : void 0
};
JSG.graph.attr.AttributeUtils.createAttributeRef = function (a) {
    if (!0 === a.isTemplate)return "tl:" + a.getName();
    var b = JSG.graph.attr.AttributeUtils._getItem(a);
    return b && b.getId() ? "(" + b.getId() + "):" + a.getPath() : void 0
};
JSG.graph.attr.AttributeUtils._getItem = function (a) {
    return a ? a.item || JSG.graph.attr.AttributeUtils._getItem(a.getAttributeList()) : void 0
};
JSG.graph.attr.AttributeUtils.resolveAttributeRef = function (a, b) {
    if (a) {
        var c = a.indexOf(":"), d = -1 < c ? a.substring(0, c) : a;
        if ("tl" === d)return JSG.TemplateStore.getTemplate(a.substring(c + 1));
        if (b && JSG.Strings.startsWith(d, "(") && JSG.Strings.endsWith(d, ")")) {
            var d = parseInt(d.substring(1, d.length - 1), 10), e = JSG.graph.attr.AttributeUtils._getGraph(b);
            return (d = e ? e.getItemById(d) : void 0) ? d.getAttributeAtPath(a.substring(c + 1)) : void 0
        }
    }
};
JSG.graph.attr.AttributeUtils._getGraph = function (a) {
    return a instanceof JSG.graph.model.Graph ? a : (a = JSG.graph.attr.AttributeUtils._getItem(a)) ? a.getGraph() : void 0
};
JSG.graph.attr.AttributeUtils.addAttributeToList = function (a, b) {
    var c = b._value.putElement(a.getName(), a);
    void 0 !== c && c !== a && (c._list = void 0);
    a._list = b;
    return a
};
JSG.graph.attr.AttributeUtils.addAll = function (a, b) {
    var c = !1, d = b._value;
    a._value.iterate(function (a, b) {
        var g = b.copy(), g = d.putElement(g.getName(), g);
        void 0 !== g && g !== b && (c = !0, g._list = void 0)
    });
    return c
};
JSG.graph.attr.AttributeUtils.removeAttributeFromList = function (a, b) {
    var c = b._value.removeElement(a.getName());
    void 0 !== c && (c._list = void 0);
    return c
};
JSG.graph.attr.AttributeUtils.resetList = function (a) {
    var b = a._value, c = a._parent;
    b.iterate(function (a, e) {
        c && c.hasAttribute(a, !0) ? b.removeElement(a) : e.reset()
    })
};
JSG.graph.attr.AttributeUtils.setAttributeValue = function (a, b) {
    var c = a.getExpression();
    return c.isEqualToExpressionOrValue(b) ? !1 : (a._list && !a._list.hasAttribute(a.getName()) && (a = a._list.addAttribute(!0 === a.isConst ? a.toAttribute() : a.copy()), c = a.getExpression()), c.setExpressionOrValue(b))
};
JSG.graph.attr.AttributeUtils.readAttribute = function (a, b) {
    var c;
    if ("at" === a.nodeName || "al" === a.nodeName)c = this._createAttributeFrom(a, b), void 0 !== c && c.readXML(a);
    return c
};
JSG.graph.attr.AttributeUtils._createAttributeFrom = function (a, b) {
    var c, d = this._classnameFromNode(a);
    b && (c = b.getAttribute(a.getAttribute("n"))) && (c = c.isConst ? c.toAttribute() : c.copy());
    c && c.getClassString() === d || (c = JSG.createObjectFromString(d));
    return c
};
JSG.graph.attr.AttributeUtils._classnameFromNode = function (a) {
    var b = a.nodeName;
    return (a = a.getAttribute("cl")) ? a : "at" === b ? JSG.graph.attr.Attribute.CLASSNAME : "al" === b ? JSG.graph.attr.AttributeList.CLASSNAME : void 0
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.Attribute = function (a, b) {
    this._name = void 0;
    this._value = b || new JSG.graph.expr.Expression;
    this._list = this._dplname = void 0;
    this._transient = !1;
    this._setName(a)
};
JSG.graph.attr.Attribute.PATH_DELIMITER = ":";
JSG.graph.attr.Attribute.CLASSNAME = "JSG.graph.attr.Attribute";
JSG.graph.attr.Attribute.prototype.Utils = JSG.graph.attr.AttributeUtils;
JSG.graph.attr.Attribute.prototype.getClassString = function () {
    return JSG.graph.attr.Attribute.CLASSNAME
};
JSG.graph.attr.Attribute.prototype.getPath = function () {
    var a = this._list ? this._list.getPath() : "";
    0 < a.length && (a += JSG.graph.attr.Attribute.PATH_DELIMITER);
    return a + this.getName()
};
JSG.graph.attr.Attribute.prototype.getName = function () {
    return this._name
};
JSG.graph.attr.Attribute.prototype._setName = function (a) {
    a && (this._name = a.replace(JSG.graph.attr.Attribute.PATH_DELIMITER, ""))
};
JSG.graph.attr.Attribute.prototype.getDisplayName = function () {
    return this._dplname
};
JSG.graph.attr.Attribute.prototype.setDisplayName = function (a) {
    this._dplname = a
};
JSG.graph.attr.Attribute.prototype.isTransient = function () {
    return this._transient
};
JSG.graph.attr.Attribute.prototype.setTransient = function (a) {
    this._transient = !0 === a ? !0 : !1
};
JSG.graph.attr.Attribute.prototype.newInstance = function () {
    return new JSG.graph.attr.Attribute(this.getName())
};
JSG.graph.attr.Attribute.prototype.copy = function () {
    var a = this.newInstance();
    a._list = this._list;
    a._value = this._value.copy();
    a._setName(this.getName());
    a.setTransient(this.isTransient());
    a.setDisplayName(this.getDisplayName());
    return a
};
JSG.graph.attr.Attribute.prototype.getAttributeList = function () {
    return this._list
};
JSG.graph.attr.Attribute.prototype.getExpression = function () {
    return this._value
};
JSG.graph.attr.Attribute.prototype.getValue = function () {
    return this._value.getValue()
};
JSG.graph.attr.Attribute.prototype.setExpressionOrValue = function (a) {
    return this._list ? this._list.setAttributeValue(this, a) : this.Utils.setAttributeValue(this, a)
};
JSG.graph.attr.Attribute.prototype.hasDifferentValue = function (a) {
    return !this._value.isEqualToExpressionOrValue(a)
};
JSG.graph.attr.Attribute.prototype.replaceValueExpression = function (a) {
    var b = a && !this._value.isEqualTo(a);
    !0 === b && (this._value = a);
    return b
};
JSG.graph.attr.Attribute.prototype.reset = function (a) {
    a && this.setExpressionOrValue(a)
};
JSG.graph.attr.Attribute.prototype.evaluate = function (a) {
    this._value.evaluate(a)
};
JSG.graph.attr.Attribute.prototype.invalidateTerm = function () {
    this._value.invalidateTerm()
};
JSG.graph.attr.Attribute.prototype.resolveParentReference = function (a, b) {
    this._value.resolveParentReference(a, b)
};
JSG.graph.attr.Attribute.prototype.saveXML = function (a) {
    return this._saveXML("at", a)
};
JSG.graph.attr.Attribute.prototype._saveXML = function (a, b) {
    var c = !1;
    return !1 === this._transient ? (b.writeStartElement(a), this._writeAttribute("n", this.getName(), b), c = this._saveTagAttributes(b), c = this._saveValue(b) || c, b.writeEndElement(!c)) : !1
};
JSG.graph.attr.Attribute.prototype._saveTagAttributes = function (a) {
    this._writeAttribute("dn", this.doSaveDisplayName() ? this.getDisplayName() : void 0, a);
    this._writeAttribute("cl", this.doSaveClassName() ? this.getClassString() : void 0, a)
};
JSG.graph.attr.Attribute.prototype._writeAttribute = function (a, b, c) {
    b && c.writeAttributeString(a, b)
};
JSG.graph.attr.Attribute.prototype.doSaveDisplayName = function () {
    return !0
};
JSG.graph.attr.Attribute.prototype.doSaveClassName = function () {
    return this.getClassString() !== JSG.graph.attr.Attribute.CLASSNAME
};
JSG.graph.attr.Attribute.prototype._saveValue = function (a) {
    this._value.saveXML("vl", a);
    return !0
};
JSG.graph.attr.Attribute.prototype.readXML = function (a) {
    this._setName(a.getAttribute("n"));
    this._readTagAttributes(a);
    this._readValue(a)
};
JSG.graph.attr.Attribute.prototype._readTagAttributes = function (a) {
    this.setDisplayName(a.getAttribute("dn"))
};
JSG.graph.attr.Attribute.prototype._readValue = function (a) {
    (a = JSG.commons.XML.findElementByTagName(a, "vl")) && this.getExpression().readXML(a)
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.AttributeProxy = function (a) {
    JSG.graph.attr.AttributeProxy._super.constructor.call(this, a.getName(), a.getExpression().copy());
    this._attribute = a
};
JSG.extend(JSG.graph.attr.AttributeProxy, JSG.graph.attr.Attribute);
JSG.graph.attr.AttributeProxy.CLASSNAME = "JSG.graph.attr.AttributeProxy";
JSG.graph.attr.AttributeProxy.prototype.attribute = function () {
    return this._attribute
};
JSG.graph.attr.AttributeProxy.prototype.getClassString = function () {
    return JSG.graph.attr.AttributeProxy.CLASSNAME
};
JSG.graph.attr.AttributeProxy.prototype.getName = function () {
    return this._attribute.getName()
};
JSG.graph.attr.AttributeProxy.prototype.getDisplayName = function () {
    return this._attribute.getDislayName()
};
JSG.graph.attr.AttributeProxy.prototype.setDisplayName = function (a) {
    this._attribute.setDisplayName(a)
};
JSG.graph.attr.AttributeProxy.prototype.isTransient = function () {
    return this._attribute.isTransient()
};
JSG.graph.attr.AttributeProxy.prototype.setTransient = function (a) {
    this._attribute.setTransient(a)
};
JSG.graph.attr.AttributeProxy.prototype.copy = function () {
    return this.newInstance()
};
JSG.graph.attr.AttributeProxy.prototype.newInstance = function () {
    return new JSG.graph.attr.AttributeProxy(this._attribute.copy())
};
JSG.graph.attr.AttributeProxy.prototype.getExpression = function () {
    return this._attribute.getExpression()
};
JSG.graph.attr.AttributeProxy.prototype.getValue = function () {
    return this._attribute.getValue()
};
JSG.graph.attr.AttributeProxy.prototype.setExpressionOrValue = function (a) {
    return this._attribute.setExpressionOrValue(a)
};
JSG.graph.attr.AttributeProxy.prototype.hasDifferentValue = function (a) {
    return this._attribute.hasDifferentValue(a)
};
JSG.graph.attr.AttributeProxy.prototype.replaceValueExpression = function (a) {
    return this._attribute.replaceValueExpression(a)
};
JSG.graph.attr.AttributeProxy.prototype.reset = function (a) {
    this._attribute.reset(a)
};
JSG.graph.attr.AttributeProxy.prototype.evaluate = function (a) {
    this._attribute.evaluate(a)
};
JSG.graph.attr.AttributeProxy.prototype.invalidateTerm = function () {
    this._attribute.invalidateTerm()
};
JSG.graph.attr.AttributeProxy.prototype.resolveParentReference = function (a, b) {
    this._attribute.resolveParentReference(a, b)
};
JSG.graph.attr.AttributeProxy.prototype.saveXML = function (a) {
    return this._attribute.saveXML(a)
};
JSG.graph.attr.AttributeProxy.prototype.readXML = function (a) {
    this._attribute.readXML(a)
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.ConstAttribute = function (a, b) {
    JSG.graph.attr.ConstAttribute._super.constructor.call(this, a, b);
    this._name = a;
    this._clname = void 0;
    this.isConst = !0
};
JSG.extend(JSG.graph.attr.ConstAttribute, JSG.graph.attr.Attribute);
JSG.graph.attr.ConstAttribute.fromAttribute = function (a, b) {
    var c = new JSG.graph.attr.ConstAttribute(b || a.getName(), JSG.graph.expr.ConstExpression.fromExpression(a.getExpression()));
    JSG.graph.attr.ConstAttribute._super.setTransient.call(c, a.isTransient());
    JSG.graph.attr.ConstAttribute._super.setDisplayName.call(c, a.getDisplayName());
    c._clname = a.getClassString();
    return c
};
JSG.graph.attr.ConstAttribute.prototype.toAttribute = function () {
    var a = this.getExpression(), b = JSG.createObjectFromString(this.getClassString());
    b._setName(this.getName());
    b.getExpression().setConstraint(a.getConstraint().copy());
    b.setExpressionOrValue(a);
    b.setTransient(this.isTransient());
    b.setDisplayName(this.getDisplayName());
    return b
};
JSG.graph.attr.ConstAttribute.prototype.newInstance = function () {
    return new JSG.graph.attr.ConstAttribute(this._name, this._value)
};
JSG.graph.attr.ConstAttribute.prototype.copy = function () {
    var a = this.newInstance();
    JSG.graph.attr.ConstAttribute._super.setTransient.call(a, this.isTransient());
    JSG.graph.attr.ConstAttribute._super.setDisplayName.call(a, this.getDisplayName());
    a._clname = this.getClassString();
    return a
};
JSG.graph.attr.ConstAttribute.prototype.getClassString = function () {
    return this._clname || JSG.graph.attr.Attribute.CLASSNAME
};
JSG.graph.attr.ConstAttribute.prototype._setName = function (a) {
};
JSG.graph.attr.ConstAttribute.prototype.setDisplayName = function (a) {
};
JSG.graph.attr.ConstAttribute.prototype.setExpressionOrValue = function (a) {
    return this._list ? this._list.setAttributeValue(this, a) : !1
};
JSG.graph.attr.ConstAttribute.prototype.replaceValueExpression = function (a) {
    return !1
};
JSG.graph.attr.ConstAttribute.prototype.reset = function () {
};
JSG.namespace("JSG.graph.attr.consts");
JSG.graph.attr.consts.PortMode = {
    NONE: 0,
    SHAPE: 2,
    CENTER: 4,
    SIDESCENTER: 8,
    SIDESQUARTER: 16,
    CENTERSTARTATSIDE: 32,
    CORNERS: 64,
    POINTS: 128,
    LINESCENTER: 256,
    DEFAULT: 384,
    ALL: 510
};
JSG.graph.attr.consts.SelectionMode = {NONE: 0, BORDER: 1, AREA: 2, DEFAULT: 4, SELECTPARENT: 8};
JSG.graph.attr.consts.Moveable = {NONE: 0, VERTICAL: 1, HORIZONTAL: 2, BOTH: 3, LIMITTOCONTAINER: 4, ALL: 7};
JSG.graph.attr.consts.Direction = {NONE: 0, VERTICAL: 1, HORIZONTAL: 2, BOTH: 3};
JSG.graph.attr.consts.ButtonPosition = {TOPLEFT: 0, TOPRIGHT: 1, TOPCENTER: 2, BOTTOMCENTER: 3};
JSG.graph.attr.consts.EditMask = {NONE: 0, COORDINATES: 1, LABEL: 2};
JSG.graph.attr.consts.LineBehavior = {
    AUTO: "Auto",
    MANUAL: "Manual",
    HORIZONTAL: "Horizontal",
    VERTICAL: "Vertical",
    DISABLED: "Disabled"
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.BooleanAttribute = function (a, b) {
    JSG.graph.attr.BooleanAttribute._super.constructor.call(this, a, new JSG.graph.expr.BooleanExpression(!0));
    void 0 !== b && this._value.setExpressionOrValue(b)
};
JSG.extend(JSG.graph.attr.BooleanAttribute, JSG.graph.attr.Attribute);
JSG.graph.attr.BooleanAttribute.create = function (a, b, c) {
    a = new JSG.graph.attr.BooleanAttribute(a, b);
    a.setDisplayName(c);
    return a
};
JSG.graph.attr.BooleanAttribute.prototype.getClassString = function () {
    return "JSG.graph.attr.BooleanAttribute"
};
JSG.graph.attr.BooleanAttribute.prototype.newInstance = function () {
    return new JSG.graph.attr.BooleanAttribute(this.getName())
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.NumberAttribute = function (a, b) {
    JSG.graph.attr.NumberAttribute._super.constructor.call(this, a, new JSG.graph.expr.NumberExpression(0));
    void 0 !== b && this._value.setExpressionOrValue(b)
};
JSG.extend(JSG.graph.attr.NumberAttribute, JSG.graph.attr.Attribute);
JSG.graph.attr.NumberAttribute.create = function (a, b, c) {
    a = new JSG.graph.attr.NumberAttribute(a, b);
    a.setDisplayName(c);
    return a
};
JSG.graph.attr.NumberAttribute.prototype.getClassString = function () {
    return "JSG.graph.attr.NumberAttribute"
};
JSG.graph.attr.NumberAttribute.prototype.newInstance = function () {
    return new JSG.graph.attr.NumberAttribute(this.getName())
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.StringAttribute = function (a, b) {
    JSG.graph.attr.StringAttribute._super.constructor.call(this, a, new JSG.graph.expr.StringExpression(""));
    void 0 !== b && this._value.setExpressionOrValue(b)
};
JSG.extend(JSG.graph.attr.StringAttribute, JSG.graph.attr.Attribute);
JSG.graph.attr.StringAttribute.create = function (a, b, c) {
    a = new JSG.graph.attr.StringAttribute(a, b);
    a.setDisplayName(c);
    return a
};
JSG.graph.attr.StringAttribute.prototype.getClassString = function () {
    return "JSG.graph.attr.StringAttribute"
};
JSG.graph.attr.StringAttribute.prototype.newInstance = function () {
    return new JSG.graph.attr.StringAttribute(this.getName())
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.ObjectAttribute = function (a, b) {
    JSG.graph.attr.ObjectAttribute._super.constructor.call(this, a, new JSG.graph.expr.ObjectExpression(void 0));
    void 0 !== b && this._value.setExpressionOrValue(b)
};
JSG.extend(JSG.graph.attr.ObjectAttribute, JSG.graph.attr.Attribute);
JSG.graph.attr.ObjectAttribute.prototype.getClassString = function () {
    return "JSG.graph.attr.ObjectAttribute"
};
JSG.graph.attr.ObjectAttribute.prototype.newInstance = function () {
    return new JSG.graph.attr.ObjectAttribute(this.getName())
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.ConditionalAttribute = function (a) {
    JSG.graph.attr.ConditionalAttribute._super.constructor.call(this, a);
    this.conditions = []
};
JSG.extend(JSG.graph.attr.ConditionalAttribute, JSG.graph.attr.AttributeProxy);
JSG.graph.attr.ConditionalAttribute.prototype.copy = function () {
    return this._attribute.copy()
};
JSG.graph.attr.ConditionalAttribute.prototype.addCondition = function (a, b) {
    0 <= b && b < this.conditions.length ? JSG.Arrays.insertAt(this.conditions, b, a) : this.conditions.push(a)
};
JSG.graph.attr.ConditionalAttribute.prototype.hasConditions = function () {
    return 0 < this.conditions.length
};
JSG.graph.attr.ConditionalAttribute.prototype.sortConditions = function () {
    this.conditions.sort(function (a, b) {
        return a.prio - b.prio
    })
};
JSG.graph.attr.ConditionalAttribute.prototype.removeCondition = function (a) {
    JSG.Arrays.remove(this.conditions, a)
};
JSG.graph.attr.ConditionalAttribute.prototype.evaluate = function (a) {
    var b;
    this._attribute.evaluate(a);
    for (b = 0; b < this.conditions.length; b++)this.conditions[b].expression.evaluate(a)
};
JSG.graph.attr.ConditionalAttribute.prototype.invalidateTerm = function () {
    var a;
    this._attribute.invalidateTerm();
    for (a = 0; a < this.conditions.length; a++)this.conditions[a].expression.invalidateTerm()
};
JSG.graph.attr.ConditionalAttribute.prototype.getValue = function () {
    var a, b;
    for (b = 0; b < this.conditions.length; b++) {
        var c = this.conditions[b];
        if (c.isActive)c.isTrue() && (a = c.expression.getValue()); else break
    }
    return void 0 !== a ? this._convertValue(a) : this.attribute().getValue()
};
JSG.graph.attr.ConditionalAttribute.prototype._convertValue = function (a) {
    return this._attribute instanceof JSG.graph.attr.BooleanAttribute ? "true" === a.toLowerCase() : this._attribute instanceof JSG.graph.attr.NumberAttribute ? Number(a) : a
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.AttributeList = function (a, b) {
    var c = b || new JSG.graph.attr.AttributeList.MapExpression;
    JSG.graph.attr.AttributeList._super.constructor.call(this, a, c);
    this._parent = void 0;
    c._list = this;
    for (var d = c.getValue(), c = 0; c < d.length; c++)d[c]._list = this
};
JSG.extend(JSG.graph.attr.AttributeList, JSG.graph.attr.Attribute);
JSG.graph.attr.AttributeList.CLASSNAME = "JSG.graph.attr.AttributeList";
JSG.graph.attr.AttributeList.prototype.newInstance = function (a) {
    return new JSG.graph.attr.AttributeList(this.getName(), a)
};
JSG.graph.attr.AttributeList.prototype.copy = function () {
    var a = this.newInstance(this._value.copy());
    a._parent = this._parent;
    return a
};
JSG.graph.attr.AttributeList.prototype.getClassString = function () {
    return "JSG.graph.attr.AttributeList"
};
JSG.graph.attr.AttributeList.prototype.isEmpty = function () {
    return this._value.isEmpty()
};
JSG.graph.attr.AttributeList.prototype.reset = function () {
    this._resetList(this)
};
JSG.graph.attr.AttributeList.prototype._resetList = function (a) {
    var b = this.getAttributeList();
    b ? b._resetList(a) : this.Utils.resetList(a)
};
JSG.graph.attr.AttributeList.prototype.hasAttribute = function (a, b) {
    return this._value.hasElement(a) || (b && this._parent ? this._parent.hasAttribute(a, !0) : !1)
};
JSG.graph.attr.AttributeList.prototype.addAttribute = function (a) {
    return this._addAttributeToList(a, this)
};
JSG.graph.attr.AttributeList.prototype._addAttributeToList = function (a, b) {
    var c = this.getAttributeList();
    return c ? c._addAttributeToList(a, b) : this.Utils.addAttributeToList(a, b)
};
JSG.graph.attr.AttributeList.prototype.addAttributeAtPath = function (a, b) {
    var c = this.Utils.findAttributeByPath(a, this);
    return c instanceof JSG.graph.attr.AttributeList ? c.addAttribute(b) : void 0
};
JSG.graph.attr.AttributeList.prototype.getAttribute = function (a) {
    var b = this._value.getElement(a);
    !b && this._parent && (b = this._parent.getAttribute(a)) && (b._list = this);
    return b
};
JSG.graph.attr.AttributeList.prototype.getAttributeAtPath = function (a) {
    var b = this.Utils.findAttributeByPath(a, this);
    !b && this._parent && (b = this.Utils.findAttributeByPath(a, this._parent)) && (b._list = this);
    return b
};
JSG.graph.attr.AttributeList.prototype.setAttribute = function (a, b) {
    var c = this._value.getElement(a);
    c || (c = this._parent ? this._parent.getAttribute(a) : void 0) && !c.getExpression().isEqualToExpressionOrValue(b) && (c = c.isConst ? c.toAttribute() : c.copy(), this.addAttribute(c));
    return c ? this.setAttributeValue(c, b) : !1
};
JSG.graph.attr.AttributeList.prototype.setAttributeAtPath = function (a, b) {
    var c = this.Utils.findAttributeByPath(a, this);
    c || (c = this._parent ? this.Utils.findAttributeByPath(a, this) : void 0) && !c.getExpression().isEqualToExpressionOrValue(b) && (c = c.isConst ? c.toAttribute() : c.copy(), this.addAttributeAtPath(a, c));
    return c ? this.setAttributeValue(c, b) : !1
};
JSG.graph.attr.AttributeList.prototype.setAttributeValue = function (a, b) {
    var c = this.getAttributeList();
    return c ? c.setAttributeValue(a, b) : a ? this.Utils.setAttributeValue(a, b) : !1
};
JSG.graph.attr.AttributeList.prototype.removeAttribute = function (a) {
    return this._removeAttributeFromList(a, this)
};
JSG.graph.attr.AttributeList.prototype._removeAttributeFromList = function (a, b) {
    var c = this.getAttributeList();
    return c ? c._removeAttributeFromList(a, b) : this.Utils.removeAttributeFromList(a, b)
};
JSG.graph.attr.AttributeList.prototype.removeAttributeAtPath = function (a) {
    var b = (a = this.Utils.findAttributeByPath(a, this)) ? a.getAttributeList() : void 0;
    return b ? b.removeAttribute(a) : void 0
};
JSG.graph.attr.AttributeList.prototype.retainAll = function (a, b) {
    function c(a, b) {
        return !0
    }

    var d = !1, e = b || c, f = this._value.getValue(), g, k, h;
    for (g = 0; g < f.length; g++)k = f[g], h = a.getAttribute(k.getName()), h && e(k, h) || (this.removeAttribute(k), d = !0);
    return d
};
JSG.graph.attr.AttributeList.prototype.iterate = function (a) {
    this._value.iterate(function (b, c) {
        a(c)
    })
};
JSG.graph.attr.AttributeList.prototype.addAll = function (a) {
    return this._addAll(a, this)
};
JSG.graph.attr.AttributeList.prototype._addAll = function (a, b) {
    var c = this.getAttributeList();
    return c ? c.addAll(a, this) : this.Utils.addAll(a, this)
};
JSG.graph.attr.AttributeList.prototype.toFlatList = function () {
    var a = this.newInstance();
    if (this._parent) {
        var b = this._parent.toFlatList();
        a.addAll(b)
    }
    a.addAll(this);
    a.setParent(void 0);
    return a
};
JSG.graph.attr.AttributeList.prototype.toMap = function (a) {
    var b = new JSG.commons.Map;
    this._value.iterate(function (a, d) {
        b.put(d.getName(), d.getExpression().copy())
    });
    !0 === a && this._parent && b.putAll(this._parent.toMap(!0));
    return b
};
JSG.graph.attr.AttributeList.prototype.getValue = function (a) {
    var b = JSG.graph.attr.AttributeList._super.getValue.call(this);
    !0 === a && this._parent && JSG.Arrays.addAll(b, this._parent.getValue(!0));
    return b
};
JSG.graph.attr.AttributeList.prototype.applyAttributesMap = function (a, b) {
    this.applyMap(a, b)
};
JSG.graph.attr.AttributeList.prototype.applyMap = function (a, b) {
    function c(a, b) {
        e = d.setAttribute(a, b) || e
    }

    var d = this, e = !1, f = this._sendPreEvent(a, b);
    if (!f || f.doIt)a.iterate(c), b && b.sendPostEvent(f);
    return e
};
JSG.graph.attr.AttributeList.prototype._sendPreEvent = function (a, b) {
    if (b) {
        var c = new JSG.graph.model.events.AttributeChangeEvent(JSG.graph.model.events.AttributeChangeEvent.BULK, this, a);
        b.sendPreEvent(c);
        return c
    }
};
JSG.graph.attr.AttributeList.prototype.setParent = function (a) {
    this._parent = a;
    this._pl = void 0
};
JSG.graph.attr.AttributeList.prototype.getParent = function () {
    return this._parent
};
JSG.graph.attr.AttributeList.prototype.toTemplate = function (a) {
    a = JSG.graph.attr.Template.fromList(this, a);
    this._pl && (a._pl = this._pl);
    return a
};
JSG.graph.attr.AttributeList.prototype.evaluate = function (a) {
    JSG.graph.attr.AttributeList._super.evaluate.call(this, a);
    this._pl && this._applyParent(JSG.graph.attr.AttributeUtils.resolveAttributeRef(this._pl, this), this._pl) && (this._pl = void 0)
};
JSG.graph.attr.AttributeList.prototype.doSaveClassName = function () {
    return this.getClassString() !== JSG.graph.attr.AttributeList.CLASSNAME
};
JSG.graph.attr.AttributeList.prototype.doSaveParentRef = function () {
    return !!this._parent
};
JSG.graph.attr.AttributeList.prototype.saveXML = function (a) {
    return this._saveXML("al", a)
};
JSG.graph.attr.AttributeList.prototype._saveTagAttributes = function (a) {
    var b = JSG.graph.attr.AttributeList._super._saveTagAttributes.call(this, a);
    this.doSaveParentRef() && (this._writeAttribute("pl", JSG.graph.attr.AttributeUtils.createAttributeRef(this._parent), a), b = !0);
    return b
};
JSG.graph.attr.AttributeList.prototype._saveValue = function (a) {
    var b = this._value.getValue(), c = !1, d, e;
    for (d = 0; d < b.length; d++)e = b[d], c = e instanceof JSG.graph.attr.AttributeList ? this._saveAttributeList(e, a) || c : this._saveAttribute(e, a) || c;
    return c
};
JSG.graph.attr.AttributeList.prototype._saveAttribute = function (a, b) {
    this._overwritesParent(a) && (a._saveTagAttributes = this._saveTag);
    return a.saveXML(b)
};
JSG.graph.attr.AttributeList.prototype._overwritesParent = function (a) {
    return this._parent ? this._parent.getAttribute(a.getName()) : !1
};
JSG.graph.attr.AttributeList.prototype._saveTag = function (a) {
    this._writeAttribute("dn", this.doSaveDisplayName() ? this.getDisplayName() : void 0, a)
};
JSG.graph.attr.AttributeList.prototype._saveAttributeList = function (a, b) {
    return a.saveXML(b)
};
JSG.graph.attr.AttributeList.prototype._readTagAttributes = function (a) {
    JSG.graph.attr.AttributeList._super._readTagAttributes.call(this, a);
    this._readParentTag(a)
};
JSG.graph.attr.AttributeList.prototype._readParentTag = function (a) {
    var b = a.getAttribute("tl") || a.getAttribute("tid"), c = b && JSG.TemplateStore ? JSG.TemplateStore.getTemplate(b) : void 0;
    this._applyParent(c, b) || (b = b || a.getAttribute("pl"), c = JSG.graph.attr.AttributeUtils.resolveAttributeRef(b), this._applyParent(c, b))
};
JSG.graph.attr.AttributeList.prototype._applyParent = function (a, b) {
    a ? this.setParent(a) : b && (this._pl = b);
    return !!a || !!b
};
JSG.graph.attr.AttributeList.prototype._readValue = function (a) {
    if (a.hasChildNodes()) {
        a = a.childNodes;
        var b, c;
        for (b = 0; b < a.length; b++)c = a.item(b), (c = JSG.graph.attr.AttributeUtils.readAttribute(c, this)) && this.addAttribute(c)
    }
};
JSG.graph.attr.AttributeList.MapExpression = function (a) {
    JSG.graph.attr.AttributeList.MapExpression._super.constructor.call(this);
    this._list = a
};
JSG.extend(JSG.graph.attr.AttributeList.MapExpression, JSG.graph.expr.MapExpression);
JSG.graph.attr.AttributeList.MapExpression.prototype.newInstance = function () {
    return new JSG.graph.attr.AttributeList.MapExpression(this._list)
};
JSG.graph.attr.AttributeList.MapExpression.prototype.hasElement = function (a) {
    return JSG.graph.attr.AttributeList.MapExpression._super.hasElement.call(this, a.toUpperCase())
};
JSG.graph.attr.AttributeList.MapExpression.prototype.putElement = function (a, b) {
    return JSG.graph.attr.AttributeList.MapExpression._super.putElement.call(this, a.toUpperCase(), b)
};
JSG.graph.attr.AttributeList.MapExpression.prototype.getElement = function (a) {
    if (a = JSG.graph.attr.AttributeList.MapExpression._super.getElement.call(this, a.toUpperCase()))a._list = this._list;
    return a
};
JSG.graph.attr.AttributeList.MapExpression.prototype.removeElement = function (a) {
    if (a = JSG.graph.attr.AttributeList.MapExpression._super.removeElement.call(this, a.toUpperCase()))a._list = this._list;
    return a
};
JSG.graph.attr.AttributeList.MapExpression.prototype.evaluate = function (a) {
    this._value.iterate(function (b, c) {
        c.evaluate(a)
    })
};
JSG.graph.attr.AttributeList.MapExpression.prototype.invalidateTerm = function () {
    this._value.iterate(function (a, b) {
        b.invalidateTerm()
    })
};
JSG.graph.attr.AttributeList.MapExpression.prototype.resolveParentReference = function (a, b) {
    this._value.iterate(function (c, d) {
        d.resolveParentReference(a, b)
    })
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.ConstAttributeList = function (a, b) {
    JSG.graph.attr.ConstAttributeList._super.constructor.call(this, a, b);
    this.isConst = !0;
    this._clname = void 0
};
JSG.extend(JSG.graph.attr.ConstAttributeList, JSG.graph.attr.AttributeList);
JSG.graph.attr.ConstAttributeList.fromList = function (a, b) {
    var c, d = new JSG.graph.attr.AttributeList.MapExpression;
    a.getExpression().iterate(function (a, b) {
        b = JSG.graph.attr.ConstAttribute.fromAttribute(b);
        d.putElement(a, b)
    });
    c = new JSG.graph.attr.ConstAttributeList(b || a.getName(), d);
    c._clname = a.getClassString();
    c.setParent(a.getParent());
    return c
};
JSG.graph.attr.ConstAttributeList.prototype.toList = function () {
    var a = JSG.createObjectFromString(this._clname), a = a || new JSG.graph.attr.AttributeList;
    a._setName(this.getName());
    a.setParent(this.getParent());
    this.getExpression().iterate(function (b, c) {
        a.addAttribute(c.toAttribute())
    });
    return a
};
JSG.graph.attr.ConstAttributeList.prototype.toAttribute = function () {
    return this.toList()
};
JSG.graph.attr.ConstAttributeList.prototype.newInstance = function (a) {
    var b;
    a && (b = new JSG.graph.attr.AttributeList.MapExpression, a.iterate(function (a, d) {
        b.putElement(a, d.copy())
    }));
    return new JSG.graph.attr.ConstAttributeList(this.getName(), b)
};
JSG.graph.attr.ConstAttributeList.prototype.copy = function () {
    return this.newInstance(this.getExpression())
};
JSG.graph.attr.ConstAttributeList.prototype.getClassString = function () {
    return this._clname || JSG.graph.attr.AttributeList.CLASSNAME
};
JSG.graph.attr.ConstAttributeList.prototype.setClassString = function (a) {
    this._clname = a
};
JSG.graph.attr.ConstAttributeList.prototype.reset = function () {
};
JSG.graph.attr.ConstAttributeList.prototype.addAttribute = function (a) {
};
JSG.graph.attr.ConstAttributeList.prototype.addAttributeAtPath = function (a, b) {
};
JSG.graph.attr.ConstAttributeList.prototype.setAttribute = function (a, b) {
    return !1
};
JSG.graph.attr.ConstAttributeList.prototype.setAttributeAtPath = function (a, b) {
    return !1
};
JSG.graph.attr.ConstAttributeList.prototype.setAttributeValue = function (a, b) {
    return !1
};
JSG.graph.attr.ConstAttributeList.prototype.removeAttribute = function (a) {
};
JSG.graph.attr.ConstAttributeList.prototype._removeAttributeFromList = function (a, b) {
};
JSG.graph.attr.ConstAttributeList.prototype.removeAttributeAtPath = function (a) {
};
JSG.graph.attr.ConstAttributeList.prototype.retainAll = function (a, b) {
    return !1
};
JSG.graph.attr.ConstAttributeList.prototype.doSaveClassName = function () {
    return this.getClassString() !== JSG.graph.attr.AttributeList.CLASSNAME
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.Template = function (a, b) {
    JSG.graph.attr.Template._super.constructor.call(this, a, b);
    this.isTemplate = !0
};
JSG.extend(JSG.graph.attr.Template, JSG.graph.attr.ConstAttributeList);
JSG.graph.attr.Template.fromList = function (a, b) {
    var c, d = new JSG.graph.attr.AttributeList.MapExpression;
    a.getExpression().iterate(function (a, b) {
        b = JSG.graph.attr.ConstAttribute.fromAttribute(b);
        d.putElement(a, b)
    });
    c = new JSG.graph.attr.Template(b || a.getName(), d);
    c._clname = a.getClassString();
    c.setParent(a.getParent());
    return c
};
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.ItemAttributes = function (a) {
    JSG.graph.attr.ItemAttributes._super.constructor.call(this, JSG.graph.attr.ItemAttributes.NAME, a);
    this.setParent(JSG.graph.attr.ItemAttributes.Template)
};
JSG.extend(JSG.graph.attr.ItemAttributes, JSG.graph.attr.AttributeList);
JSG.graph.attr.ItemAttributes.NAME = "graphitem";
JSG.graph.attr.ItemAttributes.CLIPCHILDREN = "clipchildren";
JSG.graph.attr.ItemAttributes.CLOSED = "closed";
JSG.graph.attr.ItemAttributes.COLLAPSABLE = "collapsable";
JSG.graph.attr.ItemAttributes.COLLAPSED = "collapsed";
JSG.graph.attr.ItemAttributes.COLLAPSEDBUTTON = "collapsedbutton";
JSG.graph.attr.ItemAttributes.COMBINED = "combined";
JSG.graph.attr.ItemAttributes.CONTAINER = "container";
JSG.graph.attr.ItemAttributes.DELETEABLE = "deleteable";
JSG.graph.attr.ItemAttributes.MOVEABLE = "moveable";
JSG.graph.attr.ItemAttributes.PORTMODE = "portmode";
JSG.graph.attr.ItemAttributes.ROTATABLE = "rotatable";
JSG.graph.attr.ItemAttributes.SELECTIONMODE = "selectionmode";
JSG.graph.attr.ItemAttributes.SELECTED = "selected";
JSG.graph.attr.ItemAttributes.SIZEABLE = "sizeable";
JSG.graph.attr.ItemAttributes.SNAPTO = "snapto";
JSG.graph.attr.ItemAttributes.VISIBLE = "visible";
JSG.graph.attr.ItemAttributes.ALWAYSVISIBLE = "alwaysvisible";
JSG.graph.attr.ItemAttributes.MARGINTOP = "margintop";
JSG.graph.attr.ItemAttributes.MARGINLEFT = "marginleft";
JSG.graph.attr.ItemAttributes.MARGINRIGHT = "marginright";
JSG.graph.attr.ItemAttributes.MARGINBOTTOM = "marginbottom";
JSG.graph.attr.ItemAttributes.ITEMPART = "itempart";
JSG.graph.attr.ItemAttributes.EDITMASK = "editmask";
JSG.graph.attr.ItemAttributes.prototype.newInstance = function (a) {
    return new JSG.graph.attr.ItemAttributes(a)
};
JSG.graph.attr.ItemAttributes.prototype.getClassString = function () {
    return "JSG.graph.attr.ItemAttributes"
};
JSG.graph.attr.ItemAttributes.prototype.setAlwaysVisible = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.ALWAYSVISIBLE, a)
};
JSG.graph.attr.ItemAttributes.prototype.getAlwaysVisible = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.ALWAYSVISIBLE)
};
JSG.graph.attr.ItemAttributes.prototype.setClipChildren = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.CLIPCHILDREN, a)
};
JSG.graph.attr.ItemAttributes.prototype.getClipChildren = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.CLIPCHILDREN)
};
JSG.graph.attr.ItemAttributes.prototype.setClosed = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.CLOSED, a)
};
JSG.graph.attr.ItemAttributes.prototype.getClosed = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.CLOSED)
};
JSG.graph.attr.ItemAttributes.prototype.setCollapsable = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.COLLAPSABLE, a)
};
JSG.graph.attr.ItemAttributes.prototype.getCollapsable = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.COLLAPSABLE)
};
JSG.graph.attr.ItemAttributes.prototype.setCollapsed = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.COLLAPSED, a)
};
JSG.graph.attr.ItemAttributes.prototype.getCollapsed = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.COLLAPSED)
};
JSG.graph.attr.ItemAttributes.prototype.setCollapsedButton = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.COLLAPSEDBUTTON, a)
};
JSG.graph.attr.ItemAttributes.prototype.getCollapsedButton = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.COLLAPSEDBUTTON)
};
JSG.graph.attr.ItemAttributes.prototype.setCombined = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.COMBINED, a)
};
JSG.graph.attr.ItemAttributes.prototype.getCombined = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.COMBINED)
};
JSG.graph.attr.ItemAttributes.prototype.setContainer = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.CONTAINER, a)
};
JSG.graph.attr.ItemAttributes.prototype.getContainer = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.CONTAINER)
};
JSG.graph.attr.ItemAttributes.prototype.setDeleteable = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.DELETEABLE, a)
};
JSG.graph.attr.ItemAttributes.prototype.getDeleteable = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.DELETEABLE)
};
JSG.graph.attr.ItemAttributes.prototype.setMoveable = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.MOVEABLE, a)
};
JSG.graph.attr.ItemAttributes.prototype.getMoveable = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.MOVEABLE)
};
JSG.graph.attr.ItemAttributes.prototype.setPortMode = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.PORTMODE, a)
};
JSG.graph.attr.ItemAttributes.prototype.getPortMode = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.PORTMODE)
};
JSG.graph.attr.ItemAttributes.prototype.setRotatable = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.ROTATABLE, a)
};
JSG.graph.attr.ItemAttributes.prototype.getRotatable = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.ROTATABLE)
};
JSG.graph.attr.ItemAttributes.prototype.setSelectionMode = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.SELECTIONMODE, a)
};
JSG.graph.attr.ItemAttributes.prototype.getSelectionMode = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.SELECTIONMODE)
};
JSG.graph.attr.ItemAttributes.prototype.setSelectParentFirst = function (a) {
    var b = this.getSelectionMode().getValue(), b = a ? b | JSG.graph.attr.consts.SelectionMode.SELECTPARENT : b & ~JSG.graph.attr.consts.SelectionMode.SELECTPARENT;
    this.setSelectionMode(b)
};
JSG.graph.attr.ItemAttributes.prototype.setSelected = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.SELECTED, a)
};
JSG.graph.attr.ItemAttributes.prototype.getSelected = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.SELECTED)
};
JSG.graph.attr.ItemAttributes.prototype.setSizeable = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.SIZEABLE, a)
};
JSG.graph.attr.ItemAttributes.prototype.getSizeable = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.SIZEABLE)
};
JSG.graph.attr.ItemAttributes.prototype.setSnapTo = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.SNAPTO, a)
};
JSG.graph.attr.ItemAttributes.prototype.getSnapTo = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.SNAPTO)
};
JSG.graph.attr.ItemAttributes.prototype.setVisible = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.VISIBLE, a)
};
JSG.graph.attr.ItemAttributes.prototype.getVisible = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.VISIBLE)
};
JSG.graph.attr.ItemAttributes.prototype.setLeftMargin = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.MARGINLEFT, a)
};
JSG.graph.attr.ItemAttributes.prototype.getLeftMargin = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.MARGINLEFT)
};
JSG.graph.attr.ItemAttributes.prototype.setRightMargin = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.MARGINRIGHT, a)
};
JSG.graph.attr.ItemAttributes.prototype.getRightMargin = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.MARGINRIGHT)
};
JSG.graph.attr.ItemAttributes.prototype.setTopMargin = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.MARGINTOP, a)
};
JSG.graph.attr.ItemAttributes.prototype.getTopMargin = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.MARGINTOP)
};
JSG.graph.attr.ItemAttributes.prototype.setBottomMargin = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.MARGINBOTTOM, a)
};
JSG.graph.attr.ItemAttributes.prototype.getBottomMargin = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.MARGINBOTTOM)
};
JSG.graph.attr.ItemAttributes.prototype.setItemPart = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.ITEMPART, a)
};
JSG.graph.attr.ItemAttributes.prototype.getItemPart = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.ITEMPART)
};
JSG.graph.attr.ItemAttributes.prototype.setEditMask = function (a) {
    this.setAttribute(JSG.graph.attr.ItemAttributes.EDITMASK, a)
};
JSG.graph.attr.ItemAttributes.prototype.getEditMask = function () {
    return this.getAttribute(JSG.graph.attr.ItemAttributes.EDITMASK)
};
JSG.graph.attr.ItemAttributes.prototype.hasEditMask = function (a) {
    return (this.getAttribute(JSG.graph.attr.ItemAttributes.EDITMASK).getValue() & a) === a
};
JSG.graph.attr.ItemAttributes.prototype.applyLegacyAttributes = function (a) {
    function b(a, b) {
        b instanceof JSG.graph.attr.Attribute && (b = b.getExpression());
        c.setAttribute(a, b)
    }

    var c = this, d = JSG.graph.attr.ItemAttributes;
    b(d.CLIPCHILDREN, a.getClipChildren());
    b(d.CLOSED, a.getClosed());
    b(d.COLLAPSABLE, a.getCollapsable());
    b(d.COLLAPSED, a.getCollapsed());
    b(d.COLLAPSEDBUTTON, a.getCollapsedButton());
    b(d.COMBINED, a.getCombined());
    b(d.CONTAINER, a.getContainer());
    b(d.DELETEABLE, a.getDeleteable());
    b(d.MOVEABLE, a.getMoveable());
    b(d.PORTMODE, a.getPortMode());
    b(d.ROTATABLE, a.getRotatable());
    b(d.SELECTIONMODE, a.getSelectionMode());
    b(d.SELECTED, a.getSelected());
    b(d.SIZEABLE, a.getSizeable());
    b(d.SNAPTO, a.getSnapTo());
    b(d.VISIBLE, a.getVisible());
    b(d.ALWAYSVISIBLE, a.getAlwaysVisible());
    b(d.MARGINLEFT, a.getLeftMargin());
    b(d.MARGINRIGHT, a.getRightMargin());
    b(d.MARGINTOP, a.getTopMargin());
    b(d.MARGINBOTTOM, a.getBottomMargin())
};
JSG.graph.attr.ItemAttributes.prototype.readXML = function (a) {
    JSG.graph.attr.ItemAttributes._super.readXML.call(this, a);
    a = this.getPortMode().getValue();
    a & 1 && this.setPortMode(a & -2 & JSG.graph.attr.consts.PortMode.DEFAULT)
};
JSG.graph.attr.ItemAttributes.prototype.doSaveParentRef = function () {
    return this._parent && this._parent.getName() !== JSG.graph.attr.ItemAttributes.Template_ID
};
JSG.graph.attr.ItemAttributes.Template_ID = "JSG.graph.attr.ItemAttributes.Template";
JSG.graph.attr.ItemAttributes.Template = function () {
    function a(a, b, c) {
        c && a.getExpression().setConstraint(c);
        b = void 0 === b && c ? c.defValue : b;
        a.setExpressionOrValue(b);
        d.addAttribute(a)
    }

    var b = JSG.graph.attr.ItemAttributes, c = JSG.graph.attr.consts, d = new JSG.graph.attr.ItemAttributes, e = JSG.graph.expr.RangeConstraint;
    a(new JSG.graph.attr.BooleanAttribute(b.CLIPCHILDREN), !1);
    a(new JSG.graph.attr.BooleanAttribute(b.CLOSED), !0);
    a(new JSG.graph.attr.NumberAttribute(b.COLLAPSABLE), void 0, e.fromPropertiesOf(c.Direction,
        c.Direction.NONE));
    a(new JSG.graph.attr.BooleanAttribute(b.COLLAPSED), !1);
    a(new JSG.graph.attr.NumberAttribute(b.COLLAPSEDBUTTON), void 0, e.fromPropertiesOf(c.ButtonPosition, c.ButtonPosition.TOPRIGHT));
    a(new JSG.graph.attr.BooleanAttribute(b.COMBINED), !1);
    a(new JSG.graph.attr.BooleanAttribute(b.CONTAINER), !0);
    a(new JSG.graph.attr.BooleanAttribute(b.DELETEABLE), !0);
    a(new JSG.graph.attr.NumberAttribute(b.MOVEABLE), c.Moveable.BOTH);
    a(new JSG.graph.attr.NumberAttribute(b.PORTMODE), c.PortMode.DEFAULT | c.PortMode.CENTER);
    a(new JSG.graph.attr.BooleanAttribute(b.ROTATABLE), !0);
    a(new JSG.graph.attr.NumberAttribute(b.SELECTIONMODE), c.SelectionMode.DEFAULT);
    var f = new JSG.graph.attr.BooleanAttribute(b.SELECTED);
    f.setTransient(!0);
    f.setExpressionOrValue(!1);
    d.addAttribute(f);
    a(new JSG.graph.attr.BooleanAttribute(b.SIZEABLE), !0);
    a(new JSG.graph.attr.BooleanAttribute(b.SNAPTO), !0);
    a(new JSG.graph.attr.BooleanAttribute(b.VISIBLE), !0);
    a(new JSG.graph.attr.NumberAttribute(b.ALWAYSVISIBLE), void 0, e.fromPropertiesOf(c.Direction,
        c.Direction.NONE));
    a(new JSG.graph.attr.NumberAttribute(b.MARGINLEFT), 0);
    a(new JSG.graph.attr.NumberAttribute(b.MARGINRIGHT), 0);
    a(new JSG.graph.attr.NumberAttribute(b.MARGINTOP), 0);
    a(new JSG.graph.attr.NumberAttribute(b.MARGINBOTTOM), 0);
    a(new JSG.graph.attr.BooleanAttribute(b.ITEMPART), !1);
    a(new JSG.graph.attr.NumberAttribute(b.EDITMASK), c.EditMask.NONE);
    return d.toTemplate(JSG.graph.attr.ItemAttributes.Template_ID)
}();
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.EdgeAttributes = function (a) {
    JSG.graph.attr.EdgeAttributes._super.constructor.call(this, a);
    this.setParent(JSG.graph.attr.EdgeAttributes.Template)
};
JSG.extend(JSG.graph.attr.EdgeAttributes, JSG.graph.attr.ItemAttributes);
JSG.graph.attr.EdgeAttributes.prototype.newInstance = function (a) {
    return new JSG.graph.attr.EdgeAttributes(a)
};
JSG.graph.attr.EdgeAttributes.prototype.getClassString = function () {
    return "JSG.graph.attr.EdgeAttributes"
};
JSG.graph.attr.EdgeAttributes.prototype.doSaveParentRef = function () {
    return this._parent && this._parent.getName() !== JSG.graph.attr.EdgeAttributes.Template_ID
};
JSG.graph.attr.EdgeAttributes.Template_ID = "JSG.graph.attr.EdgeAttributes.Template";
JSG.graph.attr.EdgeAttributes.Template = function () {
    var a = JSG.graph.attr.ItemAttributes, b = new JSG.graph.attr.EdgeAttributes;
    b.setParent(a.Template);
    b.addAttribute(new JSG.graph.attr.BooleanAttribute(a.CLOSED)).setExpressionOrValue(!1);
    b.addAttribute(new JSG.graph.attr.BooleanAttribute(a.SNAPTO)).setExpressionOrValue(!1);
    b.addAttribute(new JSG.graph.attr.BooleanAttribute(a.CONTAINER)).setExpressionOrValue(!1);
    return b.toTemplate(JSG.graph.attr.EdgeAttributes.Template_ID)
}();
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.TextNodeAttributes = function (a) {
    JSG.graph.attr.TextNodeAttributes._super.constructor.call(this, a);
    this.setParent(JSG.graph.attr.TextNodeAttributes.Template)
};
JSG.extend(JSG.graph.attr.TextNodeAttributes, JSG.graph.attr.ItemAttributes);
JSG.graph.attr.TextNodeAttributes.SIZEMODE = "sizemode";
JSG.graph.attr.TextNodeAttributes.SizeMode = {TEXT: 1, WIDTH: 2};
JSG.graph.attr.TextNodeAttributes.prototype.newInstance = function (a) {
    return new JSG.graph.attr.TextNodeAttributes(a)
};
JSG.graph.attr.TextNodeAttributes.prototype.getClassString = function () {
    return "JSG.graph.attr.TextNodeAttributes"
};
JSG.graph.attr.TextNodeAttributes.prototype.getSizeMode = function () {
    return this.getAttribute(JSG.graph.attr.TextNodeAttributes.SIZEMODE)
};
JSG.graph.attr.TextNodeAttributes.prototype.setSizeMode = function (a) {
    this.setAttribute(JSG.graph.attr.TextNodeAttributes.SIZEMODE, a)
};
JSG.graph.attr.TextNodeAttributes.prototype.doSaveParentRef = function () {
    return this._parent && this._parent.getName() !== JSG.graph.attr.TextNodeAttributes.Template_ID
};
JSG.graph.attr.TextNodeAttributes.Template_ID = "JSG.graph.attr.TextNodeAttributes.Template";
JSG.graph.attr.TextNodeAttributes.Template = function () {
    function a(a, b, c) {
        c && a.getExpression().setConstraint(c);
        b = void 0 === b && c ? c.defValue : b;
        a.setExpressionOrValue(b);
        d.addAttribute(a)
    }

    var b = JSG.graph.attr.ItemAttributes, c = JSG.graph.attr.TextNodeAttributes, d = new JSG.graph.attr.TextNodeAttributes, e = JSG.graph.expr.RangeConstraint;
    d.setParent(JSG.graph.attr.ItemAttributes.Template);
    a(new JSG.graph.attr.BooleanAttribute(b.CONTAINER), !1);
    a(new JSG.graph.attr.NumberAttribute(b.PORTMODE), JSG.graph.attr.consts.PortMode.NONE);
    a(new JSG.graph.attr.BooleanAttribute(b.SNAPTO), !1);
    a(new JSG.graph.attr.NumberAttribute(b.MARGINLEFT), 150);
    a(new JSG.graph.attr.NumberAttribute(b.MARGINRIGHT), 150);
    a(new JSG.graph.attr.NumberAttribute(b.MARGINTOP), 150);
    a(new JSG.graph.attr.NumberAttribute(b.MARGINBOTTOM), 150);
    a(new JSG.graph.attr.NumberAttribute(c.SIZEMODE), void 0, e.fromPropertiesOf(c.SizeMode, c.SizeMode.TEXT));
    return d.toTemplate(JSG.graph.attr.TextNodeAttributes.Template_ID)
}();
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.LayoutAttributes = function (a) {
    JSG.graph.attr.LayoutAttributes._super.constructor.call(this, JSG.graph.attr.LayoutAttributes.NAME, a);
    this._constraints = this._layouter = void 0;
    this.setParent(JSG.graph.attr.LayoutAttributes.Template)
};
JSG.extend(JSG.graph.attr.LayoutAttributes, JSG.graph.attr.AttributeList);
JSG.graph.attr.LayoutAttributes.NAME = "layoutattributes";
JSG.graph.attr.LayoutAttributes.LAYOUT = "layout";
JSG.graph.attr.LayoutAttributes.LAYOUTABLE = "layoutable";
JSG.graph.attr.LayoutAttributes.LAYOUTSIZE = "layoutsize";
JSG.graph.attr.LayoutAttributes.AUTOLAYOUT = "autolayout";
JSG.graph.attr.LayoutAttributes.AUTOREZISE = "autoresize";
JSG.graph.attr.LayoutAttributes.AUTOREZISELEVEL = "autoresizelevel";
JSG.graph.attr.LayoutAttributes.prototype.newInstance = function (a) {
    return new JSG.graph.attr.LayoutAttributes(a)
};
JSG.graph.attr.LayoutAttributes.prototype.getClassString = function () {
    return "JSG.graph.attr.LayoutAttributes"
};
JSG.graph.attr.LayoutAttributes.prototype.initAndAddAttribute = function (a, b) {
    void 0 === this.getAttribute(a.getName()) && (this.addAttribute(a), a.setExpressionOrValue(b.getDefaultValue(a)))
};
JSG.graph.attr.LayoutAttributes.prototype.copy = function () {
    var a = this.newInstance(this._value.copy());
    this._constraints && (a._constraints = this._constraints.copy());
    return a
};
JSG.graph.attr.LayoutAttributes.prototype.getLayouter = function () {
    void 0 === this._layouter && (this._layouter = JSG.layoutFactory.createLayoutFromString(this.getLayout().getValue()));
    return this._layouter
};
JSG.graph.attr.LayoutAttributes.prototype.getConstraints = function () {
    void 0 === this._constraints && (this._constraints = JSG.layoutFactory.createConstraintsForLayout(this.getLayout().getValue()));
    return this._constraints
};
JSG.graph.attr.LayoutAttributes.prototype.getLayout = function () {
    return this.getAttribute(JSG.graph.attr.LayoutAttributes.LAYOUT)
};
JSG.graph.attr.LayoutAttributes.prototype.setLayout = function (a) {
    this.setAttribute(JSG.graph.attr.LayoutAttributes.LAYOUT, a)
};
JSG.graph.attr.LayoutAttributes.prototype.setAutoLayout = function (a) {
    this.setAttribute(JSG.graph.attr.LayoutAttributes.AUTOLAYOUT, a)
};
JSG.graph.attr.LayoutAttributes.prototype.getAutoLayout = function () {
    return this.getAttribute(JSG.graph.attr.LayoutAttributes.AUTOLAYOUT)
};
JSG.graph.attr.LayoutAttributes.prototype.setAutoResize = function (a) {
    this.setAttribute(JSG.graph.attr.LayoutAttributes.AUTOREZISE, a)
};
JSG.graph.attr.LayoutAttributes.prototype.getAutoResize = function () {
    return this.getAttribute(JSG.graph.attr.LayoutAttributes.AUTOREZISE)
};
JSG.graph.attr.LayoutAttributes.prototype.setAutoResizeLevel = function (a) {
    this.setAttribute(JSG.graph.attr.LayoutAttributes.AUTOREZISELEVEL, a)
};
JSG.graph.attr.LayoutAttributes.prototype.getAutoResizeLevel = function () {
    return this.getAttribute(JSG.graph.attr.LayoutAttributes.AUTOREZISELEVEL)
};
JSG.graph.attr.LayoutAttributes.prototype.setLayoutable = function (a) {
    this.setAttribute(JSG.graph.attr.LayoutAttributes.LAYOUTABLE, a)
};
JSG.graph.attr.LayoutAttributes.prototype.getLayoutable = function () {
    return this.getAttribute(JSG.graph.attr.LayoutAttributes.LAYOUTABLE)
};
JSG.graph.attr.LayoutAttributes.prototype.setLayoutSize = function (a) {
    this.setAttribute(JSG.graph.attr.LayoutAttributes.LAYOUTSIZE, a)
};
JSG.graph.attr.LayoutAttributes.prototype.getLayoutSize = function () {
    return this.getAttribute(JSG.graph.attr.LayoutAttributes.LAYOUTSIZE)
};
JSG.graph.attr.LayoutAttributes.prototype.readLegacyXML = function (a, b) {
    var c = new JSG.graph.model.attributes.LayoutAttributes;
    c.readXML(a, b);
    this.applyLegacyAttributes(c)
};
JSG.graph.attr.LayoutAttributes.prototype.applyLegacyAttributes = function (a) {
    var b = JSG.graph.attr.LayoutAttributes;
    this.setAttribute(b.LAYOUT, a.getLayout());
    this.setAttribute(b.LAYOUTABLE, a.getLayoutable());
    this.setAttribute(b.LAYOUTSIZE, a.getLayoutSize());
    this.setAttribute(b.AUTOLAYOUT, a.getAutoLayout());
    this.setAttribute(b.AUTOREZISE, a.getAutoResize());
    this.setAttribute(b.AUTOREZISELEVEL, a.getAutoResizeLevel());
    a._constraints && (this._constraints = a._constraints.copy())
};
JSG.graph.attr.LayoutAttributes.prototype.setAttribute = function (a, b, c) {
    a !== JSG.graph.attr.LayoutAttributes.LAYOUT || void 0 !== b.getValue && this.getLayout().getValue() !== b.getValue() || (this._constraints = this._layouter = void 0);
    JSG.graph.attr.LayoutAttributes._super.setAttribute.call(this, a, b, c)
};
JSG.graph.attr.LayoutAttributes.prototype._saveValue = function (a) {
    var b = this.getConstraints(), c = JSG.graph.attr.LayoutAttributes._super._saveValue.call(this, a);
    b && b.toXML(a);
    return c
};
JSG.graph.attr.LayoutAttributes.prototype._readValue = function (a) {
    JSG.graph.attr.LayoutAttributes._super._readValue.call(this, a);
    var b = this.getConstraints();
    b && (a = a.getElementsByTagName(b._layoutType), 0 < a.length && b.fromXML(a[0]))
};
JSG.graph.attr.LayoutAttributes.prototype.doSaveParentRef = function () {
    return this._parent && this._parent.getName() !== JSG.graph.attr.LayoutAttributes.Template_ID
};
JSG.graph.attr.LayoutAttributes.Template_ID = "JSG.graph.attr.LayoutAttributes.Template";
JSG.graph.attr.LayoutAttributes.Template = function () {
    function a(a, b, d) {
        d && a.getExpression().setConstraint(d);
        b = void 0 === b && d ? d.defValue : b;
        a.setExpressionOrValue(b);
        c.addAttribute(a)
    }

    var b = JSG.graph.attr.LayoutAttributes, c = new JSG.graph.attr.LayoutAttributes, d = JSG.graph.expr.RangeConstraint;
    a(new JSG.graph.attr.StringAttribute(b.LAYOUT), "None");
    a(new JSG.graph.attr.NumberAttribute(b.LAYOUTSIZE), 0);
    a(new JSG.graph.attr.BooleanAttribute(b.LAYOUTABLE), !0);
    a(new JSG.graph.attr.BooleanAttribute(b.AUTOLAYOUT),
        !1);
    a(new JSG.graph.attr.NumberAttribute(b.AUTOREZISE), void 0, d.fromPropertiesOf(JSG.graph.attr.consts.Direction, JSG.graph.attr.consts.Direction.NONE));
    a(new JSG.graph.attr.NumberAttribute(b.AUTOREZISELEVEL), 0);
    return c.toTemplate(JSG.graph.attr.LayoutAttributes.Template_ID)
}();
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.EdgeLayoutAttributes = function (a) {
    JSG.graph.attr.EdgeLayoutAttributes._super.constructor.call(this, a);
    this.setParent(JSG.graph.attr.EdgeLayoutAttributes.Template)
};
JSG.extend(JSG.graph.attr.EdgeLayoutAttributes, JSG.graph.attr.LayoutAttributes);
JSG.graph.attr.EdgeLayoutAttributes.TYPE = "type";
JSG.graph.attr.EdgeLayoutAttributes.LINEBEHAVIOR = "linebehavior";
JSG.graph.attr.EdgeLayoutAttributes.MIN_DIST_TO_PORT = "minportdist";
JSG.graph.attr.EdgeLayoutAttributes.prototype.newInstance = function (a) {
    return new JSG.graph.attr.EdgeLayoutAttributes(a)
};
JSG.graph.attr.EdgeLayoutAttributes.prototype.getClassString = function () {
    return "JSG.graph.attr.EdgeLayoutAttributes"
};
JSG.graph.attr.EdgeLayoutAttributes.prototype.getType = function () {
    return this.getAttribute(JSG.graph.attr.EdgeLayoutAttributes.TYPE)
};
JSG.graph.attr.EdgeLayoutAttributes.prototype.setType = function (a) {
    this.setAttribute(JSG.graph.attr.EdgeLayoutAttributes.TYPE, a)
};
JSG.graph.attr.EdgeLayoutAttributes.prototype.getLineBehavior = function () {
    return this.getAttribute(JSG.graph.attr.EdgeLayoutAttributes.LINEBEHAVIOR)
};
JSG.graph.attr.EdgeLayoutAttributes.prototype.setLineBehavior = function (a) {
    this.setAttribute(JSG.graph.attr.EdgeLayoutAttributes.LINEBEHAVIOR, a)
};
JSG.graph.attr.EdgeLayoutAttributes.prototype.getMinDistToPort = function () {
    return this.getAttribute(JSG.graph.attr.EdgeLayoutAttributes.MIN_DIST_TO_PORT)
};
JSG.graph.attr.EdgeLayoutAttributes.prototype.setMinDistToPort = function (a) {
    this.setAttribute(JSG.graph.attr.EdgeLayoutAttributes.MIN_DIST_TO_PORT, a)
};
JSG.graph.attr.EdgeLayoutAttributes.prototype.readLegacyXML = function (a, b) {
    var c = new JSG.graph.model.attributes.EdgeLayoutAttributes;
    c.readXML(a, b);
    this.applyLegacyAttributes(c)
};
JSG.graph.attr.EdgeLayoutAttributes.prototype.applyLegacyAttributes = function (a) {
    JSG.graph.attr.EdgeLayoutAttributes._super.applyLegacyAttributes.call(this, a);
    var b = JSG.graph.attr.EdgeLayoutAttributes;
    this.setAttribute(b.TYPE, a.getType());
    this.setAttribute(b.LINEBEHAVIOR, a.getLineBehavior())
};
JSG.graph.attr.EdgeLayoutAttributes.prototype.doSaveParentRef = function () {
    return this._parent && this._parent.getName() !== JSG.graph.attr.EdgeLayoutAttributes.Template_ID
};
JSG.graph.attr.EdgeLayoutAttributes.Template_ID = "JSG.graph.attr.EdgeLayoutAttributes.Template";
JSG.graph.attr.EdgeLayoutAttributes.Template = function () {
    function a(a, b, d) {
        d && a.getExpression().setConstraint(d);
        b = void 0 === b && d ? d.defValue : b;
        a.setExpressionOrValue(b);
        c.addAttribute(a)
    }

    var b = JSG.graph.attr.EdgeLayoutAttributes, c = new JSG.graph.attr.EdgeLayoutAttributes, d = JSG.graph.expr.RangeConstraint;
    c.setParent(JSG.graph.attr.LayoutAttributes.Template);
    a(new JSG.graph.attr.StringAttribute(b.TYPE), "Straight");
    a(new JSG.graph.attr.StringAttribute(b.LINEBEHAVIOR), void 0, d.fromPropertiesOf(JSG.graph.attr.consts.LineBehavior,
        JSG.graph.attr.consts.LineBehavior.MANUAL));
    a(new JSG.graph.attr.NumberAttribute(b.MIN_DIST_TO_PORT), 500);
    return c.toTemplate(JSG.graph.attr.EdgeLayoutAttributes.Template_ID)
}();
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.OrthoEdgeLayoutAttributes = function (a) {
    JSG.graph.attr.OrthoEdgeLayoutAttributes._super.constructor.call(this, a);
    this.setParent(JSG.graph.attr.OrthoEdgeLayoutAttributes.Template)
};
JSG.extend(JSG.graph.attr.OrthoEdgeLayoutAttributes, JSG.graph.attr.EdgeLayoutAttributes);
JSG.graph.attr.OrthoEdgeLayoutAttributes.prototype.newInstance = function (a) {
    return new JSG.graph.attr.OrthoEdgeLayoutAttributes(a)
};
JSG.graph.attr.OrthoEdgeLayoutAttributes.prototype.getClassString = function () {
    return "JSG.graph.attr.OrthoEdgeLayoutAttributes"
};
JSG.graph.attr.OrthoEdgeLayoutAttributes.prototype.readLegacyXML = function (a, b) {
    var c = new JSG.graph.model.attributes.OrthoEdgeLayoutAttributes;
    c.readXML(a, b);
    this.applyLegacyAttributes(c)
};
JSG.graph.attr.OrthoEdgeLayoutAttributes.prototype.doSaveParentRef = function () {
    return this._parent && this._parent.getName() !== JSG.graph.attr.OrthoEdgeLayoutAttributes.Template_ID
};
JSG.graph.attr.OrthoEdgeLayoutAttributes.Template_ID = "JSG.graph.attr.OrthoEdgeLayoutAttributes.Template";
JSG.graph.attr.OrthoEdgeLayoutAttributes.Template = function () {
    function a(a, b, d) {
        d && a.getExpression().setConstraint(d);
        b = void 0 === b && d ? d.defValue : b;
        a.setExpressionOrValue(b);
        c.addAttribute(a)
    }

    var b = JSG.graph.attr.EdgeLayoutAttributes, c = new JSG.graph.attr.OrthoEdgeLayoutAttributes, d = JSG.graph.expr.RangeConstraint;
    c.setParent(JSG.graph.attr.EdgeLayoutAttributes.Template);
    a(new JSG.graph.attr.StringAttribute(b.TYPE), "Orthogonal");
    a(new JSG.graph.attr.StringAttribute(b.LINEBEHAVIOR), void 0, d.fromPropertiesOf(JSG.graph.attr.consts.LineBehavior,
        JSG.graph.attr.consts.LineBehavior.AUTO));
    return c.toTemplate(JSG.graph.attr.OrthoEdgeLayoutAttributes.Template_ID)
}();
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.FormatAttributes = function (a) {
    JSG.graph.attr.FormatAttributes._super.constructor.call(this, JSG.graph.attr.FormatAttributes.NAME, a);
    this.setParent(JSG.graph.attr.FormatAttributes.Template)
};
JSG.extend(JSG.graph.attr.FormatAttributes, JSG.graph.attr.AttributeList);
JSG.graph.attr.FormatAttributes.NAME = "format";
JSG.graph.attr.FormatAttributes.BRIGHTNESS = "brightness";
JSG.graph.attr.FormatAttributes.FILLSTYLE = "fillstyle";
JSG.graph.attr.FormatAttributes.FILLCOLOR = "fillcolor";
JSG.graph.attr.FormatAttributes.GRADIENTCOLOR = "gradientcolor";
JSG.graph.attr.FormatAttributes.GRADIENTANGLE = "gradientangle";
JSG.graph.attr.FormatAttributes.GRADIENTTYPE = "gradienttype";
JSG.graph.attr.FormatAttributes.GRADIENTOFFSET_X = "gradientoffset_x";
JSG.graph.attr.FormatAttributes.GRADIENTOFFSET_Y = "gradientoffset_y";
JSG.graph.attr.FormatAttributes.LINECOLOR = "linecolor";
JSG.graph.attr.FormatAttributes.LINEWIDTH = "linewidth";
JSG.graph.attr.FormatAttributes.LINESTYLE = "linestyle";
JSG.graph.attr.FormatAttributes.LINEARROWSTART = "linearrowstart";
JSG.graph.attr.FormatAttributes.LINEARROWEND = "linearrowend";
JSG.graph.attr.FormatAttributes.LINECORNER = "linecorner";
JSG.graph.attr.FormatAttributes.PATTERN = "pattern";
JSG.graph.attr.FormatAttributes.PATTERNSTYLE = "patternstyle";
JSG.graph.attr.FormatAttributes.SHADOWCOLOR = "shadowcolor";
JSG.graph.attr.FormatAttributes.SHADOWOFFSET_X = "shadowoffset_x";
JSG.graph.attr.FormatAttributes.SHADOWOFFSET_Y = "shadowoffset_y";
JSG.graph.attr.FormatAttributes.SHADOWBLUR = "shadowblur";
JSG.graph.attr.FormatAttributes.SHADOWDIRECTION = "shadowdirection";
JSG.graph.attr.FormatAttributes.TRANSPARENCY = "transparency";
JSG.graph.attr.FormatAttributes.ArrowStyle = {
    NONE: 0,
    ARROWFILLED: 1,
    ARROWFILLEDSMALL: 2,
    ARROWHALFFILLED: 3,
    ARROWHALFFILLEDSMALL: 4,
    ARROWNNARROWFILLED: 5,
    ARROWNARROWFILLEDSMALL: 6,
    ARROWDOUBLEFILLED: 7,
    ARROWDOUBLEFILLEDSMALL: 8,
    ARROW: 9,
    ARROWSMALL: 10,
    ARROWDOUBLE: 11,
    ARROWDOUBLESMALL: 12,
    ARROWSINGLESIDE: 13,
    ARROWREVERSEFILLED: 14,
    ARROWREVERSEFILLEDSMALL: 15,
    ARROWREVERSE: 16,
    ARROWREVERSESMALL: 17,
    ARROWREVERSENARROW: 18,
    ARROWREVERSENARROWSMALL: 19,
    LINEARROWREVERSE: 20,
    CIRCLEARROWREVERSE: 21,
    CIRCLE: 22,
    CIRCLESMALL: 23,
    DIAMOND: 24,
    DIAMONDSMALL: 25,
    DIAMONDNARROW: 26,
    DIAMONDNARROWSMALL: 27,
    CIRCLEDOUBLELINE: 28,
    DOUBLELINE: 29,
    SQUARE: 30,
    SQUARESMALL: 31,
    DIAMONDLONG: 32,
    ARROWFILLEDLONG: 33,
    DIAGONALLINE: 34,
    CIRCLESMALLAROUND: 35
};
JSG.graph.attr.FormatAttributes.LineStyle = {
    HAIRLINE: -1,
    NONE: 0,
    SOLID: 1,
    DOT: 2,
    DASH: 3,
    DASHDOT: 4,
    DASHDOTDOT: 5
};
JSG.graph.attr.FormatAttributes.FillStyle = {NONE: 0, SOLID: 1, GRADIENT: 2, PATTERN: 3};
JSG.graph.attr.FormatAttributes.GradientStyle = {LINEAR: 0, RADIAL: 1};
JSG.graph.attr.FormatAttributes.PatternStyle = {STRETCH: 0, REPEAT: 1, CENTER: 2, STRETCHPROPORTIONAL: 3};
JSG.graph.attr.FormatAttributes.ShadowDirection = {LEFTTOP: 0, LEFTBOTTOM: 1, RIGHTTOP: 2, RIGHTBOTTOM: 3};
JSG.graph.attr.FormatAttributes.prototype.newInstance = function (a) {
    return new JSG.graph.attr.FormatAttributes(a)
};
JSG.graph.attr.FormatAttributes.prototype.getClassString = function () {
    return "JSG.graph.attr.FormatAttributes"
};
JSG.graph.attr.FormatAttributes.brighten = function (a, b) {
    a = a.replace(/^\s*#|\s*$/g, "");
    3 === a.length && (a = a.replace(/(.)/g, "$1$1"));
    var c = parseInt(a.substr(0, 2), 16), d = parseInt(a.substr(2, 2), 16), e = parseInt(a.substr(4, 2), 16);
    return "#" + (0 | 256 + c + (256 - c) * b / 100).toString(16).substr(1) + (0 | 256 + d + (256 - d) * b / 100).toString(16).substr(1) + (0 | 256 + e + (256 - e) * b / 100).toString(16).substr(1)
};
JSG.graph.attr.FormatAttributes.retainFromSelection = function (a) {
    function b(a, b) {
        return void 0 !== a && void 0 !== b && a.getExpression().isEqualTo(b.getExpression())
    }

    if (0 !== a.length) {
        var c, d, e = a[0].getModel().getFormat().toFlatList();
        c = 1;
        for (d = a.length; c < d; c++)e.retainAll(a[c].getModel().getFormat(), b);
        return e
    }
};
JSG.graph.attr.FormatAttributes.prototype.setFormatTo = function (a) {
    return this.applyMap(a.toMap())
};
JSG.graph.attr.FormatAttributes.prototype.hasFill = function () {
    var a = this.getAttribute(JSG.graph.attr.FormatAttributes.FILLSTYLE);
    return void 0 !== a && a.getValue() !== JSG.graph.attr.FormatAttributes.FillStyle.NONE
};
JSG.graph.attr.FormatAttributes.prototype.hasBorder = function () {
    var a = this.getAttribute(JSG.graph.attr.FormatAttributes.LINEWIDTH).getValue(), b = this.getAttribute(JSG.graph.attr.FormatAttributes.LINESTYLE).getValue();
    return (0 < a || a === JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE) && b !== JSG.graph.attr.FormatAttributes.LineStyle.NONE
};
JSG.graph.attr.FormatAttributes.prototype.applyFillToGraphics = function (a, b) {
    var c = JSG.graph.attr.FormatAttributes, d = this.getAttribute(c.TRANSPARENCY).getValue();
    100 !== d && a.setTransparency(d);
    var e = this.getAttribute(c.FILLSTYLE).getValue();
    a.setFillStyle(e);
    a.setLineCorner(this.getAttribute(c.LINECORNER).getValue());
    var d = this.getAttribute(c.FILLCOLOR).getValue(), f = this.getAttribute(c.BRIGHTNESS).getValue();
    0 !== f && (d = c.brighten(d, f));
    a.setFillColor(d);
    switch (e) {
        case c.FillStyle.GRADIENT:
            f = this.getAttribute(c.GRADIENTTYPE).getValue();
            e = this.getAttribute(c.GRADIENTCOLOR).getValue();
            f === c.GradientStyle.LINEAR ? (c = this.getAttribute(c.GRADIENTANGLE).getValue(), a.setGradientLinear(b, d, e, c)) : (f = this.getAttribute(c.GRADIENTOFFSET_X).getValue(), c = this.getAttribute(c.GRADIENTOFFSET_Y).getValue(), a.setGradientRadial(b, d, e, f, c));
            break;
        case c.FillStyle.PATTERN:
            d = this.getAttribute(c.PATTERN).getValue(), c = this.getAttribute(c.PATTERNSTYLE).getValue(), a.setPattern(b, d, c)
    }
};
JSG.graph.attr.FormatAttributes.prototype.applyLineToGraphics = function (a) {
    var b = JSG.graph.attr.FormatAttributes;
    a.setLineColor(this.getAttribute(b.LINECOLOR).getValue());
    a.setLineStyle(this.getAttribute(b.LINESTYLE).getValue());
    a.setLineWidth(this.getAttribute(b.LINEWIDTH).getValue());
    a.setLineArrowStart(this.getAttribute(b.LINEARROWSTART).getValue());
    a.setLineArrowEnd(this.getAttribute(b.LINEARROWEND).getValue());
    a.setLineCorner(this.getAttribute(b.LINECORNER).getValue())
};
JSG.graph.attr.FormatAttributes.prototype.removeLineFromGraphics = function (a) {
    var b = JSG.graph.attr.FormatAttributes, c = this._parent;
    c && (a.setLineStyle(c.getAttribute(b.LINESTYLE).getValue()), a.setLineArrowStart(c.getAttribute(b.LINEARROWSTART).getValue()), a.setLineArrowEnd(c.getAttribute(b.LINEARROWEND).getValue()), a.setLineCorner(c.getAttribute(b.LINECORNER).getValue()))
};
JSG.graph.attr.FormatAttributes.prototype.applyShadowToGraphics = function (a, b) {
    var c = JSG.graph.attr.FormatAttributes, d = this.getAttribute(c.SHADOWOFFSET_X).getValue(), e = this.getAttribute(c.SHADOWOFFSET_Y).getValue();
    if (0 !== d || 0 !== e) {
        var f = this.getAttribute(c.SHADOWBLUR).getValue(), g = this.getAttribute(c.SHADOWCOLOR).getValue();
        switch (this.getAttribute(c.SHADOWDIRECTION).getValue()) {
            case c.ShadowDirection.LEFTTOP:
                d = -d;
                e = -e;
                break;
            case c.ShadowDirection.RIGHTTOP:
                e = -e;
                break;
            case c.ShadowDirection.LEFTBOTTOM:
                d = -d
        }
        a.setShadow(g, d, e, f, b)
    }
};
JSG.graph.attr.FormatAttributes.prototype.removeShadowFromGraphics = function (a) {
    a.resetShadow();
    a.setLineCorner(0);
    100 !== this.getAttribute(JSG.graph.attr.FormatAttributes.TRANSPARENCY).getValue() && a.setTransparency(100)
};
JSG.graph.attr.FormatAttributes.prototype.applyLegacyFormat = function (a) {
    var b = JSG.graph.attr.FormatAttributes;
    this.setAttribute(b.BRIGHTNESS, a.getBrightness());
    this.setAttribute(b.FILLSTYLE, a.getFillStyle());
    this.setAttribute(b.FILLCOLOR, a.getFillColor());
    this.setAttribute(b.GRADIENTCOLOR, a.getGradientColor());
    this.setAttribute(b.GRADIENTANGLE, a.getGradientAngle());
    this.setAttribute(b.GRADIENTTYPE, a.getGradientType());
    this.setAttribute(b.GRADIENTOFFSET_X, a.getGradientOffsetX());
    this.setAttribute(b.GRADIENTOFFSET_Y,
        a.getGradientOffsetY());
    this.setAttribute(b.LINECOLOR, a.getLineColor());
    this.setAttribute(b.LINEWIDTH, a.getLineWidth());
    this.setAttribute(b.LINESTYLE, a.getLineStyle());
    this.setAttribute(b.LINEARROWSTART, a.getLineArrowStart());
    this.setAttribute(b.LINEARROWEND, a.getLineArrowEnd());
    this.setAttribute(b.LINECORNER, a.getLineCorner());
    this.setAttribute(b.PATTERN, a.getPattern());
    this.setAttribute(b.PATTERNSTYLE, a.getPatternStyle());
    this.setAttribute(b.SHADOWCOLOR, a.getShadowColor());
    this.setAttribute(b.SHADOWOFFSET_X,
        a.getShadowOffsetX());
    this.setAttribute(b.SHADOWOFFSET_Y, a.getShadowOffsetY());
    this.setAttribute(b.SHADOWBLUR, a.getShadowBlur());
    this.setAttribute(b.SHADOWDIRECTION, a.getShadowDirection());
    this.setAttribute(b.TRANSPARENCY, a.getTransparency())
};
JSG.graph.attr.FormatAttributes.prototype.getFillColor = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.FILLCOLOR)
};
JSG.graph.attr.FormatAttributes.prototype.setFillColor = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.FILLCOLOR, a)
};
JSG.graph.attr.FormatAttributes.prototype.setFillColorRGB = function (a, b, c) {
    this.setFillColor(JSG.graph.Utils.colorFromRGB(a, b, c))
};
JSG.graph.attr.FormatAttributes.prototype.getFillStyle = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.FILLSTYLE)
};
JSG.graph.attr.FormatAttributes.prototype.setFillStyle = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.FILLSTYLE, a)
};
JSG.graph.attr.FormatAttributes.prototype.getBrightness = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.BRIGHTNESS)
};
JSG.graph.attr.FormatAttributes.prototype.setBrightness = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.BRIGHTNESS, a)
};
JSG.graph.attr.FormatAttributes.prototype.getTransparency = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.TRANSPARENCY)
};
JSG.graph.attr.FormatAttributes.prototype.setTransparency = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.TRANSPARENCY, a)
};
JSG.graph.attr.FormatAttributes.prototype.getGradientColor = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.GRADIENTCOLOR)
};
JSG.graph.attr.FormatAttributes.prototype.setGradientColor = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.GRADIENTCOLOR, a)
};
JSG.graph.attr.FormatAttributes.prototype.setGradientColorRGB = function (a, b, c) {
    this.setGradientColor(JSG.graph.Utils.colorFromRGB(a, b, c))
};
JSG.graph.attr.FormatAttributes.prototype.getGradientAngle = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.GRADIENTANGLE)
};
JSG.graph.attr.FormatAttributes.prototype.setGradientAngle = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.GRADIENTANGLE, a)
};
JSG.graph.attr.FormatAttributes.prototype.getGradientOffsetX = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.GRADIENTOFFSET_X)
};
JSG.graph.attr.FormatAttributes.prototype.setGradientOffsetX = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.GRADIENTOFFSET_X, a)
};
JSG.graph.attr.FormatAttributes.prototype.getGradientOffsetY = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.GRADIENTOFFSET_Y)
};
JSG.graph.attr.FormatAttributes.prototype.setGradientOffsetY = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.GRADIENTOFFSET_Y, a)
};
JSG.graph.attr.FormatAttributes.prototype.getGradientType = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.GRADIENTTYPE)
};
JSG.graph.attr.FormatAttributes.prototype.setGradientType = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.GRADIENTTYPE, a)
};
JSG.graph.attr.FormatAttributes.prototype.getPattern = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.PATTERN)
};
JSG.graph.attr.FormatAttributes.prototype.setPattern = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.PATTERN, a)
};
JSG.graph.attr.FormatAttributes.prototype.getPatternStyle = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.PATTERNSTYLE)
};
JSG.graph.attr.FormatAttributes.prototype.setPatternStyle = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.PATTERNSTYLE, a)
};
JSG.graph.attr.FormatAttributes.prototype.getLineColor = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.LINECOLOR)
};
JSG.graph.attr.FormatAttributes.prototype.setLineColor = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.LINECOLOR, a)
};
JSG.graph.attr.FormatAttributes.prototype.setLineColorRGB = function (a, b, c) {
    this.setLineColor(JSG.graph.Utils.colorFromRGB(a, b, c))
};
JSG.graph.attr.FormatAttributes.prototype.getLineCorner = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.LINECORNER)
};
JSG.graph.attr.FormatAttributes.prototype.setLineCorner = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.LINECORNER, a)
};
JSG.graph.attr.FormatAttributes.prototype.getLineArrowStart = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.LINEARROWSTART)
};
JSG.graph.attr.FormatAttributes.prototype.setLineArrowStart = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.LINEARROWSTART, a)
};
JSG.graph.attr.FormatAttributes.prototype.getLineArrowEnd = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.LINEARROWEND)
};
JSG.graph.attr.FormatAttributes.prototype.setLineArrowEnd = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.LINEARROWEND, a)
};
JSG.graph.attr.FormatAttributes.prototype.getShadowColor = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.SHADOWCOLOR)
};
JSG.graph.attr.FormatAttributes.prototype.setShadowColor = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.SHADOWCOLOR, a)
};
JSG.graph.attr.FormatAttributes.prototype.setShadowColorRGB = function (a, b, c) {
    this.setShadowColor(JSG.graph.Utils.colorFromRGB(a, b, c))
};
JSG.graph.attr.FormatAttributes.prototype.getShadowOffsetX = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.SHADOWOFFSET_X)
};
JSG.graph.attr.FormatAttributes.prototype.setShadowOffsetX = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.SHADOWOFFSET_X, a)
};
JSG.graph.attr.FormatAttributes.prototype.getShadowOffsetY = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.SHADOWOFFSET_Y)
};
JSG.graph.attr.FormatAttributes.prototype.setShadowOffsetY = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.SHADOWOFFSET_Y, a)
};
JSG.graph.attr.FormatAttributes.prototype.getShadowDirection = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.SHADOWDIRECTION)
};
JSG.graph.attr.FormatAttributes.prototype.setShadowDirection = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.SHADOWDIRECTION, a)
};
JSG.graph.attr.FormatAttributes.prototype.getShadowBlur = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.SHADOWBLUR)
};
JSG.graph.attr.FormatAttributes.prototype.setShadowBlur = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.SHADOWBLUR, a)
};
JSG.graph.attr.FormatAttributes.prototype.getLineWidth = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.LINEWIDTH)
};
JSG.graph.attr.FormatAttributes.prototype.setLineWidth = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.LINEWIDTH, a)
};
JSG.graph.attr.FormatAttributes.prototype.getLineStyle = function () {
    return this.getAttribute(JSG.graph.attr.FormatAttributes.LINESTYLE)
};
JSG.graph.attr.FormatAttributes.prototype.setLineStyle = function (a) {
    this.setAttribute(JSG.graph.attr.FormatAttributes.LINESTYLE, a)
};
JSG.graph.attr.FormatAttributes.prototype.doSaveParentRef = function () {
    return this._parent && this._parent.getName() !== JSG.graph.attr.FormatAttributes.Template_ID
};
JSG.graph.attr.FormatAttributes.Template_ID = "JSG.graph.attr.FormatAttributes.Template";
JSG.graph.attr.FormatAttributes.Template = function () {
    function a(a, b, d) {
        d && a.getExpression().setConstraint(d);
        b = void 0 === b && d ? d.defValue : b;
        a.setExpressionOrValue(b);
        c.addAttribute(a)
    }

    var b = JSG.graph.attr.FormatAttributes, c = new JSG.graph.attr.FormatAttributes, d = JSG.graph.expr.RangeConstraint;
    a(new JSG.graph.attr.NumberAttribute(b.BRIGHTNESS), 0);
    a(new JSG.graph.attr.StringAttribute(b.FILLCOLOR), "#FFFFFF");
    a(new JSG.graph.attr.NumberAttribute(b.FILLSTYLE), void 0, d.fromPropertiesOf(b.FillStyle, b.FillStyle.SOLID));
    a(new JSG.graph.attr.StringAttribute(b.GRADIENTCOLOR), "#CCCCCC");
    a(new JSG.graph.attr.NumberAttribute(b.GRADIENTANGLE), 0);
    a(new JSG.graph.attr.NumberAttribute(b.GRADIENTTYPE), void 0, d.fromPropertiesOf(b.GradientStyle, b.GradientStyle.LINEAR));
    a(new JSG.graph.attr.NumberAttribute(b.GRADIENTOFFSET_X), 0);
    a(new JSG.graph.attr.NumberAttribute(b.GRADIENTOFFSET_Y), 0);
    a(new JSG.graph.attr.StringAttribute(b.LINECOLOR), "#000000");
    a(new JSG.graph.attr.NumberAttribute(b.LINEWIDTH), b.LineStyle.HAIRLINE);
    a(new JSG.graph.attr.NumberAttribute(b.LINESTYLE),
        void 0, d.fromPropertiesOf(b.LineStyle, b.LineStyle.SOLID));
    a(new JSG.graph.attr.NumberAttribute(b.LINEARROWSTART), void 0, d.fromPropertiesOf(b.ArrowStyle, b.ArrowStyle.NONE));
    a(new JSG.graph.attr.NumberAttribute(b.LINEARROWEND), void 0, d.fromPropertiesOf(b.ArrowStyle, b.ArrowStyle.NONE));
    a(new JSG.graph.attr.NumberAttribute(b.LINECORNER), 0);
    a(new JSG.graph.attr.StringAttribute(b.PATTERN), "");
    a(new JSG.graph.attr.NumberAttribute(b.PATTERNSTYLE), void 0, d.fromPropertiesOf(b.PatternStyle, b.PatternStyle.STRETCH));
    a(new JSG.graph.attr.StringAttribute(b.SHADOWCOLOR), "#DDDDDD");
    a(new JSG.graph.attr.StringAttribute(b.SHADOWCOLOR), "#DDDDDD");
    a(new JSG.graph.attr.NumberAttribute(b.SHADOWOFFSET_X), 0);
    a(new JSG.graph.attr.NumberAttribute(b.SHADOWOFFSET_Y), 0);
    a(new JSG.graph.attr.NumberAttribute(b.SHADOWBLUR), 0);
    a(new JSG.graph.attr.NumberAttribute(b.SHADOWDIRECTION), void 0, d.fromPropertiesOf(b.ShadowDirection, b.ShadowDirection.RIGHTBOTTOM));
    a(new JSG.graph.attr.NumberAttribute(b.TRANSPARENCY), void 0, new JSG.graph.expr.NumberRangeConstraint(0,
        100, 100));
    return c.toTemplate(JSG.graph.attr.FormatAttributes.Template_ID)
}();
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.TextFormatAttributes = function (a) {
    JSG.graph.attr.TextFormatAttributes._super.constructor.call(this, JSG.graph.attr.TextFormatAttributes.NAME, a);
    this.setParent(JSG.graph.attr.TextFormatAttributes.Template)
};
JSG.extend(JSG.graph.attr.TextFormatAttributes, JSG.graph.attr.AttributeList);
JSG.graph.attr.TextFormatAttributes.NAME = "textformat";
JSG.graph.attr.TextFormatAttributes.VERTICALALIGN = "valign";
JSG.graph.attr.TextFormatAttributes.HORIZONTALALIGN = "halign";
JSG.graph.attr.TextFormatAttributes.FONTSIZE = "fontsize";
JSG.graph.attr.TextFormatAttributes.FONTNAME = "fontname";
JSG.graph.attr.TextFormatAttributes.FONTCOLOR = "fontcolor";
JSG.graph.attr.TextFormatAttributes.FONTSTYLE = "fontstyle";
JSG.graph.attr.TextFormatAttributes.VERTICALPOSITION = "vposition";
JSG.graph.attr.TextFormatAttributes.HORIZONTALPOSITION = "hpostion";
JSG.graph.attr.TextFormatAttributes.RICHTEXT = "richtext";
JSG.graph.attr.TextFormatAttributes.TextAlignment = {LEFT: 0, CENTER: 1, RIGHT: 2};
JSG.graph.attr.TextFormatAttributes.VerticalTextPosition = {
    CUSTOM: 0,
    ONTOP: 1,
    BEFORESTART: 1,
    TOP: 2,
    START: 2,
    CENTER: 3,
    BOTTOM: 4,
    END: 4,
    BELOWBOTTOM: 5,
    BEHINDEND: 5
};
JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition = {
    CUSTOM: 0,
    TOLEFT: 1,
    LEFT: 2,
    CENTER: 3,
    RIGHT: 4,
    TORIGHT: 5
};
JSG.graph.attr.TextFormatAttributes.FontStyle = {NORMAL: 0, BOLD: 1, ITALIC: 2, UNDERLINE: 4};
JSG.graph.attr.TextFormatAttributes.prototype.newInstance = function (a) {
    return new JSG.graph.attr.TextFormatAttributes(a)
};
JSG.graph.attr.TextFormatAttributes.prototype.getClassString = function () {
    return "JSG.graph.attr.TextFormatAttributes"
};
JSG.graph.attr.TextFormatAttributes.retainFromSelection = function (a) {
    function b(a, b) {
        return a && b && a.getExpression().isEqualTo(b.getExpression())
    }

    if (0 !== a.length) {
        var c, d, e = a[0].getModel().getTextFormat().toFlatList();
        c = 1;
        for (d = a.length; c < d; c++)e.retainAll(a[c].getModel().getTextFormat(), b);
        return e
    }
};
JSG.graph.attr.TextFormatAttributes.prototype.setFormatTo = function (a, b) {
    return this.applyMap(a.toMap(), b)
};
JSG.graph.attr.TextFormatAttributes.prototype.applyToGraphics = function (a) {
    var b = JSG.graph.attr.TextFormatAttributes;
    a.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID);
    a.setFillColor(this.getAttribute(b.FONTCOLOR).getValue());
    a.setLineColor(this.getAttribute(b.FONTCOLOR).getValue());
    a.setTextBaseline("alphabetic");
    a.setTextAlign(this.getAttribute(b.HORIZONTALALIGN).getValue());
    a.setFontName(this.getAttribute(b.FONTNAME).getValue());
    a.setFontSize(this.getAttribute(b.FONTSIZE).getValue());
    a.setFontStyle(this.getAttribute(b.FONTSTYLE).getValue())
};
JSG.graph.attr.TextFormatAttributes.prototype.removeFromGraphics = function (a) {
    a.setFontStyle(0)
};
JSG.graph.attr.TextFormatAttributes.prototype.applyLegacyFormat = function (a) {
    var b = JSG.graph.attr.TextFormatAttributes;
    this.setAttribute(b.FONTSIZE, a.getFontSize());
    this.setAttribute(b.FONTNAME, a.getFontName());
    this.setAttribute(b.FONTCOLOR, a.getFontColor());
    this.setAttribute(b.FONTSTYLE, a.getFontStyle());
    this.setAttribute(b.VERTICALPOSITION, a.getVerticalPosition());
    this.setAttribute(b.HORIZONTALPOSITION, a.getHorizontalPosition());
    this.setAttribute(b.HORIZONTALALIGN, a.getHorizontalAlignment())
};
JSG.graph.attr.TextFormatAttributes.prototype.getHorizontalAlignment = function () {
    return this.getAttribute(JSG.graph.attr.TextFormatAttributes.HORIZONTALALIGN)
};
JSG.graph.attr.TextFormatAttributes.prototype.setHorizontalAlignment = function (a) {
    this.setAttribute(JSG.graph.attr.TextFormatAttributes.HORIZONTALALIGN, a)
};
JSG.graph.attr.TextFormatAttributes.prototype.getVerticalPosition = function () {
    return this.getAttribute(JSG.graph.attr.TextFormatAttributes.VERTICALPOSITION)
};
JSG.graph.attr.TextFormatAttributes.prototype.setVerticalPosition = function (a) {
    this.setAttribute(JSG.graph.attr.TextFormatAttributes.VERTICALPOSITION, a)
};
JSG.graph.attr.TextFormatAttributes.prototype.getHorizontalPosition = function () {
    return this.getAttribute(JSG.graph.attr.TextFormatAttributes.HORIZONTALPOSITION)
};
JSG.graph.attr.TextFormatAttributes.prototype.setHorizontalPosition = function (a) {
    this.setAttribute(JSG.graph.attr.TextFormatAttributes.HORIZONTALPOSITION, a)
};
JSG.graph.attr.TextFormatAttributes.prototype.getFontSize = function () {
    return this.getAttribute(JSG.graph.attr.TextFormatAttributes.FONTSIZE)
};
JSG.graph.attr.TextFormatAttributes.prototype.setFontSize = function (a) {
    this.setAttribute(JSG.graph.attr.TextFormatAttributes.FONTSIZE, a)
};
JSG.graph.attr.TextFormatAttributes.prototype.getFontName = function () {
    return this.getAttribute(JSG.graph.attr.TextFormatAttributes.FONTNAME)
};
JSG.graph.attr.TextFormatAttributes.prototype.setFontName = function (a) {
    this.setAttribute(JSG.graph.attr.TextFormatAttributes.FONTNAME, a)
};
JSG.graph.attr.TextFormatAttributes.prototype.getFontColor = function () {
    return this.getAttribute(JSG.graph.attr.TextFormatAttributes.FONTCOLOR)
};
JSG.graph.attr.TextFormatAttributes.prototype.setFontColor = function (a) {
    this.setAttribute(JSG.graph.attr.TextFormatAttributes.FONTCOLOR, a)
};
JSG.graph.attr.TextFormatAttributes.prototype.getFontStyle = function () {
    return this.getAttribute(JSG.graph.attr.TextFormatAttributes.FONTSTYLE)
};
JSG.graph.attr.TextFormatAttributes.prototype.setFontStyle = function (a) {
    this.setAttribute(JSG.graph.attr.TextFormatAttributes.FONTSTYLE, a)
};
JSG.graph.attr.TextFormatAttributes.prototype.getRichText = function () {
    return this.getAttribute(JSG.graph.attr.TextFormatAttributes.RICHTEXT)
};
JSG.graph.attr.TextFormatAttributes.prototype.setRichText = function (a) {
    this.setAttribute(JSG.graph.attr.TextFormatAttributes.RICHTEXT, a)
};
JSG.graph.attr.TextFormatAttributes.prototype.doSaveParentRef = function () {
    return this._parent && this._parent.getName() !== JSG.graph.attr.TextFormatAttributes.Template_ID
};
JSG.graph.attr.TextFormatAttributes.Template_ID = "JSG.graph.attr.TextFormatAttributes.Template";
JSG.graph.attr.TextFormatAttributes.Template = function () {
    function a(a, b, d) {
        d && a.getExpression().setConstraint(d);
        b = void 0 === b && d ? d.defValue : b;
        a.setExpressionOrValue(b);
        c.addAttribute(a)
    }

    var b = JSG.graph.attr.TextFormatAttributes, c = new JSG.graph.attr.TextFormatAttributes, d = JSG.graph.expr.RangeConstraint;
    a(new JSG.graph.attr.NumberAttribute(b.FONTSIZE), 8);
    a(new JSG.graph.attr.StringAttribute(b.FONTNAME), "Arial");
    a(new JSG.graph.attr.StringAttribute(b.FONTCOLOR), "#000000");
    a(new JSG.graph.attr.NumberAttribute(b.FONTSTYLE),
        b.FontStyle.NORMAL);
    a(new JSG.graph.attr.NumberAttribute(b.VERTICALPOSITION), void 0, d.fromPropertiesOf(b.VerticalTextPosition, b.VerticalTextPosition.CENTER));
    a(new JSG.graph.attr.NumberAttribute(b.HORIZONTALPOSITION), void 0, d.fromPropertiesOf(b.HorizontalTextPosition, b.HorizontalTextPosition.CENTER));
    a(new JSG.graph.attr.NumberAttribute(b.HORIZONTALALIGN), void 0, d.fromPropertiesOf(b.TextAlignment, b.TextAlignment.CENTER));
    a(new JSG.graph.attr.BooleanAttribute(b.RICHTEXT), !0);
    return c.toTemplate(JSG.graph.attr.TextFormatAttributes.Template_ID)
}();
JSG.namespace("JSG.graph.attr");
JSG.graph.attr.TemplateStore = function (a) {
    JSG.graph.attr.TemplateStore._super.constructor.call(this, JSG.graph.attr.TemplateStore.NAME, a);
    this.addDefaultTemplates()
};
JSG.extend(JSG.graph.attr.TemplateStore, JSG.graph.attr.AttributeList);
JSG.graph.attr.TemplateStore.NAME = "templates";
JSG.graph.attr.TemplateStore.prototype.addDefaultTemplates = function () {
    this.addTemplate(JSG.graph.attr.EdgeAttributes.Template);
    this.addTemplate(JSG.graph.attr.EdgeLayoutAttributes.Template);
    this.addTemplate(JSG.graph.attr.FormatAttributes.Template);
    this.addTemplate(JSG.graph.attr.ItemAttributes.Template);
    this.addTemplate(JSG.graph.attr.LayoutAttributes.Template);
    this.addTemplate(JSG.graph.attr.OrthoEdgeLayoutAttributes.Template);
    this.addTemplate(JSG.graph.attr.TextFormatAttributes.Template);
    this.addTemplate(JSG.graph.attr.TextNodeAttributes.Template)
};
JSG.graph.attr.TemplateStore.prototype.addTemplate = function (a) {
    var b = !!this.getTemplate(a.getName());
    b || this.addAttribute(a);
    return !b
};
JSG.graph.attr.TemplateStore.prototype.addAttribute = function (a) {
    a.isTemplate || (a = a.toTemplate());
    JSG.graph.attr.TemplateStore._super.addAttribute.call(this, a)
};
JSG.graph.attr.TemplateStore.prototype.getTemplate = function (a) {
    return this.getAttribute(a)
};
JSG.graph.attr.TemplateStore.prototype.hasTemplate = function (a) {
    a = JSG.Strings.isString(a) ? a : a.getName();
    return !!this.getTemplate(a)
};
JSG.graph.attr.TemplateStore.prototype.updateTemplate = function (a, b) {
    function c(a) {
        d = !0;
        e = a.isConst ? a : JSG.graph.attr.ConstAttribute.fromAttribute(a);
        JSG.graph.attr.AttributeUtils.addAttributeToList(e, f)
    }

    var d = !1, e, f;
    (f = JSG.Strings.isString(a) ? this.getTemplate(a) : void 0) && (Array.isArray(b) ? b.forEach(c) : b.iterate(c));
    return d
};
JSG.graph.attr.TemplateStore.prototype.removeTemplate = function (a) {
    JSG.Strings.isString(a) && (a = this.getTemplate(a));
    a && this.removeAttribute(a)
};
JSG.graph.attr.TemplateStore.prototype.readXML = function (a) {
    var b;
    JSG.Strings.isString(a) && (b = new DOMParser, a = b.parseFromString(a, "text/xml"));
    a = a.getElementsByTagName(JSG.graph.attr.TemplateStore.NAME)[0];
    JSG.graph.attr.TemplateStore._super.readXML.call(this, a);
    this.evaluate()
};
JSG.graph.attr.TemplateStore.prototype.saveXML = function () {
    var a = new JSG.commons.XMLWriter("UTF-8", "1.0");
    a.writeStartDocument();
    this._saveXML(JSG.graph.attr.TemplateStore.NAME, a);
    a.writeEndDocument();
    return a.flush()
};
JSG.graph.attr.TemplateStore.prototype._saveXML = function (a, b) {
    b.writeStartElement(a);
    this._saveValue(b);
    return b.writeEndElement()
};
JSG.namespace("JSG.graph.model.attributes");
JSG.graph.model.attributes.Format = function () {
    this._fillColor = new JSG.graph.expr.StringExpression("#FFFFFF");
    this._fillStyle = new JSG.graph.expr.NumberExpression(JSG.graph.attr.FormatAttributes.FillStyle.SOLID);
    this._transparency = new JSG.graph.expr.NumberExpression(100);
    this._brightness = new JSG.graph.expr.NumberExpression(0);
    this._gradientColor = new JSG.graph.expr.StringExpression("#CCCCCC");
    this._gradientAngle = new JSG.graph.expr.NumberExpression(0);
    this._gradientType = new JSG.graph.expr.NumberExpression(JSG.graph.attr.FormatAttributes.GradientStyle.LINEAR);
    this._gradientOffsetX = new JSG.graph.expr.NumberExpression(0);
    this._gradientOffsetY = new JSG.graph.expr.NumberExpression(0);
    this._pattern = new JSG.graph.expr.StringExpression("");
    this._patternStyle = new JSG.graph.expr.NumberExpression(JSG.graph.attr.FormatAttributes.PatternStyle.STRETCH);
    this._lineColor = new JSG.graph.expr.StringExpression("#000000");
    this._lineWidth = new JSG.graph.expr.NumberExpression(JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE);
    this._lineStyle = new JSG.graph.expr.NumberExpression(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    this._lineArrowStart = new JSG.graph.expr.NumberExpression(JSG.graph.attr.FormatAttributes.ArrowStyle.NONE);
    this._lineArrowEnd = new JSG.graph.expr.NumberExpression(JSG.graph.attr.FormatAttributes.ArrowStyle.NONE);
    this._lineCorner = new JSG.graph.expr.NumberExpression(0);
    this._shadowColor = new JSG.graph.expr.StringExpression("#DDDDDD");
    this._shadowOffsetX = new JSG.graph.expr.NumberExpression(0);
    this._shadowOffsetY = new JSG.graph.expr.NumberExpression(0);
    this._shadowBlur = new JSG.graph.expr.NumberExpression(0);
    this._shadowDirection = new JSG.graph.expr.NumberExpression(JSG.graph.attr.FormatAttributes.ShadowDirection.RIGHTBOTTOM)
};
JSG.graph.model.attributes.Format.prototype.getFillColor = function () {
    return this._fillColor
};
JSG.graph.model.attributes.Format.prototype.getFillStyle = function () {
    return this._fillStyle
};
JSG.graph.model.attributes.Format.prototype.getBrightness = function () {
    return this._brightness
};
JSG.graph.model.attributes.Format.prototype.getTransparency = function () {
    return this._transparency
};
JSG.graph.model.attributes.Format.prototype.getGradientColor = function () {
    return this._gradientColor
};
JSG.graph.model.attributes.Format.prototype.getGradientAngle = function () {
    return this._gradientAngle
};
JSG.graph.model.attributes.Format.prototype.getGradientOffsetX = function () {
    return this._gradientOffsetX
};
JSG.graph.model.attributes.Format.prototype.getGradientOffsetY = function () {
    return this._gradientOffsetY
};
JSG.graph.model.attributes.Format.prototype.getGradientType = function () {
    return this._gradientType
};
JSG.graph.model.attributes.Format.prototype.getPattern = function () {
    return this._pattern
};
JSG.graph.model.attributes.Format.prototype.getPatternStyle = function () {
    return this._patternStyle
};
JSG.graph.model.attributes.Format.prototype.getLineColor = function () {
    return this._lineColor
};
JSG.graph.model.attributes.Format.prototype.getLineCorner = function () {
    return this._lineCorner
};
JSG.graph.model.attributes.Format.prototype.getLineArrowStart = function () {
    return this._lineArrowStart
};
JSG.graph.model.attributes.Format.prototype.getLineArrowEnd = function () {
    return this._lineArrowEnd
};
JSG.graph.model.attributes.Format.prototype.getShadowColor = function () {
    return this._shadowColor
};
JSG.graph.model.attributes.Format.prototype.getShadowOffsetX = function () {
    return this._shadowOffsetX
};
JSG.graph.model.attributes.Format.prototype.getShadowOffsetY = function () {
    return this._shadowOffsetY
};
JSG.graph.model.attributes.Format.prototype.getShadowDirection = function () {
    return this._shadowDirection
};
JSG.graph.model.attributes.Format.prototype.getShadowBlur = function () {
    return this._shadowBlur
};
JSG.graph.model.attributes.Format.prototype.getLineWidth = function () {
    return this._lineWidth
};
JSG.graph.model.attributes.Format.prototype.getLineStyle = function () {
    return this._lineStyle
};
JSG.graph.model.attributes.Format.prototype.readXML = function (a, b) {
    if (a) {
        var c = JSG.commons.XML.findElementByTagName(a, "line"), d, e, f;
        if (c)for (d = 0, e = c.childNodes.length; d < e; d++)switch (f = c.childNodes.item(d), f.nodeName) {
            case "width":
                this._lineWidth.readXML(f);
                1 === this._lineWidth.getValue() && (this._lineWidth._value = JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE);
                break;
            case "color":
                this._lineColor.readXML(f);
                break;
            case "arrowstart":
                this._lineArrowStart.readXML(f);
                break;
            case "arrowend":
                this._lineArrowEnd.readXML(f);
                break;
            case "style":
                this._lineStyle.readXML(f);
                break;
            case "corner":
                this._lineCorner.readXML(f)
        }
        if (c = JSG.commons.XML.findElementByTagName(a, "fill"))for (d = 0, e = c.childNodes.length; d < e; d++)switch (f = c.childNodes.item(d), f.nodeName) {
            case "color":
                this._fillColor.readXML(f);
                break;
            case "backcolor":
                this._gradientColor.readXML(f);
                break;
            case "brightness":
                this._brightness.readXML(f);
                break;
            case "transparency":
                this._transparency.readXML(f);
                break;
            case "pattern":
                this._pattern.readXML(f);
                break;
            case "patternstyle":
                this._patternStyle.readXML(f);
                break;
            case "gradienttype":
                this._gradientType.readXML(f);
                break;
            case "gradientangle":
                this._gradientAngle.readXML(f);
                break;
            case "gradientoffsetx":
                this._gradientOffsetX.readXML(f);
                break;
            case "gradientoffsety":
                this._gradientOffsetY.readXML(f);
                break;
            case "style":
                this._fillStyle.readXML(f)
        }
        if (c = JSG.commons.XML.findElementByTagName(a, "shadow"))for (d = 0, e = c.childNodes.length; d < e; d++)switch (f = c.childNodes.item(d), f.nodeName) {
            case "color":
                this._shadowColor.readXML(f);
                break;
            case "offsetx":
                this._shadowOffsetX.readXML(f);
                break;
            case "offsety":
                this._shadowOffsetY.readXML(f);
                break;
            case "blur":
                this._shadowBlur.readXML(f);
                break;
            case "direction":
                this._shadowDirection.readXML(f)
        }
    }
};
JSG.namespace("JSG.graph.model.attributes");
JSG.graph.model.attributes.TextFormat = function () {
    this._horizontalAlignment = new JSG.graph.expr.NumberExpression(JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER);
    this._fontSize = new JSG.graph.expr.NumberExpression(8);
    this._fontName = new JSG.graph.expr.StringExpression("Arial");
    this._fontColor = new JSG.graph.expr.StringExpression("#000000");
    this._fontStyle = new JSG.graph.expr.NumberExpression(JSG.graph.attr.TextFormatAttributes.FontStyle.NORMAL);
    this._rotation = new JSG.graph.expr.NumberExpression(0);
    this._verticalPosition = new JSG.graph.expr.NumberExpression(JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.CENTER);
    this._horizontalPosition = new JSG.graph.expr.NumberExpression(JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.CENTER)
};
JSG.graph.model.attributes.TextFormat.prototype.getHorizontalAlignment = function () {
    return this._horizontalAlignment
};
JSG.graph.model.attributes.TextFormat.prototype.getVerticalPosition = function () {
    return this._verticalPosition
};
JSG.graph.model.attributes.TextFormat.prototype.getHorizontalPosition = function () {
    return this._horizontalPosition
};
JSG.graph.model.attributes.TextFormat.prototype.getFontSize = function () {
    return this._fontSize
};
JSG.graph.model.attributes.TextFormat.prototype.getFontName = function () {
    return this._fontName
};
JSG.graph.model.attributes.TextFormat.prototype.getFontColor = function () {
    return this._fontColor
};
JSG.graph.model.attributes.TextFormat.prototype.getFontStyle = function () {
    return this._fontStyle
};
JSG.graph.model.attributes.TextFormat.prototype.readXML = function (a) {
    if (a && (a = JSG.commons.XML.findElementByTagName(a, "font"))) {
        var b, c, d;
        b = 0;
        for (c = a.childNodes.length; b < c; b++)switch (d = a.childNodes.item(b), d.nodeName) {
            case "size":
                this._fontSize.readXML(d);
                break;
            case "color":
                this._fontColor.readXML(d);
                break;
            case "name":
                this._fontName.readXML(d);
                break;
            case "style":
                this._fontStyle.readXML(d);
                break;
            case "rotation":
                this._rotation.readXML(d);
                break;
            case "vposition":
                this._verticalPosition.readXML(d);
                break;
            case "hposition":
                this._horizontalPosition.readXML(d);
                break;
            case "halign":
                this._horizontalAlignment.readXML(d)
        }
    }
};
JSG.namespace("JSG.graph.model.attributes");
JSG.graph.model.attributes.Attributes = function () {
    this._clipChildren = new JSG.graph.expr.BooleanExpression(!1);
    this._closed = new JSG.graph.expr.BooleanExpression(!0);
    this._collapsable = new JSG.graph.expr.NumberExpression(JSG.graph.attr.consts.Direction.NONE);
    this._collapsed = new JSG.graph.expr.BooleanExpression(!1);
    this._collapsedButton = new JSG.graph.expr.NumberExpression(JSG.graph.attr.consts.ButtonPosition.TOPRIGHT);
    this._combined = new JSG.graph.expr.BooleanExpression(!1);
    this._container = new JSG.graph.expr.BooleanExpression(!0);
    this._deletable = new JSG.graph.expr.BooleanExpression(!0);
    this._moveable = new JSG.graph.expr.NumberExpression(JSG.graph.attr.consts.Moveable.BOTH);
    this._portMode = new JSG.graph.expr.NumberExpression(JSG.graph.attr.consts.PortMode.DEFAULT | JSG.graph.attr.consts.PortMode.CENTER);
    this._rotatable = new JSG.graph.expr.BooleanExpression(!0);
    this._selectionMode = new JSG.graph.expr.NumberExpression(JSG.graph.attr.consts.SelectionMode.DEFAULT);
    this._selected = new JSG.graph.expr.BooleanExpression(!1);
    this._sizeable =
        new JSG.graph.expr.BooleanExpression(!0);
    this._snapTo = new JSG.graph.expr.BooleanExpression(!0);
    this._visible = new JSG.graph.expr.BooleanExpression(!0);
    this._alwaysVisible = new JSG.graph.expr.NumberExpression(JSG.graph.attr.consts.Direction.NONE);
    this._layer = new JSG.graph.expr.StringExpression("");
    this._link = new JSG.graph.expr.StringExpression("");
    this._type = new JSG.graph.expr.StringExpression("");
    this._leftMargin = new JSG.graph.expr.NumberExpression(0);
    this._rightMargin = new JSG.graph.expr.NumberExpression(0);
    this._topMargin = new JSG.graph.expr.NumberExpression(0);
    this._bottomMargin = new JSG.graph.expr.NumberExpression(0)
};
JSG.graph.model.attributes.Attributes.prototype.getAlwaysVisible = function () {
    return this._alwaysVisible
};
JSG.graph.model.attributes.Attributes.prototype.getClipChildren = function () {
    return this._clipChildren
};
JSG.graph.model.attributes.Attributes.prototype.getClosed = function () {
    return this._closed
};
JSG.graph.model.attributes.Attributes.prototype.getCollapsable = function () {
    return this._collapsable
};
JSG.graph.model.attributes.Attributes.prototype.getCollapsed = function () {
    return this._collapsed
};
JSG.graph.model.attributes.Attributes.prototype.getCollapsedButton = function () {
    return this._collapsedButton
};
JSG.graph.model.attributes.Attributes.prototype.getCombined = function () {
    return this._combined
};
JSG.graph.model.attributes.Attributes.prototype.getContainer = function () {
    return this._container
};
JSG.graph.model.attributes.Attributes.prototype.getDeleteable = function () {
    return this._deletable
};
JSG.graph.model.attributes.Attributes.prototype.getMoveable = function () {
    return this._moveable
};
JSG.graph.model.attributes.Attributes.prototype.getPortMode = function () {
    return this._portMode
};
JSG.graph.model.attributes.Attributes.prototype.getRotatable = function () {
    return this._rotatable
};
JSG.graph.model.attributes.Attributes.prototype.getSelectionMode = function () {
    return this._selectionMode
};
JSG.graph.model.attributes.Attributes.prototype.getSelected = function () {
    return this._selected
};
JSG.graph.model.attributes.Attributes.prototype.getSizeable = function () {
    return this._sizeable
};
JSG.graph.model.attributes.Attributes.prototype.getSnapTo = function () {
    return this._snapTo
};
JSG.graph.model.attributes.Attributes.prototype.getVisible = function () {
    return this._visible
};
JSG.graph.model.attributes.Attributes.prototype.getLeftMargin = function () {
    return this._leftMargin
};
JSG.graph.model.attributes.Attributes.prototype.getRightMargin = function () {
    return this._rightMargin
};
JSG.graph.model.attributes.Attributes.prototype.getTopMargin = function () {
    return this._topMargin
};
JSG.graph.model.attributes.Attributes.prototype.getBottomMargin = function () {
    return this._bottomMargin
};
JSG.graph.model.attributes.Attributes.prototype.readXML = function (a) {
    if (a) {
        var b, c;
        b = 0;
        for (c = a.childNodes.length; b < c; b++) {
            var d = a.childNodes.item(b);
            this._readAttributeXML(d)
        }
    }
};
JSG.graph.model.attributes.Attributes.prototype._readAttributeXML = function (a) {
    switch (a.nodeName) {
        case "clipchildren":
            this._clipChildren.readXML(a);
            break;
        case "collapsable":
            this._collapsable.readXML(a);
            break;
        case "collapsed":
            this._collapsed.readXML(a);
            break;
        case "collapsedbutton":
            this._collapsedButton.readXML(a);
            break;
        case "deletable":
            this._deletable.readXML(a);
            break;
        case "moveable":
            this._moveable.readXML(a);
            !1 === this._moveable.getValue() && this.setMoveable(JSG.graph.attr.consts.Moveable.NONE);
            break;
        case "rotatable":
            this._rotatable.readXML(a);
            break;
        case "selectable":
            this.setSelectionMode(JSG.graph.attr.consts.SelectionMode.NONE);
            break;
        case "selectparentfirst":
            this.setSelectParentFirst(!0);
            break;
        case "selectionmode":
            this._selectionMode.readXML(a);
            break;
        case "sizeable":
            this._sizeable.readXML(a);
            break;
        case "snapto":
            this._snapTo.readXML(a);
            break;
        case "visible":
            this._visible.readXML(a);
            break;
        case "alwaysvisible":
            this._alwaysVisible.readXML(a);
            break;
        case "combined":
            this._combined.readXML(a);
            break;
        case "closed":
            this._closed.readXML(a);
            break;
        case "portmode":
            this._portMode.readXML(a);
            break;
        case "container":
            this._container.readXML(a);
            break;
        case "layer":
            this._layer.readXML(a);
            break;
        case "link":
            this._link.readXML(a);
            break;
        case "type":
            this._type.readXML(a);
            break;
        case "leftmargin":
            this._leftMargin.readXML(a);
            break;
        case "rightmargin":
            this._rightMargin.readXML(a);
            break;
        case "bottommargin":
            this._bottomMargin.readXML(a);
            break;
        case "topmargin":
            this._topMargin.readXML(a)
    }
};
JSG.namespace("JSG.graph.model.attributes");
JSG.graph.model.attributes.LayoutAttributes = function () {
    this._layout = new JSG.graph.expr.StringExpression("None");
    this._autoLayout = new JSG.graph.expr.BooleanExpression(!1);
    this._autoResize = new JSG.graph.expr.NumberExpression(JSG.graph.attr.consts.Direction.NONE);
    this._autoResizeLevel = new JSG.graph.expr.NumberExpression(0);
    this._layoutSize = new JSG.graph.expr.NumberExpression(0);
    this._layoutable = new JSG.graph.expr.BooleanExpression(!0);
    this._constraints = this._layouter = void 0
};
JSG.graph.model.attributes.LayoutAttributes.prototype.getLayouter = function () {
    void 0 === this._layouter && (this._layouter = JSG.layoutFactory.createLayoutFromString(this._layout.getValue()));
    return this._layouter
};
JSG.graph.model.attributes.LayoutAttributes.prototype.getConstraints = function () {
    void 0 === this._constraints && (this._constraints = JSG.layoutFactory.createConstraintsForLayout(this._layout.getValue()));
    return this._constraints
};
JSG.graph.model.attributes.LayoutAttributes.prototype.getLayout = function () {
    return this._layout
};
JSG.graph.model.attributes.LayoutAttributes.prototype.getAutoLayout = function () {
    return this._autoLayout
};
JSG.graph.model.attributes.LayoutAttributes.prototype.getAutoResize = function () {
    return this._autoResize
};
JSG.graph.model.attributes.LayoutAttributes.prototype.getAutoResizeLevel = function () {
    return this._autoResizeLevel
};
JSG.graph.model.attributes.LayoutAttributes.prototype.getLayoutable = function () {
    return this._layoutable
};
JSG.graph.model.attributes.LayoutAttributes.prototype.getLayoutSize = function () {
    return this._layoutSize
};
JSG.graph.model.attributes.LayoutAttributes.prototype.readXML = function (a, b) {
    if (a) {
        var c, d;
        c = 0;
        for (d = a.childNodes.length; c < d; c++) {
            var e = a.childNodes.item(c);
            switch (e.nodeName) {
                case "layout":
                    this._layout.readXML(e);
                    break;
                case "autolayout":
                    this._autoLayout.readXML(e);
                    break;
                case "autoresize":
                    this._autoResize.readXML(e);
                    break;
                case "autoresizelevel":
                    this._autoResizeLevel.readXML(e);
                    break;
                case "layoutable":
                    this._layoutable.readXML(e);
                    break;
                case "layoutsize":
                    this._layoutSize.readXML(e)
            }
        }
        if (e = this.getConstraints())if (a.attributes.length)for (c =
                                                                       0, d = a.attributes.length; c < d; c++) {
            var f = a.attributes[c];
            switch (f.nodeName) {
                case "orientation":
                    if ("Grid" === this._layout.getValue())switch ("0" === f.nodeValue ? (e.flowDirection = ARAC.layout.config.FlowDirection.ROW_FLOW, e.xNodeScaling = ARAC.layout.config.NodeScaling.AREA_EXTEND) : (e.flowDirection = ARAC.layout.config.FlowDirection.COL_FLOW, e.yNodeScaling = ARAC.layout.config.NodeScaling.AREA_EXTEND), e.gridType = ARAC.layout.config.GridType.GRID_FLOW_GRIDBACK, e.cellCount = 1, b.getType().getValue()) {
                        case "bpmnpoolcontainer":
                            e.tags =
                                ["bpmnlane", "bpmnpool"];
                            break;
                        case "bpmnlanecontainer":
                            e.tags = ["bpmnlane", "bpmnpool"];
                            break;
                        case "flowhlanecontainer":
                            e.tags = ["flowhlane"];
                            break;
                        case "flowvlanecontainer":
                            e.tags = ["flowvlane"]
                    }
            }
        } else c = a.getElementsByTagName(e._layoutType), 0 < c.length && e.fromXML(c[0])
    }
};
JSG.namespace("JSG.graph.model.attributes");
JSG.graph.model.attributes.EdgeLayoutAttributes = function () {
    JSG.graph.model.attributes.EdgeLayoutAttributes._super.constructor.apply(this, arguments);
    this._behavior = new JSG.graph.expr.StringExpression(JSG.graph.attr.consts.LineBehavior.MANUAL)
};
JSG.extend(JSG.graph.model.attributes.EdgeLayoutAttributes, JSG.graph.model.attributes.LayoutAttributes);
JSG.graph.model.attributes.EdgeLayoutAttributes.prototype.getType = function () {
    return "Straight"
};
JSG.graph.model.attributes.EdgeLayoutAttributes.prototype.getConstraints = function () {
};
JSG.graph.model.attributes.EdgeLayoutAttributes.prototype.getLineBehavior = function () {
    return this._behavior
};
JSG.namespace("JSG.graph.model.attributes");
JSG.graph.model.attributes.OrthoEdgeLayoutAttributes = function () {
    JSG.graph.model.attributes.OrthoEdgeLayoutAttributes._super.constructor.apply(this, arguments);
    this._behavior = new JSG.graph.expr.StringExpression(JSG.graph.attr.consts.LineBehavior.AUTO)
};
JSG.extend(JSG.graph.model.attributes.OrthoEdgeLayoutAttributes, JSG.graph.model.attributes.EdgeLayoutAttributes);
JSG.graph.model.attributes.OrthoEdgeLayoutAttributes.prototype.getConstraints = function () {
};
JSG.graph.model.attributes.OrthoEdgeLayoutAttributes.prototype.getLineBehavior = function () {
    return this._behavior
};
JSG.graph.model.attributes.OrthoEdgeLayoutAttributes.prototype.readXML = function (a, b) {
    if (void 0 !== a) {
        var c;
        a:{
            c = this._behavior;
            for (var d = a.attributes; 0 < d.length;) {
                d = d[0];
                "linebehavior" === d.nodeName && c.setExpressionOrValue(d.nodeValue);
                c = !0;
                break a
            }
            c = !1
        }
        if (!c)for (c = 0, d = a.childNodes.length; c < d; c++) {
            var e = a.childNodes.item(c);
            if ("linebehavior" === e.nodeName) {
                this._behavior.readXML(e);
                break
            }
        }
    }
};
JSG.namespace("JSG.graph.model.settings");
JSG.graph.model.settings.AbstractSettings = function () {
    this._item = void 0
};
JSG.graph.model.settings.AbstractSettings.prototype.register = function (a) {
    this._item = a
};
JSG.graph.model.settings.AbstractSettings.prototype.deregister = function (a) {
    this._item = void 0
};
JSG.graph.model.settings.AbstractSettings.prototype.sendPreEventToItem = function (a, b) {
    b && (a && a.areEventsEnabled()) && a.sendPreEvent(b)
};
JSG.graph.model.settings.AbstractSettings.prototype.sendPostEventToItem = function (a, b) {
    b && (a && a.areEventsEnabled()) && a.sendPostEvent(b)
};
JSG.namespace("JSG.graph.model.settings");
JSG.graph.model.settings.GraphSettingsEvent = function (a, b) {
    JSG.graph.model.settings.GraphSettingsEvent._super.constructor.call(this);
    this.id = JSG.graph.model.events.Event.GRAPHSETTINGS;
    this.detailId = a;
    this.value = b
};
JSG.extend(JSG.graph.model.settings.GraphSettingsEvent, JSG.graph.model.events.Event);
JSG.namespace("JSG.graph.model.settings");
JSG.graph.model.settings.PageID = {
    WIDTH: "width",
    HEIGHT: "height",
    LEFTMARGIN: "leftmargin",
    TOPMARGIN: "topmargin",
    RIGHTMARGIN: "rightmargin",
    BOTTOMMARGIN: "bottommargin",
    FOOTERMARGIN: "footermargin",
    HEADERMARGIN: "headermargin",
    HEADERLEFT: "headerleft",
    HEADERCENTER: "headercenter",
    HEADERRIGHT: "headerright",
    FOOTERLEFT: "footerleft",
    FOOTERCENTER: "footercenter",
    FOOTERRIGHT: "footerright",
    FORMAT: "format",
    ORIENTATION: "orientation",
    SCALETOPAGETYPE: "scaletopagetype",
    SCALETOPAGECOUNT: "scaletopagecount"
};
JSG.graph.model.settings.PageOrientation = {PORTRAIT: 0, LANDSCAPE: 1};
JSG.graph.model.settings.ScaleToPageType = {NONE: 0, SINGLE: 1, VERTICALCOUNT: 2, HORIZONTALCOUNT: 3};
JSG.graph.model.settings.PageSize = {
    A3: 1,
    A4: 2,
    A5: 3,
    B3: 4,
    B4: 5,
    B5: 6,
    LETTER: 7,
    LEGAL: 8,
    LEDGER: 9,
    A0: 10,
    A1: 11,
    A2: 12
};
JSG.graph.model.settings.Page = function () {
    this._rightMargin = this._leftMargin = 1500;
    this._bottomMargin = this._topMargin = 2E3;
    this._headerRight = this._headerCenter = this._headerLeft = "";
    this._headerMargin = 800;
    this._footerCenter = this._footerLeft = "";
    this._footerRight = "[#p]";
    this._footerMargin = 800;
    this._verticalGap = 1E3;
    this._horizontalGap = 500;
    this.setFormat(JSG.graph.model.settings.PageSize.A4);
    this._orientation = JSG.graph.model.settings.PageOrientation.LANDSCAPE;
    this._scaleToPageType = JSG.graph.model.settings.ScaleToPageType.NONE;
    this._scaleToPageCount = 1
};
JSG.extend(JSG.graph.model.settings.Page, JSG.graph.model.settings.AbstractSettings);
JSG.graph.model.settings.Page.prototype.copy = function () {
    var a = new JSG.graph.model.settings.Page;
    a.setTo(this);
    return a
};
JSG.graph.model.settings.Page.prototype.setTo = function (a) {
    this._leftMargin = a._leftMargin;
    this._rightMargin = a._rightMargin;
    this._topMargin = a._topMargin;
    this._bottomMargin = a._bottomMargin;
    this._footerMargin = a._footerMargin;
    this._headerMargin = a._headerMargin;
    this._verticalGap = a._verticalGap;
    this._horizontalGap = a._horizontalGap;
    this._headerLeft = a._headerLeft;
    this._headerCenter = a._headerCenter;
    this._headerRight = a._headerRight;
    this._footerLeft = a._footerLeft;
    this._footerCenter = a._footerCenter;
    this._footerRight =
        a._footerRight;
    this._scaleToPageType = a._scaleToPageType;
    this._scaleToPageCount = a._scaleToPageCount;
    this.setFormat(a.getFormat());
    this.setOrientation(a.getOrientation())
};
JSG.graph.model.settings.Page.prototype.getUsableWidth = function () {
    return this._width - this._leftMargin - this._rightMargin
};
JSG.graph.model.settings.Page.prototype.getUsableHeight = function () {
    return this._height - this._topMargin - this._bottomMargin
};
JSG.graph.model.settings.Page.prototype.getWidth = function () {
    return this._width
};
JSG.graph.model.settings.Page.prototype.setWidth = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.WIDTH, "_width", this._width, a)
};
JSG.graph.model.settings.Page.prototype.getHeight = function () {
    return this._height
};
JSG.graph.model.settings.Page.prototype.setHeight = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.HEIGHT, "_height", this._height, a)
};
JSG.graph.model.settings.Page.prototype.getLeftMargin = function () {
    return this._leftMargin
};
JSG.graph.model.settings.Page.prototype.setLeftMargin = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.LEFTMARGIN, "_leftMargin", this._leftMargin, a)
};
JSG.graph.model.settings.Page.prototype.getTopMargin = function () {
    return this._topMargin
};
JSG.graph.model.settings.Page.prototype.setTopMargin = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.TOPMARGIN, "_topMargin", this._topMargin, a)
};
JSG.graph.model.settings.Page.prototype.getRightMargin = function () {
    return this._rightMargin
};
JSG.graph.model.settings.Page.prototype.setRightMargin = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.RIGHTMARGIN, "_rightMargin", this._rightMargin, a)
};
JSG.graph.model.settings.Page.prototype.getBottomMargin = function () {
    return this._bottomMargin
};
JSG.graph.model.settings.Page.prototype.setBottomMargin = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.BOTTOMMARGIN, "_bottomMargin", this._bottomMargin, a)
};
JSG.graph.model.settings.Page.prototype.getHeaderMargin = function () {
    return this._headerMargin
};
JSG.graph.model.settings.Page.prototype.setHeaderMargin = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.HEADERMARGIN, "_headerMargin", this._headerMargin, a)
};
JSG.graph.model.settings.Page.prototype.getHeaderLeft = function () {
    return this._headerLeft
};
JSG.graph.model.settings.Page.prototype.setHeaderLeft = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.HEADERLEFT, "_headerLeft", this._headerLeft, a)
};
JSG.graph.model.settings.Page.prototype.getHeaderCenter = function () {
    return this._headerCenter
};
JSG.graph.model.settings.Page.prototype.setHeaderCenter = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.HEADERCENTER, "_headerCenter", this._headerCenter, a)
};
JSG.graph.model.settings.Page.prototype.getHeaderRight = function () {
    return this._headerRight
};
JSG.graph.model.settings.Page.prototype.setHeaderRight = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.HEADERRIGHT, "_headerRight", this._headerRight, a)
};
JSG.graph.model.settings.Page.prototype.getFooterMargin = function () {
    return this._footerMargin
};
JSG.graph.model.settings.Page.prototype.setFooterMargin = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.FOOTERMARGIN, "_footerMargin", this._footerMargin, a)
};
JSG.graph.model.settings.Page.prototype.getFooterLeft = function () {
    return this._footerLeft
};
JSG.graph.model.settings.Page.prototype.setFooterLeft = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.FOOTERLEFT, "_footerLeft", this._footerLeft, a)
};
JSG.graph.model.settings.Page.prototype.getFooterCenter = function () {
    return this._footerCenter
};
JSG.graph.model.settings.Page.prototype.setFooterCenter = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.FOOTERCENTER, "_footerCenter", this._footerCenter, a)
};
JSG.graph.model.settings.Page.prototype.getFooterRight = function () {
    return this._footerRight
};
JSG.graph.model.settings.Page.prototype.setFooterRight = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.FOOTERRIGHT, "_footerRight", this._footerRight, a)
};
JSG.graph.model.settings.Page.prototype.getScaleToPageType = function () {
    return this._scaleToPageType
};
JSG.graph.model.settings.Page.prototype.setScaleToPageType = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.SCALETOPAGETYPE, "_scaleToPageType", this._scaleToPageType, a)
};
JSG.graph.model.settings.Page.prototype.getScaleToPageCount = function () {
    return this._scaleToPageCount
};
JSG.graph.model.settings.Page.prototype.setScaleToPageCount = function (a) {
    this._setProperty(JSG.graph.model.settings.PageID.SCALETOPAGECOUNT, "_scaleToPageCount", this._scaleToPageCount, a)
};
JSG.graph.model.settings.Page.prototype.getFormat = function () {
    return this._format
};
JSG.graph.model.settings.Page.prototype.setFormat = function (a) {
    if (this._format !== a) {
        var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.PAGE, a);
        b.detailId = JSG.graph.model.settings.PageID.FORMAT;
        b.source = this._item;
        this.sendPreEventToItem(this._item, b);
        if (!0 === b.doIt) {
            var c = 1E4, d = 1E4;
            this._format = a;
            switch (a) {
                case JSG.graph.model.settings.PageSize.A0:
                    c = 84100;
                    d = 118900;
                    break;
                case JSG.graph.model.settings.PageSize.A1:
                    c = 59400;
                    d = 84100;
                    break;
                case JSG.graph.model.settings.PageSize.A2:
                    c = 42E3;
                    d = 59400;
                    break;
                case JSG.graph.model.settings.PageSize.A3:
                    c = 29700;
                    d = 42E3;
                    break;
                case JSG.graph.model.settings.PageSize.A4:
                    c = 21E3;
                    d = 29700;
                    break;
                case JSG.graph.model.settings.PageSize.A5:
                    c = 14800;
                    d = 21E3;
                    break;
                case JSG.graph.model.settings.PageSize.B3:
                    c = 35300;
                    d = 5E4;
                    break;
                case JSG.graph.model.settings.PageSize.B4:
                    c = 25E3;
                    d = 35300;
                    break;
                case JSG.graph.model.settings.PageSize.B5:
                    c = 17600;
                    d = 25E3;
                    break;
                case JSG.graph.model.settings.PageSize.LEGAL:
                    c = 21590;
                    d = 35560;
                    break;
                case JSG.graph.model.settings.PageSize.LETTER:
                    c =
                        21590;
                    d = 27940;
                    break;
                case JSG.graph.model.settings.PageSize.LEDGER:
                    c = 27900, d = 43200
            }
            this._orientation === JSG.graph.model.settings.PageOrientation.PORTRAIT ? (this._width = c, this._height = d) : (this._width = d, this._height = c);
            this.sendPostEventToItem(this._item, b)
        }
    }
};
JSG.graph.model.settings.Page.prototype.getOrientation = function () {
    return this._orientation
};
JSG.graph.model.settings.Page.prototype.setOrientation = function (a) {
    if (this._orientation !== a) {
        var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.PAGE, a);
        b.detailId = JSG.graph.model.settings.PageID.ORIENTATION;
        b.source = this._item;
        this.sendPreEventToItem(this._item, b);
        if (!0 === b.doIt) {
            this._orientation = a;
            var c;
            this._orientation === JSG.graph.model.settings.PageOrientation.LANDSCAPE ? (c = Math.max(this._height, this._width), a = Math.min(this._height, this._width)) : (c = Math.min(this._height, this._width),
                a = Math.max(this._height, this._width));
            this._width = c;
            this._height = a;
            this.sendPostEventToItem(this._item, b)
        }
    }
};
JSG.graph.model.settings.Page.prototype.saveXML = function (a) {
    a.writeStartElement("page");
    a.writeAttributeString("format", this._format);
    a.writeAttributeString("width", this._width);
    a.writeAttributeString("height", this._height);
    a.writeAttributeString("leftmargin", this._leftMargin);
    a.writeAttributeString("topmargin", this._topMargin);
    a.writeAttributeString("bottommargin", this._bottomMargin);
    a.writeAttributeString("rightmargin", this._rightMargin);
    a.writeAttributeString("footermargin", this._footerMargin);
    a.writeAttributeString("footerleft", this._footerLeft);
    a.writeAttributeString("footercenter", this._footerCenter);
    a.writeAttributeString("footerright", this._footerRight);
    a.writeAttributeString("headermargin", this._headerMargin);
    a.writeAttributeString("headerleft", this._headerLeft);
    a.writeAttributeString("headercenter", this._headerCenter);
    a.writeAttributeString("headerright", this._headerRight);
    a.writeAttributeString("orientation", this._orientation);
    a.writeAttributeString("vgap", this._verticalGap);
    a.writeAttributeString("hgap",
        this._horizontalGap);
    a.writeAttributeString("scaletopagetype", this._scaleToPageType);
    a.writeAttributeString("scaletopagecount", this._scaleToPageCount);
    a.writeEndElement()
};
JSG.graph.model.settings.Page.prototype.readXML = function (a) {
    function b(a, b) {
        return a || 0 === a ? a : b
    }

    this._format = Number(a.getAttribute("format"));
    this._width = Number(a.getAttribute("width"));
    this._height = Number(a.getAttribute("height"));
    this._leftMargin = Number(a.getAttribute("leftmargin"));
    this._topMargin = Number(a.getAttribute("topmargin"));
    this._bottomMargin = Number(a.getAttribute("bottommargin"));
    this._rightMargin = Number(a.getAttribute("rightmargin"));
    this._footerMargin = Number(a.getAttribute("footermargin"));
    this._headerMargin = Number(a.getAttribute("headermargin"));
    this._orientation = Number(a.getAttribute("orientation"));
    this._footerLeft = b(a.getAttribute("footerleft"), this._footerLeft);
    this._footerCenter = b(a.getAttribute("footercenter"), this._footerCenter);
    this._footerRight = b(a.getAttribute("footerright"), this._footerRight);
    this._headerLeft = b(a.getAttribute("headerleft"), this._headerLeft);
    this._headerCenter = b(a.getAttribute("headercenter"), this._headerCenter);
    this._headerRight = b(a.getAttribute("headerright"),
        this._headerRight);
    this._scaleToPageType = b(Number(a.getAttribute("scaletopagetype")), this._scaleToPageType);
    this._scaleToPageCount = b(Number(a.getAttribute("scaletopagecount")), this._scaleToPageCount)
};
JSG.graph.model.settings.Page.prototype.getVerticalGap = function () {
    return this._verticalGap
};
JSG.graph.model.settings.Page.prototype.getHorizontalGap = function () {
    return this._horizontalGap
};
JSG.graph.model.settings.Page.prototype._setProperty = function (a, b, c, d) {
    c !== d && (c = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.PAGE, d), c.detailId = a, c.source = this._item, this.sendPreEventToItem(this._item, c), c ? c.doIt : 1) && (this[b] = d, this.sendPostEventToItem(this._item, c))
};
JSG.namespace("JSG.graph.model.settings");
JSG.graph.model.settings.CustomSetting = function () {
};
JSG.graph.model.settings.CustomSetting.prototype.getClassString = function () {
};
JSG.graph.model.settings.CustomSetting.prototype.setGraphSettings = function (a) {
};
JSG.graph.model.settings.CustomSetting.prototype.saveXML = function (a) {
};
JSG.graph.model.settings.CustomSetting.prototype.readXML = function (a) {
};
JSG.namespace("JSG.graph.model.settings");
JSG.graph.model.settings.GraphSettings = function () {
    JSG.graph.model.settings.GraphSettings._super.constructor.apply(this);
    this._settings = new JSG.commons.Map;
    this._addDefaultSettings()
};
JSG.extend(JSG.graph.model.settings.GraphSettings, JSG.graph.model.settings.AbstractSettings);
JSG.graph.model.settings.SettingID = {
    VIEW_MODE: "setting:viewmode",
    DISPLAY_MODE: "setting:displaymode",
    PAGE: "setting:page",
    GRIDVISIBLE: "setting:gridvisible",
    PORTSVISIBLE: "setting:portvisible",
    NAMESVISIBLE: "setting:namesvisible",
    AVAILABLEPORTSVISIBLE: "setting:availableportvisible",
    SCALEVISIBLE: "setting:scalevisible",
    SNAPTOGRID: "setting:snaptogrid",
    SNAPTOSHAPES: "setting:snaptoshapes",
    SNAPTOPORT: "setting:snaptoport",
    SNAPGRIDUNIT: "setting:snapgridunit",
    AUTOSCROLL: "setting:autoscroll"
};
JSG.graph.model.settings.ViewMode = {DEFAULT: "jsg:vm:default", READ_ONLY: "jsg:vm:readonly"};
JSG.graph.model.settings.GraphSettings.prototype._addDefaultSettings = function () {
    this._settings.put(JSG.graph.model.settings.SettingID.PAGE, new JSG.graph.model.settings.Page);
    this._settings.put(JSG.graph.model.settings.SettingID.VIEW_MODE, JSG.graph.model.settings.ViewMode.DEFAULT);
    this._settings.put(JSG.graph.model.settings.SettingID.DISPLAY_MODE, JSG.ui.graphics.DisplayMode.PAGE);
    this._settings.put(JSG.graph.model.settings.SettingID.GRIDVISIBLE, !0);
    this._settings.put(JSG.graph.model.settings.SettingID.PORTSVISIBLE,
        !1);
    this._settings.put(JSG.graph.model.settings.SettingID.NAMESVISIBLE, !1);
    this._settings.put(JSG.graph.model.settings.SettingID.AVAILABLEPORTSVISIBLE, !1);
    this._settings.put(JSG.graph.model.settings.SettingID.SCALEVISIBLE, !0);
    this._settings.put(JSG.graph.model.settings.SettingID.SNAPTOGRID, !0);
    this._settings.put(JSG.graph.model.settings.SettingID.SNAPTOSHAPES, !0);
    this._settings.put(JSG.graph.model.settings.SettingID.SNAPTOPORT, JSG.graph.attr.consts.PortMode.ALL);
    this._settings.put(JSG.graph.model.settings.SettingID.SNAPGRIDUNIT,
        250);
    this._settings.put(JSG.graph.model.settings.SettingID.AUTOSCROLL, !0)
};
JSG.graph.model.settings.GraphSettings.prototype.copy = function () {
    var a = new JSG.graph.model.settings.GraphSettings;
    a.setTo(this);
    return a
};
JSG.graph.model.settings.GraphSettings.prototype.setTo = function (a) {
    var b = !1, c = this._item ? this._createEvent(JSG.graph.model.events.Event.ALL) : void 0;
    this.sendPreEventToItem(this._item, c);
    if (b = c ? c.doIt : !0)this.getPage().setTo(a.getPage()), this._settings.put(JSG.graph.model.settings.SettingID.VIEW_MODE, a.getViewMode()), this._settings.put(JSG.graph.model.settings.SettingID.DISPLAY_MODE, a.getDisplayMode()), this._settings.put(JSG.graph.model.settings.SettingID.GRIDVISIBLE, a.getGridVisible()), this._settings.put(JSG.graph.model.settings.SettingID.PORTSVISIBLE,
        a.getPortsVisible()), this._settings.put(JSG.graph.model.settings.SettingID.NAMESVISIBLE, a.getNamesVisible()), this._settings.put(JSG.graph.model.settings.SettingID.AVAILABLEPORTSVISIBLE, a.getAvailablePortsVisible()), this._settings.put(JSG.graph.model.settings.SettingID.SCALEVISIBLE, a.getScaleVisible()), this._settings.put(JSG.graph.model.settings.SettingID.SNAPTOGRID, a.getSnapToGrid()), this._settings.put(JSG.graph.model.settings.SettingID.SNAPTOSHAPES, a.getSnapToShapes()), this._settings.put(JSG.graph.model.settings.SettingID.SNAPTOPORT,
        a.getSnapToPort()), this._settings.put(JSG.graph.model.settings.SettingID.SNAPGRIDUNIT, a.getSnapStep()), this._settings.put(JSG.graph.model.settings.SettingID.AUTOSCROLL, a.getAutoScroll()), this.sendPostEventToItem(this._item, c);
    return b
};
JSG.graph.model.settings.GraphSettings.prototype.getPage = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.PAGE)
};
JSG.graph.model.settings.GraphSettings.prototype.getDisplayMode = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.DISPLAY_MODE)
};
JSG.graph.model.settings.GraphSettings.prototype.setDisplayMode = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.DISPLAY_MODE, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getViewMode = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.VIEW_MODE)
};
JSG.graph.model.settings.GraphSettings.prototype.setViewMode = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.VIEW_MODE, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getGridVisible = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.GRIDVISIBLE)
};
JSG.graph.model.settings.GraphSettings.prototype.setGridVisible = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.GRIDVISIBLE, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getPortsVisible = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.PORTSVISIBLE)
};
JSG.graph.model.settings.GraphSettings.prototype.setPortsVisible = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.PORTSVISIBLE, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getAvailablePortsVisible = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.AVAILABLEPORTSVISIBLE)
};
JSG.graph.model.settings.GraphSettings.prototype.setAvailablePortsVisible = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.AVAILABLEPORTSVISIBLE, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getNamesVisible = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.NAMESVISIBLE)
};
JSG.graph.model.settings.GraphSettings.prototype.setNamesVisible = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.NAMESVISIBLE, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getScaleVisible = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.SCALEVISIBLE)
};
JSG.graph.model.settings.GraphSettings.prototype.setScaleVisible = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.SCALEVISIBLE, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getSnapToGrid = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.SNAPTOGRID)
};
JSG.graph.model.settings.GraphSettings.prototype.setSnapToGrid = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.SNAPTOGRID, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getSnapStep = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.SNAPGRIDUNIT)
};
JSG.graph.model.settings.GraphSettings.prototype.setSnapStep = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.SNAPGRIDUNIT, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getSnapToPort = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.SNAPTOPORT)
};
JSG.graph.model.settings.GraphSettings.prototype.setSnapToPort = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.SNAPTOPORT, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getSnapToShapes = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.SNAPTOSHAPES)
};
JSG.graph.model.settings.GraphSettings.prototype.setSnapToShapes = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.SNAPTOSHAPES, a)
};
JSG.graph.model.settings.GraphSettings.prototype.getAutoScroll = function () {
    return this.getSetting(JSG.graph.model.settings.SettingID.AUTOSCROLL)
};
JSG.graph.model.settings.GraphSettings.prototype.setAutoScroll = function (a) {
    return this._changeSetting(JSG.graph.model.settings.SettingID.AUTOSCROLL, a)
};
JSG.graph.model.settings.GraphSettings.prototype._changeSetting = function (a, b) {
    if (a && this._settings.get(a) !== b) {
        var c = this._item ? this._createEvent(a, b) : void 0;
        this.sendPreEventToItem(this._item, c);
        if (c ? c.doIt : 1)return this._settings.put(a, b), this.sendPostEventToItem(this._item, c), !0
    }
    return !1
};
JSG.graph.model.settings.GraphSettings.prototype._createEvent = function (a, b) {
    return new JSG.graph.model.settings.GraphSettingsEvent(a, b)
};
JSG.graph.model.settings.GraphSettings.prototype.addSetting = function (a, b) {
    b.setGraphSettings(this);
    var c = this._settings.put(a, b);
    c && c.setGraphSettings(void 0)
};
JSG.graph.model.settings.GraphSettings.prototype.getSetting = function (a) {
    return this._settings.get(a)
};
JSG.graph.model.settings.GraphSettings.prototype.removeSetting = function (a) {
    (a = this._settings.remove(a)) && a.setGraphSettings(void 0);
    return a
};
JSG.graph.model.settings.GraphSettings.prototype.readXML = function (a) {
    function b(a, b, c) {
        b && c.put(a, "true" === b ? !0 : !1)
    }

    function c(a, b, c) {
        b && c.put(a, Number(b))
    }

    function d(a, b) {
        var c = a.getAttribute("id"), d = a.getAttribute("class");
        c && d && (d = JSG.createObjectFromString(d)) && (d.readXML(g[e]), b.addSetting(c, d))
    }

    var e, f, g;
    (function (a, b, c) {
        b && c.put(a, b)
    })(JSG.graph.model.settings.SettingID.VIEW_MODE, a.getAttribute("viewmode"), this._settings);
    c(JSG.graph.model.settings.SettingID.DISPLAY_MODE, a.getAttribute("dplmode"),
        this._settings);
    b(JSG.graph.model.settings.SettingID.GRIDVISIBLE, a.getAttribute("grid"), this._settings);
    b(JSG.graph.model.settings.SettingID.PORTSVISIBLE, a.getAttribute("ports"), this._settings);
    b(JSG.graph.model.settings.SettingID.AVAILABLEPORTSVISIBLE, a.getAttribute("availableports"), this._settings);
    b(JSG.graph.model.settings.SettingID.NAMESVISIBLE, a.getAttribute("names"), this._settings);
    b(JSG.graph.model.settings.SettingID.SNAPTOGRID, a.getAttribute("snaptogrid"), this._settings);
    b(JSG.graph.model.settings.SettingID.SNAPTOSHAPES,
        a.getAttribute("snaptoshapes"), this._settings);
    b(JSG.graph.model.settings.SettingID.SCALEVISIBLE, a.getAttribute("scale"), this._settings);
    b(JSG.graph.model.settings.SettingID.AUTOSCROLL, a.getAttribute("autoscroll"), this._settings);
    c(JSG.graph.model.settings.SettingID.SNAPTOPORT, a.getAttribute("snaptoport"), this._settings);
    c(JSG.graph.model.settings.SettingID.SNAPGRIDUNIT, a.getAttribute("snapstep"), this._settings);
    (f = JSG.commons.XML.findElementByTagName(a, "page")) && this.getPage().readXML(f);
    g = JSG.commons.XML.findAllElementsByTagName(a,
        "custom");
    for (e = 0; e < g.length; e++)d(g[e], this)
};
JSG.graph.model.settings.GraphSettings.prototype.saveXML = function (a) {
    function b(b) {
        a.writeStartElement("custom");
        a.writeAttributeString("id", b.id);
        a.writeAttributeString("class", b.clazz);
        b.value.saveXML(a);
        a.writeEndElement()
    }

    var c, d;
    a.writeStartElement("settings");
    a.writeAttributeString("viewmode", this.getViewMode());
    a.writeAttributeString("dplmode", this.getDisplayMode());
    a.writeAttributeString("grid", this.getGridVisible());
    a.writeAttributeString("ports", this.getPortsVisible());
    a.writeAttributeString("names",
        this.getNamesVisible());
    a.writeAttributeString("availableports", this.getAvailablePortsVisible());
    a.writeAttributeString("scale", this.getScaleVisible());
    a.writeAttributeString("snaptogrid", this.getSnapToGrid());
    a.writeAttributeString("snaptoshapes", this.getSnapToShapes());
    a.writeAttributeString("snaptoport", this.getSnapToPort());
    a.writeAttributeString("snapstep", this.getSnapStep());
    a.writeAttributeString("autoscroll", this.getAutoScroll());
    this.getPage().saveXML(a);
    d = function (a) {
        var b = JSG.graph.model.settings.SettingID,
            c = [];
        a.iterate(function (a, d) {
            !Object.prototype.hasOwnProperty.call(b, a) && (d.saveXML && d.getClassString) && c.push({
                id: a,
                clazz: d.getClassString(),
                value: d
            })
        });
        return c
    }(this._settings);
    for (c = 0; c < d.length; c++)b(d[c]);
    a.writeEndElement()
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.Layer = function (a) {
    this.name = a;
    this.selectable = this.visible = !0
};
JSG.graph.model.Layer.prototype.saveXML = function (a) {
    a.writeStartElement("layer");
    a.writeAttributeString("name", this.name);
    a.writeAttributeString("visible", this.visible);
    a.writeAttributeString("selectable", this.selectable);
    a.writeEndElement()
};
JSG.graph.model.Layer.prototype.readXML = function (a) {
    this.visible = "true" === a.getAttribute("visible") ? !0 : !1;
    this.selectable = "true" === a.getAttribute("selectable") ? !0 : !1
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.Condition = function (a, b) {
    this.prio = 0;
    this.path = a;
    this.isActive = !0;
    this._data = void 0;
    this.expression = void 0 === b ? new JSG.graph.expr.StringExpression("undefined") : b
};
JSG.graph.model.Condition.prototype.copy = function () {
    var a = new JSG.graph.model.Condition(this.path, this.expression.copy());
    a.prio = this.prio;
    a.isActive = this.isActive;
    a.setDataTo(this._data);
    return a
};
JSG.graph.model.Condition.prototype.setTo = function (a) {
    a && (this.prio = a.prio, this.path = a.path, this.isActive = a.isActive, this.expression.setTo(a.expression), this.setDataTo(a._data))
};
JSG.graph.model.Condition.prototype.setDataTo = function (a) {
    if (a) {
        this._data = {};
        for (var b in a)this._data[b] = a[b]
    } else this._data = void 0
};
JSG.graph.model.Condition.prototype.isDataEqualTo = function (a) {
    var b = this._data ? Object.keys(this._data) : [], c = a ? Object.keys(a) : [];
    if (b.length === c.length) {
        for (c = 0; c < b.length; c++)if (this._data[b[c]] !== a[b[c]])return !1;
        return !0
    }
    return !1
};
JSG.graph.model.Condition.prototype.addData = function (a, b) {
    this._data || (this._data = {});
    this._data[a] = b
};
JSG.graph.model.Condition.prototype.getData = function (a) {
    if (this._data)return this._data[a]
};
JSG.graph.model.Condition.prototype.getAttributeListPath = function () {
    var a = this.path.lastIndexOf(JSG.graph.attr.Attribute.PATH_DELIMITER);
    return 0 < a ? this.path.substring(0, a) : void 0
};
JSG.graph.model.Condition.prototype.getAttributeName = function () {
    var a = this.path.lastIndexOf(JSG.graph.attr.Attribute.PATH_DELIMITER);
    return 0 < a ? this.path.substring(a + 1) : this.path
};
JSG.graph.model.Condition.prototype.isTrue = function () {
    var a = this.expression.getTerm();
    return a && "cond" === a.type ? a.isTrue() : !1
};
JSG.graph.model.Condition.prototype.saveXML = function (a, b) {
    b.writeStartElement(a);
    b.writeAttributeString("prio", this.prio);
    b.writeAttributeString("active", this.isActive);
    b.writeAttributeString("path", this.path || "");
    this.expression.saveXML("expr", b, 2);
    this._saveData(b);
    b.writeEndElement()
};
JSG.graph.model.Condition.prototype._saveData = function (a) {
    if (this._data) {
        var b;
        a.writeStartElement("data");
        for (b in this._data)a.writeAttributeString(b, this._data[b]);
        a.writeEndElement()
    }
};
JSG.graph.model.Condition.prototype.readXML = function (a) {
    this.prio = a.getAttribute("prio") || 0;
    this.path = a.getAttribute("path");
    this.isActive = "false" === a.getAttribute("active") ? !1 : !0;
    var b = JSG.commons.XML.findElementByTagName(a, "expr");
    b && this.expression.readXML(b);
    this._readData(a)
};
JSG.graph.model.Condition.prototype._readData = function (a) {
    if (a = JSG.commons.XML.findElementByTagName(a, "data")) {
        a = a.attributes;
        var b;
        for (b = 0; b < a.length; b++) {
            var c = a[b];
            void 0 !== c.name && void 0 !== c.value && this.addData(c.name, c.value)
        }
    }
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.ConditionManager = function (a) {
    this._item = a;
    this._conditions = []
};
JSG.graph.model.ConditionManager.prototype._createEntry = function (a) {
    return {cond: a, copy: a.copy()}
};
JSG.graph.model.ConditionManager.prototype.hasConditions = function () {
    return 0 < this._conditions.length
};
JSG.graph.model.ConditionManager.prototype.getConditionsCount = function () {
    return this._conditions.length
};
JSG.graph.model.ConditionManager.prototype.getConditions = function () {
    var a = [], b;
    for (b = 0; b < this._conditions.length; b++)a.push(this._condAtIndex(b));
    return a
};
JSG.graph.model.ConditionManager.prototype.iterate = function (a) {
    var b, c;
    b = 0;
    for (c = this._conditions.length; b < c; b++)a(this._condAtIndex(b))
};
JSG.graph.model.ConditionManager.prototype._condAtIndex = function (a) {
    a = this._conditions[a];
    a.cond.setTo(a.copy);
    return a.cond
};
JSG.graph.model.ConditionManager.prototype.getCurrentState = function (a) {
    return (a = this._findEntry(a)) ? a.copy.copy() : void 0
};
JSG.graph.model.ConditionManager.prototype.addCondition = function (a, b) {
    var c = this._findEntry(a);
    if (void 0 === c) {
        c = this._createEntry(a);
        try {
            c.cond.expression.evaluate(this._item);
            c.copy.expression.evaluate(this._item);
            var d = void 0 === b || b > this._conditions.length ? this._conditions.length : b, d = Math.max(d, 0);
            JSG.Arrays.insertAt(this._conditions, d, c);
            this._addTargetCond(c.copy, d);
            this._sendEvent(c.cond)
        } catch (e) {
            JSG.debug.log("Error during condition add!\nError: " + e.title + "\nReason: " + e.message)
        }
    }
};
JSG.graph.model.ConditionManager.prototype._addTargetCond = function (a, b) {
    if (this._item && a.path) {
        var c = this._getAttributeAtPath(a.path);
        c instanceof JSG.graph.attr.ConditionalAttribute || (c = new JSG.graph.attr.ConditionalAttribute(c), this._addAttributeAtPath(a.path, c));
        c.addCondition(a, this._targetIndex(a.path, b))
    }
};
JSG.graph.model.ConditionManager.prototype._targetIndex = function (a, b) {
    if (void 0 !== b) {
        var c = 0, d;
        for (d = 0; d < this._conditions.length && d < b; d++)this._conditions[d].cond.path === a && c++;
        b = c++
    }
    return b
};
JSG.graph.model.ConditionManager.prototype._findEntry = function (a) {
    var b, c;
    for (c = 0; c < this._conditions.length; c++) {
        var d = this._conditions[c];
        if (d.cond === a) {
            b = d;
            break
        }
    }
    return b
};
JSG.graph.model.ConditionManager.prototype.removeCondition = function (a) {
    var b = this._findEntry(a);
    b && (JSG.Arrays.remove(this._conditions, b), this._rmTargetCond(b.copy), this._sendEvent(a))
};
JSG.graph.model.ConditionManager.prototype._rmTargetCond = function (a) {
    if (this._item && a.path) {
        var b = this._getAttributeAtPath(a.path);
        b instanceof JSG.graph.attr.ConditionalAttribute && (b.removeCondition(a), b.hasConditions() || this._addAttributeAtPath(a.path, b.attribute()))
    }
};
JSG.graph.model.ConditionManager.prototype.update = function (a) {
    var b;
    b = 0 === arguments.length ? this._conditions : Array.isArray(arguments[0]) ? arguments[0] : arguments;
    var c = [], d;
    for (d = 0; d < b.length; d++) {
        var e = b[d], f = e, g = !1, k = this._findEntry(f);
        if (k) {
            k.copy.prio !== f.prio && (g = !0, k.copy.prio = f.prio);
            k.copy.isActive !== f.isActive && (g = !0, k.copy.isActive = f.isActive);
            k.copy.path !== f.path && (g = !0, this._rmTargetCond(k.copy), k.copy.path = f.path, this._addTargetCond(k.copy));
            if (!k.copy.expression.isEqualTo(f.expression)) {
                var h =
                    k.copy.expression.copy();
                k.copy.expression.setTo(f.expression);
                try {
                    k.copy.expression.evaluate(this._item), f.expression.evaluate(this._item), g = !0
                } catch (m) {
                    JSG.debug.log("Error during condition add!\nError: " + m.title + "\nReason: " + m.message), k.copy.expression.setTo(h), k.copy.expression.evaluate(this._item), g = !1
                }
            }
            k.copy.isDataEqualTo(f._data) || (g = !0, k.copy.setDataTo(f._data))
        }
        g && (f = this._getAttributeAtPath(f.path), f instanceof JSG.graph.attr.ConditionalAttribute && f.sortConditions());
        g && c.push(e)
    }
    b = c;
    0 < b.length && this._sendEvent(b)
};
JSG.graph.model.ConditionManager.prototype._sendEvent = function (a) {
    if (a = a.length ? a[0] : void 0)if (a = this._getAttributeAtPath(a.path))a = new JSG.graph.model.events.AttributeChangeEvent(JSG.graph.model.events.AttributeChangeEvent.VALUE, a), this._item.getGraph()._changed = !0, this._item.sendPostEvent(a)
};
JSG.graph.model.ConditionManager.prototype._getAttributeAtPath = function (a) {
    var b = this._item.getAttributeAtPath(a);
    !b && JSG.Strings.startsWith(a, JSG.graph.attr.TextFormatAttributes.NAME) && (b = a.lastIndexOf(JSG.graph.attr.Attribute.PATH_DELIMITER), b = 0 < b ? this.getTextFormat().getAttribute(a.substring(b + 1)) : void 0);
    return b
};
JSG.graph.model.ConditionManager.prototype._addAttributeAtPath = function (a, b) {
    return JSG.Strings.startsWith(a, JSG.graph.attr.TextFormatAttributes.NAME) ? this.getTextFormat().addAttribute(b) : this._item.addAttributeAtPath(a, b)
};
JSG.graph.model.ConditionManager.prototype.saveXML = function (a, b) {
    var c;
    b.writeStartElement(a);
    for (c = 0; c < this._conditions.length; c++)this._conditions[c].copy.saveXML("co", b);
    b.writeEndElement()
};
JSG.graph.model.ConditionManager.prototype.readXML = function (a) {
    var b, c;
    if (a.hasChildNodes()) {
        b = 0;
        for (c = a.childNodes.length; b < c; b++) {
            var d = a.childNodes.item(b);
            if ("co" === d.nodeName) {
                var e = new JSG.graph.model.Condition;
                e.readXML(d);
                this.addCondition(e)
            }
        }
        for (b = 0; b < this._conditions.length; b++)a = this._getAttributeAtPath(this._conditions[b].copy.path), a instanceof JSG.graph.attr.ConditionalAttribute && a.sortConditions()
    }
};
JSG.namespace("JSG.graph.model.shapes");
JSG.graph.model.shapes.Shape = function () {
    this._item = void 0;
    this._coordinates = [];
    this._coordpointlist = new JSG.geometry.PointList;
    this._refreshEnabled = this._notificationEnabled = !0
};
JSG.graph.model.shapes.Shape.TYPE = "graphitem";
JSG.graph.model.shapes.Shape.prototype.getType = function () {
    return JSG.graph.model.shapes.Shape.TYPE
};
JSG.graph.model.shapes.Shape.prototype.saveXML = function (a, b) {
    b.writeStartElement(a);
    b.writeAttributeString("type", this.getType());
    this.saveXMLContent(b);
    b.writeEndElement()
};
JSG.graph.model.shapes.Shape.prototype.saveXMLContent = function (a) {
};
JSG.graph.model.shapes.Shape.prototype.readXML = function (a) {
};
JSG.graph.model.shapes.Shape.prototype._newExpression = function (a, b, c) {
    return new JSG.graph.expr.NumberExpression(a, b, c)
};
JSG.graph.model.shapes.Shape.prototype.newInstance = function () {
    return new JSG.graph.model.shapes.Shape
};
JSG.graph.model.shapes.Shape.prototype.copy = function () {
    var a = this.newInstance();
    a.setCoordinates(this._coordinates);
    return a
};
JSG.graph.model.shapes.Shape.prototype.init = function () {
};
JSG.graph.model.shapes.Shape.prototype.disableNotification = function () {
    this._notificationEnabled = !1
};
JSG.graph.model.shapes.Shape.prototype.enableNotification = function () {
    this._notificationEnabled = !0
};
JSG.graph.model.shapes.Shape.prototype.disableRefresh = function () {
    var a = this._refreshEnabled;
    this._refreshEnabled = !1;
    return a
};
JSG.graph.model.shapes.Shape.prototype.enableRefresh = function (a) {
    this._refreshEnabled = !0;
    !0 === a && this.refresh()
};
JSG.graph.model.shapes.Shape.prototype.setItem = function (a) {
    this._item = a
};
JSG.graph.model.shapes.Shape.prototype.containsPoint = function (a, b) {
    if (!a)return !1;
    var c = this._item.isClosed(), d = c, e = this.getPointList(), f = JSG.findRadius / this._item.getGraph().getZoom();
    if (b === JSG.graph.controller.FindFlags.AREAWITHFRAME)return e.contains(a) ? !0 : e.distance(a, c) < f;
    if (b !== JSG.graph.controller.FindFlags.AREA && b !== JSG.graph.controller.FindFlags.INNERAREA) {
        var g = this._item.getItemAttributes().getSelectionMode().getValue();
        g & JSG.graph.attr.consts.SelectionMode.DEFAULT ? d = this._item.getItemCount() ||
        d && this._item.getFormat().getFillStyle().getValue() !== JSG.graph.attr.FormatAttributes.FillStyle.NONE : g & JSG.graph.attr.consts.SelectionMode.BORDER ? d = !1 : g & JSG.graph.attr.consts.SelectionMode.AREA && (d = !0)
    }
    return d ? e.contains(a) : e.distance(a, c) < f
};
JSG.graph.model.shapes.Shape.prototype.hasCoordinates = function () {
    return 0 !== this._coordinates.length
};
JSG.graph.model.shapes.Shape.prototype.getCoordinates = function () {
    return this._coordinates
};
JSG.graph.model.shapes.Shape.prototype.getCoordinatesCount = function () {
    return this._coordinates.length
};
JSG.graph.model.shapes.Shape.prototype.getCoordinateAt = function (a) {
    return 0 <= a && a < this._coordinates.length ? this._coordinates[a] : void 0
};
JSG.graph.model.shapes.Shape.prototype.keepCoordinates = function (a) {
    var b;
    for (b = this._coordinates.length; b < a; b++)this._coordinates.push(new JSG.graph.Coordinate);
    this._coordinates.length = a
};
JSG.graph.model.shapes.Shape.prototype.addCoordinate = function (a) {
    var b = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.ADDCOORDINATE, a);
    !0 === b.doIt && (a.evaluate(this._item), this._coordinates.push(a), this.refresh(), this._shapeDidChange(b))
};
JSG.graph.model.shapes.Shape.prototype.insertCoordinatesAt = function (a, b) {
    var c = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORDS_INSERT_AT, a, b);
    !0 === c.doIt && (this._evalCoords(b), JSG.Arrays.insertAt(this._coordinates, a, b), this.refresh(), this._shapeDidChange(c))
};
JSG.graph.model.shapes.Shape.prototype.removeCoordinateAt = function (a) {
    var b = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORDS_REMOVE_AT, a);
    if (!0 === b.doIt)return a = JSG.Arrays.removeAt(this._coordinates, a), this.refresh(), this._shapeDidChange(b), a
};
JSG.graph.model.shapes.Shape.prototype.removeCoordinatesAt = function (a, b) {
    var c = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORDS_REMOVE_AT, a, b);
    !0 === c.doIt && (this._coordinates.splice(a, b), this.refresh(), this._shapeDidChange(c))
};
JSG.graph.model.shapes.Shape.prototype.setCoordinateAt = function (a, b, c) {
    if (0 <= a && a < this._coordinates.length && !this._coordinates[a].isEqualTo(b, c)) {
        var d = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORDS_REPLACE_AT, a, b, c);
        !0 === d.doIt && (this._coordinates[a].set(b, c), void 0 === this._item || this._item._reading || this._coordinates[a].evaluate(this._item), this.refresh(), this._shapeDidChange(d))
    }
};
JSG.graph.model.shapes.Shape.prototype.setCoordinateAtTo = function (a, b) {
    this.setCoordinateAt(a, b.getX(), b.getY())
};
JSG.graph.model.shapes.Shape.prototype.setCoordinateAtToPoint = function (a, b) {
    0 <= a && a < this._coordinates.length && this.setCoordinateAt(a, b.x, b.y)
};
JSG.graph.model.shapes.Shape.prototype.setCoordinates = function (a) {
    var b = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORDS_REPLACE_ALL, a);
    if (!0 === b.doIt) {
        var c, d = void 0 !== this._item && !this._item._reading;
        for (c = this._coordinates.length = 0; c < a.length; c++) {
            var e = a[c].copy();
            d && e.evaluate(this._item);
            this._coordinates.push(e)
        }
        this.refresh();
        this._shapeDidChange(b)
    }
};
JSG.graph.model.shapes.Shape.prototype.getPoints = function () {
    return this.getPointList().getPoints()
};
JSG.graph.model.shapes.Shape.prototype.getPointList = function () {
    return this._coordpointlist
};
JSG.graph.model.shapes.Shape.prototype.getPolygonPointList = function () {
    return this._coordpointlist
};
JSG.graph.model.shapes.Shape.prototype._fillPointList = function (a, b) {
    a.keepPoints(b.length);
    var c = JSG.ptCache.get(), d;
    for (d = 0; d < b.length; d++)a.setPointAtTo(d, b[d].toPoint(c));
    JSG.ptCache.release(c)
};
JSG.graph.model.shapes.Shape.prototype.getValidPortLocations = function (a, b) {
    var c = JSG.graph.attr.consts.PortMode.NONE;
    if (this._item && (this._item instanceof JSG.graph.model.Node && !this._item.isCollapsed()) && (c = this._item.getItemAttributes().getPortMode().getValue(), c &= this._item.getGraph().getSettings().getSnapToPort(), c !== JSG.graph.attr.consts.PortMode.NONE)) {
        var d = this._coordpointlist, e = [], f = this._item.getPorts(), g, k, h;
        g = 0;
        for (k = f.length; g < k; g++)h = f[g], e.push(h.getPin().getPoint());
        a && c & JSG.graph.attr.consts.PortMode.CENTER &&
        e.push(d.getCenter());
        if (!b && (c & JSG.graph.attr.consts.PortMode.POINTS || c & JSG.graph.attr.consts.PortMode.LINESCENTER))for (d = d.getPoints(), g = 0, k = d.length; g < k; g++)c & JSG.graph.attr.consts.PortMode.POINTS && e.push(d[g]), !(this instanceof JSG.graph.model.shapes.BezierShape) && (c & JSG.graph.attr.consts.PortMode.LINESCENTER && (g || a)) && (g ? e.push(new JSG.geometry.Point((d[g].x + d[g - 1].x) / 2, (d[g].y + d[g - 1].y) / 2)) : a && e.push(new JSG.geometry.Point((d[k - 1].x + d[0].x) / 2, (d[k - 1].y + d[0].y) / 2)));
        !b && c & JSG.graph.attr.consts.PortMode.SIDESCENTER &&
        (d = this._item.getSizeAsPoint(), e.push(new JSG.geometry.Point(0, d.y / 2)), e.push(new JSG.geometry.Point(d.x / 2, 0)), e.push(new JSG.geometry.Point(d.x, d.y / 2)), e.push(new JSG.geometry.Point(d.x / 2, d.y)));
        !b && c & JSG.graph.attr.consts.PortMode.SIDESQUARTER && (d = this._item.getSizeAsPoint(), e.push(new JSG.geometry.Point(0, d.y / 4)), e.push(new JSG.geometry.Point(0, 0.75 * d.y)), e.push(new JSG.geometry.Point(d.x / 4, 0)), e.push(new JSG.geometry.Point(0.75 * d.x, 0)), e.push(new JSG.geometry.Point(d.x, d.y / 4)), e.push(new JSG.geometry.Point(d.x,
            0.75 * d.y)), e.push(new JSG.geometry.Point(d.x / 4, d.y)), e.push(new JSG.geometry.Point(0.75 * d.x, d.y)));
        !b && c & JSG.graph.attr.consts.PortMode.CORNERS && (d = this._item.getSizeAsPoint(), e.push(new JSG.geometry.Point(0, 0)), e.push(new JSG.geometry.Point(d.x, 0)), e.push(new JSG.geometry.Point(d.x, d.y)), e.push(new JSG.geometry.Point(0, d.y)));
        return e
    }
};
JSG.graph.model.shapes.Shape.prototype.getValidPortLocation = function (a, b, c, d, e) {
    function f(a, b, c) {
        a = JSG.geometry.Utils.getLineLength(a, b);
        if (!isNaN(a) && a < e)return c.x -= c.x - b.x, c.y -= c.y - b.y, c
    }

    if (this._item && this._item instanceof JSG.graph.model.Node && !this._item.isCollapsed()) {
        var g = this._item.getItemAttributes().getPortMode().getValue(), g = g & this._item.getGraph().getSettings().getSnapToPort();
        if (g !== JSG.graph.attr.consts.PortMode.NONE) {
            var k = this._coordpointlist, h = a.copy(), m = this._item.getPorts(),
                l, p, n, q;
            l = 0;
            for (p = m.length; l < p; l++)if (q = m[l], q = q.getPin().getPoint(), Math.abs(a.x - q.x) < e && Math.abs(a.y - q.y) < e)return h.x -= a.x - q.x, h.y -= a.y - q.y, h;
            if (c && g & JSG.graph.attr.consts.PortMode.CENTER && (m = f(a, k.getCenter(), h), void 0 !== m))return m;
            if (!d && g & JSG.graph.attr.consts.PortMode.POINTS && (n = k.getOffsetFromPoint(a, e, c, !1), void 0 !== n) || !(this instanceof JSG.graph.model.shapes.BezierShape) && (!d && g & JSG.graph.attr.consts.PortMode.LINESCENTER) && (n = k.getOffsetFromPoint(a, e, c, !0), void 0 !== n))return h.x -= n.x,
                h.y -= n.y, h;
            if (!d && g & JSG.graph.attr.consts.PortMode.SIDESCENTER) {
                k = this._item.getSizeAsPoint();
                n = f(a, new JSG.geometry.Point(0, k.y / 2), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(k.x / 2, 0), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(k.x, k.y / 2), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(k.x / 2, k.y), h);
                if (void 0 !== n)return n
            }
            if (!d && g & JSG.graph.attr.consts.PortMode.SIDESQUARTER) {
                k = this._item.getSizeAsPoint();
                n = f(a, new JSG.geometry.Point(0, k.y / 4), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(0, 0.75 * k.y), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(k.x / 4, 0), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(0.75 * k.x, 0), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(k.x, k.y / 4), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(k.x, 0.75 * k.y), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(k.x / 4, k.y), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(0.75 * k.x, k.y), h);
                if (void 0 !== n)return n
            }
            if (!d && g & JSG.graph.attr.consts.PortMode.CORNERS) {
                k =
                    this._item.getSizeAsPoint();
                n = f(a, new JSG.geometry.Point(0, 0), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(k.x, 0), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(k.x, k.y), h);
                if (void 0 !== n)return n;
                n = f(a, new JSG.geometry.Point(0, k.y), h);
                if (void 0 !== n)return n
            }
            if (void 0 === n && g & JSG.graph.attr.consts.PortMode.SHAPE) {
                n = this.getPolygonPointList().getOffsetFromSegment(a, b, e, c);
                if (void 0 === n)return;
                h = b.copy()
            }
            if (void 0 !== n)return h.x -= n.x, h.y -= n.y, h
        }
    }
};
JSG.graph.model.shapes.Shape.prototype._shapeWillChange = function (a) {
    a = new JSG.graph.model.events.ShapeEvent(a);
    a.doIt = !0;
    a.source = this._item;
    void 0 !== this._item && !0 === this._notificationEnabled && (this._initShapeEvent(a), this._item.sendPreEvent(a));
    return a
};
JSG.graph.model.shapes.Shape.prototype._initShapeEvent = function (a) {
    var b = JSG.graph.model.events.ShapeEvent;
    switch (a.detailId) {
        case b.COORD_ADD:
            a.value = arguments[1];
            break;
        case b.COORDS_INSERT_AT:
            a.index = arguments[1];
            a.value = arguments[2];
            break;
        case b.COORDS_REMOVE_AT:
            a.index = arguments[1];
            a.count = 2 < arguments.length ? arguments[2] : void 0;
            break;
        case b.COORDS_REPLACE_AT:
            a.index = arguments[1];
            3 < arguments.length ? (a.coordX = arguments[2], a.coordY = arguments[3]) : a.coordinate = arguments[2];
            break;
        case b.COORDS_REPLACE_ALL:
            a.value =
                arguments[1]
    }
};
JSG.graph.model.shapes.Shape.prototype._shapeDidChange = function (a) {
    void 0 !== this._item && !0 === this._notificationEnabled && this._item.sendPostEvent(a)
};
JSG.graph.model.shapes.Shape.prototype.evaluate = function () {
    this._evalCoords(this._coordinates)
};
JSG.graph.model.shapes.Shape.prototype._evalCoords = function (a) {
    var b, c;
    if (void 0 !== this._item && !this._item._reading)for (b = 0; b < a.length; b++)c = a[b], c.evaluate(this._item)
};
JSG.graph.model.shapes.Shape.prototype.invalidateTerms = function () {
    var a, b;
    for (a = 0; a < this._coordinates.length; a++)b = this._coordinates[a], b.invalidateTerms()
};
JSG.graph.model.shapes.Shape.prototype.resolveParentReference = function (a) {
    var b = this._coordinates, c, d;
    for (c = 0; c < b.length; c++)d = b[c], d.resolveParentReference(this._item, a)
};
JSG.graph.model.shapes.Shape.prototype.refresh = function () {
    !0 === this._refreshEnabled && this._fillPointList(this._coordpointlist, this.getCoordinates())
};
JSG.namespace("JSG.graph.model.shapes");
JSG.graph.model.shapes.RectangleShape = function () {
    JSG.graph.model.shapes.RectangleShape._super.constructor.apply(this, arguments);
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0), this._newExpression(0)));
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH"), this._newExpression(0)));
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH"), this._newExpression(0, "HEIGHT")));
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0),
        this._newExpression(0, "HEIGHT")))
};
JSG.extend(JSG.graph.model.shapes.RectangleShape, JSG.graph.model.shapes.Shape);
JSG.graph.model.shapes.RectangleShape.TYPE = "rectangle";
JSG.graph.model.shapes.RectangleShape.prototype.getType = function () {
    return JSG.graph.model.shapes.RectangleShape.TYPE
};
JSG.graph.model.shapes.RectangleShape.prototype.newInstance = function () {
    return new JSG.graph.model.shapes.RectangleShape
};
JSG.graph.model.shapes.RectangleShape.prototype.addCoordinate = function (a) {
};
JSG.graph.model.shapes.RectangleShape.prototype.insertCoordinatesAt = function (a, b) {
};
JSG.graph.model.shapes.RectangleShape.prototype.removeCoordinateAt = function (a) {
};
JSG.graph.model.shapes.RectangleShape.prototype.setCoordinates = function (a) {
    4 === a.length && JSG.graph.model.shapes.RectangleShape._super.setCoordinates.call(this, a)
};
JSG.namespace("JSG.graph.model.shapes");
JSG.graph.model.shapes.PolygonShape = function () {
    JSG.graph.model.shapes.PolygonShape._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.model.shapes.PolygonShape, JSG.graph.model.shapes.Shape);
JSG.graph.model.shapes.PolygonShape.TYPE = "polygon";
JSG.graph.model.shapes.PolygonShape.prototype.getType = function () {
    return JSG.graph.model.shapes.PolygonShape.TYPE
};
JSG.graph.model.shapes.PolygonShape.prototype.saveXMLContent = function (a) {
    JSG.graph.model.shapes.PolygonShape._super.saveXMLContent.call(this, a);
    a.writeStartElement("cs");
    for (var b = 0; b < this._coordinates.length; b++)this._coordinates[b].saveXML("c", a);
    a.writeEndElement()
};
JSG.graph.model.shapes.PolygonShape.prototype.readXML = function (a) {
    JSG.graph.model.shapes.PolygonShape._super.readXML.call(this, a);
    var b = a.getElementsByTagName("coordinates")[0];
    void 0 == b && (b = a.getElementsByTagName("cs")[0]);
    if (void 0 != b && b.hasChildNodes()) {
        a = 0;
        for (var c = b.childNodes.length; a < c; a++) {
            var d = b.childNodes.item(a);
            if ("coordinate" == d.nodeName || "c" == d.nodeName) {
                var e = new JSG.graph.Coordinate;
                e.readXML(d);
                this._coordinates.push(e)
            }
        }
    }
};
JSG.graph.model.shapes.PolygonShape.prototype.newInstance = function () {
    return new JSG.graph.model.shapes.PolygonShape(this.isClosed)
};
JSG.graph.model.shapes.PolygonShape.prototype.removeCoordinateAt = function (a) {
    2 < this._coordinates.length && JSG.graph.model.shapes.PolygonShape._super.removeCoordinateAt.call(this, a)
};
JSG.graph.model.shapes.PolygonShape.prototype.setCoordinates = function (a) {
    2 <= a.length && JSG.graph.model.shapes.PolygonShape._super.setCoordinates.call(this, a)
};
JSG.namespace("JSG.graph.model.shapes");
JSG.graph.model.shapes.BezierShape = function () {
    JSG.graph.model.shapes.BezierShape._super.constructor.apply(this, arguments);
    this._cpFromCoordinates = [];
    this._cpToCoordinates = [];
    this._cpFromPoints = new JSG.geometry.PointList;
    this._cpToPoints = new JSG.geometry.PointList
};
JSG.extend(JSG.graph.model.shapes.BezierShape, JSG.graph.model.shapes.PolygonShape);
JSG.graph.model.shapes.BezierShape.TYPE = "bezier";
JSG.graph.model.shapes.BezierShape.prototype.getType = function () {
    return JSG.graph.model.shapes.BezierShape.TYPE
};
JSG.graph.model.shapes.BezierShape.prototype.newInstance = function () {
    return new JSG.graph.model.shapes.BezierShape
};
JSG.graph.model.shapes.BezierShape.prototype.copy = function () {
    var a = this.newInstance();
    a.setCoordinates(this._coordinates);
    a.setCpFromCoordinates(this._cpFromCoordinates);
    a.setCpToCoordinates(this._cpToCoordinates);
    return a
};
JSG.graph.model.shapes.BezierShape.prototype.setCpFromCoordinates = function (a) {
    var b = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORDS_SET_CPFROM, a);
    if (!0 === b.doIt) {
        var c = void 0 !== this._item && !this._item._reading, d;
        this._cpFromCoordinates = [];
        for (d = 0; d < a.length; d++) {
            var e = a[d].copy();
            c && e.evaluate(this._item);
            this._cpFromCoordinates.push(e)
        }
        this.refresh();
        this._shapeDidChange(b)
    }
};
JSG.graph.model.shapes.BezierShape.prototype.setCpToCoordinates = function (a) {
    var b = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORDS_SET_CPTO, a);
    if (!0 === b.doIt) {
        var c = void 0 !== this._item && !this._item._reading, d;
        this._cpToCoordinates = [];
        for (d = 0; d < a.length; d++) {
            var e = a[d].copy();
            c && e.evaluate(this._item);
            this._cpToCoordinates.push(e)
        }
        this.refresh();
        this._shapeDidChange(b)
    }
};
JSG.graph.model.shapes.BezierShape.prototype.evaluate = function () {
    JSG.graph.model.shapes.BezierShape._super.evaluate.call(this);
    if (!this._item || !this._item._reading) {
        var a;
        for (a = 0; a < this._cpFromCoordinates.length; a++)this._cpFromCoordinates[a].evaluate(this._item);
        for (a = 0; a < this._cpToCoordinates.length; a++)this._cpToCoordinates[a].evaluate(this._item)
    }
};
JSG.graph.model.shapes.BezierShape.prototype.invalidateTerms = function () {
    var a;
    for (a = 0; a < this._coordinates.length; a++)this._coordinates[a].invalidateTerms();
    for (a = 0; a < this._cpFromCoordinates.length; a++)this._cpFromCoordinates[a].invalidateTerms();
    for (a = 0; a < this._cpToCoordinates.length; a++)this._cpToCoordinates[a].invalidateTerms()
};
JSG.graph.model.shapes.BezierShape.prototype.getCpFromCoordinates = function () {
    return this._cpFromCoordinates
};
JSG.graph.model.shapes.BezierShape.prototype.getCpToCoordinates = function () {
    return this._cpToCoordinates
};
JSG.graph.model.shapes.BezierShape.prototype.addCpFromCoordinate = function (a) {
    var b = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORD_ADD_CPFROM, a);
    !0 === b.doIt && (this._cpFromCoordinates.push(a), this._shapeDidChange(b))
};
JSG.graph.model.shapes.BezierShape.prototype.addCpToCoordinate = function (a) {
    var b = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORD_ADD_CPTO, a);
    !0 === b.doIt && (this._cpToCoordinates.push(a), this._shapeDidChange(b))
};
JSG.graph.model.shapes.BezierShape.prototype._initShapeEvent = function (a, b) {
    var c = JSG.graph.model.events.ShapeEvent;
    switch (a.detailId) {
        case c.COORD_ADD_CPTO:
        case c.COORD_ADD_CPFROM:
        case c.COORDS_SET_CPTO:
        case c.COORDS_SET_CPFROM:
            a.value = b;
            break;
        default:
            JSG.graph.model.shapes.BezierShape._super._initShapeEvent.call(this, a)
    }
};
JSG.graph.model.shapes.BezierShape.prototype.getCpFromPoints = function (a) {
    return this._cpFromCoordinates.length || void 0 === a ? this.getCpFromPointList().getPoints() : (this.getBezierPoints(a), this._cpFromPoints.getPoints())
};
JSG.graph.model.shapes.BezierShape.prototype.getCpFromPointList = function () {
    return this._cpFromPoints
};
JSG.graph.model.shapes.BezierShape.prototype.getCpToPoints = function (a) {
    return this._cpToCoordinates.length || void 0 === a ? this.getCpToPointList().getPoints() : (this.getBezierPoints(a), this._cpToPoints.getPoints())
};
JSG.graph.model.shapes.BezierShape.prototype.getCpToPointList = function () {
    return this._cpToPoints
};
JSG.graph.model.shapes.BezierShape.prototype.getBezierPoints = function (a) {
    if (!(2 > a.length)) {
        var b, c, d, e;
        this._cpFromPoints.clear();
        this._cpToPoints.clear();
        d = 0;
        for (e = a.length; d < e; d++)0 === d ? (b = 0.2 * (a[d + 1].x - a[d].x), c = 0.2 * (a[d + 1].y - a[d].y)) : d === e - 1 ? (b = 0.2 * (a[d].x - a[d - 1].x), c = 0.2 * (a[d].y - a[d - 1].y)) : (b = 0.2 * (a[d + 1].x - a[d - 1].x), c = 0.2 * (a[d + 1].y - a[d - 1].y)), this._cpToPoints.addPoint(new JSG.geometry.Point(a[d].x + b, a[d].y + c)), this._cpFromPoints.addPoint(new JSG.geometry.Point(a[d].x - b, a[d].y - c))
    }
};
JSG.graph.model.shapes.BezierShape.prototype.saveXMLContent = function (a) {
    JSG.graph.model.shapes.BezierShape._super.saveXMLContent.call(this, a);
    var b;
    a.writeStartElement("cpfrom");
    for (b = 0; b < this._cpFromCoordinates.length; b++)this._cpFromCoordinates[b].saveXML("c", a);
    a.writeEndElement();
    a.writeStartElement("cpto");
    for (b = 0; b < this._cpToCoordinates.length; b++)this._cpToCoordinates[b].saveXML("c", a);
    a.writeEndElement()
};
JSG.graph.model.shapes.BezierShape.prototype.readXML = function (a) {
    JSG.graph.model.shapes.BezierShape._super.readXML.call(this, a);
    var b = a.getElementsByTagName("cpfrom")[0];
    if (void 0 !== b && b.hasChildNodes()) {
        var c, d, e, f;
        c = 0;
        for (d = b.childNodes.length; c < d; c++)if (e = b.childNodes.item(c), "coordinate" === e.nodeName || "c" === e.nodeName)f = new JSG.graph.Coordinate, f.readXML(e), this._cpFromCoordinates.push(f);
        b = a.getElementsByTagName("cpto")[0];
        if (void 0 !== b && b.hasChildNodes())for (c = 0, d = b.childNodes.length; c < d; c++)if (e =
                b.childNodes.item(c), "coordinate" === e.nodeName || "c" === e.nodeName)f = new JSG.graph.Coordinate, f.readXML(e), this._cpToCoordinates.push(f)
    }
};
JSG.graph.model.shapes.BezierShape.prototype.getPolygonPointList = function () {
    function a(a, b, c, d, e) {
        var f = 1 - a;
        return f * f * f * b + 3 * f * f * a * c + 3 * f * a * a * d + a * a * a * e
    }

    var b = new JSG.geometry.PointList, c = this._coordpointlist.getPoints(), d = this._cpToPoints.getPoints(), e = this._cpFromPoints.getPoints();
    d && e && 0 !== d.length && 0 !== e.length || (this.getBezierPoints(c), d = this._cpToPoints.getPoints(), e = this._cpFromPoints.getPoints());
    var f, g, k = this._coordpointlist.size();
    this._item.isClosed() || k--;
    var h, m, l, p;
    for (l = 0; l < k; l++)if (l ===
        c.length - 1 ? (h = c[0], m = e[0]) : (h = c[l + 1], m = e[l + 1]), 1 > Math.abs(c[l].x - d[l].x) && 1 > Math.abs(d[l].x - m.x) && 1 > Math.abs(h.x - m.x))b.addPoint(c[l]), 0 === l && b.addPoint(h); else if (1 > Math.abs(c[l].y - d[l].y) && 1 > Math.abs(d[l].y - m.y) && 1 > Math.abs(c[l].y - e[l].y))b.addPoint(c[l]), 0 === l && b.addPoint(h); else for (p = 0; 1 > p; p += 0.1)f = a(p, c[l].x, d[l].x, m.x, h.x), g = a(p, c[l].y, d[l].y, m.y, h.y), b.addPoint(new JSG.geometry.Point(f, g));
    return b
};
JSG.graph.model.shapes.BezierShape.prototype.containsPoint = function (a, b) {
    if (!a)return !1;
    var c = this.getPolygonPointList();
    if (!c)return !1;
    var d = this._item.isClosed(), e = d, f = JSG.findRadius / this._item.getGraph().getZoom();
    if (b === JSG.graph.controller.FindFlags.AREAWITHFRAME)return c.contains(a) ? !0 : c.distance(a, d) < f;
    if (b !== JSG.graph.controller.FindFlags.AREA && b !== JSG.graph.controller.FindFlags.INNERAREA) {
        var g = this._item.getItemAttributes().getSelectionMode().getValue();
        g & JSG.graph.attr.consts.SelectionMode.DEFAULT ?
            e = this._item.getItemCount() || e && this._item.getFormat().getFillStyle().getValue() !== JSG.graph.attr.FormatAttributes.FillStyle.NONE : g & JSG.graph.attr.consts.SelectionMode.BORDER ? e = !1 : g & JSG.graph.attr.consts.SelectionMode.AREA && (e = !0)
    }
    return e ? c.contains(a) : c.distance(a, d) < f
};
JSG.graph.model.shapes.BezierShape.prototype.refresh = function () {
    JSG.graph.model.shapes.BezierShape._super.refresh.call(this);
    0 < this._cpFromCoordinates.length && this._fillPointList(this._cpFromPoints, this._cpFromCoordinates);
    0 < this._cpToCoordinates.length && this._fillPointList(this._cpToPoints, this._cpToCoordinates)
};
JSG.namespace("JSG.graph.model.shapes");
JSG.graph.model.shapes.EllipseShape = function () {
    JSG.graph.model.shapes.EllipseShape._super.constructor.apply(this, arguments);
    this._cpFromCoordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH * 0.225"), this._newExpression(0, "HEIGHT * 0.0")));
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH * 0.5"), this._newExpression(0, "HEIGHT * 0.0")));
    this._cpToCoordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH * 0.775"), this._newExpression(0, "HEIGHT * 0.0")));
    this._cpFromCoordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH"), this._newExpression(0, "HEIGHT * 0.225")));
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH"), this._newExpression(0, "HEIGHT * 0.5")));
    this._cpToCoordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH"), this._newExpression(0, "HEIGHT * 0.775")));
    this._cpFromCoordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH * 0.775"), this._newExpression(0, "HEIGHT")));
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0,
        "WIDTH * 0.5"), this._newExpression(0, "HEIGHT")));
    this._cpToCoordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH * 0.225"), this._newExpression(0, "HEIGHT")));
    this._cpFromCoordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH * 0"), this._newExpression(0, "HEIGHT * 0.775")));
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0, "WIDTH * 0"), this._newExpression(0, "HEIGHT * 0.5")));
    this._cpToCoordinates.push(new JSG.graph.Coordinate(this._newExpression(0,
        "WIDTH * 0"), this._newExpression(0, "HEIGHT * 0.225")))
};
JSG.extend(JSG.graph.model.shapes.EllipseShape, JSG.graph.model.shapes.BezierShape);
JSG.graph.model.shapes.EllipseShape.TYPE = "ellipse";
JSG.graph.model.shapes.EllipseShape.prototype.getType = function () {
    return JSG.graph.model.shapes.EllipseShape.TYPE
};
JSG.graph.model.shapes.EllipseShape.prototype.newInstance = function () {
    return new JSG.graph.model.shapes.EllipseShape
};
JSG.graph.model.shapes.EllipseShape.prototype.addCoordinate = function (a) {
};
JSG.graph.model.shapes.EllipseShape.prototype.insertCoordinatesAt = function (a, b) {
};
JSG.graph.model.shapes.EllipseShape.prototype.removeCoordinateAt = function (a) {
};
JSG.graph.model.shapes.EllipseShape.prototype.setCoordinates = function (a) {
    4 === a.length && JSG.graph.model.shapes.EllipseShape._super.setCoordinates.call(this, a)
};
JSG.graph.model.shapes.EllipseShape.prototype.saveXMLContent = function (a) {
};
JSG.graph.model.shapes.EllipseShape.prototype.readXML = function (a) {
};
JSG.namespace("JSG.graph.model.shapes");
JSG.graph.model.shapes.LineShape = function () {
    JSG.graph.model.shapes.LineShape._super.constructor.apply(this, arguments);
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0), this._newExpression(0)));
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0), this._newExpression(0)));
    this._tc = this._sc = !1;
    this._vPoints = this._vlPoints = void 0
};
JSG.extend(JSG.graph.model.shapes.LineShape, JSG.graph.model.shapes.Shape);
JSG.graph.model.shapes.LineShape.TYPE = "line";
JSG.graph.model.shapes.LineShape.prototype.getType = function () {
    return JSG.graph.model.shapes.LineShape.TYPE
};
JSG.graph.model.shapes.LineShape.prototype.saveXMLContent = function (a) {
    JSG.graph.model.shapes.LineShape._super.saveXMLContent.call(this, a);
    var b;
    a.writeStartElement("cs");
    for (b = 0; b < this._coordinates.length; b++)this._coordinates[b].saveXML("c", a);
    a.writeEndElement()
};
JSG.graph.model.shapes.LineShape.prototype.readXML = function (a) {
    JSG.graph.model.shapes.LineShape._super.readXML.call(this, a);
    var b = a.getElementsByTagName("coordinates")[0];
    void 0 === b && (b = a.getElementsByTagName("cs")[0]);
    if (void 0 !== b && b.hasChildNodes()) {
        this._coordinates = [];
        var c, d;
        a = 0;
        for (c = b.childNodes.length; a < c; a++) {
            var e = b.childNodes.item(a);
            if ("coordinate" === e.nodeName || "c" === e.nodeName)d = new JSG.graph.Coordinate, d.readXML(e), this._coordinates.push(d)
        }
        b = JSG.ptCache.get();
        this._coordpointlist.keepPoints(this._coordinates.length);
        for (a = 0; a < this._coordinates.length; a++)d = this._coordinates[a], this._coordpointlist.setPointAtTo(a, d.toPoint(b));
        JSG.ptCache.release(b)
    }
};
JSG.graph.model.shapes.LineShape.prototype.newInstance = function () {
    return new JSG.graph.model.shapes.LineShape
};
JSG.graph.model.shapes.LineShape.prototype.setItem = function (a) {
    JSG.graph.model.shapes.LineShape._super.setItem.call(this, a);
    void 0 === this._item || this._item.getLayoutAttributes()instanceof JSG.graph.attr.EdgeLayoutAttributes || this._item.setLayoutAttributes(new JSG.graph.attr.EdgeLayoutAttributes)
};
JSG.graph.model.shapes.LineShape.prototype.getStartCoordinate = function () {
    return 0 !== this._coordinates.length ? this._coordinates[0] : void 0
};
JSG.graph.model.shapes.LineShape.prototype.getEndCoordinate = function () {
    var a = 0 === this._coordinates.length ? -1 : this._coordinates.length - 1;
    return -1 < a ? this._coordinates[a] : void 0
};
JSG.graph.model.shapes.LineShape.prototype.setStartCoordinateTo = function (a) {
    void 0 !== a && this._replaceCoordinateAt(0, a)
};
JSG.graph.model.shapes.LineShape.prototype.setEndCoordinateTo = function (a) {
    var b = 0 === this._coordinates.length ? -1 : this._coordinates.length - 1;
    void 0 !== a && -1 < b && this._replaceCoordinateAt(b, a)
};
JSG.graph.model.shapes.LineShape.prototype._replaceCoordinateAt = function (a, b) {
    if (b instanceof JSG.graph.CoordinateProxy || this._coordinates[a]instanceof JSG.graph.CoordinateProxy || !this._coordinates[a].isEqualTo(b)) {
        var c = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORDS_REPLACE_AT, a, b);
        !0 === c.doIt && (this._coordinates[a] = b, void 0 === this._item || this._item._reading || this._coordinates[a].evaluate(this._item), this.refresh(), this._shapeDidChange(c))
    }
};
JSG.graph.model.shapes.LineShape.prototype.setStartCoordinate = function (a, b) {
    void 0 !== a && void 0 !== b && this.setCoordinateAt(0, a, b)
};
JSG.graph.model.shapes.LineShape.prototype.setEndCoordinate = function (a, b) {
    var c = 0 === this._coordinates.length ? -1 : this._coordinates.length - 1;
    void 0 !== a && (void 0 !== b && -1 < c) && this.setCoordinateAt(c, a, b)
};
JSG.graph.model.shapes.LineShape.prototype.setCoordinates = function (a) {
    1 < this._coordinates.length && JSG.graph.model.shapes.LineShape._super.setCoordinates.call(this, a)
};
JSG.graph.model.shapes.LineShape.prototype.containsPoint = function (a, b, c) {
    return -1 !== this.getLineSegmentAtPoint(a, c)
};
JSG.graph.model.shapes.LineShape.prototype.getLineSegmentAtPoint = function (a, b) {
    var c = -1;
    if (void 0 !== a) {
        var d = this.getVisiblePoints(), e = d.length - 1, f, g, k;
        b = void 0 !== b ? b : 1;
        for (k = 0; k < e; k++)if (f = d[k], g = d[k + 1], f = JSG.geometry.Utils.getLinePointDistance(f, g, a), f < b) {
            c = k;
            break
        }
    }
    return c
};
JSG.graph.model.shapes.LineShape.prototype.getBoundingBox = function (a) {
};
JSG.graph.model.shapes.LineShape.prototype.getVisiblePoints = function () {
    function a(a, b, c, d, e) {
        var f = 0, h, g, k;
        if (!isNaN(b.x) && !isNaN(c.x)) {
            g = 0;
            for (k = a.length - 1; g < k; g++)if (JSG.geometry.Utils.getIntersectionOfLines(a[g], a[g + 1], b, c, d, !1) && (void 0 === h && (h = d.copy()), 1 === f && 2 > Math.abs(h.x - d.x) && 2 > Math.abs(h.y - d.y) && f--, f++, 1 < f))return f;
            e && JSG.geometry.Utils.getIntersectionOfLines(a[g], a[0], b, c, d, !1) && (1 === f && 2 > Math.abs(h.x - d.x) && 2 > Math.abs(h.y - d.y) && f--, f++);
            return f
        }
    }

    function b(b, d, e, f, h) {
        var g = b.getParent(),
            k = g.isClosed();
        if (g.getItemAttributes().getPortMode().getValue() & JSG.graph.attr.consts.PortMode.CENTERSTARTATSIDE)g = g.getTranslatedBoundingBox(e).getPoints(), k = !0; else {
            if (!g.isClosed())return;
            g = g.getTranslatedShapePoints(e)
        }
        var l = 0, m = 0, p = new JSG.geometry.Point(0, 0), n, q;
        if ((!h || JSG.geometry.Utils.isPointInPolygon(g, d[0])) && (h || JSG.geometry.Utils.isPointInPolygon(g, d[d.length - 1]))) {
            var E;
            n = 0;
            for (q = d.length - 1; n < q; n++) {
                E = a(g, d[n], d[n + 1], p, k);
                if (1 < E)return;
                l += E;
                if (1 === E && 1 === l) {
                    if (f.setTo(p), m = n, h && c instanceof
                        JSG.graph.model.shapes.OrthoLineShape && b.getParent().getShape()instanceof JSG.graph.model.shapes.RectangleShape)break
                } else if (1 < l)if (E = JSG.geometry.Utils.getLineLength(p, d[n]), void 0 !== E && 50 > E || !h && c instanceof JSG.graph.model.shapes.OrthoLineShape && b.getParent().getShape()instanceof JSG.graph.model.shapes.RectangleShape)m = n, f.setTo(p), l = 1; else break
            }
            1 === l && JSG.graph.Utils.traverseItemDown(e, c._item, function (a) {
                a.translateFromParent(f);
                return !0
            });
            return 1 !== l ? void 0 : m
        }
    }

    var c = this, d = this._item.getSourcePort(),
        e = this._item.getTargetPort(), f = this.getPoints(), g, k;
    if (!d && !e || 0 === f.length || d && e && d.getParent() === e.getParent())return f;
    if (this._vPoints && this._vlPoints && this._vPoints.length === f.length) {
        g = 0;
        for (k = f.length; g < k && f[g].isEqualTo(this._vPoints[g]); g++);
        if (!(d && this._sc !== d.getParent().isCollapsed() || e && this._tc !== e.getParent().isCollapsed() || g !== k))return this._vlPoints
    }
    g = this._item.getGraph();
    var h = this._item.getTranslatedShapePoints(g), m = new JSG.geometry.Point(0, 0);
    k = 0;
    var l = f.length - 1, p = f[0], n = f[l],
        q;
    d && (q = b(d, h, g, m, !0), void 0 !== q && (k = q, p = m.copy()));
    e && (q = b(e, h, g, m, !1), void 0 !== q && (l = q + 1, n = m.copy()));
    h = [];
    for (g = k; g <= l; g++)void 0 !== p && g === k ? h.push(p) : g === l && n ? h.push(n) : h.push(f[g]);
    2 === h.length && h[0].isEqualTo(h[1], 50) && (h.length = 0);
    this._vPoints = [];
    g = 0;
    for (k = f.length; g < k; g++)this._vPoints.push(f[g].copy());
    this._vlPoints = [];
    g = 0;
    for (k = h.length; g < k; g++)this._vlPoints.push(h[g].copy());
    this._sc = d ? d.getParent().isCollapsed() : !1;
    this._tc = e ? e.getParent().isCollapsed() : !1;
    return h
};
JSG.graph.model.shapes.LineShape.prototype.invalidateVisiblePoints = function () {
    this._tc = this._sc = !1;
    this._vPoints = this._vlPoints = void 0
};
JSG.graph.model.shapes.LineShape.prototype.getValidPortLocations = function (a, b) {
};
JSG.graph.model.shapes.LineShape.prototype.getValidPortLocation = function (a, b, c, d, e) {
};
JSG.namespace("JSG.graph.model.shapes");
JSG.graph.model.shapes.OrthoLineShape = function () {
    JSG.graph.model.shapes.OrthoLineShape._super.constructor.apply(this, arguments);
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0), this._newExpression(0)));
    this._coordinates.push(new JSG.graph.Coordinate(this._newExpression(0), this._newExpression(0)));
    this._layouter = new JSG.graph.model.shapes.OrthoLineShapeLayouter(this)
};
JSG.extend(JSG.graph.model.shapes.OrthoLineShape, JSG.graph.model.shapes.LineShape);
JSG.graph.model.shapes.OrthoLineShape.TYPE = "ortholine";
JSG.graph.model.shapes.OrthoLineShape.prototype.getType = function () {
    return JSG.graph.model.shapes.OrthoLineShape.TYPE
};
JSG.graph.model.shapes.OrthoLineShape.prototype.newInstance = function () {
    return new JSG.graph.model.shapes.OrthoLineShape
};
JSG.graph.model.shapes.OrthoLineShape.prototype.setItem = function (a) {
    JSG.graph.model.shapes.OrthoLineShape._super.setItem.call(this, a);
    void 0 !== this._item && (this._item.getLayoutAttributes()instanceof JSG.graph.attr.OrthoEdgeLayoutAttributes || this._item.setLayoutAttributes(new JSG.graph.attr.OrthoEdgeLayoutAttributes))
};
JSG.graph.model.shapes.OrthoLineShape.prototype.init = function () {
    this.layout()
};
JSG.graph.model.shapes.OrthoLineShape.prototype.layout = function () {
    function a(a, b) {
        return a.x * b.x + a.y * b.y
    }

    function b(b, c, e) {
        var m = f.length - 1;
        if (1 < m) {
            var l = !0, p = f[0].toPoint(JSG.ptCache.get()), n = f[1].toPoint(JSG.ptCache.get()), q = f[2].toPoint(JSG.ptCache.get()), r = JSG.ptCache.get().setTo(n).subtract(q);
            1 < r.lengthSquared() && (b = e._layouter._getOrthoDirectionFrom(b, f, 0, m, c, JSG.ptCache.get(0, 0)), r.isParallelTo(b) ? (e._layouter._layoutAuto(), l = !1) : (c = JSG.ptCache.get().setTo(b).setLength(d).add(p), a(n, b) < a(c,
                b) && (e._layouter._layoutAuto(), l = !1), JSG.ptCache.release(c)), JSG.ptCache.release(b));
            !0 === l && e._setCoordinateAtToPoint(0, p);
            JSG.ptCache.release(p, n, q, r)
        }
    }

    function c(b, c, e) {
        var m = f.length - 1;
        if (1 < m) {
            var l = !0, p = f[m].toPoint(JSG.ptCache.get()), n = f[m - 1].toPoint(JSG.ptCache.get()), q = f[m - 2].toPoint(JSG.ptCache.get()), r = JSG.ptCache.get().setTo(n).subtract(q);
            if (1 < r.lengthSquared()) {
                b = e._layouter._getOrthoDirectionFrom(b, f, m, 0, c, JSG.ptCache.get(0, 0));
                if (r.isParallelTo(b))e._layouter._layoutAuto(), l = !1; else {
                    c =
                        JSG.ptCache.get().setTo(b).setLength(d).add(p);
                    var t = a(c, b), u = a(n, b);
                    !JSG.Numbers.areEqual(t, u, 0.01) && u < t && (e._layouter._layoutAuto(), l = !1);
                    JSG.ptCache.release(c)
                }
                JSG.ptCache.release(b)
            }
            !0 === l && e._setCoordinateAtToPoint(m, p);
            JSG.ptCache.release(p, n, q, r)
        }
    }

    var d = JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT, e = this._item, f = this._coordinates;
    void 0 !== e && 0 !== f.length && (e = e.getLayoutAttributes().getLineBehavior().getValue(), e === JSG.graph.attr.consts.LineBehavior.MANUAL ? (this._item.hasSourceAttached() &&
    b(this._item.getSourcePort(), e, this), this._item.hasTargetAttached() && c(this._item.getTargetPort(), e, this)) : e !== JSG.graph.attr.consts.LineBehavior.DISABLED && (JSG.debug.log("ortho shape do autolayout...", JSG.debug.DEBUG_ORTHO), this._layouter.layout(e)))
};
JSG.graph.model.shapes.OrthoLineShape.prototype.layoutFrom = function (a) {
    this._layouter.layoutFrom(a)
};
JSG.graph.model.shapes.OrthoLineShape.prototype.setCoordinateAtToPoint = function (a, b) {
    if (0 <= a && a < this._coordinates.length) {
        var c = this._shapeWillChange(JSG.graph.model.events.ShapeEvent.COORDS_REPLACE_AT, a, b.x, b.y);
        !0 === c.doIt && (this._setCoordinateAtToPoint(a, b), this.refresh(), this._shapeDidChange(c))
    }
};
JSG.graph.model.shapes.OrthoLineShape.prototype._setCoordinateAtToPoint = function (a, b) {
    function c(a, b, c) {
        if (g === JSG.graph.attr.consts.LineBehavior.MANUAL) {
            var d = JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT, e = JSG.ptCache.get().setTo(b).subtract(a), f = JSG.ptCache.get().setTo(a).add(c);
            if (0 !== c.x) {
                if (!JSG.Numbers.haveSameSign(c.x, e.x) || f.set(e.x, f.y).length() < d)b.x = a.x + c.x * d
            } else if (!JSG.Numbers.haveSameSign(c.y, e.y) || f.set(f.x, e.y).length() < d)b.y = a.y + c.y * d;
            JSG.ptCache.release(e, f)
        }
        return b
    }

    function d(a, b) {
        if (!(0 > a || a > f)) {
            var c = e[a].toPoint(JSG.ptCache.get()), d = JSG.ptCache.get().setTo(k), h = JSG.ptCache.get(), g = a - 1, l = a + 1;
            JSG.Numbers.isEven(a) && d.swap();
            l <= f && b._layouter.biasPoint(c, e[l].toPoint(h), d);
            0 <= g && b._layouter.biasPoint(c, e[g].toPoint(h), d.swap());
            e[a].setToPoint(c);
            JSG.ptCache.release(c, d, h)
        }
    }

    var e = this._coordinates, f = e.length - 1, g = this._item.getLayoutAttributes().getLineBehavior().getValue(), k = this._getOrthogonalStartDirection(e, JSG.ptCache.get()), h = JSG.ptCache.get().setTo(k).swap(),
        m = a + 1, l = a - 1;
    (function (a, d) {
        if (a <= f) {
            var h = d._item, l = h.getTargetPort(), m = JSG.ptCache.get(0, 0);
            void 0 !== l ? d._layouter.getOrthoDirectionFromPort(l, f, 0, g, m) : m.setTo(k);
            var l = JSG.ptCache.get().setTo(m).swap(), u = JSG.ptCache.get();
            a === f && h.hasTargetAttached() ? (e[a].toPoint(u), d._layouter.biasPoint(b, u, l), c(u, b, m)) : a === f - 1 && h.hasTargetAttached() && c(e[a + 1].toPoint(u), b, m);
            JSG.ptCache.release(m, l, u)
        }
    })(m, this);
    (function (a, d) {
        if (0 <= a) {
            var f = JSG.ptCache.get();
            0 === a && d._item.hasSourceAttached() ? (e[a].toPoint(f),
                d._layouter.biasPoint(b, f, h), c(f, b, k)) : 1 === a && d._item.hasSourceAttached() && c(e[a - 1].toPoint(f), b, k);
            JSG.ptCache.release(f)
        }
    })(l, this);
    e[a].setToPoint(b);
    d(l, this);
    d(m, this);
    JSG.ptCache.release(k, h)
};
JSG.graph.model.shapes.OrthoLineShape.prototype._getOrthogonalStartDirection = function (a, b) {
    function c(c) {
        c = JSG.ptCache.get();
        var d;
        for (d = 0; d < a.length - 1; d++)if (a[d].toPoint(k), a[d + 1].toPoint(h), 0 < c.setTo(h).subtract(k).lengthSquared()) {
            f.getOrthoDirectionFromLine(k, h, b);
            JSG.Numbers.isEven(d) || b.swap();
            break
        }
        JSG.ptCache.release(c);
        return b
    }

    function d() {
        var c = a[1].toPoint(h).subtract(a[0].toPoint(k));
        0 > c.x && (b.x = -b.x);
        0 > c.y && (b.y = -b.y)
    }

    var e = a.length - 1, f = this._layouter, g = this._item.getLayoutAttributes().getLineBehavior().getValue(),
        k = JSG.ptCache.get(), h = JSG.ptCache.get(), m = this._item.getSourcePort();
    if (void 0 !== m)f.getOrthoDirectionFromPort(m, 0, e, g, b); else switch (m = JSG.graph.attr.consts.LineBehavior, g) {
        case m.AUTO:
            f.getOrthoDirectionFromLine(a[0].toPoint(k), a[e].toPoint(h), b);
            break;
        case m.MANUAL:
            c(this);
            break;
        case m.HORIZONTAL:
            b.set(1, 0);
            d();
            break;
        case m.VERTICAL:
            b.set(0, 1), d()
    }
    JSG.ptCache.release(k, h);
    return b
};
JSG.graph.model.shapes.OrthoLineShape.prototype.getOrthoDirectionFromPort = function (a, b, c, d) {
    return this._layouter.getOrthoDirectionFromPort(a, b, c, void 0, d)
};
JSG.graph.model.shapes.OrthoLineShape.prototype.getOrthoDirectionFromLine = function (a, b, c) {
    return this._layouter.getOrthoDirectionFromLine(a, b, c)
};
JSG.graph.model.shapes.OrthoLineShape.prototype._fillPointList = function (a, b) {
    this.layout();
    JSG.graph.model.shapes.OrthoLineShape._super._fillPointList.call(this, a, b)
};
JSG.namespace("JSG.graph.model.shapes");
JSG.graph.model.shapes.OrthoLineBehavior = JSG.graph.attr.consts.LineBehavior;
JSG.graph.model.shapes.OrthoLineShapeLayouter = function (a) {
    this._shape = a;
    this._isEnabled = !0
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT = 500;
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype.layout = function (a) {
    this._isEnabled && a !== JSG.graph.attr.consts.LineBehavior.DISABLED && (a === JSG.graph.attr.consts.LineBehavior.MANUAL ? this._layoutManual(a) : this._layoutAuto(a))
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._layoutManual = function (a) {
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._layoutAuto = function (a) {
    var b = this._shape._item, c = this._shape._coordinates, d = c.length - 1, e = c[0].toPoint(JSG.ptCache.get()), f = b.getSourcePort(), f = this._getOrthoDirectionFrom(f, c, 0, d, a, JSG.ptCache.get()), g = c[d].toPoint(JSG.ptCache.get()), b = b.getTargetPort(), d = this._getOrthoDirectionFrom(b, c, d, 0, a, JSG.ptCache.get());
    f.fromPort || d.fromPort ? f.fromPort && !d.fromPort ? (f.segmentpt && e.setTo(f.segmentpt), this._routeFromSource(e, f)) : (f.segmentpt && e.setTo(f.segmentpt),
    d.segmentpt && g.setTo(d.segmentpt), this._routeLine(e, f, g, d, !0)) : this._routeNotAttached(c, a);
    f.fromPort = void 0;
    f.segmentpt = void 0;
    d.fromPort = void 0;
    d.segmentpt = void 0;
    JSG.ptCache.release(e, f, g, d)
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._routeNotAttached = function (a, b) {
    var c = a[0].toPoint(JSG.ptCache.get(0, 0)), d = a[a.length - 1].toPoint(JSG.ptCache.get(0, 0));
    this._requires(4, a);
    var e = JSG.ptCache.get().setTo(c).add(d).multiply(0.5);
    this._doBreakHorizontal(c, d, b) ? (a[1].set(c.x, e.y), a[2].set(d.x, e.y)) : (a[1].set(e.x, c.y), a[2].set(e.x, d.y));
    JSG.ptCache.release(c, d, e)
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._doBreakHorizontal = function (a, b, c) {
    var d = JSG.graph.attr.consts.LineBehavior;
    return d.AUTO === c ? 1 < Math.abs((b.y - a.y) / (b.x - a.x)) : d.HORIZONTAL === c
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._routeFromSource = function (a, b) {
    var c = this._shape._coordinates, d = c[c.length - 1].toPoint(JSG.ptCache.get(0, 0)), e = JSG.ptCache.get().setTo(a).add(d).multiply(0.5), f = JSG.ptCache.get().setTo(e).subtract(a), g;
    f.set(f.x * Math.abs(b.x), f.y * Math.abs(b.y));
    JSG.Numbers.areEqual(f.x, 0, 1E-4) && JSG.Numbers.areEqual(f.y, 0, 1E-4) && f.setTo(b);
    var k = f.length();
    0 !== b.x ? (g = f.x, (!JSG.Numbers.haveSameSign(g, b.x) || k < JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT) &&
    f.setLength(JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT), JSG.Numbers.haveSameSign(g, b.x) || (f.x = -f.x)) : (g = f.y, (!JSG.Numbers.haveSameSign(g, b.y) || k < JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT) && f.setLength(JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT), JSG.Numbers.haveSameSign(g, b.y) || (f.y = -f.y));
    f.add(a);
    this._requires(4, c);
    this.biasPoint(f, a, b.swap());
    c[1].setToPoint(f);
    this.biasPoint(f, d, b);
    c[2].setToPoint(f);
    JSG.ptCache.release(d, e, f)
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype.pointsInDirection = function (a, b, c) {
    a = JSG.ptCache.get().setTo(b).subtract(a);
    c = JSG.Numbers.haveSameSign(a.x, c.x) && JSG.Numbers.haveSameSign(a.y, c.y);
    JSG.ptCache.release(a);
    return c
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype.biasPoint = function (a, b, c) {
    0 !== c.x ? a.x = b.x : a.y = b.y;
    return a
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._getOrthoDirectionFrom = function (a, b, c, d, e, f) {
    var g = JSG.graph.attr.consts.LineBehavior, k = JSG.ptCache.get(0, 0), h = JSG.ptCache.get(0, 0);
    if (a)this.getOrthoDirectionFromPort(a, c, d, e, f), f.fromPort = !0; else switch (f.valid = !1, f.fromPort = void 0, e) {
        case g.HORIZONTAL:
            f.valid = !0;
            f.setTo(this._getOrthoDirectionFromPoint(1, 0, b[c].toPoint(k), b[d].toPoint(h)));
            break;
        case g.VERTICAL:
            f.valid = !0;
            f.setTo(this._getOrthoDirectionFromPoint(0, 1, b[c].toPoint(k), b[d].toPoint(h)));
            break;
        case g.MANUAL:
            f = this._getOrthoDirectionFromLineSegment(b, 0 === c, f)
    }
    !1 === f.valid && (f.valid = void 0, this.getOrthoDirectionFromLine(b[c].toPoint(k), b[d].toPoint(h), f));
    JSG.ptCache.release(k, h);
    return f
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype.getOrthoDirectionFromPort = function (a, b, c, d, e) {
    function f(a, b, c) {
        function d(a, b) {
            g.set(a, b).rotate(E);
            D = (p + JSG.geometry.Utils.getAngleBetweenLines(f, g)) % p;
            D = D < Math.PI ? D : p - D;
            D < x && (e.set(a, b), x = D)
        }

        var e = c, f = JSG.ptCache.get(), g = JSG.ptCache.get(), l = n.getIntersectionIndex(a, b), p = 2 * Math.PI, D = 0, x = 1E3 * Math.PI, B = 0, E = 0;
        switch (l) {
            case 0:
                f.set(0, -1);
                break;
            case 1:
                f.set(1, 0);
                break;
            case 2:
                f.set(0, 1);
                break;
            case 3:
                f.set(-1, 0);
                break;
            default:
                f.setTo(k.getOrthoDirectionFromLine(a,
                    b, c))
        }
        a = f.x;
        b = f.y;
        c = h.getGraph();
        JSG.graph.Utils.traverseItemUp(h, c, function (a) {
            B += a.getAngle().getValue()
        });
        f.rotate(B);
        JSG.graph.Utils.traverseItemUp(m, c, function (a) {
            E += a.getAngle().getValue()
        });
        d(a, b);
        d(b, a);
        d(-a, -b);
        d(-b, -a);
        -1 < l && (a = n.getCornerAt(l % 4, JSG.ptCache.get()), l = n.getCornerAt((l + 1) % 4, JSG.ptCache.get()), b = n.getCenter(JSG.ptCache.get(), !0), c = JSG.ptCache.get().setTo(e), JSG.geometry.Utils.rotatePoint(c, m.getAngle().getValue()), c.add(b), q = new JSG.geometry.Point, JSG.geometry.Utils.getIntersectionOfLines(a,
            l, b, c, q, !0) ? m.translateFromParent(q) : q = void 0, JSG.ptCache.release(a, l, b, c));
        JSG.ptCache.release(f, g);
        return e
    }

    function g(a) {
        var c = JSG.graph.attr.consts.LineBehavior;
        switch (d) {
            case c.HORIZONTAL:
                return k._getOrthoDirectionFromPoint(1, 0, l, p);
            case c.VERTICAL:
                return k._getOrthoDirectionFromPoint(0, 1, l, p);
            case c.MANUAL:
                return k._getOrthoDirectionFromLineSegment(k._shape._coordinates, 0 === b, a) || f(l, p);
            default:
                return f(l, p, a)
        }
    }

    var k = this, h = a.getParent(), m = k._shape._item;
    a = JSG.ptCache.get();
    var l = m.getPointAt(b,
        JSG.ptCache.get()), p = m.getPointAt(c, JSG.ptCache.get()), n = h.getTranslatedBoundingBox(m.getParent(), JSG.boxCache.get());
    c = n.getCenter(JSG.ptCache.get()).add(n.getTopLeft(a));
    var q;
    l.isEqualTo(c, 10) ? (e.setTo(g(e)), e.segmentpt = q) : f(c, l, e);
    JSG.boxCache.release(n);
    JSG.ptCache.release(l, p, c, a);
    return e
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._getOrthoDirectionFromPoint = function (a, b, c, d) {
    c = d.subtract(c);
    c.x *= a;
    c.y *= b;
    return this._roundedOrthoPoint(c.normalize())
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._getOrthoDirectionFromLineSegment = function (a, b, c) {
    var d = JSG.ptCache.get(), e = JSG.ptCache.get();
    c = c || new JSG.geometry.Point;
    var f, g;
    c.valid = !1;
    if (b)for (f = 0, g = a.length - 2; f < g; f++) {
        if (0 < a[f + 1].toPoint(e).subtract(a[f].toPoint(d)).lengthSquared()) {
            c.valid = !0;
            break
        }
    } else for (f = a.length - 1, g = 0; f > g; f--)if (0 < a[f - 1].toPoint(e).subtract(a[f].toPoint(d)).lengthSquared()) {
        c.valid = !0;
        break
    }
    c.valid && (c.setTo(e), c.normalize(), (b ? JSG.Numbers.isEven(f) : JSG.Numbers.isEven(a.length -
    1) === JSG.Numbers.isEven(f)) || c.swap(), this._roundedOrthoPoint(c));
    JSG.ptCache.release(d, e);
    return c
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype.getOrthoDirectionFromLine = function (a, b, c) {
    a = b.subtract(a);
    return this.getOrthoDirectionByAngle(a.angle(), c)
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype.getOrthoDirectionByAngle = function (a, b) {
    a > -Math.PI_4 && a < Math.PI_4 ? b.set(1, 0) : 0 < a && a < 3 * Math.PI_4 ? b.set(0, 1) : 0 > a && a > -3 * Math.PI_4 ? b.set(0, -1) : b.set(-1, 0);
    return b
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._roundedOrthoPoint = function (a) {
    JSG.Numbers.areEqual(a.x, 0, 1E-4) ? (a.x = 0, a.y = 0 < a.y ? 1 : -1) : (a.x = 0 < a.x ? 1 : -1, a.y = 0);
    return a
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype.layoutFrom = function (a) {
    var b = this._shape._item;
    this._shape._item.getSourcePort() === a ? this._layoutFromSource(a, b) : this._layoutFromTarget(a, b)
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._layoutFromTarget = function (a, b) {
    var c = this._shape._coordinates, d = c.length - 1;
    if (1 < d) {
        var e = this._directionFromPort(a, d, 0, JSG.ptCache.get());
        e.fromPort = !0;
        var f = e.segmentpt || c[d].toPoint(JSG.ptCache.get()), g = c[d - 1].toPoint(JSG.ptCache.get()), k = c[d - 2].toPoint(JSG.ptCache.get()), h = JSG.ptCache.get().setTo(g).subtract(k);
        h.fromPort = this.isAttached(d - 2, c);
        var h = this._roundedOrthoPoint(h), m = this._routeLine(k, h, f, e);
        c[d - 1].setTo(m.shift());
        JSG.Arrays.insertAt(c,
            d, m);
        e.fromPort = void 0;
        e.segmentpt = void 0;
        h.fromPort = void 0;
        JSG.ptCache.release(e, f, g, k, h)
    }
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._layoutFromSource = function (a, b) {
    var c = this._shape._coordinates, d = c.length - 1;
    if (1 < d) {
        d = this._directionFromPort(a, 0, d, JSG.ptCache.get());
        d.fromPort = !0;
        var e = d.segmentpt || c[0].toPoint(JSG.ptCache.get()), f = c[1].toPoint(JSG.ptCache.get()), g = c[2].toPoint(JSG.ptCache.get()), k = JSG.ptCache.get().setTo(f).subtract(g);
        k.fromPort = this.isAttached(2, c);
        var k = this._roundedOrthoPoint(k), h = this._routeLine(e, d, g, k);
        c[1].setTo(h.pop());
        JSG.Arrays.insertAt(c, 1,
            h);
        d.fromPort = void 0;
        d.segmentpt = void 0;
        k.fromPort = void 0;
        JSG.ptCache.release(d, e, f, g, k)
    }
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._directionFromPort = function (a, b, c, d) {
    var e = this._shape._item.getLayoutAttributes().getLineBehavior().getValue();
    return this.getOrthoDirectionFromPort(a, b, c, e, d)
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype.isAttached = function (a, b) {
    var c = this._shape._item, d = b.length - 1;
    return 0 === a && c.hasSourceAttached() || a === d && c.hasTargetAttached()
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._routeLine = function (a, b, c, d, e) {
    var f = JSG.ptCache.get(), g = JSG.ptCache.get(), k = JSG.ptCache.get(), h;
    if (d.isParallelTo(b))if (0 !== b.x ? JSG.Numbers.haveSameSign(d.x, b.x) : JSG.Numbers.haveSameSign(d.y, b.y)) {
        e = this._workCoordinates(2, e);
        h = this._getValueInDirection(a, b);
        var m = this._getValueInDirection(c, d);
        h > m ? this._breakAt(e, 0, a, 1, c, b) : this._breakAt(e, 1, c, 0, a, d)
    } else 0 !== b.y && 50 > Math.abs(a.x - c.x) || 0 !== b.x && 50 > Math.abs(a.y - c.y) ? e = this._workCoordinates(0,
        e) : (this._getMinDistance(a, b, f), this._getMinDistance(c, d, g), d = this._getValueInDirection(f, b), h = this._getValueInDirection(g, b), d > h ? (e = this._workCoordinates(4, e), k.setTo(c).subtract(a), k.x *= Math.abs(b.y) / 2, k.y *= Math.abs(b.x) / 2, e[0].setToPoint(f), e[1].setToPoint(k.add(f)), this.biasPoint(k, g, b), e[2].setToPoint(k), e[3].setToPoint(g)) : (e = this._workCoordinates(2, e), this._breakAt(e, 0, a, 1, c, b, (h - d) / 2 + JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT))); else {
        h = JSG.ptCache.get(0, 0);
        var m = JSG.ptCache.get().setTo(a),
            l = JSG.ptCache.get().setTo(c);
        JSG.geometry.Utils.getIntersectionOfLines(a, m.add(b), c, l.add(d), h, !0);
        this.biasPoint(h, c, b);
        var p = this.pointsInDirection(a, h, b) && !h.isEqualTo(a, 1E-4), n = this.pointsInDirection(c, h, d) && !h.isEqualTo(c, 1E-4);
        p && n ? (e = this._workCoordinates(1, e), e[0].setToPoint(h)) : p || n ? p && !n ? (e = this._workCoordinates(3, e), this._getMinDistance(a, b, f), this._getMinDistance(c, d, g), k.setTo(g).subtract(f).multiply(0.5).add(f), this.biasPoint(f, k, b), e[0].setToPoint(f), this.biasPoint(f, g, b.swap()), e[1].setToPoint(f),
            e[2].setToPoint(g)) : !p && n ? (e = this._workCoordinates(3, e), this._getMinDistance(a, b, f), this._getMinDistance(c, d, g), k.setTo(f).subtract(g).multiply(0.5).add(g), this.biasPoint(g, k, d), e[2].setToPoint(g), this.biasPoint(g, f, d.swap()), e[1].setToPoint(g), e[0].setToPoint(f)) : (e = this._workCoordinates(4, e), this._getMinDistance(a, b, f), this._getMinDistance(c, d, g), this._getValueInDirection(f, b), this._getValueInDirection(g, b), k.setTo(c).subtract(a), k.x *= Math.abs(b.y) / 2, k.y *= Math.abs(b.x) / 2, e[0].setToPoint(f), e[1].setToPoint(k.add(f)),
            this.biasPoint(k, g, b.swap()), e[2].setToPoint(k), e[3].setToPoint(g)) : (e = this._workCoordinates(3, e), this._getMinDistance(a, b, f), this._getMinDistance(c, d, g), this._getValueInDirection(f, b), this._getValueInDirection(g, d), e[0].setToPoint(f), this.biasPoint(f, g, b.swap()), e[1].setToPoint(f), e[2].setToPoint(g));
        JSG.ptCache.release(h, m, l)
    }
    JSG.ptCache.release(k, f, g);
    return e
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._workCoordinates = function (a, b) {
    var c, d, e = [];
    if (b) {
        var f = this._shape._coordinates;
        this._requires(a + 2, f);
        c = 1;
        for (d = a + 1; c < d; c++)e.push(f[c])
    } else for (c = 0; c < a; c++)e.push(new JSG.graph.Coordinate);
    return e
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._requires = function (a, b) {
    var c;
    if (b.length < a)for (c = b.length; c < a; c++)JSG.Arrays.insertAt(b, 1, JSG.graph.Coordinate.fromXY(0, 0)); else if (b.length > a)for (c = b.length; c > a; c--)JSG.Arrays.removeAt(b, 1)
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._getValueInDirection = function (a, b) {
    return a.x * b.x + a.y * b.y
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._breakAt = function (a, b, c, d, e, f, g) {
    g = g || JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT;
    c = JSG.ptCache.get().setTo(f).setLength(g).add(c);
    a[b].setToPoint(c);
    this.biasPoint(c, e, f.swap());
    a[d].setToPoint(c);
    JSG.ptCache.release(c)
};
JSG.graph.model.shapes.OrthoLineShapeLayouter.prototype._getMinDistance = function (a, b, c) {
    var d = b.fromPort ? JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT : 1;
    c.setTo(b).setLength(d);
    return c.add(a)
};
JSG.namespace("JSG.graph.model.shapes");
JSG.graph.model.shapes.ShapeFactory = function () {
    return {
        createShapeFromString: function (a) {
            switch (a) {
                case JSG.graph.model.shapes.EllipseShape.TYPE:
                    return new JSG.graph.model.shapes.EllipseShape;
                case JSG.graph.model.shapes.RectangleShape.TYPE:
                    return new JSG.graph.model.shapes.RectangleShape;
                case JSG.graph.model.shapes.BezierShape.TYPE:
                    return new JSG.graph.model.shapes.BezierShape;
                case JSG.graph.model.shapes.PolygonShape.TYPE:
                    return new JSG.graph.model.shapes.PolygonShape;
                case JSG.graph.model.shapes.LineShape.TYPE:
                    return new JSG.graph.model.shapes.LineShape;
                case JSG.graph.model.shapes.OrthoLineShape.TYPE:
                    return new JSG.graph.model.shapes.OrthoLineShape;
                default:
                    return new JSG.graph.model.shapes.Shape
            }
        }
    }
}();
JSG.namespace("JSG.graph.model");
JSG.graph.model.ConnectionRestorer = function () {
    this._idMap = new JSG.commons.Map;
    this.edges = [];
    this.expressions = []
};
JSG.graph.model.ConnectionRestorer.prototype.addId = function (a, b) {
    this._idMap.put(String(a), b)
};
JSG.graph.model.ConnectionRestorer.prototype.updateIds = function (a) {
    var b, c, d;
    for (b = 0; b < this.expressions.length; b++) {
        var e = this.expressions[b].getFormula();
        if (void 0 !== e) {
            var f = 0;
            for (d = e.length; -1 !== (c = e.indexOf("Item.", f));) {
                for (var g = f = c + 5; g < d && "!" !== e[g];)g++;
                if ("!" === e[g])c = Number(e.substring(f, g)), c = Number(this._idMap.get(c)), isNaN(c) || (e = JSG.Strings.remove(e, f, g - f), e = JSG.Strings.insert(e, f, c)); else break
            }
            this.expressions[b].setFormula(e)
        }
    }
    for (b = 0; b < this.edges.length; b++)e = this.edges[b], e.disableRefresh(),
        e.getShape().disableRefresh(), void 0 !== e.sourcePortId && (c = Number(this._idMap.get(e.sourcePortId)), d = a.getPortById(c), void 0 !== d ? e.setSourcePort(d) : (this._clearCoordinate(e.getStartCoordinate()), this._disableAutoLayout(e)), e.sourcePortId = void 0), void 0 !== e.targetPortId && (c = Number(this._idMap.get(e.targetPortId)), d = a.getPortById(c), void 0 !== d ? e.setTargetPort(d) : (this._clearCoordinate(e.getEndCoordinate()), this._disableAutoLayout(e)), e.targetPortId = void 0), e.enableRefresh(), e.getShape().enableRefresh()
};
JSG.graph.model.ConnectionRestorer.prototype._clearCoordinate = function (a) {
    a.getX().setFormula(void 0);
    a.getY().setFormula(void 0)
};
JSG.graph.model.ConnectionRestorer.prototype._disableAutoLayout = function (a) {
    a.getLayoutAttributes().setLineBehavior(JSG.graph.attr.consts.LineBehavior.MANUAL)
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.State = function () {
    this._state = {}
};
JSG.graph.model.State.CLASSNAME = "JSG.graph.model.State";
JSG.graph.model.State.prototype.getClassName = function () {
    return JSG.graph.model.State.CLASSNAME
};
JSG.graph.model.State.prototype.addProperty = function (a, b, c) {
    var d = this.getProperty(a);
    this._state[a] = this._propEntry(a, b, c);
    return d
};
JSG.graph.model.State.prototype._propEntry = function (a, b, c) {
    return {name: a, property: b, classname: c}
};
JSG.graph.model.State.prototype.getProperty = function (a) {
    return (a = this._state[a]) ? a.property : void 0
};
JSG.graph.model.State.prototype.removeProperty = function (a) {
    var b = this.getProperty(a);
    b && delete this._state[a];
    return b
};
JSG.graph.model.State.prototype.copy = function () {
    var a = new JSG.graph.model.State, b = this._state, c;
    for (c in b)if (Object.prototype.hasOwnProperty.call(b, c)) {
        var d = b[c], e = d.property && d.property.copy ? d.property.copy() : d.property;
        a.addProperty(d.name, e, d.classname)
    }
    return a
};
JSG.graph.model.State.prototype.saveXML = function (a) {
    var b = this._state, c;
    for (c in b)Object.prototype.hasOwnProperty.call(b, c) && this.saveEntry(b[c], a)
};
JSG.graph.model.State.prototype.saveEntry = function (a, b) {
    b.writeStartElement("prop");
    b.writeAttributeString("n", a.name);
    a.property && (b.writeAttributeString("t", this.typeFromEntry(a)), a.property.saveXML ? a.property.saveXML("v", b) : b.writeAttributeString("v", JSG.Strings.encode(a.property.toString())));
    b.writeEndElement()
};
JSG.graph.model.State.prototype.typeFromEntry = function (a) {
    var b = a.classname || void 0;
    void 0 === b && (b = typeof a.property, b = "number" === b ? "n" : "boolean" === b ? "b" : "s");
    return b
};
JSG.graph.model.State.prototype.readXML = function (a) {
    if (a.hasChildNodes()) {
        a = a.childNodes;
        var b;
        for (b = 0; b < a.length; b++) {
            var c = a.item(b);
            "prop" === c.nodeName && this.readEntry(c)
        }
    }
};
JSG.graph.model.State.prototype.readEntry = function (a) {
    var b = a.getAttribute("n"), c = a.getAttribute("t");
    "b" === c ? (a = Boolean(a.getAttribute("v")), c = void 0) : "n" === c ? (a = Number(a.getAttribute("v")), c = void 0) : "s" === c ? (a = a.getAttribute("v"), c = void 0) : a = this.readObject(c, a);
    this.addProperty(b, a, c)
};
JSG.graph.model.State.prototype.readObject = function (a, b) {
    var c = JSG.createObjectFromString(a);
    c && c.readXML && (b = JSG.commons.XML.findElementByTagName(b, "v")) && c.readXML(b);
    return c
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.Model = function () {
    this._id = void 0;
    this._eventHandler = new JSG.graph.model.events.EventDispatcher;
    this._modelAttributes = new JSG.graph.model.Model.Attributes;
    this._modelAttributes.item = this
};
JSG.graph.model.Model.prototype.newInstance = function () {
    return new JSG.graph.model.Model
};
JSG.graph.model.Model.prototype.copy = function (a, b) {
    var c = this.newInstance();
    c._modelAttributes = this._modelAttributes.copy();
    c._modelAttributes.item = c;
    b && (c._id = this._id);
    return c
};
JSG.graph.model.Model.prototype.getModelAttributes = function () {
    return this._modelAttributes
};
JSG.graph.model.Model.prototype.getAttributeAtPath = function (a) {
    return JSG.graph.attr.AttributeUtils.findAttributeByPath(a, this._modelAttributes)
};
JSG.graph.model.Model.prototype.getAttributeValueAtPath = function (a) {
    if ((a = JSG.graph.attr.AttributeUtils.findAttributeByPath(a, this._modelAttributes)) && (a = a.getExpression().getValue()) && a.length)return a
};
JSG.graph.model.Model.prototype.addAttribute = function (a) {
    return this._modelAttributes.addAttribute(a)
};
JSG.graph.model.Model.prototype.addAttributeAtPath = function (a, b) {
    return JSG.graph.attr.AttributeUtils.addAttributeAtPath(a, b, this._modelAttributes)
};
JSG.graph.model.Model.prototype.removeAttribute = function (a) {
    return this._modelAttributes.removeAttribute(a)
};
JSG.graph.model.Model.prototype.removeAttributeAtPath = function (a) {
    a = JSG.graph.attr.AttributeUtils.findAttributeByPath(a, this._modelAttributes);
    if (void 0 !== a) {
        var b = a.getAttributeList() || this._modelAttributes;
        return this._modelAttributes._removeAttributeFromList(a, b)
    }
};
JSG.graph.model.Model.prototype.setAttribute = function (a, b) {
    return this._modelAttributes.setAttributeValue(a, b)
};
JSG.graph.model.Model.prototype.setAttributeAtPath = function (a, b) {
    var c = JSG.graph.attr.AttributeUtils.findAttributeByPath(a, this._modelAttributes);
    return this.setAttribute(c, b)
};
JSG.graph.model.Model.prototype.saveAttributesXML = function (a) {
    this._modelAttributes.saveXML(a)
};
JSG.graph.model.Model.prototype.readAttributesXML = function (a) {
    a = JSG.commons.XML.findElementByTagName(a, "al");
    void 0 !== a && this._modelAttributes.readXML(a)
};
JSG.graph.model.Model.prototype.getId = function () {
    return this._id
};
JSG.graph.model.Model.prototype.setId = function (a) {
    this._id = a
};
JSG.graph.model.Model.prototype.saveState = function () {
};
JSG.graph.model.Model.prototype.restoreState = function (a) {
};
JSG.graph.model.Model.prototype.addEventListener = function (a, b) {
    this._eventHandler.registerListener(a, b)
};
JSG.graph.model.Model.prototype.removeEventListener = function (a, b) {
    this._eventHandler.unregisterListener(a, b)
};
JSG.graph.model.Model.prototype.sendPreEvent = function (a) {
    this._eventHandler.sendPreEvent(a)
};
JSG.graph.model.Model.prototype.sendPostEvent = function (a) {
    this._eventHandler.sendPostEvent(a)
};
JSG.graph.model.Model.prototype.areEventsEnabled = function () {
    return this._eventHandler.areEventsEnabled()
};
JSG.graph.model.Model.prototype.enableEvents = function () {
    this._eventHandler.enableEvents()
};
JSG.graph.model.Model.prototype.disableEvents = function () {
    return this._eventHandler.disableEvents()
};
JSG.graph.model.Model.Attributes = function (a) {
    JSG.graph.model.Model.Attributes._super.constructor.call(this, JSG.graph.model.Model.Attributes.NAME, a);
    this.item = void 0
};
JSG.extend(JSG.graph.model.Model.Attributes, JSG.graph.attr.AttributeList);
JSG.graph.model.Model.Attributes.NAME = "model.attributes";
JSG.graph.model.Model.Attributes.prototype.getPath = function () {
    return ""
};
JSG.graph.model.Model.Attributes.prototype.newInstance = function (a) {
    return new JSG.graph.model.Model.Attributes(a)
};
JSG.graph.model.Model.Attributes.prototype._addAttributeToList = function (a, b) {
    var c = this._createAttributeEvent(JSG.graph.model.events.AttributeChangeEvent.ADD, b, a);
    this.sendPreEvent(c);
    !0 === c.doIt && (a = this.Utils.addAttributeToList(a, b), this.sendPostEvent(c));
    return a
};
JSG.graph.model.Model.Attributes.prototype._addAll = function (a, b) {
    var c = this._createAttributeEvent(JSG.graph.model.events.AttributeChangeEvent.BULK, b, a), d = !1;
    this.sendPreEvent(c);
    !0 === c.doIt && (d = this.Utils.addAll(a, b), this.sendPostEvent(c));
    return d
};
JSG.graph.model.Model.Attributes.prototype._removeAttributeFromList = function (a, b) {
    var c, d = this._createAttributeEvent(JSG.graph.model.events.AttributeChangeEvent.REMOVE, b, a);
    this.sendPreEvent(d);
    !0 === d.doIt && (c = this.Utils.removeAttributeFromList(a, b), this.sendPostEvent(d));
    return c
};
JSG.graph.model.Model.Attributes.prototype._resetList = function (a) {
    var b = this._createAttributeEvent(JSG.graph.model.events.AttributeChangeEvent.BULK, a);
    this.sendPreEvent(b);
    !0 === b.doIt && (this.Utils.resetList(a), this.sendPostEvent(b))
};
JSG.graph.model.Model.Attributes.prototype.setAttributeValue = function (a, b) {
    var c = a && a.hasDifferentValue(b);
    if (c) {
        var d = this._createAttributeEvent(JSG.graph.model.events.AttributeChangeEvent.VALUE, a, b);
        this.sendPreEvent(d);
        !0 === d.doIt && (this.Utils.setAttributeValue(a, b), this.sendPostEvent(d))
    }
    return c
};
JSG.graph.model.Model.Attributes.prototype._createAttributeEvent = function (a, b, c) {
    a = new JSG.graph.model.events.AttributeChangeEvent(a, b, c);
    a.source = this.item;
    return a
};
JSG.graph.model.Model.Attributes.prototype.sendPreEvent = function (a) {
    this.item && this.item.sendPreEvent(a)
};
JSG.graph.model.Model.Attributes.prototype.sendPostEvent = function (a) {
    this.item && this.item.sendPostEvent(a)
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.Path = function () {
    this._path = []
};
JSG.graph.model.Path.fromString = function (a) {
};
JSG.graph.model.Path._delimiter = ":";
JSG.graph.model.Path.getCommonPrefix = function (a, b) {
    var c;
    if (void 0 !== a && void 0 !== b) {
        c = new JSG.graph.model.Path;
        var d = a._path.length < b._path.length ? a : b, e = d === b ? a : b, f;
        for (f = 0; f < d._path.length; f++)if (d._path[f] === e._path[f])c.addId(d._path[f]); else break
    }
    return c
};
JSG.graph.model.Path.prototype.addId = function (a) {
    this._path.push(a)
};
JSG.graph.model.Path.prototype.nextId = function () {
    return 0 === this._path.length ? void 0 : this._path.shift()
};
JSG.graph.model.Path.prototype.hasNextId = function () {
    return 0 !== this._path.length
};
JSG.graph.model.Path.prototype.containsId = function (a) {
    var b = !1, c, d;
    c = 0;
    for (d = this._path.length; c < d; c++)if (this._path[c] === a) {
        b = !0;
        break
    }
    return b
};
JSG.graph.model.Path.prototype.toString = function () {
    var a = "", b = this._path.length - 1, c = JSG.graph.model.Path._delimiter, d, e;
    d = 0;
    for (e = this._path.length; d < e; d++)a += this._path[d], d < b && (a += c);
    return a
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.GraphItem = function (a) {
    JSG.graph.model.GraphItem._super.constructor.apply(this, arguments);
    this._parent = void 0;
    this._subItems = [];
    this._pin = new JSG.graph.Pin(this);
    this._size = new JSG.graph.Size;
    this._angle = new JSG.graph.expr.NumberExpression(0);
    this._angle.getConstraint().decimals = 10;
    this._bboxcache = new JSG.geometry.BoundingBox(0, 0);
    this._origincache = new JSG.geometry.Point(0, 0);
    this._collapsedSize = new JSG.graph.Size(1E3, 1E3);
    this._reshapeCoordinates = [];
    this._condmanager = void 0;
    this.addAttribute(new JSG.graph.attr.FormatAttributes);
    this.addAttribute(new JSG.graph.attr.ItemAttributes);
    this.addAttribute(new JSG.graph.attr.LayoutAttributes);
    this._reshapeProperties = new JSG.graph.properties.Properties;
    this._layer = new JSG.graph.expr.StringExpression("");
    this._type = new JSG.graph.expr.StringExpression("");
    this._name = new JSG.graph.expr.StringExpression("");
    this._link = new JSG.graph.expr.StringExpression("");
    this._shape = void 0;
    this.setShapeTo(void 0 !== a ? a : new JSG.graph.model.shapes.Shape);
    this._friends = [];
    this._reading = this._isFeedback = !1;
    this._refreshEnabled = !0
};
JSG.extend(JSG.graph.model.GraphItem, JSG.graph.model.Model);
JSG.graph.model.GraphItem.prototype.newInstance = function () {
    return new JSG.graph.model.GraphItem
};
JSG.graph.model.GraphItem.prototype.copy = function (a, b) {
    return this._copy([], void 0 !== a ? a : !0, void 0 !== b ? b : !1)
};
JSG.graph.model.GraphItem.prototype._copy = function (a, b, c) {
    function d(a, b) {
        var c, d;
        for (d = 0; d < b.length; d++)if (b[d].id === a) {
            c = b[d].copy;
            break
        }
        return c
    }

    function e(a, b) {
        var c, e;
        for (c = 0; c < a.length; c++) {
            var f = a[c];
            void 0 !== f.sourceNodeId && (e = d(f.sourceNodeId, b), void 0 !== e && f.copy.setSourcePort(e.getPortAt(f.sourcePortIndex)));
            void 0 !== f.targetNodeId && (e = d(f.targetNodeId, b), void 0 !== e && f.copy.setTargetPort(e.getPortAt(f.targetPortIndex)))
        }
    }

    function f(a) {
        k.addCondition(a.copy())
    }

    var g, k;
    g = JSG.graph.model.GraphItem._super.copy.call(this,
        b, c);
    this._copyPropertiesAndShape(g);
    if (!0 === b) {
        var h = [], m = [];
        this._copyStructure(g, m, h, b, c);
        e(h, m);
        this.hasConditions() && (b = this.getConditionManager(), k = g.getConditionManager(), b.iterate(f));
        0 < m.length && JSG.Arrays.insertAt(a, a.length, m)
    }
    g.refresh();
    return g
};
JSG.graph.model.GraphItem.prototype._copyPropertiesAndShape = function (a) {
    a._pin.setTo(this._pin);
    a._angle.setTo(this._angle);
    a._size = this._size.copy();
    a._collapsedSize = this._collapsedSize.copy();
    a.setReshapeProperties(this._reshapeProperties);
    a._layer = this._layer.copy();
    a._type = this._type.copy();
    a._name = this._name.copy();
    a._link = this._link.copy();
    var b;
    for (b = 0; b < this._friends.length; b++)a._friends.push(this._friends[b].copy());
    a.setReshapeCoordinates(this._reshapeCoordinates);
    this._shape && a.setShapeTo(this._shape.copy())
};
JSG.graph.model.GraphItem.prototype._copyStructure = function (a, b, c, d, e) {
    function f(a, b) {
        var c = void 0 !== a.sourceNode ? a.sourceNode.getId() : void 0, d = void 0 !== c ? a.sourceNode.getPortIndex(a.getSourcePort()) : void 0, e = void 0 !== a.targetNode ? a.targetNode.getId() : void 0, f = void 0 !== e ? a.targetNode.getPortIndex(a.getTargetPort()) : void 0;
        return {copy: b, sourceNodeId: c, sourcePortIndex: d, targetNodeId: e, targetPortIndex: f}
    }

    var g, k, h = this._subItems;
    for (k = 0; k < h.length; k++) {
        g = h[k];
        var m = g._copy(b, d, e);
        m._parent = a;
        a._subItems.push(m);
        g instanceof JSG.graph.model.Edge ? c.push(f(g, m)) : b.push({id: g.getId(), copy: m})
    }
};
JSG.graph.model.GraphItem.prototype.createPath = function (a) {
    var b = this.getId(), c;
    void 0 !== b && (c = this !== a && void 0 !== this._parent ? this._parent.createPath(a) : new JSG.graph.model.Path) && c.addId(b);
    return c
};
JSG.graph.model.GraphItem.prototype.getReshapeProperties = function () {
    return this._reshapeProperties
};
JSG.graph.model.GraphItem.prototype.setReshapeProperties = function (a) {
    this._reshapeProperties.clear();
    void 0 !== a && (this._reshapeProperties = a.copy())
};
JSG.graph.model.GraphItem.prototype.hasReshapeCoordinates = function () {
    return void 0 !== this._reshapeCoordinates && 0 < this._reshapeCoordinates.length
};
JSG.graph.model.GraphItem.prototype.getReshapeCoordinates = function () {
    return this._reshapeCoordinates
};
JSG.graph.model.GraphItem.prototype.getReshapeCoordinateAt = function (a) {
    return 0 <= a && a < this._reshapeCoordinates.length ? this._reshapeCoordinates[a] : void 0
};
JSG.graph.model.GraphItem.prototype.setReshapeCoordinates = function (a) {
    this._reshapeCoordinates = [];
    if (void 0 !== a) {
        var b;
        for (b = 0; b < a.length; b++)this._reshapeCoordinates.push(a[b].copy())
    }
};
JSG.graph.model.GraphItem.prototype.setReshapeCoordinateAt = function (a) {
    if (0 <= a && a < this._reshapeCoordinates.length) {
        var b, c, d = arguments, e = this._reshapeCoordinates[a];
        2 === d.length ? (b = d[1].x, c = d[1].y) : 2 < d.length && (b = void 0 !== d[1] ? d[1] : e.getX(), c = void 0 !== d[2] ? d[2] : e.getY());
        e.isEqualTo(b, c) || (d = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.RESHAPE), d.xValue = b, d.yValue = c, d.index = a, d.source = this, this.sendPreEvent(d), !0 === d.doIt && (e.set(b, c), this.sendPostEvent(d)))
    }
};
JSG.graph.model.GraphItem.prototype.getPin = function () {
    return this._pin
};
JSG.graph.model.GraphItem.prototype.getLink = function () {
    var a = JSG.graphItemFactory.getLink(this.getType().getValue());
    return void 0 !== a ? a : this._link
};
JSG.graph.model.GraphItem.prototype.setLink = function (a) {
    this._link.setExpressionOrValue(a)
};
JSG.graph.model.GraphItem.prototype.isClipChildren = function () {
    return this.getItemAttribute(JSG.graph.attr.ItemAttributes.CLIPCHILDREN).getValue()
};
JSG.graph.model.GraphItem.prototype.isClosed = function () {
    return this.getItemAttribute(JSG.graph.attr.ItemAttributes.CLOSED).getValue()
};
JSG.graph.model.GraphItem.prototype.isCollapsable = function () {
    return this.getItemAttribute(JSG.graph.attr.ItemAttributes.COLLAPSABLE).getValue()
};
JSG.graph.model.GraphItem.prototype.isCollapsed = function () {
    return this.getItemAttribute(JSG.graph.attr.ItemAttributes.COLLAPSED).getValue()
};
JSG.graph.model.GraphItem.prototype.isAnyParentCollapsed = function () {
    for (var a = this.getParent(); void 0 !== a;) {
        if (a && a.isCollapsed())return !0;
        a = a.getParent()
    }
    return !1
};
JSG.graph.model.GraphItem.prototype.isContainer = function () {
    return this.getItemAttribute(JSG.graph.attr.ItemAttributes.CONTAINER).getValue()
};
JSG.graph.model.GraphItem.prototype.isDeleteable = function () {
    return this.getItemAttribute(JSG.graph.attr.ItemAttributes.DELETEABLE).getValue()
};
JSG.graph.model.GraphItem.prototype.isMoveable = function () {
    return !!this.getItemAttribute(JSG.graph.attr.ItemAttributes.MOVEABLE).getValue()
};
JSG.graph.model.GraphItem.prototype.isSelectable = function () {
    if (!this.isVisible())return !1;
    var a = 0 < this.getItemAttribute(JSG.graph.attr.ItemAttributes.SELECTIONMODE).getValue() ? !0 : !1;
    if ("" !== this._layer.getValue()) {
        var b = this.getGraph();
        if (void 0 !== b && (b = b._layers.get(this._layer.getValue()), void 0 !== b))return b.selectable && a
    }
    return a
};
JSG.graph.model.GraphItem.prototype.isSelectParentFirst = function () {
    return this.getItemAttribute(JSG.graph.attr.ItemAttributes.SELECTIONMODE).getValue() & JSG.graph.attr.consts.SelectionMode.SELECTPARENT
};
JSG.graph.model.GraphItem.prototype.isSizeable = function () {
    return this.getItemAttribute(JSG.graph.attr.ItemAttributes.SIZEABLE).getValue()
};
JSG.graph.model.GraphItem.prototype.isVisible = function () {
    var a = this.getItemAttribute(JSG.graph.attr.ItemAttributes.VISIBLE).getValue();
    if (a) {
        if (void 0 !== this._parent && !this._parent.isVisible())return !1;
        if ("" !== this._layer.getValue()) {
            var b = this.getGraph();
            if (void 0 !== b && (b = b._layers.get(this._layer.getValue()), void 0 !== b))return b.visible && a
        }
    }
    return a
};
JSG.graph.model.GraphItem.prototype.isRotatable = function () {
    return this.getItemAttribute(JSG.graph.attr.ItemAttributes.ROTATABLE).getValue()
};
JSG.graph.model.GraphItem.prototype.getAttributes = function () {
    return this._attributes
};
JSG.graph.model.GraphItem.prototype.getAttribute = function (a) {
    return this.getModelAttributes().getAttribute(a)
};
JSG.graph.model.GraphItem.prototype.getItemAttributes = function () {
    return this.getModelAttributes().getAttribute(JSG.graph.attr.ItemAttributes.NAME)
};
JSG.graph.model.GraphItem.prototype.getItemAttribute = function (a) {
    return this.getItemAttributes().getAttribute(a)
};
JSG.graph.model.GraphItem.prototype.setItemAttribute = function (a, b) {
    return this.setAttribute(this.getItemAttribute(a), b)
};
JSG.graph.model.GraphItem.prototype.getLayoutAttributes = function () {
    return this.getModelAttributes().getAttribute(JSG.graph.attr.LayoutAttributes.NAME)
};
JSG.graph.model.GraphItem.prototype.setLayoutAttributes = function (a) {
    this.addAttribute(a)
};
JSG.graph.model.GraphItem.prototype.getCustomReference = function () {
};
JSG.graph.model.GraphItem.prototype.getFriends = function () {
    var a = JSG.graphItemFactory.getFriends(this);
    return void 0 !== a ? a : this._friends
};
JSG.graph.model.GraphItem.prototype.setPinCoordinateTo = function (a) {
    this._pin.setCoordinateTo(a)
};
JSG.graph.model.GraphItem.prototype.setPinPointTo = function (a) {
    this.setPinPoint(a.x, a.y)
};
JSG.graph.model.GraphItem.prototype.setPinPoint = function (a, b) {
    this._pin.setPoint(a, b)
};
JSG.graph.model.GraphItem.prototype.getPinPoint = function (a) {
    return this._pin.getPoint(a)
};
JSG.graph.model.GraphItem.prototype.getOrigin = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.setTo(this._origincache);
    return a
};
JSG.graph.model.GraphItem.prototype.setOriginTo = function (a) {
    this.setOrigin(a.x, a.y)
};
JSG.graph.model.GraphItem.prototype.setOrigin = function (a, b) {
    var c = this._pin.getLocalPoint(JSG.ptCache.get()), c = JSG.geometry.Utils.rotatePoint(c, this._angle.getValue());
    c.translate(a, b);
    this.setPinPoint(c.x, c.y);
    JSG.ptCache.release(c)
};
JSG.graph.model.GraphItem.prototype.translate = function (a, b) {
    (a || b) && this._pin.translate(a, b)
};
JSG.graph.model.GraphItem.prototype.getAngle = function () {
    return this._angle
};
JSG.graph.model.GraphItem.prototype.setAngle = function (a) {
    if (!this.getAngle().isEqualToExpressionOrValue(a)) {
        var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.ANGLE, a);
        b.source = this;
        this.sendPreEvent(b);
        !0 === b.doIt && (this._angle.setExpressionOrValue(a), this._update(), this.sendPostEvent(b))
    }
};
JSG.graph.model.GraphItem.prototype.getBoundingBox = function (a) {
    a = a || new JSG.geometry.BoundingBox(0, 0);
    a.setTo(this._bboxcache);
    return a
};
JSG.graph.model.GraphItem.prototype.getTotalBoundingRect = function (a, b) {
    a = void 0 !== a ? a : this._parent;
    var c = JSG.boxCache.get(), d = JSG.rectCache.get(), e = this.getTranslatedBoundingBox(a, c).getBoundingRectangle(b), f = this.isCollapsed(), g, k;
    g = 0;
    for (k = this._subItems.length; g < k; g++) {
        var h = this._subItems[g];
        (!f || h instanceof JSG.graph.model.TextNode) && e.union(h.getTotalBoundingRect(a, d))
    }
    JSG.boxCache.release(c);
    JSG.rectCache.release(d);
    return e
};
JSG.graph.model.GraphItem.prototype.getCenter = function (a) {
    return this._bboxcache.getCenter(a).add(this._bboxcache._topleft)
};
JSG.graph.model.GraphItem.prototype.setCenterTo = function (a) {
    this.setCenter(a.x, a.y)
};
JSG.graph.model.GraphItem.prototype.setCenter = function (a, b) {
    var c = this._pin.getLocalPoint();
    c.x -= this.getWidth().getValue() / 2;
    c.y -= this.getHeight().getValue() / 2;
    c = JSG.geometry.Utils.rotatePoint(c, this._angle.getValue());
    this.setPinPoint(a + c.x, b + c.y)
};
JSG.graph.model.GraphItem.prototype.setBoundingBoxTo = function (a, b) {
    var c = this.getBoundingBox();
    if (b || !c.isEqualTo(a, 50))if (c = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.BBOX, a), c.source = this, this.sendPreEvent(c), !0 === c.doIt) {
        this.disableEvents();
        this._angle.setExpressionOrValue(a.getAngle());
        var d = a.getWidth(), e = a.getHeight();
        if (this.isCollapsed()) {
            var f = this.getItemAttributes().getCollapsable().getValue();
            f & JSG.graph.attr.consts.Direction.HORIZONTAL && (d = this._size.getWidth().getValue());
            f & JSG.graph.attr.consts.Direction.VERTICAL && (e = this._size.getHeight().getValue())
        }
        this.setSize(d, e);
        this._bboxcache.setTo(a);
        this.setOriginTo(a.getTopLeft());
        this.enableEvents();
        this.sendPostEvent(c)
    }
};
JSG.graph.model.GraphItem.prototype.getSize = function (a) {
    if (!0 === a)return this._size;
    if (this.isCollapsed()) {
        a = this.getItemAttributes().getCollapsable().getValue();
        if (a === JSG.graph.attr.consts.Direction.BOTH)return this._collapsedSize;
        var b = this._size.copy();
        a & JSG.graph.attr.consts.Direction.VERTICAL && b.setHeight(this._collapsedSize.getHeight());
        a & JSG.graph.attr.consts.Direction.HORIZONTAL && b.setWidth(this._collapsedSize.getWidth());
        return b
    }
    return this._size
};
JSG.graph.model.GraphItem.prototype.getSizeAsPoint = function (a) {
    a = void 0 !== a ? a : new JSG.geometry.Point(0, 0);
    var b = this.getItemAttributes(), c = b.getCollapsable().getValue();
    b.getCollapsed().getValue() ? (a.x = c & JSG.graph.attr.consts.Direction.HORIZONTAL ? this._collapsedSize.getWidth().getValue() : this._size.getWidth().getValue(), a.y = c & JSG.graph.attr.consts.Direction.VERTICAL ? this._collapsedSize.getHeight().getValue() : this._size.getHeight().getValue()) : (a.x = this._size.getWidth().getValue(), a.y = this._size.getHeight().getValue());
    return a
};
JSG.graph.model.GraphItem.prototype.getWidth = function () {
    var a = this.getItemAttributes();
    return !0 === a.getCollapsed().getValue() && a.getCollapsable().getValue() & JSG.graph.attr.consts.Direction.HORIZONTAL ? this._collapsedSize.getWidth() : this._size.getWidth()
};
JSG.graph.model.GraphItem.prototype.getHeight = function () {
    var a = this.getItemAttributes();
    return a.getCollapsed().getValue() && a.getCollapsable().getValue() & JSG.graph.attr.consts.Direction.VERTICAL ? this._collapsedSize.getHeight() : this._size.getHeight()
};
JSG.graph.model.GraphItem.prototype.getMinSize = function (a) {
    return JSG.MIN_WIDTH_HEIGHT
};
JSG.graph.model.GraphItem.prototype.setSizeTo = function (a) {
    this.setSize(a.getWidth(), a.getHeight())
};
JSG.graph.model.GraphItem.prototype.setSizeToPoint = function (a) {
    this.setSize(a.x, a.y)
};
JSG.graph.model.GraphItem.prototype.setSize = function (a, b) {
    function c(a, b) {
        void 0 !== a.setValue ? a.setValue(b) : a = b;
        return a
    }

    var d = void 0 !== a ? a : this._size.getWidth(), e = void 0 !== b ? b : this._size.getHeight(), f = this.getMinSize();
    0 <= f && (d = (void 0 !== d.getValue ? d.getValue() : d) < f ? c(d, f) : d, e = (void 0 !== e.getValue ? e.getValue() : e) < f ? c(e, f) : e);
    this._size.isEqualTo(d, e) || (f = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.SIZE, {
        width: d,
        height: e
    }), f.source = this, this.sendPreEvent(f), !0 === f.doIt && (this._size.set(d,
        e), this.refresh(), this.sendPostEvent(f)))
};
JSG.graph.model.GraphItem.prototype.setWidth = function (a) {
    this.setSize(a, void 0)
};
JSG.graph.model.GraphItem.prototype.setHeight = function (a) {
    this.setSize(void 0, a)
};
JSG.graph.model.GraphItem.prototype.setCollapsedSize = function (a, b) {
    function c(a, b) {
        void 0 !== a.setValue ? a.setValue(b) : a = b;
        return a
    }

    var d = void 0 !== a ? a : this._collapsedSize.getWidth(), e = void 0 !== b ? b : this._collapsedSize.getHeight(), f = this.getMinSize();
    0 <= f && (d = (void 0 !== d.getValue ? d.getValue() : d) < f ? c(d, f) : d, e = (void 0 !== e.getValue ? e.getValue() : e) < f ? c(e, f) : e);
    this._collapsedSize.isEqualTo(d, e) || (f = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.COLLAPSEDSIZE, {
        width: d,
        height: e
    }), f.source = this,
        this.sendPreEvent(f), !0 === f.doIt && (this._collapsedSize.set(d, e), this.refresh(), this.sendPostEvent(f)))
};
JSG.graph.model.GraphItem.prototype.setShapeTo = function (a) {
    var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.SHAPE, a);
    b.source = this;
    this.sendPreEvent(b);
    !0 === b.doIt && (void 0 !== this._shape && this._shape.setItem(void 0), this._shape = a, this._shape.setItem(this), this._shape.evaluate(), this._shape.refresh(), this.sendPostEvent(b))
};
JSG.graph.model.GraphItem.prototype.getShape = function () {
    return this._shape
};
JSG.graph.model.GraphItem.prototype.evaluate = function () {
    if (!this._reading) {
        this._angle.evaluate(this);
        this._layer.evaluate(this);
        this._type.evaluate(this);
        this._name.evaluate(this);
        this._link.evaluate(this);
        this._pin.evaluate();
        this._size.evaluate(this);
        this._collapsedSize.evaluate(this);
        this._shape.evaluate();
        this.getModelAttributes().evaluate(this);
        var a, b;
        a = 0;
        for (b = this._reshapeCoordinates.length; a < b; a++)this._reshapeCoordinates[a].evaluate(this);
        a = 0;
        for (b = this._subItems.length; a < b; a++)this._subItems[a].evaluate();
        this._update()
    }
};
JSG.graph.model.GraphItem.prototype.invalidateTerms = function () {
    this._angle.invalidateTerm();
    this._layer.invalidateTerm();
    this._type.invalidateTerm();
    this._name.invalidateTerm();
    this._link.invalidateTerm();
    this._pin.invalidateTerms();
    this._size.invalidateTerms();
    this._collapsedSize.invalidateTerms();
    this._shape.invalidateTerms();
    this.getModelAttributes().invalidateTerm();
    var a, b;
    a = 0;
    for (b = this._reshapeCoordinates.length; a < b; a++)this._reshapeCoordinates[a].invalidateTerms();
    a = 0;
    for (b = this._subItems.length; a <
    b; a++)this._subItems[a].invalidateTerms()
};
JSG.graph.model.GraphItem.prototype.resolveParentReferences = function (a) {
    this._angle.resolveParentReference(this, a);
    this._layer.resolveParentReference(this, a);
    this._type.resolveParentReference(this, a);
    this._name.resolveParentReference(this, a);
    this._link.resolveParentReference(this, a);
    this._pin.resolveParentReference(a);
    this._size.resolveParentReference(this, a);
    this._collapsedSize.resolveParentReference(this, a);
    this._shape.resolveParentReference(a);
    this.getModelAttributes().resolveParentReference(this, a);
    var b, c;
    b = 0;
    for (c = this._reshapeCoordinates.length; b < c; b++)this._reshapeCoordinates[b].resolveParentReference(this, a)
};
JSG.graph.model.GraphItem.prototype.rotate = function (a, b) {
    0 !== a && (void 0 !== b && this._pin.rotate(a, b), this.setAngle(this.getAngle().getValue() + a))
};
JSG.graph.model.GraphItem.prototype.addLabel = function (a, b) {
    if (this.isAddLabelAllowed()) {
        var c;
        void 0 !== b ? c = b : a instanceof JSG.graph.expr.AttributeExpression ? c = new JSG.graph.model.AttributedTextNode(a) : (c = new JSG.graph.model.TextNode, c.setText(a), c.getTextFormat().setParent(this.getTextFormat()));
        var d = [], e, f;
        e = 0;
        for (f = 25; e < f; e++)d.push(!1);
        var g = !1;
        e = 0;
        for (f = this._subItems.length; e < f; e++) {
            var k = this._subItems[e];
            k instanceof JSG.graph.model.TextNode && (g = k.getTextFormat().getVerticalPosition().getValue(),
            (k = k.getTextFormat().getHorizontalPosition().getValue()) && g && (d[5 * (g - 1) + k - 1] = !0), g = !0)
        }
        this.addItem(c);
        c.getTextFormat().setParent(this.getTextFormat());
        if (g)for (e = 0, f = 25; e < f; e++)if (!1 === d[e]) {
            c.getTextFormat().setVerticalPosition(Math.floor(e / 5) + 1);
            c.getTextFormat().setHorizontalPosition(e % 5 + 1);
            break
        }
        c.setItemAttribute(JSG.graph.attr.ItemAttributes.SNAPTO, !1);
        c.evaluate();
        c.updateSize();
        return c
    }
};
JSG.graph.model.GraphItem.prototype.isAddLabelAllowed = function () {
    return !0
};
JSG.graph.model.GraphItem.prototype.getLayer = function () {
    return this._layer
};
JSG.graph.model.GraphItem.prototype.setLayer = function (a) {
    if (!this._layer.isEqualToExpressionOrValue(a)) {
        var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.LAYER, a);
        b.source = this;
        this.sendPreEvent(b);
        !0 === b.doIt && (this._layer.setExpressionOrValue(a), this.getGraph().getLayer(this._layer.getValue()), this.sendPostEvent(b))
    }
};
JSG.graph.model.GraphItem.prototype.getType = function () {
    return this._type
};
JSG.graph.model.GraphItem.prototype.setType = function (a) {
    if (!this._type.isEqualToExpressionOrValue(a)) {
        var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.TYPE, a);
        b.source = this;
        this.sendPreEvent(b);
        !0 === b.doIt && (this._type.setExpressionOrValue(a), this.sendPostEvent(b))
    }
};
JSG.graph.model.GraphItem.prototype.getName = function () {
    return this._name
};
JSG.graph.model.GraphItem.prototype.setName = function (a) {
    if (!this._name.isEqualToExpressionOrValue(a)) {
        var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.NAME, a);
        b.source = this;
        this.sendPreEvent(b);
        !0 === b.doIt && (this._name.setExpressionOrValue(a), this.sendPostEvent(b))
    }
};
JSG.graph.model.GraphItem.prototype.layoutAll = function () {
    var a, b, c;
    a = 0;
    for (b = this._subItems.length; a < b; a++)c = this._subItems[a], c.layoutAll();
    this.layout()
};
JSG.graph.model.GraphItem.prototype.layout = function () {
    if (void 0 !== window.ARAC && this.areEventsEnabled() && !(this._isFeedback || this._reading || this.isCollapsed())) {
        var a;
        a = this.getLayoutAttributes();
        var b = a.getConstraints();
        if (a.getAutoLayout().getValue()) {
            var c = a.getLayouter();
            if (void 0 !== c) {
                var d = this.getItemAttributes(), e, f = null;
                if (void 0 !== this._graphId) {
                    a = 0;
                    for (e = this._subItems.length; a < e && null === f; a++)void 0 !== this._subItems[a].getAttachedEdges && (0 !== this._subItems[a].getAttachedEdges().length &&
                    this._subItems[a].getItemAttributes().getSelected().getValue()) && (f = this._subItems[a]);
                    null !== f ? (b.layoutOriginProcessor = ARAC.layout.config.LayoutOriginProcessor.CNODE_LEFTTOP, b.layoutOriginNode = new JSG.aracadapter.AracNodeAdapter(f)) : (b.layoutOriginProcessor = ARAC.layout.config.LayoutOriginProcessor.ROOT_LEFTTOP, b.layoutOriginNode = void 0)
                } else if ("grid" === b._layoutType)b.layoutOrigin.x = 0, b.layoutOrigin.y = 0; else {
                    a = 0;
                    for (e = this._subItems.length; a < e && null === f; a++)void 0 !== this._subItems[a].getAttachedEdges &&
                    (0 !== this._subItems[a].getAttachedEdges().length && this._subItems[a].getItemAttributes().getSelected().getValue()) && (f = this._subItems[a]);
                    null !== f ? (b.layoutOriginProcessor = ARAC.layout.config.LayoutOriginProcessor.CNODE_LEFTTOP, b.layoutOriginNode = new JSG.aracadapter.AracNodeAdapter(f)) : (b.layoutOriginProcessor = ARAC.layout.config.LayoutOriginProcessor.ROOT_LEFTTOP, b.layoutOriginNode = void 0)
                }
                "grid" === b._layoutType && (void 0 !== this._graphId ? (b.xArea = 15E3 - d.getLeftMargin().getValue() - d.getRightMargin().getValue(),
                    b.yArea = 15E3 - d.getTopMargin().getValue() - d.getBottomMargin().getValue()) : (b.xArea = this.getWidth().getValue() - d.getLeftMargin().getValue() - d.getRightMargin().getValue(), b.yArea = this.getHeight().getValue() - d.getTopMargin().getValue() - d.getBottomMargin().getValue()));
                if (a = JSG.layoutFactory.getLayoutModel(this, b))if (c.layout(a, b), this.getLayoutAttributes().getAutoResize().getValue() !== JSG.graph.attr.consts.Direction.NONE) {
                    e = this.getLayoutAttributes().getAutoResizeLevel().getValue();
                    b = this;
                    for (a = 0; a < e; a++)b.getParent() &&
                    (b = b.getParent());
                    if (void 0 !== b && !(b instanceof JSG.graph.model.Graph || b.isCollapsed()) && b._subItems.length) {
                        c = JSG.rectCache.get();
                        a = 0;
                        for (e = b._subItems.length; a < e; a++)b._subItems[a]._getBoundingRectOffAllSubItems(c, b, new JSG.geometry.Point(0, 0));
                        c.width += b.getItemAttributes().getRightMargin().getValue();
                        c.height += b.getItemAttributes().getBottomMargin().getValue();
                        0 !== c.width && 0 !== c.height && (a = b.getSizeAsPoint(), 50 < Math.abs(a.x - c.width) || 50 < Math.abs(a.y - c.height)) && (a = b.getBoundingBox(), this.getLayoutAttributes().getAutoResize().getValue() ===
                        JSG.graph.attr.consts.Direction.BOTH ? a.setSize(c.width, c.height) : this.getLayoutAttributes().getAutoResize().getValue() & JSG.graph.attr.consts.Direction.HORIZONTAL ? a.setWidth(c.width) : this.getLayoutAttributes().getAutoResize().getValue() & JSG.graph.attr.consts.Direction.VERTICAL && a.setHeight(c.height), b.setBoundingBoxTo(a));
                        JSG.rectCache.release(c)
                    }
                }
            }
        } else void 0 !== this._graphId && (a = JSG.layoutFactory.getLayoutModel(this, b), void 0 !== a && ARAC.layout.apply(a, void 0, ARAC.layout.defaultConfigStore ? ARAC.layout.defaultConfigStore.get("Edge-StoreData") :
            void 0))
    }
};
JSG.graph.model.GraphItem.prototype._getBoundingRectOffAllSubItems = function (a, b, c) {
    function d(a, b, c, d) {
        var e = a.getOrigin(), f = JSG.rectCache.get(), n, q;
        d.add(e);
        n = 0;
        for (q = a._subItems.length; n < q; n++)a._subItems[n]._getBoundingRectOffAllSubItems(f, c, d);
        d.subtract(e);
        f.width += a.getItemAttributes().getRightMargin().getValue();
        f.height += a.getItemAttributes().getBottomMargin().getValue();
        b.union(f);
        JSG.rectCache.release(f)
    }

    if (JSG.layoutFactory.isAutoResizeDesired(this.getType().getValue(), b.getType().getValue())) {
        var e = this.getBoundingBox(JSG.boxCache.get()),
            f = e.getBoundingRectangle(JSG.rectCache.get());
        JSG.boxCache.release(e);
        f.translate(c.x, c.y);
        f.x = Math.max(0, f.x);
        f.y = Math.max(0, f.y);
        a.union(f);
        JSG.rectCache.release(f);
        this.isCollapsed() || d(this, a, b, c)
    } else d(this, a, b, c)
};
JSG.graph.model.GraphItem.prototype.updateLabelPositions = function () {
    var a = JSG.ptCache.get(0, 0), b = JSG.ptCache.get(0, 0), c, d, e;
    c = 0;
    for (d = this._subItems.length; c < d; c++)if (e = this._subItems[c], e instanceof JSG.graph.model.TextNode) {
        var f = e.getTextFormat(), g = e._getLogFontMetrics ? e._getLogFontMetrics(f.getFontName().getValue(), f.getFontSize().getValue()).height / 2 : 0, k = e.getBoundingBox().getBoundingRectangle(), h = f.getHorizontalPosition().getValue(), f = f.getVerticalPosition().getValue();
        a.set(e.getPin().getX().getValue(),
            e.getPin().getY().getValue());
        b = this.getLabelPositionAt(h, f, k, g, b);
        void 0 !== b.x && void 0 !== b.y ? b.isEqualTo(a, 50) || e.getPin().setPointTo(b) : void 0 !== a.x && 50 < Math.abs(a.x - b.x) ? e.getPin().setX(b.x) : void 0 !== a.y && 50 < Math.abs(a.y - b.y) && e.getPin().setY(b.y)
    }
    JSG.ptCache.release(a, b)
};
JSG.graph.model.GraphItem.prototype.getLabelPositionAt = function (a, b, c, d, e) {
    e = e || new JSG.geometry.Point(0, 0);
    var f = this.getBoundingBox();
    switch (b) {
        case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.ONTOP:
            e.y = -c.height / 2 + d;
            break;
        case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.TOP:
            e.y = c.height / 2 - d;
            break;
        case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.CENTER:
            e.y = f.getHeight() / 2;
            break;
        case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.BOTTOM:
            e.y = f.getHeight() -
            c.height / 2 + d;
            break;
        case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.BELOWBOTTOM:
            e.y = f.getHeight() + c.height / 2 - d;
            break;
        case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.CUSTOM:
            e.y = void 0
    }
    switch (a) {
        case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.TOLEFT:
            e.x = -c.width / 2;
            break;
        case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.LEFT:
            e.x = c.width / 2;
            break;
        case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.CENTER:
            e.x = f.getWidth() / 2;
            break;
        case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.RIGHT:
            e.x =
                f.getWidth() - c.width / 2;
            break;
        case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.TORIGHT:
            e.x = f.getWidth() + c.width / 2;
            break;
        case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.CUSTOM:
            e.x = void 0
    }
    return e
};
JSG.graph.model.GraphItem.prototype.getFormat = function () {
    return this.getModelAttributes().getAttribute(JSG.graph.attr.FormatAttributes.NAME)
};
JSG.graph.model.GraphItem.prototype.getTextFormat = function () {
    return this.getAttribute(JSG.graph.attr.TextFormatAttributes.NAME) || this.addAttribute(new JSG.graph.attr.TextFormatAttributes)
};
JSG.graph.model.GraphItem.prototype.getTextItemCount = function () {
    var a = 0, b;
    for (b = 0; b < this._subItems.length; b++)this._subItems[b]instanceof JSG.graph.model.TextNode && a++;
    return a
};
JSG.graph.model.GraphItem.prototype.getParent = function () {
    return this._parent
};
JSG.graph.model.GraphItem.prototype.changeParent = function (a) {
    if (a !== this._parent) {
        var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.PARENT, a);
        b.source = this;
        this.sendPreEvent(b);
        !0 === b.doIt && (void 0 !== this._parent && JSG.Arrays.remove(this._parent._subItems, this), this._parent = a, void 0 !== this._parent && this._parent._subItems.push(this), this.evaluate(), this.sendPostEvent(b), this.pathChanged())
    }
};
JSG.graph.model.GraphItem.prototype.pathChanged = function () {
    this.sendPostEvent(new JSG.graph.model.events.Event(JSG.graph.model.events.Event.PATH));
    var a;
    for (a = 0; a < this._subItems.length; a++)this._subItems[a].pathChanged()
};
JSG.graph.model.GraphItem.prototype.getGraph = function () {
    return void 0 !== this._parent ? this._parent.getGraph() : void 0
};
JSG.graph.model.GraphItem.prototype.getItems = function () {
    return this._subItems
};
JSG.graph.model.GraphItem.prototype.getItemAt = function (a) {
    return 0 > a || a >= this._subItems.length ? void 0 : this._subItems[a]
};
JSG.graph.model.GraphItem.prototype.getItemCount = function () {
    return this._subItems.length
};
JSG.graph.model.GraphItem.prototype.findItemByPath = function (a) {
    function b(a, b) {
        var c;
        JSG.Arrays.every(b, function (b) {
            return b.getId() === a ? (c = b, !1) : !0
        });
        return c
    }

    if (void 0 !== a) {
        var c = a.nextId(), c = void 0 !== c ? c === this.getId() ? this : b(c, this._subItems) : void 0;
        return void 0 !== c ? a.hasNextId() ? c.findItemByPath(a) : c : void 0
    }
};
JSG.graph.model.GraphItem.prototype.addItem = function (a, b) {
    var c = a.getParent();
    if (c !== this) {
        var d = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.ITEMADD, a);
        d.source = this;
        this.sendPreEvent(d);
        if (!0 === d.doIt)return void 0 !== c && c.removeItem(a), this._subItems.insert(a, b), a._parent = this, a._assignId(), a.evaluate(), this.sendPostEvent(d), a
    }
};
JSG.graph.model.GraphItem.prototype._assignId = function (a) {
    var b, c;
    c = this.getId();
    b = (a = !0 === a || !c) ? this._createId() : c;
    b !== c && (JSG.connectionRestorer && JSG.connectionRestorer.addId(c, b), this.setId(b), this._assignName(b));
    c = 0;
    for (b = this._subItems.length; c < b; c++)this._subItems[c]._assignId(a)
};
JSG.graph.model.GraphItem.prototype._assignName = function (a) {
    this.setName(this.getShape().getType() + a)
};
JSG.graph.model.GraphItem.prototype._createId = function () {
    var a = this.getGraph();
    return void 0 !== a ? a.newUniqueId() : void 0
};
JSG.graph.model.GraphItem.prototype.removeItem = function (a) {
    if (a.getParent() === this) {
        var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.ITEMREMOVE, a);
        b.source = this;
        this.sendPreEvent(b);
        !0 === b.doIt && (a._notifyRemove(), a._parent = void 0, JSG.Arrays.remove(this._subItems, a) && this.sendPostEvent(b))
    }
};
JSG.graph.model.GraphItem.prototype._notifyRemove = function () {
    var a, b;
    a = 0;
    for (b = this._subItems.length; a < b; a++)this._subItems[a]._notifyRemove();
    this.release()
};
JSG.graph.model.GraphItem.prototype.release = function () {
};
JSG.graph.model.GraphItem.prototype.getIndex = function () {
    return this._parent._subItems.indexOf(this)
};
JSG.graph.model.GraphItem.prototype.moveToTop = function () {
    this.moveToIndex(this._parent._subItems.length - 1)
};
JSG.graph.model.GraphItem.prototype.moveUp = function () {
    var a = this._parent._subItems.indexOf(this);
    this.moveToIndex(a + 1)
};
JSG.graph.model.GraphItem.prototype.moveToBottom = function () {
    this.moveToIndex(0)
};
JSG.graph.model.GraphItem.prototype.moveDown = function () {
    var a = this._parent._subItems.indexOf(this);
    this.moveToIndex(a - 1)
};
JSG.graph.model.GraphItem.prototype.moveToIndex = function (a) {
    var b = this._parent._subItems, c = b.length - 1, d = b.indexOf(this);
    0 <= a && (a <= c && a !== d) && (c = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.INDEX, a), c.source = this, this.sendPreEvent(c), !0 === c.doIt && (JSG.Arrays.move(b, d, a), this.sendPostEvent(c)))
};
JSG.graph.model.GraphItem.prototype.getTranslatedPoint = function (a, b) {
    JSG.graph.Utils.traverseItemUp(this._parent, b, function (b) {
        b.translateToParent(a);
        return !0
    });
    return a
};
JSG.graph.model.GraphItem.prototype.translateFromParent = function (a) {
    var b = this.getOrigin(JSG.ptCache.get());
    a.subtract(b);
    JSG.geometry.Utils.rotatePoint(a, -this._angle.getValue());
    JSG.ptCache.release(b);
    return a
};
JSG.graph.model.GraphItem.prototype.translateToParent = function (a) {
    var b = this.getOrigin(JSG.ptCache.get());
    JSG.geometry.Utils.rotatePoint(a, this._angle.getValue());
    a.add(b);
    JSG.ptCache.release(b);
    return a
};
JSG.graph.model.GraphItem.prototype.getTranslatedShapePoints = function (a, b) {
    var c = function (a, b) {
        var c = void 0 !== b ? b : [], g;
        g = a instanceof JSG.graph.model.shapes.BezierShape ? a.getPolygonPointList().getPoints() : a.getPoints();
        JSG.Arrays.keep(c, g.length, JSG.geometry.Point.Factory);
        var k;
        for (k = 0; k < g.length; k++)c[k].setTo(g[k]);
        return c
    }(this._shape, b);
    JSG.graph.Utils.traverseItemUp(this, a, function (a) {
        var b;
        for (b = 0; b < c.length; b++)a.translateToParent(c[b]);
        return !0
    });
    return c
};
JSG.graph.model.GraphItem.prototype.getTranslatedBoundingBox = function (a, b) {
    var c = this.getBoundingBox(b);
    JSG.graph.Utils.traverseItemUp(this._parent, a, function (a) {
        a._translateBoundingBoxToParent(c);
        return !0
    });
    return c
};
JSG.graph.model.GraphItem.prototype._translateBoundingBoxToParent = function (a) {
    var b = a.getTopLeft(new JSG.geometry.Point(0, 0));
    this.translateToParent(b);
    a.setTopLeftTo(b);
    a.rotate(this.getAngle().getValue())
};
JSG.graph.model.GraphItem.prototype.translateBoundingBoxToParent = function (a) {
    var b = a.getTopLeft();
    this.translateToParent(b);
    a.setTopLeftTo(b);
    a.rotate(this.getAngle().getValue());
    return a
};
JSG.graph.model.GraphItem.prototype.translateBoundingBoxFromParent = function (a) {
    var b = a.getTopLeft();
    this.translateFromParent(b);
    a.setTopLeftTo(b);
    a.rotate(-this.getAngle().getValue());
    return a
};
JSG.graph.model.GraphItem.prototype.containsPoint = function (a, b) {
    if (a) {
        var c = JSG.boxCache.get(), d = this.getBoundingBox(c), e = JSG.findRadius / this.getGraph().getZoom(), f = JSG.ptCache.get(), g = JSG.ptCache.get();
        b === JSG.graph.controller.FindFlags.AREAWITHFRAME || b === JSG.graph.controller.FindFlags.BOXWITHFRAME ? d.expandBy(e) : b === JSG.graph.controller.FindFlags.INNERAREA && d.reduceBy(e);
        var k = d.containsPoint(a);
        k && !this.isCollapsed() && b !== JSG.graph.controller.FindFlags.BOXWITHFRAME && (b === JSG.graph.controller.FindFlags.AREAWITHFRAME ?
            d.reduceBy(e) : b === JSG.graph.controller.FindFlags.INNERAREA && d.expandBy(e), f.setTo(a), f.subtract(d.getTopLeft(g)), d.rotateLocalPointInverse(f), k = this._shape.containsPoint(f, b));
        JSG.boxCache.release(c);
        JSG.ptCache.release(f, g);
        return k
    }
    return !1
};
JSG.graph.model.GraphItem.prototype.saveXML = function (a, b) {
    a.writeStartElement("graphitem");
    void 0 !== this.getId() && a.writeAttributeString("id", this.getId());
    void 0 !== this._parent && void 0 !== this._parent.getId() && a.writeAttributeString("parentid", this._parent.getId());
    this.saveAttributesXML(a);
    this._saveAngle(a, b);
    (this._layer.hasFormula() || "" !== this._layer.getValue()) && this._layer.saveXML("layer", a);
    (this._type.hasFormula() || "" !== this._type.getValue()) && this._type.saveXML("type", a);
    (this._name.hasFormula() ||
    "" !== this._name.getValue()) && this._name.saveXML("name", a);
    (this._link.hasFormula() || "" !== this._link.getValue()) && this._link.saveXML("link", a);
    this.saveXMLContent(a, b);
    a.writeEndElement()
};
JSG.graph.model.GraphItem.prototype._saveAngle = function (a, b) {
    function c(a) {
        d += a.getAngle().getValue()
    }

    var d = this._angle.getValue();
    if (!0 === b) {
        var e = this._angle.copy();
        JSG.graph.Utils.traverseItemUp(this.getParent(), this.getGraph(), c);
        e.setValue(d);
        (e.hasFormula() || 0 !== e.getValue()) && e.saveXML("angle", a, 10)
    } else(this._angle.hasFormula() || 0 !== this._angle.getValue()) && this._angle.saveXML("angle", a, 10)
};
JSG.graph.model.GraphItem.prototype.saveXMLContent = function (a, b) {
    this._pin.saveXML("pin", a, b);
    this._size.saveXML("size", a);
    1E3 === this._collapsedSize.getWidth().getValue() && 1E3 === this._collapsedSize.getHeight().getValue() || this._collapsedSize.saveXML("collapsedsize", a);
    if (this._reshapeCoordinates.length) {
        a.writeStartElement("rscoordinates");
        var c;
        for (c = 0; c < this._reshapeCoordinates.length; c++)this._reshapeCoordinates[c].saveXML("c", a);
        a.writeEndElement()
    }
    this.hasConditions() && this.getConditionManager().saveXML("conditions",
        a);
    this._shape.saveXML("shape", a);
    this._saveSubItemsXML(a)
};
JSG.graph.model.GraphItem.prototype._saveSubItemsXML = function (a) {
    var b;
    for (b = 0; b < this._subItems.length; b++)this._subItems[b].saveXML(a)
};
JSG.graph.model.GraphItem.prototype.readXML = function (a) {
    this._reading = !0;
    this.readAttributesXML(a);
    var b = a.getAttribute("id");
    null !== b && (b = Number(b), void 0 !== JSG.connectionRestorer ? void 0 !== this.getId() ? JSG.connectionRestorer.addId(b, this.getId()) : this.setId(b) : this.setId(b));
    var c, d = this;
    JSG.commons.XML.iterateChildren(this, a, function (a, b) {
        switch (b.nodeName) {
            case "angle":
                a._angle.readXML(b);
                break;
            case "layer":
                a._layer.readXML(b);
                break;
            case "type":
                a._type.readXML(b);
                break;
            case "link":
                a._link.readXML(b);
                break;
            case "shape":
                c = b.getAttribute("type");
                var g = JSG.graph.model.shapes.ShapeFactory.createShapeFromString(c);
                g && (a.setShapeTo(g), g.readXML(b));
                break;
            case "size":
                a._size.readXML(b);
                a._updateBoundingBox();
                break;
            case "collapsedsize":
                a._collapsedSize.readXML(b);
                a._updateBoundingBox();
                break;
            case "lpin":
            case "localpin":
                a._pin._localpin.readXML(b);
                break;
            case "pin":
                a._pin.readXML(b);
                a._updateOrigin();
                break;
            case "format":
                g = new JSG.graph.model.attributes.Format;
                g.readXML(b, a);
                a.getFormat().applyLegacyFormat(g);
                break;
            case "textformat":
                g = new JSG.graph.model.attributes.TextFormat;
                g.readXML(b, a);
                a.getTextFormat().applyLegacyFormat(g);
                break;
            case "attributes":
                g = new JSG.graph.model.attributes.Attributes;
                g.readXML(b, a);
                a.getItemAttributes().applyLegacyAttributes(g);
                break;
            case "rscoordinates":
                if (b.hasChildNodes()) {
                    var g = 0, k = JSG.graph.properties.GraphItemProperties, h, m;
                    h = 0;
                    for (m = b.childNodes.length; h < m; h++) {
                        var l = b.childNodes.item(h);
                        if ("c" === l.nodeName) {
                            var p = new JSG.graph.ReshapeCoordinate;
                            p.readXML(l);
                            a._reshapeCoordinates.push(p);
                            p.getVertical() ? a._reshapeProperties.addIndexProperty(p.getName(), k.getReshapePointY, k.setReshapePointY, g) : a._reshapeProperties.addIndexProperty(p.getName(), k.getReshapePointX, k.setReshapePointX, g);
                            g++
                        }
                    }
                }
                break;
            case "graphitem":
            case "gi":
                c = b.getAttribute("type"), (g = JSG.graphItemFactory.createItemFromString(c)) ? (a.addItem(g), g.readXML(b), d.onReadSubItem(g, a)) : JSG.debug.log("unknown item...")
        }
    });
    b = JSG.commons.XML.findElementByTagName(a, "layoutattributes");
    void 0 !== b && this.getLayoutAttributes().readLegacyXML(b,
        this);
    b = JSG.commons.XML.findElementByTagName(a, "name");
    void 0 !== b ? (this._name.readXML(b), void 0 !== JSG.connectionRestorer && this._assignName(this.getId())) : "" === this._name.getValue() && this._assignName(this.getId());
    b = JSG.commons.XML.findElementByTagName(a, "conditions");
    void 0 !== b && this.getConditionManager().readXML(b);
    JSG.graphItemFactory.initReadItem(this);
    this._reading = !1
};
JSG.graph.model.GraphItem.prototype.onReadSubItem = function (a, b) {
    if (a instanceof JSG.graph.model.TextNode) {
        var c = a.getTextFormat(), d = c.getParent();
        !c._pl && (d && d.getName() === JSG.graph.attr.TextFormatAttributes.Template_ID) && c.setParent(b.getTextFormat())
    }
};
JSG.graph.model.GraphItem.prototype.getItemById = function (a) {
    if (this.getId() === a)return this;
    var b, c;
    for (b = this._subItems.length - 1; 0 <= b; b--)if (c = this._subItems[b].getItemById(a), void 0 !== c)return c
};
JSG.graph.model.GraphItem.prototype._restoreConnections = function (a) {
    var b, c;
    b = 0;
    for (c = this._subItems.length; b < c; b++) {
        var d = this._subItems[b];
        d && d._restoreConnections(a)
    }
};
JSG.graph.model.GraphItem.prototype.sendPostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.PIN:
            this.isRefreshEnabled() ? this.refresh() : this._update();
            break;
        case b.ATTRIBUTE:
            if (a.detailId === JSG.graph.model.events.AttributeChangeEvent.VALUE) {
                var c, d;
                if (a.isCategory(JSG.graph.attr.TextFormatAttributes.NAME))for (b = 0, c = this._subItems.length; b < c; b++)d = this._subItems[b], d instanceof JSG.graph.model.TextNode && this._subItems[b].updateSize(); else if (a.isCategory(JSG.graph.attr.ItemAttributes.NAME))b = !1, a.getAttribute().getName() === JSG.graph.attr.ItemAttributes.COLLAPSED && (b = !0), b && this._update(); else for (b = 0, c = this._subItems.length; b < c; b++)d = this._subItems[b], d instanceof JSG.graph.model.AttributedTextNode && this._subItems[b].updateSize()
            }
    }
    JSG.graph.model.GraphItem._super.sendPostEvent.call(this, a)
};
JSG.graph.model.GraphItem.prototype.getTextSubItem = function (a) {
    var b, c, d, e;
    b = 0;
    for (c = this._subItems.length; b < c; b++)if (d = this._subItems[b], d instanceof JSG.graph.model.TextNode) {
        if (!a || d.containsPoint(a))return d;
        e = e || d
    }
    return e
};
JSG.graph.model.GraphItem.prototype.disableRefresh = function () {
    this._refreshEnabled = !1
};
JSG.graph.model.GraphItem.prototype.enableRefresh = function (a) {
    this._refreshEnabled = !0;
    !0 === a && this.refresh()
};
JSG.graph.model.GraphItem.prototype.isRefreshEnabled = function () {
    return this._refreshEnabled
};
JSG.graph.model.GraphItem.prototype.refresh = function (a) {
    !0 !== this._refreshEnabled && !0 !== a || this._doRefresh(a)
};
JSG.graph.model.GraphItem.prototype._doRefresh = function (a) {
    if (this._update() || !0 === a) {
        var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.ALL);
        b.source = this;
        this.sendPostEvent(b)
    }
    this._shape.refresh();
    var c, b = 0;
    for (c = this._subItems.length; b < c; b++)this._subItems[b].refresh(a)
};
JSG.graph.model.GraphItem.prototype._update = function () {
    var a = this._updateOrigin();
    return a = this._updateBoundingBox() || a
};
JSG.graph.model.GraphItem.prototype._updateOrigin = function () {
    var a = this._pin.getPoint(JSG.ptCache.get()), b = this._pin.getLocalPoint(JSG.ptCache.get()), b = JSG.geometry.Utils.rotatePoint(b, this._angle.getValue());
    a.subtract(b);
    var c = a.isEqualTo(this._origincache, 0.1);
    c || this._origincache.setTo(a);
    JSG.ptCache.release(a, b);
    return !c
};
JSG.graph.model.GraphItem.prototype._updateBoundingBox = function () {
    var a = this.getSizeAsPoint(JSG.ptCache.get()), b = JSG.boxCache.get().setTo(this._bboxcache);
    this._bboxcache.setTopLeftTo(this._origincache);
    this._bboxcache.setSizeTo(a);
    this._bboxcache.setAngle(this._angle.getValue());
    JSG.ptCache.release(a);
    JSG.boxCache.release(b);
    return !b.isEqualTo(this._bboxcache, 0.1)
};
JSG.graph.model.GraphItem.prototype.getConditionManager = function () {
    void 0 === this._condmanager && (this._condmanager = new JSG.graph.model.ConditionManager(this));
    return this._condmanager
};
JSG.graph.model.GraphItem.prototype.hasConditions = function () {
    return void 0 !== this._condmanager && this._condmanager.hasConditions()
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.Graph = function () {
    JSG.graph.model.Graph._super.constructor.call(this, new JSG.graph.model.shapes.RectangleShape);
    this._uniqueId = 1;
    this._graphId = 0;
    this._layers = new JSG.commons.Map;
    this._settings = new JSG.graph.model.settings.GraphSettings;
    this._settings.register(this);
    this.setItemAttribute(JSG.graph.attr.ItemAttributes.SELECTIONMODE, JSG.graph.attr.consts.SelectionMode.NONE);
    this._zoom = this._horizontalPages = this._verticalPages = 1;
    this._changed = !1;
    var a = this._settings.getPage();
    this.setSize(new JSG.graph.expr.NumberExpression(this._horizontalPages *
    a.getUsableWidth()), new JSG.graph.expr.NumberExpression(this._verticalPages * a.getUsableHeight()));
    this._isDirty = !1;
    JSG.graph.model.worksheet && (this._wsStyles = new JSG.graph.model.worksheet.StyleManager)
};
JSG.extend(JSG.graph.model.Graph, JSG.graph.model.GraphItem);
JSG.graph.model.Graph.AttributeID = {REFRESH: "refresh"};
JSG.graph.model.Graph.prototype.newInstance = function () {
    return new JSG.graph.model.Graph
};
JSG.graph.model.Graph.prototype.copy = function (a, b) {
    var c = JSG.graph.model.Graph._super.copy.call(this, a, b);
    c._settings.setTo(this._settings);
    return c
};
JSG.graph.model.Graph.prototype.getWorksheetStyles = function () {
    return this._wsStyles
};
JSG.graph.model.Graph.prototype._assignName = function (a) {
    this.setName("graph")
};
JSG.graph.model.Graph.prototype.isChanged = function () {
    return this._changed
};
JSG.graph.model.Graph.prototype.setChanged = function (a) {
    this._changed = a
};
JSG.graph.model.Graph.prototype.setZoom = function (a) {
    this._zoom = a
};
JSG.graph.model.Graph.prototype.getZoom = function () {
    return this._zoom
};
JSG.graph.model.Graph.prototype.markDirty = function () {
    this._isDirty = !0
};
JSG.graph.model.Graph.prototype._doRefresh = function (a) {
    if (!0 === this._isDirty || !0 === a)this._isDirty = !1, JSG.graph.model.Graph._super._doRefresh.call(this, a), this.layoutAll(), this.updateExtent(), a = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.GRAPH, this), a.detailId = JSG.graph.model.Graph.AttributeID.REFRESH, a.source = this, this.sendPostEvent(a), JSG.debug.log("refresh")
};
JSG.graph.model.Graph.prototype.getLayer = function (a) {
    var b = this._layers.get(a);
    void 0 === b && void 0 !== a && (b = this._layers.put(a, new JSG.graph.model.Layer(a)));
    return b
};
JSG.graph.model.Graph.prototype.hasLayer = function (a) {
    return void 0 !== this._layers.get(a)
};
JSG.graph.model.Graph.prototype.getSettings = function () {
    return this._settings
};
JSG.graph.model.Graph.prototype.setSettings = function (a) {
    void 0 !== a && (this._settings.deregister(this), this._settings = a, this._settings.register(this))
};
JSG.graph.model.Graph.prototype.saveXMLContent = function (a, b) {
    a.writeAttributeString("type", "graph");
    a.writeAttributeString("uniqueid", this._uniqueId);
    this._settings.saveXML(a);
    a.writeStartElement("layers");
    var c = this._layers.elements(), d, e;
    d = 0;
    for (e = c.length; d < e; d++)c[d].saveXML(a);
    a.writeEndElement();
    JSG.graph.model.worksheet && this._wsStyles.saveXML(a);
    JSG.graph.model.Graph._super.saveXMLContent.call(this, a, b);
    this._changed = !1
};
JSG.graph.model.Graph.prototype.readXML = function (a) {
    JSG.graph.model.Graph._super.readXML.call(this, a);
    var b = JSG.commons.XML.findElementByTagName(a, "layers"), c, d, e;
    if (void 0 !== b && b.hasChildNodes())for (c = 0, d = b.childNodes.length; c < d; c++)if (e = b.childNodes.item(c), "layer" === e.nodeName) {
        var f = new JSG.graph.model.Layer(e.getAttribute("name"));
        f.readXML(e);
        this._layers.put(f.name, f)
    }
    b = a.getAttribute("uniqueid");
    null !== b && (this._uniqueId = Number(b));
    null !== a.getAttribute("grid") ? this._settings.readXML(a) : (b =
        JSG.commons.XML.findElementByTagName(a, "settings"), void 0 !== b && this._settings.readXML(b));
    b = JSG.commons.XML.findElementByTagName(a, "wsstyles");
    void 0 !== b && this._wsStyles && this._wsStyles.readXML(b);
    this._changed = !1
};
JSG.graph.model.Graph.prototype.newUniqueId = function () {
    return this._uniqueId++
};
JSG.graph.model.Graph.prototype.createPath = function () {
    return new JSG.graph.model.Path
};
JSG.graph.model.Graph.prototype.getPortById = function (a) {
    var b, c, d;
    b = 0;
    for (c = this._subItems.length; b < c; b++)if (d = this._subItems[b], d instanceof JSG.graph.model.Node && (d = d.getPortById(a), void 0 !== d))return d
};
JSG.graph.model.Graph.prototype.getItemById = function (a) {
    var b, c, d;
    b = 0;
    for (c = this._subItems.length; b < c; b++)if (d = this._subItems[b].getItemById(a), void 0 !== d)return d
};
JSG.graph.model.Graph.prototype.getSubItemsBoundingBox = function (a) {
    a = void 0 !== a ? a : new JSG.geometry.BoundingBox(0, 0);
    if (0 < this._subItems.length) {
        var b = JSG.boxCache.get(), c, d;
        a.setTo(this._subItems[0].getBoundingBox(b));
        c = 1;
        for (d = this._subItems.length; c < d; c++)a.union(this._subItems[c].getBoundingBox(b));
        JSG.boxCache.release(b)
    } else a.reset();
    return a
};
JSG.graph.model.Graph.prototype.translateFromParent = function (a) {
    return a
};
JSG.graph.model.Graph.prototype.translateToParent = function (a) {
    return a
};
JSG.graph.model.Graph.prototype.updateExtent = function () {
    if (!this._reading) {
        var a = this._settings.getPage(), b = this.getTotalBoundingRect(void 0, JSG.rectCache.get()), c = JSG.boxCache.get();
        c._bottomright.x = Math.max(a.getUsableWidth(), b.getRight());
        c._bottomright.x = Math.ceil(Math.floor(c._bottomright.x) / a.getUsableWidth()) * a.getUsableWidth();
        c._bottomright.y = Math.max(a.getUsableHeight(), b.getBottom());
        c._bottomright.y = Math.ceil(c._bottomright.y / a.getUsableHeight()) * a.getUsableHeight();
        c._topleft.x = Math.min(0,
            b.x);
        0 > c._topleft.x && (c._topleft.x = Math.floor(c._topleft.x / a.getUsableWidth()) * a.getUsableWidth());
        c._topleft.y = Math.min(0, b.y);
        0 > c._topleft.y && (c._topleft.y = Math.floor(c._topleft.y / a.getUsableHeight()) * a.getUsableHeight());
        this._horizontalPages = Math.ceil(c.getWidth() / a.getUsableWidth());
        this._verticalPages = Math.ceil(c.getHeight() / a.getUsableHeight());
        this.setBoundingBoxTo(c);
        JSG.boxCache.release(c);
        JSG.rectCache.release(b)
    }
};
JSG.graph.model.Graph.prototype.getTotalBoundingRect = function (a, b) {
    var c = b || new JSG.geometry.Rectangle(0, 0, 0, 0), d = JSG.rectCache.get(), e, f;
    e = 0;
    for (f = this._subItems.length; e < f; e++) {
        var g = this._subItems[e].getTotalBoundingRect(this, d);
        c.union(g)
    }
    JSG.rectCache.release(d);
    return c
};
JSG.graph.model.Graph.prototype.getUsedRect = function (a) {
    a = a || new JSG.geometry.Rectangle(0, 0, 0, 0);
    if (this.getItemCount()) {
        var b = JSG.boxCache.get();
        this.getItemAt(0).getTranslatedBoundingBox(this, b).getBoundingRectangle(a);
        JSG.boxCache.release(b)
    }
    return this.getTotalBoundingRect(void 0, a)
};
JSG.graph.model.Graph.prototype.getPageRectForLocation = function (a, b) {
    var c = b || new JSG.geometry.Rectangle(0, 0, 0, 0), d = this.getBoundingBox(), e = this._settings.getPage(), f = Math.floor(a.x / e.getUsableWidth()), g = Math.floor(a.y / e.getUsableHeight());
    c.set(f * e.getUsableWidth(), g * e.getUsableHeight(), e.getUsableWidth(), e.getUsableHeight());
    c.x = Math.max(d._topleft.x, c.x);
    c.y = Math.max(d._topleft.y, c.y);
    return c
};
JSG.graph.model.Graph.prototype.getGraphId = function () {
    return this._graphId
};
JSG.graph.model.Graph.prototype.setGraphId = function (a) {
    this._graphId = a
};
JSG.graph.model.Graph.prototype.getGraph = function () {
    return this
};
JSG.graph.model.Graph.prototype.getVerticalPages = function () {
    return this._verticalPages
};
JSG.graph.model.Graph.prototype.getVerticalPrintPages = function () {
    var a = this._settings.getPage();
    switch (a.getScaleToPageType()) {
        case JSG.graph.model.settings.ScaleToPageType.NONE:
            return this._verticalPages;
        case JSG.graph.model.settings.ScaleToPageType.HORIZONTALCOUNT:
            var b = this.getUsedRect(JSG.rectCache.get());
            b.expand(500, 500);
            var c = Math.min(1, a.getUsableWidth() * a.getScaleToPageCount() / b.width);
            JSG.rectCache.release(b);
            return Math.ceil(b.height * c / a.getUsableHeight());
        case JSG.graph.model.settings.ScaleToPageType.VERTICALCOUNT:
            return a.getScaleToPageCount()
    }
    return 1
};
JSG.graph.model.Graph.prototype.getHorizontalPages = function () {
    return this._horizontalPages
};
JSG.graph.model.Graph.prototype.getHorizontalPrintPages = function () {
    var a = this._settings.getPage();
    switch (a.getScaleToPageType()) {
        case JSG.graph.model.settings.ScaleToPageType.NONE:
            return this._horizontalPages;
        case JSG.graph.model.settings.ScaleToPageType.HORIZONTALCOUNT:
            return a.getScaleToPageCount();
        case JSG.graph.model.settings.ScaleToPageType.VERTICALCOUNT:
            var b = this.getUsedRect(JSG.rectCache.get());
            b.expandBy(500);
            var c = Math.min(1, a.getUsableHeight() * a.getScaleToPageCount() / b.height);
            JSG.rectCache.release(b);
            return Math.ceil(b.width * c / a.getUsableWidth())
    }
    return 1
};
JSG.graph.model.Graph.prototype.getPrintZoom = function () {
    var a = this._settings.getPage(), b, c;
    switch (a.getScaleToPageType()) {
        case JSG.graph.model.settings.ScaleToPageType.SINGLE:
            return b = this.getUsedRect(JSG.rectCache.get()), b.expandBy(500), c = Math.min(1, a.getUsableWidth() / b.width), a = Math.min(1, a.getUsableHeight() / b.height), JSG.rectCache.release(b), Math.min(c, a);
        case JSG.graph.model.settings.ScaleToPageType.HORIZONTALCOUNT:
            return b = this.getUsedRect(JSG.rectCache.get()), c = Math.min(1, a.getUsableWidth() *
            a.getScaleToPageCount() / b.width), JSG.rectCache.release(b), c;
        case JSG.graph.model.settings.ScaleToPageType.VERTICALCOUNT:
            return b = this.getTotalBoundingRect(void 0, JSG.rectCache.get()), c = Math.min(1, a.getUsableHeight() * a.getScaleToPageCount() / b.height), JSG.rectCache.release(b), c
    }
    return 1
};
JSG.graph.model.Graph.prototype.getTextFormat = function () {
    return JSG.TemplateStore.getTemplate(JSG.graph.attr.TextFormatAttributes.Template_ID) || JSG.graph.model.Graph._super.getTextFormat.call(this)
};
JSG.graph.model.Graph.prototype.updateLabelPositions = function () {
};
JSG.graph.model.Graph.prototype.sendPostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    if (a.id === b.GRAPH || a.id === b.PAGE)switch (b = JSG.graph.model.settings.PageID, a.detailId) {
        case b.WIDTH:
        case b.HEIGHT:
        case b.LEFTMARGIN:
        case b.TOPMARGIN:
        case b.RIGHTMARGIN:
        case b.BOTTOMMARGIN:
        case b.ORIENTATION:
        case b.FORMAT:
            this.layout(), this.updateExtent()
    }
    JSG.graph.model.Graph._super.sendPostEvent.call(this, a)
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.Node = function (a) {
    JSG.graph.model.Node._super.constructor.call(this, a || new JSG.graph.model.shapes.RectangleShape);
    this._ports = [];
    this._pin.setLocalCoordinate(new JSG.graph.expr.NumberExpression(0, "WIDTH * 0.5"), new JSG.graph.expr.NumberExpression(0, "HEIGHT * 0.5"))
};
JSG.extend(JSG.graph.model.Node, JSG.graph.model.GraphItem);
JSG.graph.model.Node.prototype.newInstance = function () {
    return new JSG.graph.model.Node
};
JSG.graph.model.Node.prototype._assignId = function (a) {
    JSG.graph.model.Node._super._assignId.call(this, a);
    this._ports.forEach(function (b) {
        b._assignId(a)
    })
};
JSG.graph.model.Node.prototype._copy = function (a, b, c) {
    a = JSG.graph.model.Node._super._copy.call(this, a, b, c);
    b = 0;
    for (c = this._ports.length; b < c; b++)a.addPort(this._ports[b].copy());
    return a
};
JSG.graph.model.Node.prototype.evaluate = function () {
    JSG.graph.model.Node._super.evaluate.call(this);
    var a;
    for (a = 0; a < this._ports.length; a++)this._ports[a].evaluate()
};
JSG.graph.model.Node.prototype.getTitle = function () {
    var a, b, c;
    b = 0;
    for (c = this._subItems.length; b < c; b++) {
        var d = this._subItems[b];
        if (d instanceof JSG.graph.model.TextNode) {
            a = d;
            break
        }
    }
    return a
};
JSG.graph.model.Node.prototype.layout = function () {
    JSG.graph.model.Node._super.layout.call(this);
    var a = this.getTitle();
    a && this.layoutTitle(a)
};
JSG.graph.model.Node.prototype.layoutTitle = function (a) {
    var b;
    if (this.isCollapsed()) {
        if (void 0 === a.getAttribute("expstate")) {
            var c = a.getPin();
            b = new JSG.graph.model.State;
            b.addProperty("angle", a.getAngle().copy(), "JSG.graph.expr.NumberExpression");
            b.addProperty("pin", c.copy(), "JSG.graph.Pin");
            a.addAttribute(new JSG.graph.attr.ObjectAttribute("expstate", b));
            a.setAngle(0);
            c.setCoordinate(new JSG.graph.expr.NumberExpression(0, "Parent!WIDTH * 0.5"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT * 0.5"));
            c.setLocalCoordinate(new JSG.graph.expr.NumberExpression(0, "WIDTH * 0.5"), new JSG.graph.expr.NumberExpression(0, "HEIGHT * 0.5"));
            c.evaluate()
        }
    } else if (c = a.getAttribute("expstate"))b = c.getValue(), a.getPin().setTo(b.getProperty("pin")), a.getPin().evaluate(a), a.setAngle(b.getProperty("angle")), a.removeAttribute(c)
};
JSG.graph.model.Node.prototype.addPort = function (a) {
    if (0 > this.getPortIndex(a)) {
        var b = new JSG.graph.model.events.NodeEvent(JSG.graph.model.events.NodeEvent.PORTADD, a);
        b.source = this;
        this.sendPreEvent(b);
        !0 === b.doIt && (this._ports.push(a), a._parent = this, void 0 === a.getId() && a.setId(this._createId()), a.evaluate(), this.sendPostEvent(b))
    }
    return a
};
JSG.graph.model.Node.prototype.addPortAtLocation = function (a, b) {
    var c = 0 !== this.getWidth().getValue() ? b.x / this.getWidth().getValue() : 0.5, d = 0 !== this.getHeight().getValue() ? b.y / this.getHeight().getValue() : 0.5, c = new JSG.graph.Coordinate(new JSG.graph.expr.Expression(0, "Parent!WIDTH * " + c), new JSG.graph.expr.Expression(0, "Parent!HEIGHT * " + d));
    a.setPinCoordinateTo(c);
    return this.addPort(a)
};
JSG.graph.model.Node.prototype.addPortAtRelativeLocation = function (a, b) {
    var c = new JSG.graph.Coordinate(new JSG.graph.expr.Expression(0, "Parent!WIDTH * " + b.x), new JSG.graph.expr.Expression(0, "Parent!HEIGHT * " + b.y));
    a.setPinCoordinateTo(c);
    return this.addPort(a)
};
JSG.graph.model.Node.prototype.addPortAtCoordinate = function (a, b) {
    a.setPinCoordinateTo(b);
    return this.addPort(a)
};
JSG.graph.model.Node.prototype.getPortAt = function (a) {
    return this._ports[a]
};
JSG.graph.model.Node.prototype.getPortIndex = function (a) {
    return this._ports.indexOf(a)
};
JSG.graph.model.Node.prototype.getPorts = function () {
    return this._ports
};
JSG.graph.model.Node.prototype.hasPorts = function () {
    return 0 !== this._ports.length
};
JSG.graph.model.Node.prototype.clearPorts = function () {
    var a = new JSG.graph.model.events.NodeEvent(JSG.graph.model.events.NodeEvent.PORTREMOVEALL);
    a.source = this;
    this.sendPreEvent(a);
    !0 === a.doIt && (this._ports = [], this.sendPostEvent(a))
};
JSG.graph.model.Node.prototype.removePort = function (a) {
    var b = new JSG.graph.model.events.NodeEvent(JSG.graph.model.events.NodeEvent.PORTREMOVE, a);
    b.source = this;
    this.sendPreEvent(b);
    !0 === b.doIt && (JSG.Arrays.remove(this._ports, a), a._parent = void 0, this.sendPostEvent(b))
};
JSG.graph.model.Node.prototype.addCenterPort = function () {
    var a = JSG.graph.expr.NumberExpression, b = new a(0, "Parent!WIDTH * 0.5"), a = new a(0, "Parent!HEIGHT * 0.5");
    return this.addPortAtCoordinate(new JSG.graph.model.Port, new JSG.graph.Coordinate(b, a))
};
JSG.graph.model.Node.prototype.addDefaultPorts = function () {
    function a(a, c) {
        b.addPortAtCoordinate(new JSG.graph.model.Port, new JSG.graph.Coordinate(a, c))
    }

    var b = this;
    new JSG.geometry.Point(0, 0);
    var c = JSG.graph.expr.NumberExpression;
    a(new c(0, "Parent!WIDTH * 0.5"), new c(0));
    a(new c(0, "Parent!WIDTH"), new c(0, "Parent!HEIGHT * 0.5"));
    a(new c(0, "Parent!WIDTH * 0.5"), new c(0, "Parent!HEIGHT"));
    a(new c(0), new c(0, "Parent!HEIGHT * 0.5"))
};
JSG.graph.model.Node.prototype.getPortAtLocation = function (a) {
    var b, c = JSG.ptCache.get(), d, e;
    d = 0;
    for (e = this._ports.length; d < e && !(b = this._ports[d], b.getPinPoint(c), 100 > Math.abs(c.x - a.x) && 100 > Math.abs(c.y - a.y)); d++)b = void 0;
    JSG.ptCache.release(c);
    return b
};
JSG.graph.model.Node.prototype.getPortById = function (a) {
    var b, c;
    b = 0;
    for (c = this._ports.length; b < c; b++)if (this._ports[b].getId() === a)return this._ports[b];
    for (b = this._subItems.length - 1; 0 <= b; b--)if (c = this._subItems[b], c instanceof JSG.graph.model.Node && (c = c.getPortById(a), void 0 !== c))return c
};
JSG.graph.model.Node.prototype.getAttachedEdges = function () {
    var a = [];
    this._ports.forEach(function (b) {
        a = a.concat(b.getEdges())
    });
    return a
};
JSG.graph.model.Node.prototype._doRefresh = function (a) {
    JSG.graph.model.Node._super._doRefresh.call(this, a);
    var b, c;
    b = 0;
    for (c = this._ports.length; b < c; b++)this._ports[b].refresh(a)
};
JSG.graph.model.Node.prototype.pathChanged = function () {
    var a;
    for (a = 0; a < this._ports.length; a++)this._ports[a].pathChanged();
    JSG.graph.model.Node._super.pathChanged.call(this)
};
JSG.graph.model.Node.prototype.readXML = function (a) {
    JSG.graph.model.Node._super.readXML.call(this, a);
    a = JSG.commons.XML.findElementByTagName(a, "ports");
    if (void 0 !== a && a.hasChildNodes()) {
        var b, c, d, e;
        b = 0;
        for (c = a.childNodes.length; b < c; b++)if (d = a.childNodes.item(b), "graphitem" === d.nodeName || "gi" === d.nodeName)if (e = d.getAttribute("type"), e = JSG.graphItemFactory.createItemFromString(e || "port"))this.addPort(e), e.readXML(d)
    }
};
JSG.graph.model.Node.prototype.saveXMLContent = function (a, b) {
    JSG.graph.model.Node._super.saveXMLContent.call(this, a, b);
    a.writeAttributeString("type", "node");
    var c = this._ports, d, e;
    if (0 !== c.length) {
        a.writeStartElement("ports");
        d = 0;
        for (e = c.length; d < e; d++)c[d].saveXML(a, b);
        a.writeEndElement()
    }
};
JSG.graph.model.Node.prototype.sendPostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.ANGLE:
        case b.SHAPEPOINTS:
            var b = this.getAttachedEdges(), c, d;
            c = 0;
            for (d = b.length; c < d; c++)b[c].getShape().invalidateVisiblePoints()
    }
    JSG.graph.model.Node._super.sendPostEvent.call(this, a)
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.LineNode = function () {
    JSG.graph.model.LineNode._super.constructor.call(this, new JSG.graph.model.shapes.PolygonShape);
    this.setItemAttribute(JSG.graph.attr.ItemAttributes.CLOSED, !1);
    this.setItemAttribute(JSG.graph.attr.ItemAttributes.PORTMODE, JSG.graph.attr.consts.PortMode.NONE)
};
JSG.extend(JSG.graph.model.LineNode, JSG.graph.model.Node);
JSG.graph.model.LineNode.prototype.newInstance = function () {
    return new JSG.graph.model.LineNode
};
JSG.graph.model.LineNode.prototype._copy = function (a, b, c) {
    return JSG.graph.model.LineNode._super._copy.call(this, a, b, c)
};
JSG.graph.model.LineNode.prototype.saveXMLContent = function (a, b) {
    JSG.graph.model.LineNode._super.saveXMLContent.call(this, a, b);
    a.writeAttributeString("type", "linenode")
};
JSG.graph.model.LineNode.prototype.getMinSize = function (a) {
    return 0
};
JSG.graph.model.LineNode.prototype.containsPoint = function (a, b) {
    var c = !1, d = JSG.ptCache.get(), e = JSG.ptCache.get(), f = this.getBoundingBox(JSG.boxCache.get()), g = JSG.findRadius / this.getGraph().getZoom();
    a && (d.setTo(a), d.subtract(f.getTopLeft(e)), f.rotateLocalPointInverse(d), c = this._shape.containsPoint(d, b, g));
    JSG.boxCache.release(f);
    JSG.ptCache.release(d, e);
    return c
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.Port = function () {
    JSG.graph.model.Port._super.constructor.call(this, new JSG.graph.model.shapes.RectangleShape);
    this._outgoingEdges = [];
    this._incomingEdges = [];
    var a = new JSG.graph.expr.Expression(0, "width * 0.5"), b = new JSG.graph.expr.Expression(0, "height * 0.5");
    this._centerCoord = new JSG.graph.Coordinate(a, b);
    this.setSize(200, 200);
    a = JSG.graph.expr.NumberExpression;
    this.getPin().setLocalCoordinate(new a(0, "width * 0.5"), new a(0, "height * 0.5"))
};
JSG.extend(JSG.graph.model.Port, JSG.graph.model.GraphItem);
JSG.graph.model.Port.prototype.newInstance = function () {
    return new JSG.graph.model.Port
};
JSG.graph.model.Port.prototype._copy = function (a, b, c) {
    a = this.newInstance();
    a._pin.setTo(this._pin);
    a._size = this._size.copy();
    a._centerCoord.setTo(this._centerCoord);
    return a
};
JSG.graph.model.Port.prototype.saveXMLContent = function (a, b) {
    if (!0 === b) {
        var c = this._pin._pin.copy(), d = this._pin._pin.toPoint(JSG.ptCache.get()), d = this.getTranslatedPoint(d, this.getGraph());
        c.getX().setValue(d.x);
        c.getY().setValue(d.y);
        c.saveXML("pin", a);
        JSG.ptCache.release(d)
    } else this._pin.saveXML("pin", a);
    200 === this._size.getWidth().getValue() && 200 === this._size.getHeight().getValue() || this._size.saveXML("size", a)
};
JSG.graph.model.Port.prototype.evaluate = function () {
    JSG.graph.model.Port._super.evaluate.call(this);
    this._centerCoord.evaluate(this)
};
JSG.graph.model.Port.prototype.getConnectionPoint = function (a, b) {
    var c = this.getBoundingBox(), d = c.getCenter(b).add(c._topleft);
    a = void 0 !== a ? a : this.getGraph();
    JSG.graph.Utils.traverseItemUp(this.getParent(), a, function (a) {
        a.translateToParent(d)
    });
    return d
};
JSG.graph.model.Port.prototype.getConnectionCoordinate = function () {
    return this._centerCoord
};
JSG.graph.model.Port.prototype.getCenter = function (a) {
    return this._shape.getPointList().getCenter(a)
};
JSG.graph.model.Port.prototype.addEdge = function (a) {
    a.getSourcePort() === this && (this._outgoingEdges.push(a), JSG.Arrays.remove(this._incomingEdges, a));
    a.getTargetPort() === this && (this._incomingEdges.push(a), JSG.Arrays.remove(this._outgoingEdges, a))
};
JSG.graph.model.Port.prototype.removeEdge = function (a) {
    return JSG.Arrays.remove(this._outgoingEdges, a) ? !0 : JSG.Arrays.remove(this._incomingEdges, a)
};
JSG.graph.model.Port.prototype.getEdges = function () {
    var a = [];
    this._incomingEdges.forEach(function (b) {
        a.push(b)
    });
    this._outgoingEdges.forEach(function (b) {
        a.push(b)
    });
    return a
};
JSG.graph.model.Port.prototype.getEdgesCount = function () {
    return this._incomingEdges.length + this._outgoingEdges.length
};
JSG.graph.model.Port.prototype.getIncomingEdges = function () {
    return this._incomingEdges.slice()
};
JSG.graph.model.Port.prototype.getOutgoingEdges = function () {
    return this._outgoingEdges.slice()
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.PortMapper = function () {
    JSG.graph.model.PortMapper._super.constructor.call(this);
    this.isMapper = !0;
    this._mappedPorts = new JSG.commons.Map
};
JSG.extend(JSG.graph.model.PortMapper, JSG.graph.model.Port);
JSG.graph.model.PortMapper.TYPE = "portmapper";
JSG.graph.model.PortMapper.prototype.mapPort = function (a, b) {
    this.mapPortId(a.getId(), b.getId())
};
JSG.graph.model.PortMapper.prototype.mapPortId = function (a, b) {
    this._mappedPorts.put(a, b)
};
JSG.graph.model.PortMapper.prototype.getMappedPort = function (a) {
    a = this._mappedPorts.get(a);
    return void 0 !== a ? this.getParent().getPortById(a) : void 0
};
JSG.graph.model.PortMapper.prototype.getMappedPortId = function (a) {
    return this._mappedPorts.get(a)
};
JSG.graph.model.PortMapper.prototype.getMappedItemPort = function (a) {
    var b = this.getMappedPort(a);
    return void 0 !== b ? b.isMapper ? b.getMappedItemPort(a) : b : void 0
};
JSG.graph.model.PortMapper.prototype.getMappedItemPortId = function (a) {
    a = this.getMappedItemPort(a);
    return void 0 !== a ? a.getId() : void 0
};
JSG.graph.model.PortMapper.prototype.saveXMLContent = function (a, b) {
    JSG.graph.model.PortMapper._super.saveXMLContent.call(this, a, b);
    a.writeAttributeString("type", JSG.graph.model.PortMapper.TYPE);
    this._mappedPorts.iterate(function (b, d) {
        a.writeStartElement("mp");
        a.writeAttributeString("key", b);
        a.writeAttributeString("id", d);
        a.writeEndElement()
    })
};
JSG.graph.model.PortMapper.prototype.readXML = function (a) {
    JSG.graph.model.PortMapper._super.readXML.call(this, a);
    if (a.hasChildNodes()) {
        var b, c;
        b = 0;
        for (c = a.childNodes.length; b < c; b++) {
            var d = a.childNodes.item(b);
            if ("mp" === d.nodeName) {
                var e = d.getAttribute("id"), d = d.getAttribute("key");
                null !== d && null !== e && this.mapPortId(d, e)
            }
        }
    }
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.TextNode = function () {
    JSG.graph.model.TextNode._super.constructor.call(this, new JSG.graph.model.shapes.RectangleShape);
    var a = this.getFormat();
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    a.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.NONE);
    this._text = new JSG.graph.expr.StringExpression("Text");
    this._metrics = void 0;
    this._lineHeight = 1.2;
    this._cacheTextInfo = !0;
    this._paras = [];
    this.addAttribute(new JSG.graph.attr.TextNodeAttributes);
    this.addAttribute(new JSG.graph.attr.TextFormatAttributes)
};
JSG.extend(JSG.graph.model.TextNode, JSG.graph.model.Node);
JSG.graph.model.TextNode.prototype.newInstance = function () {
    return new JSG.graph.model.TextNode
};
JSG.graph.model.TextNode.prototype._copy = function (a, b, c) {
    a = JSG.graph.model.TextNode._super._copy.call(this, a, b, c);
    a._text = this.getText().copy();
    a.updateSize();
    return a
};
JSG.graph.model.TextNode.prototype.containsPoint = function (a, b) {
    return JSG.graph.model.TextNode._super.containsPoint.call(this, a, JSG.graph.controller.FindFlags.AREA)
};
JSG.graph.model.TextNode.prototype.saveXMLContent = function (a, b) {
    JSG.graph.model.TextNode._super.saveXMLContent.call(this, a, b);
    a.writeAttributeString("type", "text");
    a.writeAttributeString("cache", !0 === this._cacheTextInfo ? "1" : "0");
    this._text.saveXML("text", a, b ? this : void 0)
};
JSG.graph.model.TextNode.prototype._assignName = function (a) {
    this.setName("label" + a)
};
JSG.graph.model.TextNode.prototype.readXML = function (a) {
    JSG.graph.model.TextNode._super.readXML.call(this, a);
    var b = a.getAttribute("cache");
    null !== b && (this._cacheTextInfo = "1" === b ? !0 : !1);
    a = JSG.commons.XML.findElementByTagName(a, "text");
    void 0 !== a && this._text.readXML(a)
};
JSG.graph.model.TextNode.prototype.readAttributesXML = function (a) {
    JSG.graph.model.TextNode._super.readAttributesXML.call(this, a);
    a = this.getItemAttributes();
    if (!(a instanceof JSG.graph.attr.TextNodeAttributes)) {
        var b = new JSG.graph.attr.TextNodeAttributes;
        b.applyLegacyAttributes(a);
        this.addAttribute(b)
    }
};
JSG.graph.model.TextNode.prototype.getParas = function () {
    return this._paras
};
JSG.graph.model.TextNode.prototype.getText = function () {
    return this._text
};
JSG.graph.model.TextNode.prototype.setText = function (a) {
    var b = !1;
    if (a instanceof JSG.graph.expr.Expression)b = this._text.setExpressionOrValue(a); else if (void 0 !== a) {
        a:{
            b = this._text.getTerm();
            if (void 0 !== b && (b = b.getOperand(), void 0 !== b && b.type === JSG.graph.expr.Operand.REFERENCE)) {
                b = b.value.getAttribute();
                break a
            }
            b = void 0
        }
        void 0 !== b ? (b.setExpressionOrValue(a), b = !0) : b = this._text.setExpressionOrValue(a)
    }
    this.invalidateSize();
    b && (this.refresh(), a = this.getGraph(), void 0 !== a && a.markDirty())
};
JSG.graph.model.TextNode.prototype.invalidateSize = function () {
    this._paras = []
};
JSG.graph.model.TextNode.prototype.updateSize = function () {
    if (void 0 !== this._text) {
        var a = 0, b, c, d, e, f = 0, g, k = this.getItemAttributes();
        b = this.getTextFormat();
        c = JSG.graphics;
        c.setFontName(b.getFontName().getValue());
        c.setFontSize(b.getFontSize().getValue());
        c.setFontStyle(b.getFontStyle().getValue());
        c.setFont();
        var h = this._getLogEm(c, b);
        this._paras = this._splitParas();
        f = k.getTopMargin().getValue() + h / 2;
        for (b = 0; b < this._paras.length; b++) {
            g = this._paras[b];
            d = g.getLines();
            for (c = 0; c < d.length; c++)e = d[c], f += e.getHeight(),
                a = Math.max(e.getWidth() + g.getPadding(), a);
            if (g.getType() === JSG.graph.model.TextNode.Paragraph.Type.PARAGRAPH || b === this._paras.length - 1 || this._paras[b + 1].getType() !== g.getType())f += h / 2
        }
        f += k.getBottomMargin().getValue();
        a += k.getLeftMargin().getValue() + k.getRightMargin().getValue();
        if (this.getSize().getWidth().hasFormula() || k.getSizeMode().getValue() === JSG.graph.attr.TextNodeAttributes.SizeMode.WIDTH)a = this.getSize().getWidth();
        this._size.isEqualTo(a, f) || (this._ignoreEvent = !0, this.setSize(a, f), this._ignoreEvent = !1, this.getParent() && this.getParent().updateLabelPositions())
    }
};
JSG.graph.model.TextNode.prototype._splitParas = function () {
    function a(a, b) {
        return "left" === a.style.textAlign ? JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT : "center" === a.style.textAlign ? JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER : "right" === a.style.textAlign ? JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT : b.getHorizontalAlignment().getValue()
    }

    var b = this, c = this.getTextFormat(), d = JSG.graphics, e = this._text.getValue().toString(), f = [], g;
    d.setFontName(c.getFontName().getValue());
    d.setFontSize(c.getFontSize().getValue());
    d.setFontStyle(c.getFontStyle().getValue());
    d.setFont();
    var e = this.repair(e), k = document.createElement("div");
    k.innerHTML = e;
    k.style.visibility = "hidden";
    k.style.fontSize = c.getFontSize().getValue() + "pt";
    k.style.fontFamily = c.getFontName().getValue();
    k.style.fontWeight = c.getFontStyle().getValue() & JSG.graph.attr.TextFormatAttributes.FontStyle.BOLD ? "bold" : "normal";
    k.style.fontStyle = c.getFontStyle().getValue() & JSG.graph.attr.TextFormatAttributes.FontStyle.ITALIC ?
        "italic" : "normal";
    k.style.color = c.getFontColor().getValue();
    document.body.appendChild(k);
    JSG.commons.XML.iterateChildren(this, k, function (e, k) {
        switch (k.nodeName.toLowerCase()) {
            case "p":
                g = new JSG.graph.model.TextNode.Paragraph(b, JSG.graph.model.TextNode.Paragraph.Type.PARAGRAPH);
                g.setAlignment(a(k, c));
                g.set(k, d);
                f.push(g);
                break;
            case "ul":
            case "ol":
                JSG.commons.XML.iterateChildren(this, k, function (e, h) {
                    switch (h.nodeName.toLowerCase()) {
                        case "li":
                            g = new JSG.graph.model.TextNode.Paragraph(b, "ul" === k.nodeName.toLowerCase() ?
                                JSG.graph.model.TextNode.Paragraph.Type.LIST_UL : JSG.graph.model.TextNode.Paragraph.Type.LIST_OL), g.set(h, d), g.setAlignment(a(h, c)), f.push(g)
                    }
                })
        }
    });
    document.body.removeChild(k);
    return f
};
JSG.graph.model.TextNode.prototype.setTextInfoCache = function (a) {
    this._cacheTextInfo = a
};
JSG.graph.model.TextNode.prototype.repair = function (a) {
    -1 === a.indexOf("\x3cp\x3e") && (-1 === a.indexOf("\x3cul\x3e") && -1 === a.indexOf("\x3col\x3e")) && (a = "\x3cp\x3e" + a + "\x3c/p\x3e");
    -1 !== a.indexOf("\n") && (a = a.replace(/\n/g, "\x3cbr\x3e"));
    return a
};
JSG.graph.model.TextNode.prototype._getLogEm = function (a, b) {
    var c = b.getFontSize().getValue() / 72 * JSG.dpi.y;
    return a.getCoordinateSystem().deviceToLogYNoZoom(c)
};
JSG.graph.model.TextNode.prototype._getLogFontMetrics = function (a, b) {
    return JSG.graph.Utils.getFontMetricsEx(a, b)
};
JSG.graph.model.TextNode.prototype.getTextAlign = function () {
    switch (this.getTextFormat().getHorizontalAlignment().getValue()) {
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER:
            return "center";
        case JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT:
            return "right"
    }
    return "left"
};
JSG.graph.model.TextNode.prototype.evaluate = function () {
    JSG.graph.model.TextNode._super.evaluate.call(this);
    this.getTextFormat().evaluate(this);
    this._text.evaluate(this)
};
JSG.graph.model.TextNode.prototype.invalidateTerms = function () {
    JSG.graph.model.TextNode._super.invalidateTerms.call(this);
    this._text.invalidateTerm()
};
JSG.graph.model.TextNode.prototype.sendPostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.SIZE:
        case b.BBOX:
            !1 === this._ignoreEvent && this.invalidateSize();
            break;
        case b.ATTRIBUTE:
            a.isCategory(JSG.graph.attr.TextFormatAttributes.NAME) && (this.updateSize(), this.getParent() && this.getParent().updateLabelPositions())
    }
    JSG.graph.model.TextNode._super.sendPostEvent.call(this, a)
};
JSG.graph.model.TextNode.prototype._doRefresh = function (a) {
    JSG.graph.model.TextNode._super._doRefresh.call(this, a);
    (!1 === this._cacheTextInfo || this._paras && 0 === this._paras.length) && this.updateSize()
};
JSG.graph.model.TextNode.Paragraph = function (a, b) {
    this._node = a;
    this._alignment = a.getTextFormat().getHorizontalAlignment().getValue();
    this._type = b;
    this._padding = 0;
    this._lines = []
};
JSG.graph.model.TextNode.Paragraph.Type = {PARAGRAPH: 1, LIST_OL: 2, LIST_UL: 3};
JSG.graph.model.TextNode.Paragraph.prototype.getWidthLimit = function () {
    var a = this._node.getItemAttributes();
    if (a.getSizeMode().getValue() === JSG.graph.attr.TextNodeAttributes.SizeMode.WIDTH)return a = a.getLeftMargin().getValue() + a.getRightMargin().getValue(), this._node.getSize().getWidth().getValue() - a
};
JSG.graph.model.TextNode.Paragraph.prototype.set = function (a, b) {
    function c() {
        var a = new JSG.graph.model.TextNode.Line(k);
        k._lines.push(a);
        m = h = k._lastSpace = void 0;
        l = 0;
        return a
    }

    function d(a, b, c, d) {
        c = new JSG.graph.model.TextNode.Section(c, d);
        c.assignFormat(b);
        c.measure(a);
        return c
    }

    function e(a, b, c) {
        a.addSection(b);
        b.hasSpace() && (h = a._sections.length - 1, m = c, l = a.getWidth() - b.getWidth())
    }

    var f, g, k = this, h, m, l;
    f = document.createTreeWalker(a, NodeFilter.SHOW_ALL, function (a) {
        return 3 === a.nodeType || "br" === a.tagName.toLowerCase() ?
            NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP
    }, !1);
    var p = [], n;
    if (this.getType() === JSG.graph.model.TextNode.Paragraph.Type.LIST_UL || this.getType() === JSG.graph.model.TextNode.Paragraph.Type.LIST_OL)this._padding = 1.5 * this._node._getLogEm(b, this._node.getTextFormat());
    if ("\x3cbr\x3e" === a.innerHTML)g = new JSG.graph.model.TextNode.Line(this), this._lines.push(g), n = d(b, a, g, " "), g.addSection(n); else {
        for (; null !== (g = f.nextNode());)p.push(g);
        g = new JSG.graph.model.TextNode.Line(this);
        this._lines.push(g);
        var q =
            this.getWidthLimit(), r, t, u = !1, w;
        if (0 !== p.length)if (void 0 === q)for (f = 0; f < p.length; f++)n = p[f], 1 === n.nodeType ? g = c() : (n = d(b, n, g, n.nodeValue), g.addSection(n)); else {
            f = 0;
            do n = p[f], 1 === n.nodeType ? (g = c(), f++) : (!1 === u && (t = n.nodeValue), u = !1, n = d(b, n, g, t), r = g.getWidth() + n.getWidth() + this._padding, r > q ? (w = n.hasSpace(), r = void 0, w && (r = this.splitAtSpace(n, q - g.getWidth() - this._padding, b)), void 0 === r && (void 0 === h ? (r = this.splitInWord(n, q - g.getWidth() - this._padding, b), 0 === g._sections.length && (0 === r && t.length) && r++) : (n =
                g._sections[h], t = n.getText(), r = this.splitAtSpace(n, q - l - this._padding, b), f = m, g.setWidth(l), g._sections.length = h)), n.setText(t.substring(0, r)), n.measure(b, !0), e(g, n, f), t.length > r + 1 && " " === t[r] && r++, t = t.substring(r), t.length ? u = !0 : f++, g = c()) : (e(g, n, f), f++)); while (f < p.length)
        }
    }
};
JSG.graph.model.TextNode.Paragraph.prototype.splitInWord = function (a, b, c) {
    var d = "", e = a.getText().split("");
    a.setFont(c);
    for (a = 0; a < e.length; a++)if (d += e[a], c.getCoordinateSystem().deviceToLogXNoZoom(c.measureText(d).width) > b + 10)return Math.max(0, d.length - 1);
    return 0
};
JSG.graph.model.TextNode.Paragraph.prototype.splitAtSpace = function (a, b, c) {
    var d = a.getText();
    a.setFont(c);
    for (a = d.length - 1; 0 <= a; a--) {
        if (" " === d[a] && c.getCoordinateSystem().deviceToLogXNoZoom(c.measureText(d).width) < b)return Math.max(0, a + 1);
        d = d.substr(0, d.length - 1)
    }
};
JSG.graph.model.TextNode.Paragraph.prototype.setAlignment = function (a) {
    this._alignment = a
};
JSG.graph.model.TextNode.Paragraph.prototype.getAlignment = function () {
    return this._alignment
};
JSG.graph.model.TextNode.Paragraph.prototype.getLines = function () {
    return this._lines
};
JSG.graph.model.TextNode.Paragraph.prototype.getPadding = function () {
    return this._padding
};
JSG.graph.model.TextNode.Paragraph.prototype.getType = function () {
    return this._type
};
JSG.graph.model.TextNode.Line = function (a) {
    this._para = a;
    this._sections = [];
    this._baseline = this._height = this._width = 0
};
JSG.graph.model.TextNode.Line.Type = {PARAGRAPH: 1, LIST_OL: 2, LIST_UL: 3};
JSG.graph.model.TextNode.Line.prototype.getSections = function () {
    return this._sections
};
JSG.graph.model.TextNode.Line.prototype.addSection = function (a) {
    this._sections.push(a);
    this.setWidth(this.getWidth() + a.getWidth());
    this.setHeight(Math.max(this.getHeight(), a.getHeight()));
    this.setBaseline(Math.max(this.getBaseline(), a.getBaseline()))
};
JSG.graph.model.TextNode.Line.prototype.setText = function (a) {
    this._sections = [];
    this._sections.push(new JSG.graph.model.TextNode.Section(this, a))
};
JSG.graph.model.TextNode.Line.prototype.set = function (a) {
    this._sections = []
};
JSG.graph.model.TextNode.Line.prototype.setWidth = function (a) {
    this._width = a
};
JSG.graph.model.TextNode.Line.prototype.getWidth = function () {
    return this._width
};
JSG.graph.model.TextNode.Line.prototype.setBaseline = function (a) {
    this._baseline = a
};
JSG.graph.model.TextNode.Line.prototype.getBaseline = function () {
    return this._baseline
};
JSG.graph.model.TextNode.Line.prototype.setHeight = function (a) {
    this._height = a
};
JSG.graph.model.TextNode.Line.prototype.getHeight = function () {
    return this._height
};
JSG.graph.model.TextNode.Section = function (a, b) {
    this._line = a;
    this._text = b;
    this._baseline = this._height = this._width = 0
};
JSG.graph.model.TextNode.Section.prototype.getText = function () {
    return this._text
};
JSG.graph.model.TextNode.Section.prototype.setText = function (a) {
    this._text = a
};
JSG.graph.model.TextNode.Section.prototype.setWidth = function (a) {
    this._width = a
};
JSG.graph.model.TextNode.Section.prototype.getWidth = function () {
    return this._width
};
JSG.graph.model.TextNode.Section.prototype.setBaseline = function (a) {
    this._baseline = a
};
JSG.graph.model.TextNode.Section.prototype.getBaseline = function () {
    return this._baseline
};
JSG.graph.model.TextNode.Section.prototype.setHeight = function (a) {
    this._height = a
};
JSG.graph.model.TextNode.Section.prototype.getHeight = function () {
    return this._height
};
JSG.graph.model.TextNode.Section.prototype.hasSpace = function (a) {
    return -1 === this._text.lastIndexOf(" ") ? !1 : !0
};
JSG.graph.model.TextNode.Section.prototype.assignFormat = function (a) {
    for (; a && a.parentNode && 3 === a.nodeType;)a = a.parentNode;
    if (a) {
        var b = window.getComputedStyle(a, null);
        if (void 0 !== b) {
            this._fontSize = Math.round(72 * parseInt(b.fontSize, 10) / JSG.dpi.y);
            this._fontName = b.fontFamily;
            this._fontStyle = 0;
            this._fontColor = b.color;
            if ("bold" === b.fontWeight || "700" === b.fontWeight)this._fontStyle = JSG.graph.attr.TextFormatAttributes.FontStyle.BOLD;
            "italic" === b.fontStyle && (this._fontStyle |= JSG.graph.attr.TextFormatAttributes.FontStyle.ITALIC);
            this.getTextNode().getTextFormat().getFontStyle().getValue() & JSG.graph.attr.TextFormatAttributes.FontStyle.UNDERLINE && (this._fontStyle |= JSG.graph.attr.TextFormatAttributes.FontStyle.UNDERLINE);
            for (; a;) {
                if ("u" === a.tagName.toLowerCase()) {
                    this._fontStyle |= JSG.graph.attr.TextFormatAttributes.FontStyle.UNDERLINE;
                    break
                }
                -1 !== a.style.textDecoration.indexOf("underline") && (this._fontStyle |= JSG.graph.attr.TextFormatAttributes.FontStyle.UNDERLINE);
                if ("div" === a.tagName.toLowerCase())break;
                a = a.parentNode
            }
        }
    }
};
JSG.graph.model.TextNode.Section.prototype.getTextNode = function () {
    return this._line._para._node
};
JSG.graph.model.TextNode.Section.prototype.measure = function (a, b) {
    var c;
    this.setFont(a);
    c = !0 === b && " " === this._text[this._text.length - 1] ? a.measureText(this._text.substr(0, this._text.length - 1)) : a.measureText(this._text);
    this.setWidth(a.getCoordinateSystem().deviceToLogXNoZoom(c.width));
    c = this._line._para._node.getTextFormat();
    c = c.getFontSize().getValue() > this._fontSize ? this.getTextNode()._getLogFontMetrics(c.getFontName().getValue(), c.getFontSize().getValue()) : this.getTextNode()._getLogFontMetrics(this._fontName,
        this._fontSize);
    this.setHeight(c.height);
    this.setBaseline(c.baseline)
};
JSG.graph.model.TextNode.Section.prototype.setFont = function (a) {
    void 0 !== this._fontStyle && a.setFontStyle(this._fontStyle);
    void 0 !== this._fontSize && a.setFontSize(this._fontSize);
    void 0 !== this._fontName && a.setFontName(this._fontName);
    a.setFont()
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.AttributedTextNode = function (a) {
    JSG.graph.model.AttributedTextNode._super.constructor.call(this);
    this._text = a || new JSG.graph.expr.AttributeExpression;
    this._text.setConstraint(new JSG.graph.expr.StringConstraint)
};
JSG.extend(JSG.graph.model.AttributedTextNode, JSG.graph.model.TextNode);
JSG.graph.model.AttributedTextNode.TYPE = "attributedtext";
JSG.graph.model.AttributedTextNode.prototype.newInstance = function () {
    return new JSG.graph.model.AttributedTextNode
};
JSG.graph.model.AttributedTextNode.prototype._copy = function (a, b, c) {
    var d = this.getAttributeExpression().copy();
    a = JSG.graph.model.TextNode._super._copy.call(this, a, b, c);
    a._text = d;
    return a
};
JSG.graph.model.AttributedTextNode.prototype.evaluate = function () {
    JSG.graph.model.AttributedTextNode._super.evaluate.call(this);
    void 0 === this._getReferencedAttribute(this._text.getTerm()) ? this._text.setTerm(void 0) : this.updateSize()
};
JSG.graph.model.AttributedTextNode.prototype.getAttributeExpression = function () {
    return this._text
};
JSG.graph.model.AttributedTextNode.prototype.getText = function () {
    var a = this._getReferencedAttribute(this._text.getTerm());
    return void 0 !== a ? a.getExpression() : new JSG.graph.expr.StringExpression("")
};
JSG.graph.model.AttributedTextNode.prototype._getReferencedAttribute = function (a) {
    if (void 0 !== a && (a = a.getOperand(), void 0 !== a && a.type === JSG.graph.expr.Operand.REFERENCE))return a.value.getAttribute()
};
JSG.graph.model.AttributedTextNode.prototype.setAttributeExpression = function (a) {
    this._text.setTo(a)
};
JSG.graph.model.AttributedTextNode.prototype.setText = function (a) {
    var b = this._getReferencedAttribute(this._text.getTerm());
    void 0 !== b ? b.setExpressionOrValue(a) && (this.invalidateSize(), this.refresh(), a = this.getGraph(), void 0 !== a && a.markDirty()) : JSG.graph.model.AttributedTextNode._super.setText.call(this, a)
};
JSG.graph.model.AttributedTextNode.prototype.saveXMLContent = function (a, b) {
    JSG.graph.model.AttributedTextNode._super.saveXMLContent.call(this, a, b);
    a.writeAttributeString("type", JSG.graph.model.AttributedTextNode.TYPE)
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.LineConnection = function (a) {
    JSG.graph.model.LineConnection._super.constructor.call(this, a || new JSG.graph.model.shapes.LineShape);
    this.addAttribute(new JSG.graph.attr.EdgeAttributes);
    this._pin.setLocalCoordinateTo(JSG.graph.Coordinate.fromXY(0, 0));
    this._pin.lockLocalPin(!0);
    this.targetNode = this.sourceNode = void 0
};
JSG.extend(JSG.graph.model.LineConnection, JSG.graph.model.GraphItem);
JSG.graph.model.LineConnection.prototype.newInstance = function () {
    return new JSG.graph.model.LineConnection
};
JSG.graph.model.LineConnection.prototype.hasTargetNode = function () {
    return !!this.targetNode
};
JSG.graph.model.LineConnection.prototype.hasSourceNode = function () {
    return !!this.sourceNode
};
JSG.graph.model.LineConnection.prototype.getSourceNode = function () {
    return this.sourceNode
};
JSG.graph.model.LineConnection.prototype.getTargetNode = function () {
    return this.targetNode
};
JSG.graph.model.LineConnection.prototype.getRotationPoint = function () {
    return this.getStartPoint().copy()
};
JSG.graph.model.LineConnection.prototype.setAngle = function (a) {
    if (!this.getAngle().isEqualToExpressionOrValue(a)) {
        var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.ANGLE, a);
        b.source = this;
        this.sendPreEvent(b);
        !0 === b.doIt && (this._setAngle(a, this.getRotationPoint()), this.sendPostEvent(b))
    }
};
JSG.graph.model.LineConnection.prototype._setAngle = function (a, b) {
    var c, d, e;
    c = this._angle.getValue();
    this._angle.setExpressionOrValue(a);
    d = this._angle.getValue();
    e = this.getPinPoint();
    JSG.geometry.Utils.rotatePointAround(b, e, d - c);
    this.setPinPointTo(e)
};
JSG.graph.model.LineConnection.prototype.rotate = function (a, b) {
    if (a) {
        var c = this.getAngle().getValue() + a;
        b = b || this.getPinPoint();
        this._setAngle(c, b)
    }
};
JSG.graph.model.LineConnection.prototype.addLabel = function (a, b) {
    var c = JSG.graph.model.LineConnection._super.addLabel.call(this, a, b);
    c.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID);
    c.getTextFormat().setFontSize(8);
    c.evaluate();
    c.updateSize();
    return c
};
JSG.graph.model.LineConnection.prototype.getEndCoordinate = function () {
    return this._shape.getEndCoordinate()
};
JSG.graph.model.LineConnection.prototype.getStartCoordinate = function () {
    return this._shape.getStartCoordinate()
};
JSG.graph.model.LineConnection.prototype.getCoordinateAt = function (a) {
    return this._shape.getCoordinateAt(a)
};
JSG.graph.model.LineConnection.prototype.getEndPoint = function (a) {
    var b = this._shape.getCoordinatesCount() - 1;
    return this.getPointAt(b, a)
};
JSG.graph.model.LineConnection.prototype.getStartPoint = function (a) {
    return this.getPointAt(0, a)
};
JSG.graph.model.LineConnection.prototype.getPointAt = function (a, b) {
    var c;
    if (c = this._shape.getCoordinateAt(a))return c = c.toPoint(b), this.translateToParent(c)
};
JSG.graph.model.LineConnection.prototype.getPoints = function (a) {
    var b, c, d, e, f = this._shape.getPoints();
    e = a || [];
    b = JSG.ptCache.get(0, 0);
    d = this.getOrigin(b);
    c = this._angle.getValue();
    JSG.Arrays.keep(e, f.length, JSG.geometry.Point.Factory);
    for (a = 0; a < f.length; a++)e[a].setTo(f[a]), JSG.geometry.Utils.rotatePoint(e[a], c), e[a].add(d);
    JSG.ptCache.release(b);
    return e
};
JSG.graph.model.LineConnection.prototype.getPointsCount = function () {
    return this._shape.getCoordinatesCount()
};
JSG.graph.model.LineConnection.prototype.setEndCoordinateTo = function (a) {
    this._shape.setEndCoordinateTo(a)
};
JSG.graph.model.LineConnection.prototype.setEndCoordinate = function (a, b) {
    this._shape.setEndCoordinate(a, b)
};
JSG.graph.model.LineConnection.prototype.setStartCoordinateTo = function (a) {
    this._shape.setStartCoordinateTo(a)
};
JSG.graph.model.LineConnection.prototype.setStartCoordinate = function (a, b) {
    this._shape.setStartCoordinate(a, b)
};
JSG.graph.model.LineConnection.prototype.setEndPointTo = function (a) {
    this.setPointAt(this._shape.getCoordinatesCount() - 1, a)
};
JSG.graph.model.LineConnection.prototype.setStartPointTo = function (a) {
    this.setPointAt(0, a)
};
JSG.graph.model.LineConnection.prototype.setPointAt = function (a, b) {
    this.translateFromParent(b);
    this._shape.setCoordinateAtToPoint(a, b)
};
JSG.graph.model.LineConnection.prototype.setPoints = function (a) {
    var b, c, d, e, f = new JSG.graph.model.events.ShapeEvent(JSG.graph.model.events.ShapeEvent.REPLACEPOINTS, a);
    f.source = this;
    this.sendPreEvent(f);
    if (!0 === f.doIt) {
        c = this._shape;
        d = JSG.ptCache.get(0, 0);
        c.keepCoordinates(a.length);
        e = c._coordinates;
        for (b = 0; b < a.length; b++)d.setTo(a[b]), this.translateFromParent(d), e[b].set(d.x, d.y);
        JSG.ptCache.release(d);
        c.refresh();
        this.sendPostEvent(f)
    }
};
JSG.graph.model.LineConnection.prototype.insertPointsAt = function (a) {
    var b;
    b = arguments;
    Array.prototype.shift.apply(b);
    b = Array.isArray(b[0]) ? b[0] : b;
    this._shape.insertCoordinatesAt(a, this._createCoordinatesFromPoints(b))
};
JSG.graph.model.LineConnection.prototype._createCoordinatesFromPoints = function (a) {
    var b, c, d = [];
    for (b = 0; b < a.length; b++)(c = a[b]) && d.push(JSG.graph.Coordinate.fromPoint(this.translateFromParent(c.copy())));
    return d
};
JSG.graph.model.LineConnection.prototype.removePointsAt = function (a, b) {
    this._shape.removeCoordinatesAt(a, b)
};
JSG.graph.model.LineConnection.prototype.init = function (a, b) {
    a && this.setStartPointTo(a);
    b && this.setEndPointTo(b);
    this._shape.init()
};
JSG.graph.model.LineConnection.prototype.setBoundingBoxTo = function (a) {
    JSG.debug.log("LineConnection.setBoundingBoxTo called!")
};
JSG.graph.model.LineConnection.prototype.getTotalBoundingRect = function (a, b) {
    var c, d;
    c = this.getParent();
    var e = JSG.boxCache.get(), f = JSG.rectCache.get();
    d = this.getPoints();
    var g, k;
    a = a || c;
    e.setAngle(-this.getParent().getAngle().getValue());
    e.setTopLeftTo(d[0]);
    e.enclosePoints(d);
    JSG.graph.Utils.translateBoundingBoxUp(e, c, a);
    k = e.toRectangle(b);
    c = 0;
    for (d = this._subItems.length; c < d; c++)g = this._subItems[c], g instanceof JSG.graph.model.TextNode && k.union(g.getTotalBoundingRect(a, f));
    JSG.boxCache.release(e);
    JSG.rectCache.release(f);
    return k
};
JSG.graph.model.LineConnection.prototype.getMinSize = function (a) {
    return 0
};
JSG.graph.model.LineConnection.prototype.getSize = function () {
    var a, b;
    2 === this._shape.getCoordinates().length ? (a = this.getEndPoint(), b = this.getStartPoint(), a = JSG.geometry.Utils.getLineLength(b, a), this._size.set(a, a)) : (a = this.getBoundingBox(), this._size.set(a.getWidth(), a.getHeight()));
    return this._size
};
JSG.graph.model.LineConnection.prototype.placeOriginTo = function (a) {
    var b, c, d = JSG.ptCache.get(), e = this.getOrigin(JSG.ptCache.get()).subtract(a), f = this._shape.getCoordinates();
    for (b = 0; b < f.length; b++)c = f[b], c.toPoint(d), d.add(e), c.setToPoint(d);
    this.setOriginTo(a);
    JSG.ptCache.release(d, e)
};
JSG.graph.model.LineConnection.prototype.containsPoint = function (a, b, c) {
    return -1 !== this.getLineSegmentAtPoint(a, c)
};
JSG.graph.model.LineConnection.prototype.getLineSegmentAtPoint = function (a, b) {
    var c, d, e = -1;
    a && (d = JSG.boxCache.get(), c = this.getBoundingBox(d), c.expandBy(b), c.containsPoint(a) && (c = a.copy(), e = this._shape.getLineSegmentAtPoint(this.translateFromParent(c), b)), JSG.boxCache.release(d));
    return e
};
JSG.graph.model.LineConnection.prototype._doRefresh = function (a) {
    var b, c;
    this._shape.refresh();
    if (this._update() || !0 === a)b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.ALL), b.source = this, this.sendPostEvent(b);
    b = 0;
    for (c = this._subItems.length; b < c; b++)this._subItems[b].refresh(a)
};
JSG.graph.model.LineConnection.prototype._updateBoundingBox = function () {
    var a = JSG.ptCache.get(), b = JSG.boxCache.get().setTo(this._bboxcache);
    this._shape.getPointList().getBoundingBox(this._bboxcache);
    this._bboxcache.setTopLeftTo(this.translateToParent(this._bboxcache.getTopLeft(a)));
    this._bboxcache.setAngle(this._angle.getValue());
    JSG.ptCache.release(a);
    JSG.boxCache.release(b);
    return !b.isEqualTo(this._bboxcache, 0.1)
};
JSG.graph.model.LineConnection.prototype.updateLabelPositions = function () {
    if (1 < this._shape.getCoordinatesCount()) {
        var a, b, c, d, e, f = JSG.ptCache.get();
        a = 0;
        for (b = this._subItems.length; a < b; a++)c = this._subItems[a], c instanceof JSG.graph.model.TextNode && (d = c.getBoundingBox(), d = d.getBoundingRectangle(), e = c.getTextFormat().getVerticalPosition().getValue(), f.set(c.getPin().getX(), c.getPin().getY()), (f = this.getLabelPositionAt(void 0, e, d, 0, f)) && c.setPinPointTo(f));
        JSG.ptCache.release(f)
    }
};
JSG.graph.model.LineConnection.prototype.getLabelPositionAt = function (a, b, c, d, e) {
    a = e || new JSG.geometry.Point(0, 0);
    e = this.getFormat().getLineArrowEnd().getValue() !== JSG.graph.attr.FormatAttributes.ArrowStyle.NONE;
    var f = this.getFormat().getLineArrowStart().getValue() !== JSG.graph.attr.FormatAttributes.ArrowStyle.NONE;
    d = this._shape.getVisiblePoints();
    var g = JSG.graph.attr.TextFormatAttributes.VerticalTextPosition;
    if (0 !== d.length) {
        switch (b) {
            case g.BEFORESTART:
                b = d[0];
                d = d[1];
                c = this._getTextLineIntersection(b,
                    d, b, !1, c);
                a.set(b.x - c.x, b.y - c.y);
                break;
            case g.START:
                b = d[0];
                d = d[1];
                c = this._getTextLineIntersection(b, d, b, f, c);
                a.set(b.x + c.x, b.y + c.y);
                break;
            case g.CENTER:
                b = [];
                for (c = f = e = 0; c < d.length - 1; c++)b.push(JSG.geometry.Utils.getLineLength(d[c], d[c + 1])), e += b[c];
                for (c = 0; c < b.length - 1 && !(f += b[c], f >= e / 2 && 0 !== b[c + 1]); c++);
                if (c >= d.length - 1)break;
                b = d[c];
                d = d[c + 1];
                a.set((d.x + b.x) / 2, (d.y + b.y) / 2);
                break;
            case g.END:
                b = d[d.length - 2];
                d = d[d.length - 1];
                c = this._getTextLineIntersection(b, d, d, e, c);
                a.set(d.x + c.x, d.y + c.y);
                break;
            case g.BEHINDEND:
                b =
                    d[d.length - 2], d = d[d.length - 1], c = this._getTextLineIntersection(b, d, d, !1, c), a.set(d.x - c.x, d.y - c.y)
        }
        return a
    }
};
JSG.graph.model.LineConnection.prototype._getTextLineIntersection = function (a, b, c, d, e) {
    var f;
    f = e.height;
    var g = e.width;
    e = new JSG.geometry.Point(0, 0);
    d = d ? 400 : 200;
    d = JSG.rectCache.get().set(c.x - g / 2 - d, c.y - f / 2 - d, g + 2 * d, f + 2 * d);
    g = d.getPoints();
    c = 0;
    for (f = g.length; c < f; c++)if (c === f - 1) {
        if (JSG.geometry.Utils.getIntersectionOfLines(g[c], g[0], a, b, e, !1)) {
            e.translate(-d.getCenterX(), -d.getCenterY());
            break
        }
    } else if (JSG.geometry.Utils.getIntersectionOfLines(g[c], g[c + 1], a, b, e, !1)) {
        e.translate(-d.getCenterX(), -d.getCenterY());
        break
    }
    JSG.rectCache.release(d);
    return e
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.Edge = function (a) {
    JSG.graph.model.Edge._super.constructor.apply(this, arguments);
    this.targetPortId = this.sourcePortId = this.targetPort = this.sourcePort = void 0
};
JSG.extend(JSG.graph.model.Edge, JSG.graph.model.LineConnection);
JSG.graph.model.Edge.prototype.newInstance = function () {
    return new JSG.graph.model.Edge
};
JSG.graph.model.Edge.prototype.saveXMLContent = function (a, b) {
    JSG.graph.model.Edge._super.saveXMLContent.call(this, a, b);
    a.writeAttributeString("type", "edge");
    this.getStartCoordinate().saveXML("start", a);
    this.getEndCoordinate().saveXML("end", a);
    if (void 0 != this.sourcePort || void 0 != this.targetPort)a.writeStartElement("connection"), void 0 != this.sourcePort && (this.sourcePort.isMapper ? (a.writeAttributeString("sourceid", this.sourcePort.getMappedItemPortId(this.getId())), a.writeAttributeString("srcmp", this.sourcePort.getId())) :
        a.writeAttributeString("sourceid", this.sourcePort.getId())), void 0 != this.targetPort && (this.targetPort.isMapper ? (a.writeAttributeString("targetid", this.targetPort.getMappedItemPortId(this.getId())), a.writeAttributeString("trgtmp", this.targetPort.getId())) : a.writeAttributeString("targetid", this.targetPort.getId())), a.writeEndElement()
};
JSG.graph.model.Edge.prototype.readXML = function (a) {
    function b(a, b, c) {
        b = Number(a.getAttribute(b));
        a = Number(a.getAttribute(c));
        return null !== a && 0 != a ? a : null !== b && 0 != b ? b : void 0
    }

    JSG.graph.model.Edge._super.readXML.call(this, a);
    JSG.connectionRestorer && JSG.connectionRestorer.edges.push(this);
    var c = JSG.commons.XML.findElementByTagName(a, "start");
    this.getStartCoordinate().readXML(c);
    c = JSG.commons.XML.findElementByTagName(a, "end");
    this.getEndCoordinate().readXML(c);
    if (c = JSG.commons.XML.findElementByTagName(a,
            "connection"))this.sourcePortId = b(c, "sourceid", "srcmp"), this.targetPortId = b(c, "targetid", "trgtmp")
};
JSG.graph.model.Edge.prototype._restoreConnections = function (a) {
    var b = this.getShape();
    b.disableRefresh();
    if (void 0 != this.sourcePortId) {
        var c = a.getPortById(this.sourcePortId);
        void 0 != c && this.setSourcePort(c)
    }
    void 0 != this.targetPortId && (c = a.getPortById(this.targetPortId), void 0 != c && this.setTargetPort(c));
    b.enableRefresh();
    JSG.graph.model.Edge._super._restoreConnections.call(this, a)
};
JSG.graph.model.Edge.prototype.getSourcePort = function () {
    return this.sourcePort
};
JSG.graph.model.Edge.prototype.hasSourceAttached = function () {
    return void 0 != this.sourcePortId || void 0 != this.sourcePort
};
JSG.graph.model.Edge.prototype.getTargetPort = function () {
    return this.targetPort
};
JSG.graph.model.Edge.prototype.hasTargetAttached = function () {
    return void 0 != this.targetPortId || void 0 != this.targetPort
};
JSG.graph.model.Edge.prototype.setSourcePort = function (a) {
    if (a !== this.sourcePort) {
        var b = this._createAttachOrDetachEvent(a, this.sourcePort);
        this.sendPreEvent(b);
        !0 === b.doIt && (this.sourcePort = this._registerPort(a, this.sourcePort, "sourceNode"), void 0 != this.sourcePort ? (this.sourcePortId = this.sourcePort.getId(), this.sourcePort.addEdge(this), this.setStartCoordinateTo(this._createCoordinateFromPort(a, this.getStartCoordinate()))) : (this.sourcePortId = void 0, this._replaceCoordinateProxy(this.getStartCoordinate(),
            this.setStartCoordinateTo)), this.sendPostEvent(b))
    }
};
JSG.graph.model.Edge.prototype.setTargetPort = function (a) {
    if (a !== this.targetPort) {
        var b = this._createAttachOrDetachEvent(a, this.targetPort);
        this.sendPreEvent(b);
        !0 === b.doIt && (this.targetPort = this._registerPort(a, this.targetPort, "targetNode"), void 0 != this.targetPort ? (this.targetPortId = this.targetPort.getId(), this.targetPort.addEdge(this), this.setEndCoordinateTo(this._createCoordinateFromPort(a, this.getEndCoordinate()))) : (this.targetPortId = void 0, this._replaceCoordinateProxy(this.getEndCoordinate(), this.setEndCoordinateTo)),
            this.sendPostEvent(b))
    }
};
JSG.graph.model.Edge.prototype._createAttachOrDetachEvent = function (a, b) {
    var c = void 0 != a ? new JSG.graph.model.events.Event(JSG.graph.model.events.Event.EDGEATTACHED, a) : new JSG.graph.model.events.Event(JSG.graph.model.events.Event.EDGEDETACHED, b);
    c.source = this;
    return c
};
JSG.graph.model.Edge.prototype._registerPort = function (a, b, c) {
    void 0 != b && b.removeEdge(this);
    this[c] = void 0 != a ? a.getParent() : void 0;
    return a
};
JSG.graph.model.Edge.prototype._createCoordinateFromPort = function (a, b) {
    function c(a, b) {
        var c = a.getConnectionCoordinate(), c = new JSG.graph.CoordinateProxy(c);
        c.evaluate = function (b) {
            this._coordinate.evaluate(a)
        };
        c.setX = function (a) {
        };
        c.setY = function (a) {
        };
        c.copy = function () {
            var a = new JSG.graph.Coordinate;
            a.setToPoint(this.toPoint());
            return a
        };
        c.toPoint = function (c) {
            var d = this._coordinate.toPoint(c);
            c = void 0 != b.getParent() ? b.getParent() : a.getGraph();
            JSG.graph.Utils.traverseItemUp(a, c, function (a) {
                a.translateToParent(d)
            });
            b.translateFromParent(d);
            return d
        };
        return c
    }

    var d = void 0;
    if (void 0 == a) {
        var e = b.toPoint(new JSG.geometry.Point(0, 0)), d = JSG.graph.Coordinate.fromXY(0, 0);
        d.set(e.x, e.y)
    } else d = c(a, this);
    return d
};
JSG.graph.model.Edge.prototype._replaceCoordinateProxy = function (a, b) {
    if (a instanceof JSG.graph.CoordinateProxy) {
        var c = a.toPoint(), c = new JSG.graph.Coordinate.fromPoint(c);
        b.call(this, c)
    }
};
JSG.graph.model.Edge.prototype.setPoints = function (a) {
    var b = this._shape, c = b.getCoordinatesCount() - 1;
    b.disableNotification();
    var c = this.hasTargetAttached() ? b.removeCoordinateAt(c) : void 0, d = this.hasSourceAttached() ? b.removeCoordinateAt(0) : void 0;
    b.keepCoordinates(a.length);
    var e = new JSG.graph.model.events.ShapeEvent(JSG.graph.model.events.ShapeEvent.REPLACEPOINTS, a);
    e.source = this;
    this.sendPreEvent(e);
    if (!0 === e.doIt) {
        this.getOrigin();
        for (var f = new JSG.geometry.Point(0, 0), g = 0; g < a.length; g++)f.setTo(a[g]),
            this.translateFromParent(f), b._coordinates[g].set(f.x, f.y);
        b.refresh();
        this.sendPostEvent(e)
    }
    void 0 != c && b.setEndCoordinateTo(c);
    void 0 != d && b.setStartCoordinateTo(d);
    b.enableNotification()
};
JSG.graph.model.Edge.prototype.setShapeTo = function (a) {
    var b = new JSG.graph.model.events.Event(JSG.graph.model.events.Event.SHAPE, a);
    b.source = this;
    this.sendPreEvent(b);
    if (!0 === b.doIt) {
        var c = void 0, d = void 0;
        if (void 0 != this._shape) {
            var e = this._shape.getCoordinates();
            this.hasSourceAttached() && (c = JSG.Arrays.removeAt(e, 0));
            this.hasTargetAttached() && (d = JSG.Arrays.removeAt(e, e.length - 1));
            this._shape.setItem(void 0)
        }
        this._shape = a;
        this._shape.setItem(this);
        e = this._shape.getCoordinates();
        void 0 != c && (e[0] = c);
        void 0 != d && (e[e.length - 1] = d);
        this._shape.evaluate();
        this._shape.refresh();
        this.sendPostEvent(b)
    }
};
JSG.graph.model.Edge.prototype.detachPort = function (a) {
    void 0 != a && (a === this.sourcePort ? this.setSourcePort(void 0) : a === this.targetPort && this.setTargetPort(void 0))
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.GraphItemFactory = function () {
};
JSG.graph.model.GraphItemFactory.prototype.createItemFromString = function (a) {
    function b(a, b) {
        var c = new JSG.graph.model.shapes.PolygonShape, d = new JSG.graph.model.Node(c), e;
        b && (e = new JSG.graph.ReshapeCoordinate(c._newExpression(0.5), c._newExpression(0.3), 0.5, 0.5, 0, 0.5, "DEPTH", JSG.graph.ReshapeType.YRELATIVETOHEIGHT, !0), d._reshapeCoordinates.push(e));
        for (e = 0; e < a; e++) {
            var g = Math.round(100 * Math.sin(2 * Math.PI / a * e - Math.PI / 2)) / 100, q = Math.round(100 * Math.cos(2 * Math.PI / a * e - Math.PI / 2)) / 100, r = Math.round(100 * Math.sin(2 *
                Math.PI / a * (e + 0.5) - Math.PI / 2)) / 100, t = Math.round(100 * Math.cos(2 * Math.PI / a * (e + 0.5) - Math.PI / 2)) / 100;
            c._coordinates.push(new JSG.graph.Coordinate(c._newExpression(0, "WIDTH / 2 * " + (1 + q)), c._newExpression(0, "HEIGHT / 2 * " + (1 + g))));
            b && c._coordinates.push(new JSG.graph.Coordinate(c._newExpression(0, "WIDTH / 2 + WIDTH / 2 * " + t + " * (1 - DEPTH * 2)"), c._newExpression(0, "HEIGHT / 2 + HEIGHT / 2 * " + r + " * (1 - DEPTH * 2)")))
        }
        b && d._reshapeProperties.addIndexProperty("DEPTH", f.getReshapePointY, f.setReshapePointY,
            0);
        return d
    }

    function c(a) {
        a.getPin().setLocalCoordinate(new JSG.graph.expr.NumberExpression(0, "WIDTH * 0.5"), new JSG.graph.expr.NumberExpression(0, "HEIGHT * 0.5"))
    }

    var d = JSG.graph.attr.consts, e = JSG.graph.attr.ItemAttributes, f = JSG.graph.properties.GraphItemProperties, g = JSG.graph.attr.consts.LineBehavior.AUTO;
    switch (a) {
        case "node":
            return new JSG.graph.model.Node;
        case "linenode":
        case "polylinenode":
            return new JSG.graph.model.LineNode;
        case "contentnode":
            return new JSG.graph.model.ContentNode;
        case "tabbarnode":
            return new JSG.graph.model.TabBarNode;
        case "worksheetnode":
            return new JSG.graph.model.worksheet.WorksheetNode;
        case "headernode":
            return new JSG.graph.model.worksheet.HeaderNode;
        case "sheetheadernode":
            return new JSG.graph.model.worksheet.SheetHeaderNode;
        case "rowheadernode":
            return new JSG.graph.model.worksheet.RowHeaderNode;
        case "columnheadernode":
            return new JSG.graph.model.worksheet.ColumnHeaderNode;
        case "cellsnode":
            return new JSG.graph.model.worksheet.CellsNode;
        case "edge":
            return new JSG.graph.model.Edge;
        case "edgeArrow":
            return a = new JSG.graph.model.Edge,
                a.getFormat().setLineArrowEnd(JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED), a.getFormat().setFillColor("#000000"), a;
        case "edgeDoubleArrow":
            return a = new JSG.graph.model.Edge, a.getFormat().setLineArrowStart(JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED), a.getFormat().setLineArrowEnd(JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED), a.getFormat().setFillColor("#000000"), a;
        case "orthogonalEdge":
            return a = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape), a.getLayoutAttributes().setLineBehavior(g),
                a;
        case "orthogonalEdgeArrow":
            return a = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape), a.getLayoutAttributes().setLineBehavior(g), a.getFormat().setLineArrowEnd(JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED), a.getFormat().setFillColor("#000000"), a;
        case "orthogonalEdgeDoubleArrow":
            return a = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape), a.getLayoutAttributes().setLineBehavior(g), a.getFormat().setLineArrowStart(JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED),
                a.getFormat().setLineArrowEnd(JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED), a.getFormat().setFillColor("#000000"), a;
        case "orthogonalRoundedEdge":
            return a = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape), a.getLayoutAttributes().setLineBehavior(g), a.getFormat().setLineCorner(150), a;
        case "orthogonalRoundedEdgeArrow":
            return a = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape), a.getLayoutAttributes().setLineBehavior(g), a.getFormat().setFillColor("#000000"),
                a.getFormat().setLineCorner(150), a.getFormat().setLineArrowEnd(JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED), a;
        case "orthogonalRoundedEdgeDoubleArrow":
            return a = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape), a.getLayoutAttributes().setLineBehavior(g), a.getFormat().setFillColor("#000000"), a.getFormat().setLineCorner(150), a.getFormat().setLineArrowEnd(JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED), a.getFormat().setLineArrowStart(JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED),
                a;
        case "orthogonalRoundedEdgeArrowDash":
            return a = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape), a.getLayoutAttributes().setLineBehavior(g), a.getFormat().setLineCorner(150), a.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.DASH), a.getFormat().setLineArrowEnd(JSG.graph.attr.FormatAttributes.ArrowStyle.ARROWFILLED), a;
        case "graph":
            return new JSG.graph.model.Graph;
        case "port":
            return new JSG.graph.model.Port;
        case JSG.graph.model.PortMapper.TYPE:
            return new JSG.graph.model.PortMapper;
        case "text":
            return new JSG.graph.model.TextNode;
        case "worksheet":
            return new JSG.graph.model.worksheet.WorkbookNode;
        case JSG.graph.model.AttributedTextNode.TYPE:
            return new JSG.graph.model.AttributedTextNode;
        default:
            return function (a) {
                var h, g, l, p;
                switch (a) {
                    case "rect":
                        h = new JSG.graph.model.shapes.RectangleShape;
                        g = new JSG.graph.model.Node(h);
                        break;
                    case "roundRect":
                    case "roundRectCornerCut":
                    case "roundRectCornerCutSame":
                    case "roundRectCornerCutDiagonal":
                        h = new JSG.graph.model.shapes.BezierShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.1), h._newExpression(0), 0, 0.5, 0, 0, "ROUND", JSG.graph.ReshapeType.XRELATIVETOHEIGHTFROMRIGHT, !1);
                        g._reshapeCoordinates.push(l);
                        "roundRectCornerCutSame" === a ? (l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(1), 0, 0.5, 1, 1, "ROUND2", JSG.graph.ReshapeType.XRELATIVETOHEIGHT, !1), g._reshapeCoordinates.push(l)) : "roundRectCornerCutDiagonal" === a && (l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(0), 0, 0.5, 0, 0, "ROUND2",
                            JSG.graph.ReshapeType.XRELATIVETOHEIGHT, !1), g._reshapeCoordinates.push(l));
                        l = "ROUND";
                        "roundRectCornerCutDiagonal" === a && (l = "ROUND2");
                        "roundRectCornerCut" === a ? (h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * 0.2"))), h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0))), h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.2"), h._newExpression(0)))) : (h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH * " + l + " * 0.45"), h._newExpression(0))), h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * " + l), h._newExpression(0))), h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.4"), h._newExpression(0))));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.6"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * (1 - ROUND)"), h._newExpression(0)));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH * (1 - ROUND * 0.45)"), h._newExpression(0)));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "WIDTH * ROUND * 0.45")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "WIDTH * ROUND")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * 0.4")));
                        l = "ROUND";
                        if ("roundRectCornerCutSame" === a || "roundRectCornerCutDiagonal" === a)l = "ROUND2";
                        "roundRectCornerCut" ===
                        a ? (h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * 0.8"))), h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT"))), h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.8"), h._newExpression(0, "HEIGHT")))) : (h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * 0.6"))), h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH"), h._newExpression(0, "HEIGHT - " + l + " * WIDTH"))), h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT - WIDTH * " + l + " * 0.45"))), h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - WIDTH * " + l + " * 0.45"), h._newExpression(0, "HEIGHT"))), h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - WIDTH * " + l), h._newExpression(0, "HEIGHT"))), h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH * 0.6"), h._newExpression(0, "HEIGHT"))));
                        l = "ROUND";
                        "roundRectCornerCutSame" === a && (l = "ROUND2");
                        "roundRectCornerCut" === a ? (h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.2"), h._newExpression(0, "HEIGHT"))), h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT"))), h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * 0.8")))) : (h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH * 0.4"), h._newExpression(0, "HEIGHT"))), h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * " + l), h._newExpression(0, "HEIGHT"))), h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * " + l + " * 0.45"), h._newExpression(0, "HEIGHT"))), h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT - WIDTH * " + l + " * 0.45"))), h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT - WIDTH * " +
                        l))), h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * 0.6"))));
                        l = "ROUND";
                        "roundRectCornerCutDiagonal" === a && (l = "ROUND2");
                        "roundRectCornerCut" !== a && (h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * 0.4"))), h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "WIDTH * " + l))), h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "WIDTH * " +
                        l + " * 0.45"))));
                        g._reshapeProperties.addIndexProperty("ROUND", f.getReshapePointX, f.setReshapePointX, 0);
                        "roundRectCornerCutSame" !== a && "roundRectCornerCutDiagonal" !== a || g._reshapeProperties.addIndexProperty("ROUND2", f.getReshapePointX, f.setReshapePointX, 1);
                        break;
                    case "rectCornerCut":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.1), h._newExpression(0), 0, 1, 0, 0, "CUT", JSG.graph.ReshapeType.XRELATIVETOHEIGHTFROMRIGHT, !1);
                        g._reshapeCoordinates.push(l);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * CUT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * CUT"), h._newExpression(0)));
                        g._reshapeProperties.addIndexProperty("CUT", f.getReshapePointX, f.setReshapePointX, 0);
                        break;
                    case "rectCornerCutSame":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.1), h._newExpression(0), 0, 0.5, 0, 0, "CUTTOP", JSG.graph.ReshapeType.XRELATIVETOHEIGHT, !1);
                        g._reshapeCoordinates.push(l);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(1), 0, 0.5, 1, 1, "CUTBOTTOM", JSG.graph.ReshapeType.XRELATIVETOHEIGHT, !1);
                        g._reshapeCoordinates.push(l);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "HEIGHT * CUTTOP"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * CUTTOP")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * (1 - CUTBOTTOM)")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "HEIGHT * CUTBOTTOM"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH - HEIGHT * CUTBOTTOM"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * (1 - CUTBOTTOM)")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * CUTTOP")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * CUTTOP"), h._newExpression(0)));
                        g._reshapeProperties.addIndexProperty("CUTTOP", f.getReshapePointX, f.setReshapePointX, 0);
                        g._reshapeProperties.addIndexProperty("CUTBOTTOM",
                            f.getReshapePointX, f.setReshapePointX, 1);
                        break;
                    case "rectCornerCutDiagonal":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.1), h._newExpression(0), 0, 0.5, 0, 0, "CUTLTRB", JSG.graph.ReshapeType.XRELATIVETOHEIGHT, !1);
                        g._reshapeCoordinates.push(l);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(0), 0, 0.5, 0, 0, "CUTRTLB", JSG.graph.ReshapeType.XRELATIVETOHEIGHTFROMRIGHT, !1);
                        g._reshapeCoordinates.push(l);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "HEIGHT * CUTLTRB"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * CUTLTRB")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * (1 - CUTRTLB)")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "HEIGHT * CUTRTLB"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * CUTLTRB"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH"), h._newExpression(0, "HEIGHT * (1 - CUTLTRB)")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * CUTRTLB")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * CUTRTLB"), h._newExpression(0)));
                        g._reshapeProperties.addIndexProperty("CUTLTRB", f.getReshapePointX, f.setReshapePointX, 0);
                        g._reshapeProperties.addIndexProperty("CUTRTLB", f.getReshapePointX, f.setReshapePointX, 1);
                        break;
                    case "cylinder":
                        h = new JSG.graph.model.shapes.RectangleShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.5), h._newExpression(0.2), 0.5, 0.5, 0, 1, "TOPHEIGHT", JSG.graph.ReshapeType.YRELATIVETOWIDTH, !0);
                        g._reshapeCoordinates.push(l);
                        g.getFormat().setFillColor("#0088DD");
                        g.setItemAttribute(e.SELECTIONMODE, d.SelectionMode.AREA | d.SelectionMode.SELECTPARENT);
                        g.setItemAttribute(e.EDITMASK, d.EditMask.COORDINATES);
                        a = new JSG.graph.model.shapes.BezierShape;
                        p = new JSG.graph.model.Node(a);
                        p.getFormat().setFillColor(new JSG.graph.expr.StringExpression("#FFFFFF",
                            "Parent!FILLCOLOR"));
                        p.setItemAttribute(e.SELECTIONMODE, d.SelectionMode.NONE);
                        p.setItemAttribute(e.SIZEABLE, !1);
                        p.setItemAttribute(e.MOVEABLE, d.Moveable.NONE);
                        p.setItemAttribute(e.CONTAINER, !1);
                        p.setSize(new JSG.graph.expr.NumberExpression(0, "Parent!WIDTH"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT - Parent!WIDTH * Parent!TOPHEIGHT / 2"));
                        l = p.getPin();
                        l.setCoordinate(new JSG.graph.expr.NumberExpression(0, "Parent!WIDTH / 2"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT / 2 + Parent!WIDTH * Parent!TOPHEIGHT / 4"));
                        a._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "WIDTH * Parent!TOPHEIGHT / 4")));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0)));
                        a._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0)));
                        a._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT - WIDTH * Parent!TOPHEIGHT / 2")));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0,
                            "HEIGHT - WIDTH * Parent!TOPHEIGHT / 2")));
                        a._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT - WIDTH * Parent!TOPHEIGHT / 4")));
                        a._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.225"), h._newExpression(0, "HEIGHT")));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT")));
                        a._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.775"), h._newExpression(0,
                            "HEIGHT")));
                        a._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT - WIDTH * Parent!TOPHEIGHT / 4")));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT - WIDTH * Parent!TOPHEIGHT / 2")));
                        a._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT - WIDTH * Parent!TOPHEIGHT / 2")));
                        a._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"),
                            h._newExpression(0)));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0)));
                        a._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "WIDTH * Parent!TOPHEIGHT / 4")));
                        a._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.775"), h._newExpression(0, "WIDTH * Parent!TOPHEIGHT / 2")));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "WIDTH * Parent!TOPHEIGHT / 2")));
                        a._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.225"), h._newExpression(0, "WIDTH * Parent!TOPHEIGHT / 2")));
                        g.addItem(p);
                        l = new JSG.graph.model.shapes.EllipseShape;
                        a = new JSG.graph.model.Node(l);
                        a.setItemAttribute(e.MOVEABLE, d.Moveable.NONE);
                        a.setItemAttribute(e.SIZEABLE, !1);
                        a.setItemAttribute(e.CONTAINER, !1);
                        a.setItemAttribute(e.SELECTIONMODE, d.SelectionMode.NONE);
                        a.getFormat().setFillColor(new JSG.graph.expr.StringExpression("#FFFFFF", "Parent!FILLCOLOR"));
                        a.getFormat().setBrightness(40);
                        a.setSize(new JSG.graph.expr.NumberExpression(0, "Parent!WIDTH"), new JSG.graph.expr.NumberExpression(0, "Parent!WIDTH * Parent!TOPHEIGHT"));
                        l = a.getPin();
                        l.setCoordinate(new JSG.graph.expr.NumberExpression(0, "Parent!WIDTH / 2"), new JSG.graph.expr.NumberExpression(0, "Parent!WIDTH * Parent!TOPHEIGHT / 2"));
                        g.addItem(a);
                        g.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.NONE);
                        g.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
                        g._reshapeProperties.addIndexProperty("TOPHEIGHT",
                            f.getReshapePointY, f.setReshapePointY, 0);
                        break;
                    case "cube":
                        h = new JSG.graph.model.shapes.RectangleShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(0.8), 0, 0, 0, 1, "SIDE", JSG.graph.ReshapeType.YRELATIVETOHEIGHTFROMBOTTOM, !0);
                        g._reshapeCoordinates.push(l);
                        g.getFormat().setFillColor("#0088DD");
                        g.setItemAttribute(e.SELECTIONMODE, d.SelectionMode.AREA | d.SelectionMode.SELECTPARENT);
                        g.setItemAttribute(e.EDITMASK, d.EditMask.COORDINATES);
                        l = new JSG.graph.model.shapes.RectangleShape;
                        a = new JSG.graph.model.Node(l);
                        a.setItemAttribute(e.MOVEABLE, d.Moveable.NONE);
                        a.setItemAttribute(e.SIZEABLE, !1);
                        a.setItemAttribute(e.CONTAINER, !1);
                        a.getFormat().setFillColor(new JSG.graph.expr.StringExpression("#FFFFFF", "Parent!FILLCOLOR"));
                        a.getFormat().setBrightness(20);
                        a.setItemAttribute(e.SELECTIONMODE, d.SelectionMode.NONE);
                        a.setSize(new JSG.graph.expr.NumberExpression(0, "Parent!Width - Parent!HEIGHT * (1 - Parent!SIDE)"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT * Parent!SIDE"));
                        l =
                            a.getPin();
                        l.setCoordinate(new JSG.graph.expr.NumberExpression(0, "WIDTH / 2"), new JSG.graph.expr.NumberExpression(0, "(2 - Parent!SIDE) * Parent!HEIGHT / 2"));
                        g.addItem(a);
                        a = new JSG.graph.model.shapes.PolygonShape;
                        p = new JSG.graph.model.Node(a);
                        p.setItemAttribute(e.SIZEABLE, !1);
                        p.setItemAttribute(e.MOVEABLE, d.Moveable.NONE);
                        p.setItemAttribute(e.CONTAINER, !1);
                        p.setItemAttribute(e.SELECTIONMODE, d.SelectionMode.NONE);
                        p.getFormat().setFillColor(new JSG.graph.expr.StringExpression("#FFFFFF", "Parent!FILLCOLOR"));
                        p.getFormat().setBrightness(40);
                        p.setSize(new JSG.graph.expr.NumberExpression(0, "Parent!Width"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT * (1 - Parent!SIDE)"));
                        l = p.getPin();
                        l.setCoordinate(new JSG.graph.expr.NumberExpression(0, "WIDTH / 2"), new JSG.graph.expr.NumberExpression(0, "HEIGHT / 2"));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT")));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT"), h._newExpression(0,
                            "HEIGHT")));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0)));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "HEIGHT"), h._newExpression(0)));
                        g.addItem(p);
                        a = new JSG.graph.model.shapes.PolygonShape;
                        p = new JSG.graph.model.Node(a);
                        p.getFormat().setFillColor(new JSG.graph.expr.StringExpression("#FFFFFF", "Parent!FILLCOLOR"));
                        p.setItemAttribute(e.SIZEABLE, !1);
                        p.setItemAttribute(e.MOVEABLE, d.Moveable.NONE);
                        p.setItemAttribute(e.CONTAINER, !1);
                        p.setItemAttribute(e.SELECTIONMODE,
                            d.SelectionMode.NONE);
                        p.setSize(new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT * (1 - Parent!SIDE)"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT"));
                        l = p.getPin();
                        l.setCoordinate(new JSG.graph.expr.NumberExpression(0, "Parent!WIDTH - WIDTH / 2"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT / 2"));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "WIDTH")));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0)));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT - WIDTH")));
                        a._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT")));
                        g.addItem(p);
                        g.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.NONE);
                        g.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
                        g._reshapeProperties.addIndexProperty("SIDE", f.getReshapePointY, f.setReshapePointY, 0);
                        g.addAttribute(new JSG.graph.attr.BooleanAttribute("keepreshapecoordinates",
                            !0));
                        break;
                    case "bracketSimpleBoth":
                        h = new JSG.graph.model.shapes.RectangleShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(0.2), 0, 0, 0, 0.3, "CURVE", JSG.graph.ReshapeType.YRELATIVETOHEIGHT, !0);
                        g._reshapeCoordinates.push(l);
                        g.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.NONE);
                        g.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
                        g.getItemAttributes().setSelectParentFirst(!0);
                        g.setItemAttribute(e.EDITMASK,
                            d.EditMask.COORDINATES);
                        g._reshapeProperties.addIndexProperty("CURVE", f.getReshapePointY, f.setReshapePointY, 0);
                        "bracketSimpleRight" !== a && (p = new JSG.graph.model.shapes.BezierShape, h = new JSG.graph.model.Node(p), h.setItemAttribute(e.SIZEABLE, !1), h.setItemAttribute(e.MOVEABLE, d.Moveable.NONE), h.setItemAttribute(e.CLOSED, !1), h.setItemAttribute(e.CONTAINER, !1), h.setSize(new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT * Parent!CURVE"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT")), c(h), l = h.getPin(),
                            l.setCoordinate(new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT * Parent!CURVE / 2"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT / 2")), l = p, l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH * 0.55"), l._newExpression(0))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0),
                            l._newExpression(0, "WIDTH * 0.55"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "WIDTH"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "WIDTH * 2"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "HEIGHT - WIDTH * 2"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "HEIGHT - WIDTH"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0),
                            l._newExpression(0, "HEIGHT - WIDTH * 0.55"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH * 0.55"), l._newExpression(0, "HEIGHT"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "HEIGHT"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "HEIGHT"))), g.addItem(h));
                        "bracketSimpleLeft" !== a && (a = new JSG.graph.model.shapes.BezierShape, h = new JSG.graph.model.Node(a), h.setItemAttribute(e.SIZEABLE,
                            !1), h.setItemAttribute(e.MOVEABLE, d.Moveable.NONE), h.setItemAttribute(e.CLOSED, !1), h.setItemAttribute(e.CONTAINER, !1), h.setSize(new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT * Parent!CURVE"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT")), c(h), l = h.getPin(), l.setCoordinate(new JSG.graph.expr.NumberExpression(0, "Parent!WIDTH - Parent!HEIGHT * Parent!CURVE / 2"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT / 2")), l = a, l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0),
                            l._newExpression(0))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH * 0.45"), l._newExpression(0))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "WIDTH * 0.55"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "WIDTH"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0,
                            "WIDTH"), l._newExpression(0, "WIDTH * 2"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "HEIGHT - WIDTH * 2"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "HEIGHT - WIDTH"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "HEIGHT - WIDTH * 0.55"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH * 0.45"), l._newExpression(0,
                            "HEIGHT"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "HEIGHT"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "HEIGHT"))), g.addItem(h));
                        break;
                    case "bracketSimpleLeft":
                        h = new JSG.graph.model.shapes.BezierShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(0.2), 0, 0, 0, 0.4, "CURVE", JSG.graph.ReshapeType.YRELATIVETOHEIGHT, !0);
                        g._reshapeCoordinates.push(l);
                        g._reshapeProperties.addIndexProperty("CURVE",
                            f.getReshapePointY, f.setReshapePointY, 0);
                        g.setItemAttribute(e.CLOSED, !1);
                        g.setItemAttribute(e.CONTAINER, !1);
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0)));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.55"), h._newExpression(0)));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * CURVE / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * CURVE")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT - HEIGHT * CURVE")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0,
                            "HEIGHT - HEIGHT * CURVE / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.55"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT")));
                        break;
                    case "bracketSimpleRight":
                        h = new JSG.graph.model.shapes.BezierShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(1),
                            h._newExpression(0.2), 1, 1, 0, 0.4, "CURVE", JSG.graph.ReshapeType.YRELATIVETOHEIGHT, !0);
                        g._reshapeCoordinates.push(l);
                        g._reshapeProperties.addIndexProperty("CURVE", f.getReshapePointY, f.setReshapePointY, 0);
                        g.setItemAttribute(e.CLOSED, !1);
                        g.setItemAttribute(e.CONTAINER, !1);
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0)));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH * 0.45"), h._newExpression(0)));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * CURVE / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * CURVE")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH"), h._newExpression(0, "HEIGHT - HEIGHT * CURVE")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT - HEIGHT * CURVE / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.45"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT")));
                        break;
                    case "bracketCurvedBoth":
                        h = new JSG.graph.model.shapes.RectangleShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(0.2), 0, 0, 0, 0.3, "CURVE", JSG.graph.ReshapeType.YRELATIVETOHEIGHT, !0);
                        g._reshapeCoordinates.push(l);
                        g.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.NONE);
                        g.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
                        g.getItemAttributes().setSelectParentFirst(!0);
                        g.setItemAttribute(e.EDITMASK, d.EditMask.COORDINATES);
                        g._reshapeProperties.addIndexProperty("CURVE", f.getReshapePointY, f.setReshapePointY, 0);
                        "bracketCurvedRight" !== a && (p = new JSG.graph.model.shapes.BezierShape, h = new JSG.graph.model.Node(p), h.setItemAttribute(e.SIZEABLE, !1), h.setItemAttribute(e.MOVEABLE, d.Moveable.NONE), h.setItemAttribute(e.CLOSED, !1), h.setItemAttribute(e.CONTAINER, !1), h.setSize(new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT * Parent!CURVE"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT")), c(h), l = h.getPin(), l.setCoordinate(new JSG.graph.expr.NumberExpression(0,
                            "Parent!HEIGHT * Parent!CURVE / 2"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT / 2")), l = p, l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH * 0.55"), l._newExpression(0))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0,
                            "WIDTH * 0.55"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "WIDTH"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "WIDTH * 2"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT / 4"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT / 2 - WIDTH * 0.45"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0,
                            "WIDTH / 2"), l._newExpression(0, "HEIGHT / 2"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "HEIGHT / 2"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "HEIGHT / 2"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "HEIGHT / 2"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT / 2"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0,
                            "WIDTH / 2"), l._newExpression(0, "HEIGHT / 2 + WIDTH * 0.45"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT * 0.75"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT - WIDTH * 2"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT - WIDTH"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"),
                            l._newExpression(0, "HEIGHT - WIDTH * 0.55"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH * 0.55"), l._newExpression(0, "HEIGHT"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "HEIGHT"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "HEIGHT"))), g.addItem(h));
                        "bracketCurvedLeft" !== a && (a = new JSG.graph.model.shapes.BezierShape, h = new JSG.graph.model.Node(a), h.setItemAttribute(e.SIZEABLE,
                            !1), h.setItemAttribute(e.MOVEABLE, d.Moveable.NONE), h.setItemAttribute(e.CLOSED, !1), h.setItemAttribute(e.CONTAINER, !1), h.setSize(new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT * Parent!CURVE"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT")), c(h), l = h.getPin(), l.setCoordinate(new JSG.graph.expr.NumberExpression(0, "Parent!WIDTH - Parent!HEIGHT * Parent!CURVE / 2"), new JSG.graph.expr.NumberExpression(0, "Parent!HEIGHT / 2")), l = a, l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0),
                            l._newExpression(0))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH * 0.45"), l._newExpression(0))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "WIDTH * 0.55"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "WIDTH"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0,
                            "WIDTH / 2"), l._newExpression(0, "WIDTH * 2"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT / 4"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT / 2 - WIDTH * 0.45"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT / 2"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0,
                            "HEIGHT / 2"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "HEIGHT / 2"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH"), l._newExpression(0, "HEIGHT / 2"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT / 2"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT / 2 + WIDTH * 0.45"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0,
                            "WIDTH / 2"), l._newExpression(0, "HEIGHT * 0.75"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT - WIDTH * 2"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT - WIDTH"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH / 2"), l._newExpression(0, "HEIGHT - WIDTH * 0.55"))), l._cpFromCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0, "WIDTH * 0.45"),
                            l._newExpression(0, "HEIGHT"))), l._coordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "HEIGHT"))), l._cpToCoordinates.push(new JSG.graph.Coordinate(l._newExpression(0), l._newExpression(0, "HEIGHT"))), g.addItem(h));
                        break;
                    case "bracketCurvedLeft":
                        h = new JSG.graph.model.shapes.BezierShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(0.2), 0, 0, 0, 0.4, "CURVE", JSG.graph.ReshapeType.YRELATIVETOHEIGHT, !0);
                        g._reshapeCoordinates.push(l);
                        g._reshapeProperties.addIndexProperty("CURVE", f.getReshapePointY, f.setReshapePointY, 0);
                        g.setItemAttribute(e.CLOSED, !1);
                        g.setItemAttribute(e.CONTAINER, !1);
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0)));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.55"), h._newExpression(0)));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH / 2"), h._newExpression(0, "HEIGHT * CURVE / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT * CURVE")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT / 4")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0,
                            "HEIGHT / 2 - HEIGHT * CURVE / 2")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT / 2")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2 + HEIGHT * CURVE / 2")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT * 0.75")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0,
                            "HEIGHT - HEIGHT * CURVE")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT - HEIGHT * CURVE / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.55"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT")));
                        break;
                    case "bracketCurvedRight":
                        h =
                            new JSG.graph.model.shapes.BezierShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(1), h._newExpression(0.2), 1, 1, 0, 0.4, "CURVE", JSG.graph.ReshapeType.YRELATIVETOHEIGHT, !0);
                        g._reshapeCoordinates.push(l);
                        g._reshapeProperties.addIndexProperty("CURVE", f.getReshapePointY, f.setReshapePointY, 0);
                        g.setItemAttribute(e.CLOSED, !1);
                        g.setItemAttribute(e.CONTAINER, !1);
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0),
                            h._newExpression(0)));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.45"), h._newExpression(0)));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT * CURVE / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT * CURVE")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH / 2"), h._newExpression(0, "HEIGHT / 4")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2 - HEIGHT * CURVE / 2")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0,
                            "HEIGHT / 2")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2 + HEIGHT * CURVE / 2")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT * 0.75")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH / 2"), h._newExpression(0, "HEIGHT / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT - HEIGHT * CURVE")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT - HEIGHT * CURVE / 2")));
                        h._cpFromCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.45"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0,
                            "HEIGHT")));
                        h._cpToCoordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT")));
                        break;
                    case "arrowLeft":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(1), h._newExpression(0.2), 1, 1, 0, 0.5, "BASE", JSG.graph.ReshapeType.YRELATIVETOHEIGHT, !0);
                        g._reshapeCoordinates.push(l);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.5), h._newExpression(0), 0, 1, 0, 0, "ARROWLENGTH", JSG.graph.ReshapeType.XRELATIVETOHEIGHT,
                            !1);
                        g._reshapeCoordinates.push(l);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * BASE")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "ARROWLENGTH * HEIGHT"), h._newExpression(0, "HEIGHT * BASE")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "ARROWLENGTH * HEIGHT"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * 0.5")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "ARROWLENGTH * HEIGHT"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "ARROWLENGTH * HEIGHT"), h._newExpression(0, "HEIGHT * (1 - BASE)")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * (1 - BASE)")));
                        g._reshapeProperties.addIndexProperty("BASE", f.getReshapePointY, f.setReshapePointY, 0);
                        g._reshapeProperties.addIndexProperty("ARROWLENGTH", f.getReshapePointX, f.setReshapePointX, 1);
                        break;
                    case "arrowUp":
                        h =
                            new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.2), h._newExpression(1), 0, 0.5, 1, 1, "BASE", JSG.graph.ReshapeType.XRELATIVETOWIDTH, !1);
                        g._reshapeCoordinates.push(l);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(0.5), 0, 0, 0, 1, "ARROWLENGTH", JSG.graph.ReshapeType.YRELATIVETOWIDTH, !0);
                        g._reshapeCoordinates.push(l);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * BASE"), h._newExpression(0,
                            "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * BASE"), h._newExpression(0, "ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.5"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH * (1 - BASE)"), h._newExpression(0, "ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * (1 - BASE)"), h._newExpression(0, "HEIGHT")));
                        g._reshapeProperties.addIndexProperty("BASE", f.getReshapePointX, f.setReshapePointX, 0);
                        g._reshapeProperties.addIndexProperty("ARROWLENGTH", f.getReshapePointY, f.setReshapePointY, 1);
                        break;
                    case "arrowRight":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0),
                            h._newExpression(0.2), 0, 0, 0, 0.5, "BASE", JSG.graph.ReshapeType.YRELATIVETOHEIGHT, !0);
                        g._reshapeCoordinates.push(l);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.5), h._newExpression(0), 0, 1, 0, 0, "ARROWLENGTH", JSG.graph.ReshapeType.XRELATIVETOHEIGHTFROMRIGHT, !1);
                        g._reshapeCoordinates.push(l);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * BASE")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * ARROWLENGTH"), h._newExpression(0,
                            "HEIGHT * BASE")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * ARROWLENGTH"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT * 0.5")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * ARROWLENGTH"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * ARROWLENGTH"), h._newExpression(0, "HEIGHT * (1 - BASE)")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * (1 - BASE)")));
                        g._reshapeProperties.addIndexProperty("BASE", f.getReshapePointY, f.setReshapePointY, 0);
                        g._reshapeProperties.addIndexProperty("ARROWLENGTH", f.getReshapePointX, f.setReshapePointX, 1);
                        break;
                    case "arrowDown":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.2), h._newExpression(1), 0, 0.5, 0, 0, "BASE", JSG.graph.ReshapeType.XRELATIVETOWIDTH,
                            !1);
                        g._reshapeCoordinates.push(l);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(0.5), 0, 0, 0, 1, "ARROWLENGTH", JSG.graph.ReshapeType.YRELATIVETOWIDTHFROMBOTTOM, !0);
                        g._reshapeCoordinates.push(l);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * BASE"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * BASE"), h._newExpression(0, "HEIGHT - ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0),
                            h._newExpression(0, "HEIGHT - ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.5"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT - ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * (1 - BASE)"), h._newExpression(0, "HEIGHT - ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * (1 - BASE)"),
                            h._newExpression(0)));
                        g._reshapeProperties.addIndexProperty("BASE", f.getReshapePointX, f.setReshapePointX, 0);
                        g._reshapeProperties.addIndexProperty("ARROWLENGTH", f.getReshapePointY, f.setReshapePointY, 1);
                        break;
                    case "arrowDblHorz":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.5), h._newExpression(0.2), 0.5, 0.5, 0, 0.5, "BASE", JSG.graph.ReshapeType.YRELATIVETOHEIGHT, !0);
                        g._reshapeCoordinates.push(l);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.5),
                            h._newExpression(0), 0, 1, 0, 0, "ARROWLENGTH", JSG.graph.ReshapeType.XRELATIVETOHEIGHT, !1);
                        g._reshapeCoordinates.push(l);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "ARROWLENGTH * HEIGHT"), h._newExpression(0, "HEIGHT * BASE")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "ARROWLENGTH * HEIGHT"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT * 0.5")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "ARROWLENGTH * HEIGHT"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "ARROWLENGTH * HEIGHT"), h._newExpression(0, "HEIGHT * (1 - BASE)")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * ARROWLENGTH"), h._newExpression(0, "HEIGHT * (1 - BASE)")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * ARROWLENGTH"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH"), h._newExpression(0, "HEIGHT * 0.5")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * ARROWLENGTH"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH - HEIGHT * ARROWLENGTH"), h._newExpression(0, "HEIGHT * BASE")));
                        g._reshapeProperties.addIndexProperty("BASE", f.getReshapePointY, f.setReshapePointY, 0);
                        g._reshapeProperties.addIndexProperty("ARROWLENGTH", f.getReshapePointX, f.setReshapePointX, 1);
                        break;
                    case "arrowDblVert":
                        h =
                            new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0.2), h._newExpression(0.5), 0, 0.5, 0.5, 0.5, "BASE", JSG.graph.ReshapeType.XRELATIVETOWIDTH, !1);
                        g._reshapeCoordinates.push(l);
                        l = new JSG.graph.ReshapeCoordinate(h._newExpression(0), h._newExpression(0.5), 0, 0, 0, 1, "ARROWLENGTH", JSG.graph.ReshapeType.YRELATIVETOWIDTH, !0);
                        g._reshapeCoordinates.push(l);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * BASE"), h._newExpression(0,
                            "ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.5"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * (1 - BASE)"), h._newExpression(0, "ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0,
                            "WIDTH * (1 - BASE)"), h._newExpression(0, "HEIGHT - ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT - ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * 0.5"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT - ARROWLENGTH * WIDTH")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH * BASE"),
                            h._newExpression(0, "HEIGHT - ARROWLENGTH * WIDTH")));
                        g._reshapeProperties.addIndexProperty("BASE", f.getReshapePointX, f.setReshapePointX, 0);
                        g._reshapeProperties.addIndexProperty("ARROWLENGTH", f.getReshapePointY, f.setReshapePointY, 1);
                        break;
                    case "triangleLeft":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0,
                            "HEIGHT / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT")));
                        break;
                    case "triangleRight":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT / 2")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT")));
                        break;
                    case "triangleTop":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0, "HEIGHT")));
                        break;
                    case "triangleBottom":
                        h = new JSG.graph.model.shapes.PolygonShape;
                        g = new JSG.graph.model.Node(h);
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0),
                            h._newExpression(0)));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH / 2"), h._newExpression(0, "HEIGHT")));
                        h._coordinates.push(new JSG.graph.Coordinate(h._newExpression(0, "WIDTH"), h._newExpression(0)));
                        break;
                    case "parallel":
                        break;
                    case "polyedge4":
                        g = b(4, !1);
                        break;
                    case "polyedge5":
                        g = b(5, !1);
                        break;
                    case "polyedge6":
                        g = b(6, !1);
                        break;
                    case "polyedge8":
                        g = b(8, !1);
                        break;
                    case "polyedge10":
                        g = b(10, !1);
                        break;
                    case "polyedge12":
                        g = b(12, !1);
                        break;
                    case "star3":
                        g = b(3, !0);
                        break;
                    case "star4":
                        g = b(4,
                            !0);
                        break;
                    case "star5":
                        g = b(5, !0);
                        break;
                    case "star6":
                        g = b(6, !0);
                        break;
                    case "star8":
                        g = b(8, !0);
                        break;
                    case "star12":
                        g = b(12, !0);
                        break;
                    default:
                        return
                }
                g.evaluate();
                return g
            }(a)
    }
};
JSG.graph.model.GraphItemFactory.prototype.createShape = function (a) {
};
JSG.graph.model.GraphItemFactory.prototype.getFriends = function (a) {
};
JSG.graph.model.GraphItemFactory.prototype.getLink = function (a) {
};
JSG.graph.model.GraphItemFactory.prototype.isValidSubItem = function (a, b) {
    return !0
};
JSG.graph.model.GraphItemFactory.prototype.initReadItem = function (a) {
};
JSG.graph.model.GraphItemFactory.prototype.getCommandButtons = function (a) {
};
JSG.namespace("JSG.graph.controller");
JSG.graph.controller.FindFlags = {AUTOMATIC: 0, AREA: 1, FRAME: 2, AREAWITHFRAME: 3, INNERAREA: 4, BOXWITHFRAME: 5};
JSG.graph.controller.ModelController = function (a) {
    this.model = void 0 !== a ? a : new JSG.graph.model.Model;
    this.view = void 0;
    this.isActive = !1;
    this.parent = void 0;
    this.children = []
};
JSG.graph.controller.ModelController.prototype.getParent = function () {
    return this.parent
};
JSG.graph.controller.ModelController.prototype.getIndex = function () {
    return void 0 !== this.parent ? this.parent.children.indexOf(this) : -1
};
JSG.graph.controller.ModelController.prototype.moveToIndex = function (a) {
    if (!(0 > a || a >= this.parent.children.length)) {
        var b = this.parent.children.indexOf(this);
        JSG.Arrays.move(this.parent.children, b, a);
        this.getView().moveToIndex(a);
        this.getModel().moveToIndex(a)
    }
};
JSG.graph.controller.ModelController.prototype.moveToTop = function () {
    var a = this.parent.children.indexOf(this);
    JSG.Arrays.move(this.parent.children, a, this.parent.children.length - 1);
    this.getView().moveToTop();
    this.getModel().moveToTop()
};
JSG.graph.controller.ModelController.prototype.moveUp = function () {
    var a = this.parent.children.indexOf(this);
    a < this.parent.children.length - 1 && JSG.Arrays.move(this.parent.children, a, a + 1);
    this.getView().moveUp();
    this.getModel().moveUp()
};
JSG.graph.controller.ModelController.prototype.moveToBottom = function () {
    var a = this.parent.children.indexOf(this);
    JSG.Arrays.move(this.parent.children, a, 0);
    this.getView().moveToBottom();
    this.getModel().moveToBottom()
};
JSG.graph.controller.ModelController.prototype.moveDown = function () {
    var a = this.parent.children.indexOf(this);
    0 < a && JSG.Arrays.move(this.parent.children, a, a - 1);
    this.getView().moveDown();
    this.getModel().moveDown()
};
JSG.graph.controller.ModelController.prototype.hasChildren = function () {
    return 0 !== this.children.length
};
JSG.graph.controller.ModelController.prototype.getChildren = function () {
    return this.children
};
JSG.graph.controller.ModelController.prototype.getChildAt = function (a) {
    return 0 <= a && a < this.children.length ? this.children[a] : void 0
};
JSG.graph.controller.ModelController.prototype.isSelectable = function () {
    return !1
};
JSG.graph.controller.ModelController.prototype.isSelected = function () {
    return !1
};
JSG.graph.controller.ModelController.prototype.setSelected = function (a) {
};
JSG.graph.controller.ModelController.prototype.getModel = function () {
    return this.model
};
JSG.graph.controller.ModelController.prototype.getView = function () {
    void 0 === this.view && (this.view = this.createView(this.model));
    return this.view
};
JSG.graph.controller.ModelController.prototype.createView = function (a) {
    return new JSG.ui.View
};
JSG.graph.controller.ModelController.prototype.setView = function (a) {
    this.view = a
};
JSG.graph.controller.ModelController.prototype.addChild = function (a, b) {
    this.children.insert(a, b);
    a.parent = this;
    this.addChildView(a, b);
    a._notifyAdd();
    this.isActive && a.activate()
};
JSG.graph.controller.ModelController.prototype._notifyAdd = function () {
    var a, b;
    a = 0;
    for (b = this.children.length; a < b; a++)this.children[a]._notifyAdd();
    this.refresh()
};
JSG.graph.controller.ModelController.prototype.activate = function () {
    this.isActive = !0;
    var a, b;
    a = 0;
    for (b = this.children.length; a < b; a++)this.children[a].activate()
};
JSG.graph.controller.ModelController.prototype.addChildView = function (a, b) {
    this.getView().addView(a.getView(), b)
};
JSG.graph.controller.ModelController.prototype.removeChild = function (a) {
    JSG.Arrays.remove(this.children, a) && (this.isActive && a.deactivate(), a.parent = void 0, this._notifyRemove(), this.removeChildView(a))
};
JSG.graph.controller.ModelController.prototype.deactivate = function () {
    this.isActive = !1;
    var a, b;
    a = 0;
    for (b = this.children.length; a < b; a++)this.children[a].deactivate()
};
JSG.graph.controller.ModelController.prototype._notifyRemove = function () {
    var a, b;
    a = 0;
    for (b = this.children.length; a < b; a++)this.children[a]._notifyRemove()
};
JSG.graph.controller.ModelController.prototype.removeChildView = function (a) {
    this.getView().removeView(a.getView())
};
JSG.graph.controller.ModelController.prototype.refresh = function () {
    JSG.reading || (this._refreshViews(), this._refreshChildren())
};
JSG.graph.controller.ModelController.prototype._refreshViews = function () {
};
JSG.graph.controller.ModelController.prototype._refreshChildren = function () {
    var a = new JSG.commons.Map, b, c;
    b = 0;
    for (c = this.children.length; b < c; b++) {
        var d = this.children[b];
        a.put(d.getModel().getId(), d)
    }
    d = this.getModelChildren();
    b = 0;
    for (c = d.length; b < c; b++) {
        var e = d[b], f = a.remove(e.getId());
        void 0 === f && (f = this.getViewer().getControllerFactory().createController(e), this.addChild(f, b))
    }
    var g = this;
    a.iterate(function (a, b) {
        g.removeChild(b)
    })
};
JSG.graph.controller.ModelController.prototype.getModelChildren = function () {
    return []
};
JSG.graph.controller.ModelController.prototype.getViewer = function () {
    if (void 0 !== this.parent)return this.parent.getViewer()
};
JSG.graph.controller.ModelController.prototype.getRootParent = function () {
    return void 0 !== this.parent ? this.parent.getRootParent() : void 0
};
JSG.graph.controller.ModelController.prototype.getModelController = function (a) {
    if (a) {
        var b, c;
        b = 0;
        for (c = this.children.length; b < c; b++)if (a.getId() === this.children[b].getModel().getId())return this.children[b]
    }
};
JSG.graph.controller.ModelController.prototype.getControllerByModelId = function (a) {
    if (this.getModel().getId() === a)return this;
    var b, c, d;
    b = 0;
    for (c = this.children.length; b < c; b++)if (d = this.children[b].getControllerByModelId(a), void 0 !== d)return d
};
JSG.graph.controller.ModelController.prototype.findControllerByConditionAndLocation = function (a, b) {
    if (this.view) {
        var c = new JSG.geometry.Point(a.x, a.y);
        if (b(this, c))return this;
        this.getModel().translateFromParent(c);
        a:{
            var d, e;
            for (d = this.children.length - 1; 0 <= d; d--)if (e = this.children[d].findControllerByConditionAndLocation(c, b)) {
                c = e;
                break a
            }
            c = void 0
        }
        return void 0 !== c ? c : void 0
    }
};
JSG.graph.controller.ModelController.prototype.findControllerByConditionAndBox = function (a, b) {
    if (this.view) {
        if (b(this, a))return this;
        var c;
        a:{
            var d;
            for (c = this.children.length - 1; 0 <= c; c--)if (d = this.children[c].findControllerByConditionAndBox(a, b)) {
                c = d;
                break a
            }
            c = void 0
        }
        return void 0 !== c ? c : void 0
    }
};
JSG.graph.controller.ModelController.prototype.getControllerAt = function (a, b, c) {
    function d(a, d) {
        var e;
        d.containsPoint(a, b) && (void 0 === c || c(d, a)) && (e = f.getParent() && f.getParent().isSelectParentFirst() && b !== JSG.graph.controller.FindFlags.AREA ? d.getParent() : d);
        return e
    }

    var e, f = this.getModel();
    if (this.view) {
        var g = new JSG.geometry.Point(a.x, a.y);
        if (!0 === this._stopLookUp(g))e = d(g, this); else {
            if (!f.isCollapsed()) {
                var k = this._getSubControllerAt(g, b, c);
                void 0 !== k && (e = k)
            }
            void 0 === e && (g.setTo(a), e = d(g, this))
        }
    }
    return e
};
JSG.graph.controller.ModelController.prototype._getSubControllerAt = function (a, b, c) {
    this.getModel().translateFromParent(a);
    var d, e;
    for (d = this.children.length - 1; 0 <= d; d--)if (e = this.children[d].getControllerAt(a, b, c))return e
};
JSG.graph.controller.ModelController.prototype.containsPoint = function (a, b) {
    return this.view.containsPoint(a, b)
};
JSG.graph.controller.ModelController.prototype.traverse = function (a) {
    function b(a, d) {
        var e = d.call(a, a);
        if (void 0 !== a && e) {
            var f, e = 0;
            for (f = a.getChildren().length; e < f; e++)b(a.getChildAt(e), d)
        }
    }

    b(this, a)
};
JSG.graph.controller.ModelController.prototype.createFeedback = function () {
};
JSG.graph.controller.ModelController.prototype._stopLookUp = function (a) {
    return !1
};
JSG.namespace("JSG.graph.controller");
JSG.graph.controller.GraphItemController = function (a) {
    JSG.graph.controller.GraphItemController._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.controller.GraphItemController, JSG.graph.controller.ModelController);
JSG.graph.controller.GraphItemController.ITEM_CHANGED_NOTIFICATION = "graphitemcontroller.item.changed.notification";
JSG.graph.controller.GraphItemController.prototype.findModelController = function (a) {
    if (a === this.getModel())return this;
    a = a.createPath();
    return this._findModelControllerByPath(a)
};
JSG.graph.controller.GraphItemController.prototype._findModelControllerByPath = function (a) {
    function b(a, b) {
        var c;
        JSG.Arrays.every(b, function (b) {
            return b.getModel().getId() === a ? (c = b, !1) : !0
        });
        return c
    }

    if (void 0 !== a) {
        var c = a.nextId(), c = void 0 !== c ? c === this.getModel().getId() ? this : b(c, this.children) : void 0;
        return void 0 !== c ? a.hasNextId() ? c._findModelControllerByPath(a) : c : void 0
    }
};
JSG.graph.controller.GraphItemController.prototype.getModelChildren = function () {
    return this.getModel().getItems()
};
JSG.graph.controller.GraphItemController.prototype.createView = function (a) {
    return new JSG.graph.view.GraphItemView(a)
};
JSG.graph.controller.GraphItemController.prototype.onMouseDown = function (a, b, c) {
    return this.getView().onMouseDown(a, b, c)
};
JSG.graph.controller.GraphItemController.prototype.isCollapsable = function () {
    return this.getModel().isCollapsable()
};
JSG.graph.controller.GraphItemController.prototype.isCollapsed = function () {
    return this.getModel().isCollapsed()
};
JSG.graph.controller.GraphItemController.prototype.isSelectable = function () {
    return this._isSelectableInParent(this)
};
JSG.graph.controller.GraphItemController.prototype._isSelectableInParent = function (a) {
    var b = this.getParent();
    return void 0 !== b ? b._isSelectableInParent(a) : a.getModel().isSelectable()
};
JSG.graph.controller.GraphItemController.prototype.isSelected = function () {
    return this.getModel().getItemAttributes().getSelected().getValue()
};
JSG.graph.controller.GraphItemController.prototype.setSelected = function (a, b) {
    var c = this.getModel(), d = c.areEventsEnabled();
    !0 === b && c.disableEvents();
    c.setItemAttribute(JSG.graph.attr.ItemAttributes.SELECTED, a);
    !0 === d && !0 === b && c.enableEvents()
};
JSG.graph.controller.GraphItemController.prototype.getGraphController = function () {
    return void 0 !== this.parent ? this.parent.getGraphController() : void 0
};
JSG.graph.controller.GraphItemController.prototype.activate = function () {
    JSG.graph.controller.GraphItemController._super.activate.call(this);
    this.getModel().addEventListener(JSG.graph.model.events.Event.ALL, this)
};
JSG.graph.controller.GraphItemController.prototype.deactivate = function () {
    this.getModel().removeEventListener(JSG.graph.model.events.Event.ALL, this);
    JSG.graph.controller.GraphItemController._super.deactivate.call(this)
};
JSG.graph.controller.GraphItemController.prototype.handlePreEvent = function (a) {
};
JSG.graph.controller.GraphItemController.prototype.handlePostEvent = function (a) {
    var b = !0, c = JSG.graph.controller.GraphItemController.ITEM_CHANGED_NOTIFICATION, d = JSG.graph.model.events.Event;
    switch (a.id) {
        case d.PARENT:
            this._onParentChange(a.value);
            break;
        case d.ITEMREMOVE:
            this.clearSelection();
            this.refresh();
            break;
        case d.ITEMADD:
            this.refresh();
            break;
        case d.SHAPE:
            this.getView().setShapeRenderer(JSG.graph.view.shapes.ShapeRenderer.fromShape(this.getModel()._shape));
            break;
        case d.ATTRIBUTE:
            b = !this._handleAttributeChanged(a),
                c = !0 === b ? c : void 0
    }
    b && (b = this.getModel().getGraph(), void 0 !== b && b.markDirty());
    c && !this.getModel()._reading && this.sendNotification(c, a)
};
JSG.graph.controller.GraphItemController.prototype._handleAttributeChanged = function (a) {
    var b = !1;
    a.id === JSG.graph.model.events.Event.ATTRIBUTE && a.isCategory(JSG.graph.attr.ItemAttributes.NAME) && (a = a.getAttribute(), a.getName() === JSG.graph.attr.ItemAttributes.SELECTED && (b = a.getValue(), this.getView().isSelected = b, a = this.getViewer().getSelectionProvider(), b ? a.select(this) : a.deselect(this), b = !0));
    return b
};
JSG.graph.controller.GraphItemController.prototype.sendNotification = function (a, b) {
    var c = new JSG.graph.notifications.Notification(a, this);
    c.event = b;
    JSG.graph.notifications.NotificationCenter.getInstance().send(c)
};
JSG.graph.controller.GraphItemController.prototype.selectItem = function (a, b) {
    var c = this.getViewer();
    if (c) {
        var d = a.getId() === this.getModel().getId() ? this : this.getControllerByModelId(a.getId());
        d && (c = c.getSelectionProvider(), b ? (c.clearSelection(!1), c.select(d)) : c.deselect(d))
    }
};
JSG.graph.controller.GraphItemController.prototype.clearSelection = function () {
    var a = this.getViewer();
    a && a.getSelectionProvider().clearSelection()
};
JSG.graph.controller.GraphItemController.prototype._onParentChange = function (a) {
    function b(a) {
        var b = a.parent;
        void 0 !== b && (JSG.Arrays.remove(b.children, a), b.removeChildView(a))
    }

    function c(b) {
        var c = b.getGraphController().findModelController(a);
        void 0 !== c && (b.parent = c, c.children.push(b), c.addChildView(b))
    }

    void 0 === a ? this.parent.removeChild(this) : (b(this), c(this))
};
JSG.graph.controller.GraphItemController.prototype.createFeedback = function () {
    var a = this.getModel(), b = 0 !== a.getReshapeCoordinates().length, c = this.createFeedbackItem(b), b = this.createFeedbackView(c, b), a = this._newFeedback(c, b, a);
    a.init();
    return a
};
JSG.graph.controller.GraphItemController.prototype._newFeedback = function (a, b, c) {
    return new JSG.graph.feedback.Feedback(a, b, c)
};
JSG.graph.controller.GraphItemController.prototype.createFeedbackItem = function (a) {
    function b(a, c) {
        function d(a) {
            var c;
            for (c = 0; c < a.length; c++)b(a[c], !1)
        }

        function e(a) {
            var b;
            for (b = 0; b < a.length; b++)a[b].setItemAttribute(JSG.graph.attr.ItemAttributes.VISIBLE, !1)
        }

        var m = a.getFormat();
        m.setBrightness(0);
        JSG.touchDevice ? (m.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.NONE), c = m.getLineStyle() === JSG.graph.attr.FormatAttributes.LineStyle.NONE, m.setLineCorner(0)) : m.setFillColor("rgba(0,0,0,0.2)");
        m.setLineColor("rgba(0,0,0,0.8)");
        m = a.getItems();
        !0 === c ? d(m) : e(m)
    }

    var c = this.getModel(), d = c.copy(a);
    d._isFeedback = !0;
    d.setWidth(c.getWidth().getValue());
    d.setHeight(c.getHeight().getValue());
    var e = c.getPinPoint();
    d.setPinPointTo(e);
    d.evaluate();
    c instanceof JSG.graph.model.TextNode && (d.setText(c.getText().getPureValue()), d.addAttribute(c.getParent().getTextFormat().copy()), d.updateSize());
    b(d, a);
    return d
};
JSG.graph.controller.GraphItemController.prototype.createFeedbackView = function (a, b) {
    var c = this.getViewer(), d = c.getControllerFactory().createController(a);
    d.getViewer = function () {
        return c
    };
    d.getRootParent = function () {
        return d
    };
    if (b)d.refresh(); else {
        var e = a.getFormat();
        JSG.touchDevice || e.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID);
        e.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID)
    }
    e = d.getView();
    d.deactivate();
    return e
};
JSG.namespace("JSG.graph.controller");
JSG.graph.controller.GraphController = function (a) {
    JSG.graph.controller.GraphController._super.constructor.apply(this, arguments);
    this.graph = a
};
JSG.extend(JSG.graph.controller.GraphController, JSG.graph.controller.GraphItemController);
JSG.graph.controller.GraphController.GRAPH_SETTINGS_NOTIFICATION = "graphcontroller.graph.settings.notification";
JSG.graph.controller.GraphController.GRAPH_CHANGED_NOTIFICATION = "graphcontroller.graph.changed.notification";
JSG.graph.controller.GraphController.prototype.getGraphController = function () {
    return this
};
JSG.graph.controller.GraphController.prototype.createView = function (a) {
    return new JSG.graph.view.GraphView(a)
};
JSG.graph.controller.GraphController.prototype.getModelChildren = function () {
    return this.graph.getItems()
};
JSG.graph.controller.GraphController.prototype.isSelectable = function () {
    return !0
};
JSG.graph.controller.GraphController.prototype.setCursor = function (a) {
    this.getView().setCursor(a)
};
JSG.graph.controller.GraphController.prototype.addFeedback = function (a) {
    this.getView().addFeedback(a)
};
JSG.graph.controller.GraphController.prototype.removeFeedback = function (a) {
    this.getView().removeFeedback(a)
};
JSG.graph.controller.GraphController.prototype.clearFeedback = function () {
    this.getView().clearFeedback()
};
JSG.graph.controller.GraphController.prototype.createFeedback = function () {
};
JSG.graph.controller.GraphController.prototype.getLayer = function (a) {
    return this.getView().getLayer(a)
};
JSG.graph.controller.GraphController.prototype.hasLayer = function (a) {
    return this.getView().hasLayer(a)
};
JSG.graph.controller.GraphController.prototype.clearLayer = function (a) {
    return this.getView().clearLayer(a)
};
JSG.graph.controller.GraphController.prototype.clearAllLayer = function () {
    this.getView().clearAllLayer()
};
JSG.graph.controller.GraphController.prototype.handlePostEvent = function (a) {
    var b = JSG.graph.controller.GraphController.GRAPH_CHANGED_NOTIFICATION, c = JSG.graph.model.events.Event;
    switch (a.id) {
        case c.BBOX:
        case c.SIZE:
            this.getModel().markDirty();
            this.getView()._fireOnResize();
            break;
        case c.ITEMADD:
            this.refresh();
            this.getModel().markDirty();
            break;
        case c.ITEMREMOVE:
            this.refresh();
            this.clearSelection();
            this.getModel().markDirty();
            break;
        case c.GRAPHSETTINGS:
            b = JSG.graph.controller.GraphController.GRAPH_SETTINGS_NOTIFICATION;
            this.getModel().markDirty();
            break;
        case c.GRAPH:
            a.detailId === JSG.graph.model.Graph.AttributeID.REFRESH && this.getView().clearCache()
    }
    b && this.sendNotification(b, a)
};
JSG.namespace("JSG.graph.controller");
JSG.graph.controller.NodeController = function (a) {
    JSG.graph.controller.NodeController._super.constructor.apply(this, arguments);
    this._ports = []
};
JSG.extend(JSG.graph.controller.NodeController, JSG.graph.controller.GraphItemController);
JSG.graph.controller.NodeController.prototype._refreshChildren = function () {
    JSG.graph.controller.NodeController._super._refreshChildren.call(this);
    var a = this, b = this.getModel(), c = new JSG.commons.Map, d = this.getPortControllers(), e, f;
    e = 0;
    for (f = d.length; e < f; e++) {
        var g = d[e];
        c.put(g.getModel().getId(), g)
    }
    b._ports.forEach(function (b) {
        var d = c.remove(b.getId());
        void 0 === d && (d = a.getViewer().getControllerFactory().createController(b), a.addPort(d))
    });
    c.iterate(function (b, c) {
        a.removePort(c)
    })
};
JSG.graph.controller.NodeController.prototype.addPort = function (a) {
    this._ports.push(a);
    a.parent = this;
    this.addPortView(a);
    a._notifyAdd();
    this.isActive && a.activate()
};
JSG.graph.controller.NodeController.prototype.addPortView = function (a) {
    this.getView().addPortView(a.getView())
};
JSG.graph.controller.NodeController.prototype.removePort = function (a) {
    JSG.Arrays.remove(this._ports, a) && (this.isActive && a.deactivate(), a.parent = void 0, a._notifyRemove(), this.removePortView(a))
};
JSG.graph.controller.NodeController.prototype.removePortView = function (a) {
    this.getView().removePortView(a.getView())
};
JSG.graph.controller.NodeController.prototype.createView = function (a) {
    if (a instanceof JSG.graph.model.TextNode)return new JSG.graph.view.TextView(a);
    if (JSG.graph.view.worksheet) {
        if (JSG.graph.view.TabBarView && a instanceof JSG.graph.model.TabBarNode)return new JSG.graph.view.TabBarView(a);
        if (JSG.graph.view.worksheet.RowHeaderView && a instanceof JSG.graph.model.worksheet.RowHeaderNode)return new JSG.graph.view.worksheet.RowHeaderView(a);
        if (JSG.graph.view.worksheet.ColumnHeaderView && a instanceof JSG.graph.model.worksheet.ColumnHeaderNode)return new JSG.graph.view.worksheet.ColumnHeaderView(a);
        if (JSG.graph.view.worksheet.HeaderView && a instanceof JSG.graph.model.worksheet.HeaderNode)return new JSG.graph.view.worksheet.HeaderView(a);
        if (JSG.graph.view.worksheet.SheetHeaderView && a instanceof JSG.graph.model.worksheet.SheetHeaderNode)return new JSG.graph.view.worksheet.SheetHeaderView(a);
        if (JSG.graph.view.worksheet.CellsView && a instanceof JSG.graph.model.worksheet.CellsNode)return new JSG.graph.view.worksheet.CellsView(a)
    }
    return new JSG.graph.view.NodeView(a)
};
JSG.graph.controller.NodeController.prototype.hasPorts = function () {
    return 0 !== this._ports.length
};
JSG.graph.controller.NodeController.prototype.getPortControllers = function () {
    return this._ports
};
JSG.graph.controller.NodeController.prototype.handlePreEvent = function (a) {
    if (a.id === JSG.graph.model.events.Event.ATTRIBUTE)switch (a.detailId) {
        case JSG.graph.model.events.AttributeChangeEvent.VALUE:
            this.handlePreAttributeChange(a.getAttribute(), a)
    }
    JSG.graph.controller.NodeController._super.handlePreEvent.call(this, a)
};
JSG.graph.controller.NodeController.prototype.handlePreAttributeChange = function (a, b) {
    a.getName() === JSG.graph.attr.ItemAttributes.COLLAPSED && !1 === a.getValue() && (b._colledgeinfos = this._handlePreCollapse())
};
JSG.graph.controller.NodeController.prototype._handlePreCollapse = function () {
    var a = [], b = [], c = [], d = this.getModel(), e = d.getGraph(), f = d.getTranslatedBoundingBox(e, JSG.boxCache.get()), g = JSG.ptCache.get(), k = JSG.ptCache.get(), h = JSG.ptCache.get(), m, l, p, n, q;
    this.getInOutEdges(a, b);
    for (m = 0; m < a.length; m++)for (p = a[m], n = p.getParent(), l = q = p.getPointsCount() - 1; 0 < l; l--)if (p.getPointAt(l, g), p.getPointAt(l - 1, k), this._translateSegment(g, k, n, e), -1 < f.getIntersectionIndex(g, k, h) && JSG.geometry.Utils.isPointOnLineSegment(h,
            g, k)) {
        JSG.graph.Utils.translatePointDown(h, e, d);
        c.push(this.mapPortAt(h, d, p, !1));
        break
    }
    for (m = 0; m < b.length; m++)for (p = b[m], n = p.getParent(), q = p.getPointsCount() - 1, l = 0; l < q; l++)if (p.getPointAt(l, g), p.getPointAt(l + 1, k), this._translateSegment(g, k, n, e), -1 < f.getIntersectionIndex(g, k, h) && JSG.geometry.Utils.isPointOnLineSegment(h, g, k)) {
        JSG.graph.Utils.translatePointDown(h, e, d);
        c.push(this.mapPortAt(h, d, p, !0));
        break
    }
    JSG.ptCache.release(g, k, h);
    JSG.boxCache.release(f);
    return c
};
JSG.graph.controller.NodeController.prototype._translateSegment = function (a, b, c, d) {
    JSG.graph.Utils.traverseItemUp(c, d, function (c) {
        c.translateToParent(a);
        c.translateToParent(b)
    })
};
JSG.graph.controller.NodeController.prototype.getInOutEdges = function (a, b) {
    for (var c = this.getModel().getParent(), d, e, f; void 0 !== c;) {
        e = c.getItems();
        for (d = 0; d < e.length; d++)f = e[d], f instanceof JSG.graph.model.Edge && (this.isItemInsideNode(f.getSourceNode()) ? b.push(f) : this.isItemInsideNode(f.getTargetNode()) && a.push(f));
        c = c.getParent()
    }
};
JSG.graph.controller.NodeController.prototype.isItemInsideNode = function (a) {
    var b = this.getModel();
    a = a.getParent();
    for (var c = a === b; !c && void 0 !== a && a !== b.getParent();)a = a.getParent(), c = a === b;
    return c
};
JSG.graph.controller.NodeController.prototype.mapPortAt = function (a, b, c, d) {
    var e = d ? c.getSourcePort() : c.getTargetPort(), f = b.getPortAtLocation(a);
    f && f.isMapper || (f = new JSG.graph.model.PortMapper, b.addPortAtLocation(f, a));
    f.mapPort(c, e);
    return {edge: c, isIncomingEdge: !d, virtualPort: f}
};
JSG.graph.controller.NodeController.prototype.handlePostEvent = function (a) {
    if (a.id === JSG.graph.model.events.Event.NODE) {
        var b = JSG.graph.model.events.NodeEvent;
        switch (a.detailId) {
            case b.PORTADD:
            case b.PORTREMOVE:
            case b.PORTREMOVEALL:
                this.refresh()
        }
    } else if (a.id === JSG.graph.model.events.Event.ATTRIBUTE)switch (a.detailId) {
        case JSG.graph.model.events.AttributeChangeEvent.VALUE:
            this.handlePostAttributeChange(a.getAttribute(), a)
    }
    JSG.graph.controller.NodeController._super.handlePostEvent.call(this, a)
};
JSG.graph.controller.NodeController.prototype.handlePostAttributeChange = function (a, b) {
    a.getName() === JSG.graph.attr.ItemAttributes.COLLAPSED && (!0 === a.getValue() ? this._didCollapse(b) : this._didExpand(b), b._colledgeinfos = void 0)
};
JSG.graph.controller.NodeController.prototype._didCollapse = function (a) {
    a = a._colledgeinfos;
    var b, c;
    if (a)for (b = 0; b < a.length; b++)c = a[b], c.isIncomingEdge ? c.edge.setTargetPort(c.virtualPort) : c.edge.setSourcePort(c.virtualPort)
};
JSG.graph.controller.NodeController.prototype._didExpand = function (a) {
    a = this.getModel();
    var b = this.getPortControllers(), c = [], d, e, f, g;
    for (d = 0; d < b.length; d++)if (e = b[d].getModel(), e.isMapper) {
        g = e.getIncomingEdges();
        for (f = 0; f < g.length; f++)g[f].setTargetPort(e.getMappedPort(g[f].getId()));
        g = e.getOutgoingEdges();
        for (f = 0; f < g.length; f++)g[f].setSourcePort(e.getMappedPort(g[f].getId()));
        c.push(e)
    }
    for (d = 0; d < c.length; d++)a.removePort(c[d])
};
JSG.namespace("JSG.graph.controller");
JSG.graph.controller.ConnectionController = function (a) {
    JSG.graph.controller.ConnectionController._super.constructor.apply(this, arguments);
    this._pathListener = new JSG.graph.controller.ConnectionController.PathListener(this);
    this._registerToPortNode(a.getSourcePort());
    this._registerToPortNode(a.getTargetPort())
};
JSG.extend(JSG.graph.controller.ConnectionController, JSG.graph.controller.GraphItemController);
JSG.graph.controller.ConnectionController.prototype.createView = function (a) {
    return a instanceof JSG.graph.model.Edge ? new JSG.graph.view.EdgeView(a) : new JSG.graph.view.GraphItemView(a)
};
JSG.graph.controller.ConnectionController.prototype.handlePostEvent = function (a) {
    var b = !1, c = JSG.graph.model.events.Event;
    switch (a.id) {
        case c.EDGEATTACHED:
            this._handleAttach(this.getModel(), a.value);
            b = !0;
            break;
        case c.EDGEDETACHED:
            this._handleDetach(this.getModel(), a.value);
            b = !0;
            break;
        default:
            JSG.graph.controller.ConnectionController._super.handlePostEvent.call(this, a)
    }
    !0 === b && this.getModel().getGraph().markDirty()
};
JSG.graph.controller.ConnectionController.prototype._handleAttach = function (a, b) {
    this._registerToPortNode(b);
    this._verifyEdgeParent(a, a.sourceNode, a.targetNode)
};
JSG.graph.controller.ConnectionController.prototype._verifyEdgeParent = function (a, b, c) {
    function d(a, b) {
        var c = b.getGraph(), d = a.getOrigin(new JSG.geometry.Point(0, 0));
        JSG.graph.Utils.translatePointUp(d, a.getParent(), c);
        JSG.graph.Utils.translatePointDown(d, c, b);
        a.setOriginTo(d);
        a.changeParent(b)
    }

    b = function (a, b, c) {
        function d(a) {
            a = void 0 !== a ? a.getParent() : c.getParent();
            return void 0 !== a ? a.createPath() : void 0
        }

        a = d(a);
        var h = d(b);
        b = c.getGraph();
        var m = JSG.graph.model.Path.getCommonPrefix(a, h);
        a = b.findItemByPath(void 0 ===
        m ? void 0 !== a ? a : h : m);
        return void 0 !== a ? a : b
    }(b, c, a);
    b !== a.getParent() && d(a, b)
};
JSG.graph.controller.ConnectionController.prototype._handleDetach = function (a, b) {
    this._deregisterFromPortNode(b);
    this._pendingDetach = !0
};
JSG.graph.controller.ConnectionController.prototype._registerToPortNode = function (a) {
    void 0 !== a && (a = a.getParent(), this._pathListener.registerTo(a))
};
JSG.graph.controller.ConnectionController.prototype._deregisterFromPortNode = function (a) {
    void 0 !== a && (a = a.getParent(), this._pathListener.deregisterFrom(a))
};
JSG.graph.controller.ConnectionController.prototype.isAttached = function () {
    return void 0 !== this.model.sourceNode || void 0 !== this.model.targetNode
};
JSG.graph.controller.ConnectionController.prototype.containsPoint = function (a, b) {
    var c = this.getViewer().getCoordinateSystem(), d = this.getModel(), c = c.metricToLogXNoZoom(JSG.findRadius);
    return d.containsPoint(a, b, c)
};
JSG.graph.controller.ConnectionController.prototype.deactivate = function () {
    this._deregisterFromPortNode(this.model.getSourcePort());
    this._deregisterFromPortNode(this.model.getTargetPort());
    JSG.graph.controller.ConnectionController._super.deactivate.call(this)
};
JSG.graph.controller.ConnectionController.prototype._newFeedback = function (a, b, c) {
    return new (c.getShape().getType() === JSG.graph.model.shapes.OrthoLineShape.TYPE ? JSG.graph.feedback.OrthoEdgeFeedback : JSG.graph.feedback.EdgeFeedback)(a, b, c)
};
JSG.graph.controller.ConnectionController.PathListener = function (a) {
    this._controller = a
};
JSG.graph.controller.ConnectionController.PathListener.prototype.registerTo = function (a) {
    a.addEventListener(JSG.graph.model.events.Event.PATH, this)
};
JSG.graph.controller.ConnectionController.PathListener.prototype.deregisterFrom = function (a) {
    a.removeEventListener(JSG.graph.model.events.Event.PATH, this)
};
JSG.graph.controller.ConnectionController.PathListener.prototype.handlePreEvent = function (a) {
};
JSG.graph.controller.ConnectionController.PathListener.prototype.handlePostEvent = function (a) {
    a = this._controller.getModel();
    this._controller._verifyEdgeParent(a, a.sourceNode, a.targetNode)
};
JSG.namespace("JSG.graph.controller");
JSG.graph.controller.PortController = function (a) {
    JSG.graph.controller.PortController._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.controller.PortController, JSG.graph.controller.GraphItemController);
JSG.graph.controller.PortController.prototype.isSelectable = function () {
    return !1
};
JSG.graph.controller.PortController.prototype.createView = function (a) {
    if (a instanceof JSG.graph.model.Port)return new JSG.graph.view.PortView(a)
};
JSG.graph.controller.PortController.prototype._newFeedback = function (a, b, c) {
    return new JSG.graph.feedback.PortFeedback(a, b, c)
};
JSG.namespace("JSG.graph.controller");
JSG.graph.controller.RootController = function () {
    JSG.graph.controller.RootController._super.constructor.apply(this, arguments);
    this.content = this.viewer = void 0
};
JSG.extend(JSG.graph.controller.RootController, JSG.graph.controller.ModelController);
JSG.graph.controller.RootController.prototype.getViewer = function () {
    return this.viewer
};
JSG.graph.controller.RootController.prototype.setViewer = function (a) {
    this.viewer = a
};
JSG.graph.controller.RootController.prototype.getRootParent = function () {
    return this
};
JSG.graph.controller.RootController.prototype.hasContent = function () {
    return void 0 !== this.content
};
JSG.graph.controller.RootController.prototype.getContent = function () {
    return this.content
};
JSG.graph.controller.RootController.prototype.setContent = function (a) {
    void 0 !== this.content && this.removeChild(this.content);
    this.content = a;
    void 0 !== this.content && this.addChild(this.content, 0);
    this.setView(a.getView())
};
JSG.graph.controller.RootController.prototype._isSelectableInParent = function (a) {
    return a.getModel().isSelectable()
};
JSG.graph.controller.RootController.prototype.getControllerAt = function (a, b, c) {
    return void 0 !== this.content ? this.content.getControllerAt(a, b, c) : void 0
};
JSG.graph.controller.RootController.prototype.findControllerByConditionAndLocation = function (a, b) {
    return void 0 !== this.content ? this.content.findControllerByConditionAndLocation(a, b) : void 0
};
JSG.graph.controller.RootController.prototype.findControllerByConditionAndBox = function (a, b) {
    return void 0 !== this.content ? this.content.findControllerByConditionAndBox(a, b) : void 0
};
JSG.namespace("JSG.graph.controller");
JSG.graph.controller.GraphControllerFactory = function () {
    function a(a) {
        return {
            _viewer: a, getController: function (a) {
                var b;
                a instanceof JSG.graph.model.Graph ? b = JSG.graph.controller.GraphController : a instanceof JSG.graph.model.ContentNode ? b = JSG.graph.controller.ContentNodeController : a instanceof JSG.graph.model.Node ? b = JSG.graph.controller.NodeController : a instanceof JSG.graph.model.LineConnection ? b = JSG.graph.controller.ConnectionController : a instanceof JSG.graph.model.Port && (b = JSG.graph.controller.PortController);
                return b
            }, createController: function (a) {
                var b = this.getController(a);
                return void 0 !== b ? new b(a, this._viewer) : void 0
            }, registerViewer: function (a) {
                this._viewer = a
            }
        }
    }

    var b;
    return {
        getInstance: function (c) {
            b || (b = a());
            return b
        }
    }
}();
JSG.namespace("JSG.graph.feedback");
JSG.graph.feedback.Feedback = function (a, b, c) {
    this._fbItem = a;
    this._fbView = b;
    this._orgItem = c;
    this._fbItem.addEventListener(JSG.graph.model.events.Event.ALL, this);
    this._fbItem._original = c;
    this._fbItem.getOriginal = function () {
        return this._original
    }
};
JSG.graph.feedback.Feedback.prototype.init = function () {
    this._fbItem._parent = this._orgItem.getGraph();
    var a = this._fbItem.getItems();
    if (1 === a.length ? a[0]instanceof JSG.graph.model.TextNode : !(1 < a.length))a = this._fbItem.getFormat(), a.getLineStyle().getValue() === JSG.graph.attr.FormatAttributes.LineStyle.NONE && a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    this._fbItem.refresh();
    this._translate(this._orgItem, this._orgItem.getGraph())
};
JSG.graph.feedback.Feedback.prototype._translate = function (a, b) {
    if (void 0 !== a && void 0 !== b && a !== b) {
        var c = a.getAngle().getValue(), d = c, e = a.getOrigin();
        JSG.graph.Utils.traverseItemUp(a.getParent(), b, function (a) {
            c += a.getAngle().getValue();
            a.translateToParent(e);
            return !0
        });
        this._translateTo(e, c, d)
    }
};
JSG.graph.feedback.Feedback.prototype._translateTo = function (a, b) {
    this.setAngle(b);
    this.setOriginTo(a)
};
JSG.graph.feedback.Feedback.prototype.draw = function (a) {
    void 0 !== this._fbView && this._fbView.draw(a)
};
JSG.graph.feedback.Feedback.prototype.getItem = function () {
    return this._fbItem
};
JSG.graph.feedback.Feedback.prototype.getFeedbackItem = function () {
    return this._fbItem
};
JSG.graph.feedback.Feedback.prototype.getOriginalItem = function () {
    return this._orgItem
};
JSG.graph.feedback.Feedback.prototype.getFeedbackView = function () {
    return this._fbView
};
JSG.graph.feedback.Feedback.prototype.setFeedbackView = function (a) {
    this._fbView = a
};
JSG.graph.feedback.Feedback.prototype.getAngle = function () {
    return this._fbItem.getAngle().getValue()
};
JSG.graph.feedback.Feedback.prototype.setAngle = function (a) {
    this._fbItem.setAngle(a)
};
JSG.graph.feedback.Feedback.prototype.setOriginTo = function (a) {
    this._fbItem.setOriginTo(a)
};
JSG.graph.feedback.Feedback.prototype.getOrigin = function (a) {
    a = void 0 !== a ? a : new JSG.geometry.Point(0, 0);
    return this._fbItem.getOrigin(a)
};
JSG.graph.feedback.Feedback.prototype.getItemAttributes = function () {
    return this._fbItem.getItemAttributes()
};
JSG.graph.feedback.Feedback.prototype.getFormat = function () {
    return this._fbItem.getFormat()
};
JSG.graph.feedback.Feedback.prototype.isMoveable = function () {
    return this._fbItem.getItemAttributes().getMoveable().getValue()
};
JSG.graph.feedback.Feedback.prototype.setMoveable = function (a) {
    this._fbItem.setItemAttribute(JSG.graph.attr.ItemAttributes.MOVEABLE, a)
};
JSG.graph.feedback.Feedback.prototype.isRotatable = function () {
    return this._fbItem.getItemAttributes().getRotatable().getValue()
};
JSG.graph.feedback.Feedback.prototype.rotate = function (a, b) {
    var c = this._fbItem;
    c.rotate(a, b);
    c.refresh()
};
JSG.graph.feedback.Feedback.prototype.getBoundingBox = function (a) {
    return this._fbItem.getBoundingBox(a)
};
JSG.graph.feedback.Feedback.prototype.initResize = function (a) {
};
JSG.graph.feedback.Feedback.prototype.resize = function (a) {
};
JSG.graph.feedback.Feedback.prototype.updateReshapePoint = function (a, b) {
    var c = this._fbItem, d = c.getReshapeCoordinateAt(a), e = Math.min(d.getXMax(), b.x), e = Math.max(d.getXMin(), e), f = Math.min(d.getYMax(), b.y), f = Math.max(d.getYMin(), f);
    c.setReshapeCoordinateAt(a, e, f);
    c.refresh()
};
JSG.graph.feedback.Feedback.prototype.handlePreEvent = function (a) {
};
JSG.graph.feedback.Feedback.prototype.handlePostEvent = function (a) {
    a.source !== this._fbItem && this._fbItem.refresh()
};
JSG.namespace("JSG.graph.feedback");
JSG.graph.feedback.PortFeedback = function (a, b, c) {
    JSG.graph.feedback.PortFeedback._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.feedback.PortFeedback, JSG.graph.feedback.Feedback);
JSG.graph.feedback.PortFeedback.prototype.init = function () {
    JSG.graph.feedback.PortFeedback._super.init.call(this)
};
JSG.namespace("JSG.graph.feedback");
JSG.graph.feedback.EdgeFeedback = function (a, b, c) {
    JSG.graph.feedback.EdgeFeedback._super.constructor.apply(this, arguments);
    this._nodeListener = new JSG.graph.feedback.EdgeFeedback.NodeListener(this)
};
JSG.extend(JSG.graph.feedback.EdgeFeedback, JSG.graph.feedback.Feedback);
JSG.graph.feedback.EdgeFeedback.prototype.init = function () {
    JSG.graph.feedback.EdgeFeedback._super.init.call(this);
    var a = this._fbItem, b = this._orgItem, c, d;
    a.hasSourceAttached = function () {
        return b.hasSourceAttached()
    };
    a.getSourcePort = function () {
        return b.getSourcePort()
    };
    a.hasTargetAttached = function () {
        return b.hasTargetAttached()
    };
    a.getTargetPort = function () {
        return b.getTargetPort()
    };
    a.hasSourceAttached() && (c = a.getStartCoordinate(), d = b.getStartCoordinate().toPoint(), a.setStartCoordinateTo(this.createCoordinateProxyAt(d,
        c)));
    a.hasTargetAttached() && (c = a.getEndCoordinate(), d = b.getEndCoordinate().toPoint(), a.setEndCoordinateTo(this.createCoordinateProxyAt(d, c)));
    a.refresh()
};
JSG.graph.feedback.EdgeFeedback.prototype.initResize = function (a) {
    function b(b) {
        b.subtract(f);
        a.rotateLocalPointInverse(b);
        b.set(b.x / e.x, b.y / e.y);
        return b
    }

    var c = this, d = this.getFeedbackItem().getPoints(), e = a.getSize(), f = a.getTopLeft();
    this._resizeFactors = [];
    d.forEach(function (a) {
        c._resizeFactors.push(b(a.copy()))
    })
};
JSG.graph.feedback.EdgeFeedback.prototype.resize = function (a) {
    var b = a.getSize(), c = a.getTopLeft(), d = new JSG.geometry.Point(0, 0), e = this.getFeedbackItem(), f = e._shape.getCoordinates(), g;
    for (g = 0; g < f.length; g++)if (void 0 !== this._resizeFactors[g]) {
        var k;
        k = b;
        var h = d.setTo(this._resizeFactors[g]);
        h.set(h.x * k.x, h.y * k.y);
        a.rotateLocalPoint(h);
        h.add(c);
        k = h;
        e.translateFromParent(k);
        f[g].set(k.x, k.y)
    }
};
JSG.graph.feedback.EdgeFeedback.prototype.getPoints = function () {
    return this.getFeedbackItem().getPoints()
};
JSG.graph.feedback.EdgeFeedback.prototype.getEndPoint = function (a) {
    return this.getFeedbackItem().getEndPoint(a)
};
JSG.graph.feedback.EdgeFeedback.prototype.setEndPointTo = function (a) {
    this.detachFromTarget();
    this.getFeedbackItem().setEndPointTo(a)
};
JSG.graph.feedback.EdgeFeedback.prototype.getStartPoint = function (a) {
    return this.getFeedbackItem().getStartPoint(a)
};
JSG.graph.feedback.EdgeFeedback.prototype.setStartPointTo = function (a) {
    this.detachFromSource();
    this.getFeedbackItem().setStartPointTo(a)
};
JSG.graph.feedback.EdgeFeedback.prototype.setPointAt = function (a, b) {
    var c = this.getFeedbackItem();
    0 === a ? this.detachFromSource() : a === c.getPointsCount() - 1 && this.detachFromTarget();
    c.setPointAt(a, b)
};
JSG.graph.feedback.EdgeFeedback.prototype.getPointAt = function (a, b) {
    return this.getFeedbackItem().getPointAt(a, b)
};
JSG.graph.feedback.EdgeFeedback.prototype.setSourcePort = function (a) {
    this.getFeedbackItem().setSourcePort(a);
    void 0 !== a.getParent() && this._nodeListener.registerTo(a.getParent())
};
JSG.graph.feedback.EdgeFeedback.prototype.setTargetPort = function (a) {
    this.getFeedbackItem().setTargetPort(a);
    void 0 !== a.getParent() && this._nodeListener.registerTo(a.getParent())
};
JSG.graph.feedback.EdgeFeedback.prototype.detach = function () {
    this.detachFromSource();
    this.detachFromTarget()
};
JSG.graph.feedback.EdgeFeedback.prototype.detachFromSource = function () {
    var a = this.getFeedbackItem(), b = a.getSourcePort();
    if (void 0 !== b) {
        var c = a.getStartCoordinate().toPoint();
        a.detachPort(b);
        a.setStartCoordinateTo(new JSG.graph.Coordinate.fromPoint(c));
        a.hasSourceAttached = function () {
            return !1
        };
        a.getSourcePort = function () {
        };
        this._nodeListener.deregisterFrom(b.getParent())
    }
};
JSG.graph.feedback.EdgeFeedback.prototype.detachFromTarget = function () {
    var a = this.getFeedbackItem(), b = a.getTargetPort();
    if (void 0 !== b) {
        var c = a.getEndCoordinate().toPoint();
        a.detachPort(b);
        a.setEndCoordinateTo(new JSG.graph.Coordinate.fromPoint(c));
        a.hasTargetAttached = function () {
            return !1
        };
        a.getTargetPort = function () {
        };
        this._nodeListener.deregisterFrom(b.getParent())
    }
};
JSG.graph.feedback.EdgeFeedback.prototype.onNodeChange = function (a) {
    this.getFeedbackItem().refresh()
};
JSG.graph.feedback.EdgeFeedback.prototype.isStartOrEndPointIndex = function (a) {
    return 0 === a || a === this.getFeedbackItem().getPointsCount() - 1
};
JSG.graph.feedback.EdgeFeedback.prototype.doAutoLayout = function () {
    return this.getFeedbackItem().getLayoutAttributes().getLineBehavior().getValue() !== JSG.graph.attr.consts.LineBehavior.MANUAL
};
JSG.graph.feedback.EdgeFeedback.prototype.createCoordinateProxyAt = function (a, b) {
    var c = new JSG.graph.CoordinateProxy(b);
    c.location = a.copy();
    c.setX = function (a) {
    };
    c.setY = function (a) {
    };
    c.evaluate = function (a) {
    };
    c.copy = function () {
        var a = new JSG.graph.Coordinate;
        a.setToPoint(this.toPoint());
        return a
    };
    c.toPoint = function (a) {
        return void 0 !== a ? a.setTo(this.location) : this.location.copy()
    };
    return c
};
JSG.graph.feedback.EdgeFeedback.prototype.draw = function (a) {
    this._fbItem.refresh();
    void 0 !== this._fbView && this._fbView.draw(a)
};
JSG.graph.feedback.EdgeFeedback.NodeListener = function (a) {
    this._feedback = a
};
JSG.graph.feedback.EdgeFeedback.NodeListener.prototype.registerTo = function (a) {
    var b = JSG.graph.model.events.Event;
    a.addEventListener(b.ANGLE, this);
    a.addEventListener(b.BBOX, this);
    a.addEventListener(b.PIN, this)
};
JSG.graph.feedback.EdgeFeedback.NodeListener.prototype.deregisterFrom = function (a) {
    var b = JSG.graph.model.events.Event;
    a.removeEventListener(b.ANGLE, this);
    a.removeEventListener(b.BBOX, this);
    a.removeEventListener(b.PIN, this)
};
JSG.graph.feedback.EdgeFeedback.NodeListener.prototype.handlePreEvent = function (a) {
};
JSG.graph.feedback.EdgeFeedback.NodeListener.prototype.handlePostEvent = function (a) {
    this._feedback.onNodeChange(a.source)
};
JSG.namespace("JSG.graph.feedback");
JSG.graph.feedback.OrthoEdgeFeedback = function (a, b, c) {
    JSG.graph.feedback.OrthoEdgeFeedback._super.constructor.apply(this, arguments);
    this._fbItem.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.DASH)
};
JSG.extend(JSG.graph.feedback.OrthoEdgeFeedback, JSG.graph.feedback.EdgeFeedback);
JSG.namespace("JSG.graph.command");
JSG.graph.command.Command = function () {
};
JSG.graph.command.Command.prototype.execute = function () {
};
JSG.graph.command.Command.prototype.undo = function () {
};
JSG.graph.command.Command.prototype.redo = function () {
};
JSG.graph.command.Command.prototype.restoreStateAfterUndo = function (a) {
};
JSG.graph.command.Command.prototype.restoreStateAfterRedo = function (a) {
};
JSG.graph.command.Command.prototype.selectAll = function (a) {
    var b = [], c = arguments[0], d = arguments.length - 1, e = arguments[d];
    if (void 0 !== c.length)this._addItemControllers(c, b, e); else for (c = 0; c < d; c++)this._addItemController(arguments[c], b, e);
    e.getSelectionProvider().setSelection(b)
};
JSG.graph.command.Command.prototype._addItemControllers = function (a, b, c) {
    var d, e;
    for (d = 0; d < a.length; d++)e = a[d], this._addItemController(e, b, c)
};
JSG.graph.command.Command.prototype._addItemController = function (a, b, c) {
    a = c.findControllerForItem(a);
    void 0 === a || a instanceof JSG.graph.controller.GraphController || b.push(a)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.CommandProxy = function (a) {
    this._cmd = a
};
JSG.extend(JSG.graph.command.CommandProxy, JSG.graph.command.Command);
JSG.graph.command.CommandProxy.prototype.execute = function () {
    this._cmd.execute()
};
JSG.graph.command.CommandProxy.prototype.undo = function () {
    this._cmd.undo()
};
JSG.graph.command.CommandProxy.prototype.redo = function () {
    this._cmd.redo()
};
JSG.graph.command.CommandProxy.prototype.restoreStateAfterUndo = function (a) {
    this._cmd.restoreStateAfterUndo(a)
};
JSG.graph.command.CommandProxy.prototype.restoreStateAfterRedo = function (a) {
    this._cmd.restoreStateAfterRedo(a)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.CompoundCommand = function (a) {
    JSG.graph.command.CompoundCommand._super.constructor.apply(this);
    this.commands = [];
    this._oldRefreshStates = [];
    this._callRefreshAfter = this._refreshDisabled = !1;
    this._reverseUndo = a
};
JSG.extend(JSG.graph.command.CompoundCommand, JSG.graph.command.Command);
JSG.graph.command.CompoundCommand.prototype.hasCommands = function (a) {
    return 0 < this.commands.length
};
JSG.graph.command.CompoundCommand.prototype.add = function (a) {
    void 0 !== a && this.commands.push(a);
    return a
};
JSG.graph.command.CompoundCommand.prototype.execute = function () {
    var a, b;
    this._disableRefresh();
    a = 0;
    for (b = this.commands.length; a < b; a++)this.initNextCommand(this.commands[a], a), this.commands[a].execute();
    this._enableRefresh()
};
JSG.graph.command.CompoundCommand.prototype.initNextCommand = function (a, b) {
};
JSG.graph.command.CompoundCommand.prototype.undo = function () {
    this._disableRefresh();
    (this._reverseUndo ? this._undoFiFo : this._undoLiFo).call(this);
    this._enableRefresh()
};
JSG.graph.command.CompoundCommand.prototype._undoLiFo = function () {
    var a;
    for (a = this.commands.length - 1; 0 <= a; a--)this.commands[a].undo()
};
JSG.graph.command.CompoundCommand.prototype._undoFiFo = function () {
    var a, b;
    a = 0;
    for (b = this.commands.length; a < b; a++)this.commands[a].undo()
};
JSG.graph.command.CompoundCommand.prototype.redo = function () {
    var a, b;
    this._disableRefresh();
    a = 0;
    for (b = this.commands.length; a < b; a++)this.commands[a].redo();
    this._enableRefresh()
};
JSG.graph.command.CompoundCommand.prototype.disableRefresh = function (a) {
    this._refreshDisabled = !0;
    this._callRefreshAfter = a
};
JSG.graph.command.CompoundCommand.prototype._disableRefresh = function () {
    var a, b, c;
    if (!0 === this._refreshDisabled)for (a = 0, b = this.commands.length; a < b; a++)c = this._getItemFrom(this.commands[a]), void 0 !== c && (this._oldRefreshStates[a] = c.isRefreshEnabled(), c.disableRefresh())
};
JSG.graph.command.CompoundCommand.prototype._enableRefresh = function () {
    var a, b, c;
    if (!0 === this._refreshDisabled)for (a = 0, b = this.commands.length; a < b; a++)!0 === this._oldRefreshStates[a] && (c = this._getItemFrom(this.commands[a]), void 0 !== c && c.enableRefresh(this._callRefreshAfter))
};
JSG.graph.command.CompoundCommand.prototype._getItemFrom = function (a) {
    return void 0 !== a.getItem ? a.getItem() : void 0
};
JSG.graph.command.CompoundCommand.prototype.restoreStateAfterUndo = function (a) {
    this.restoreState(a)
};
JSG.graph.command.CompoundCommand.prototype.restoreStateAfterRedo = function (a) {
    this.restoreState(a)
};
JSG.graph.command.CompoundCommand.prototype.restoreState = function (a) {
    var b = [];
    this._addToSelection(this, b, a);
    a.setSelection(b)
};
JSG.graph.command.CompoundCommand.prototype._addToSelection = function (a, b, c) {
    if (void 0 === a.commands)a = this._findItemController(a, c), void 0 !== a && b.push(a); else {
        var d, e;
        d = 0;
        for (e = a.commands.length; d < e; d++)this._addToSelection(a.commands[d], b, c)
    }
};
JSG.graph.command.CompoundCommand.prototype._findItemController = function (a, b) {
    var c = this._getItemFrom(a);
    return void 0 !== c ? b.findControllerForItem(c) : void 0
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.CommandStack = function () {
    this.undostack = [];
    this.redostack = []
};
JSG.graph.command.CommandStack.prototype.execute = function (a) {
    !a || void 0 !== a.isNoOp && !1 !== a.isNoOp || (this._clearRedoStack(), a.execute(), this.undostack.push(a))
};
JSG.graph.command.CommandStack.prototype._clearRedoStack = function () {
    this.redostack = []
};
JSG.graph.command.CommandStack.prototype.canUndo = function () {
    return 0 !== this.undostack.length
};
JSG.graph.command.CommandStack.prototype.canRedo = function () {
    return 0 !== this.redostack.length
};
JSG.graph.command.CommandStack.prototype.undo = function () {
    if (this.canUndo()) {
        var a = this.undostack.pop();
        a.undo();
        this.redostack.push(a);
        return a
    }
};
JSG.graph.command.CommandStack.prototype.redo = function () {
    if (this.canRedo()) {
        var a = this.redostack.pop();
        a.redo();
        this.undostack.push(a);
        return a
    }
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.NoOpCommand = function () {
    JSG.graph.command.NoOpCommand._super.constructor.apply(this, arguments);
    this.isNoOp = !0
};
JSG.extend(JSG.graph.command.NoOpCommand, JSG.graph.command.Command);
JSG.namespace("JSG.graph.command");
JSG.graph.command.AbstractItemCommand = function (a) {
    JSG.graph.command.AbstractItemCommand._super.constructor.apply(this);
    this._graphItem = a
};
JSG.extend(JSG.graph.command.AbstractItemCommand, JSG.graph.command.Command);
JSG.graph.command.AbstractItemCommand.prototype.getItem = function () {
    return this._graphItem
};
JSG.graph.command.AbstractItemCommand.prototype.execute = function () {
    this.redo()
};
JSG.graph.command.AbstractItemCommand.prototype.restoreStateAfterUndo = function (a) {
    this.restoreState(a)
};
JSG.graph.command.AbstractItemCommand.prototype.restoreStateAfterRedo = function (a) {
    this.restoreState(a)
};
JSG.graph.command.AbstractItemCommand.prototype.restoreState = function (a) {
    this.selectAll(this._graphItem, a)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.AbstractItemCommandProxy = function (a) {
    JSG.graph.command.AbstractItemCommandProxy._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.command.AbstractItemCommandProxy, JSG.graph.command.CommandProxy);
JSG.graph.command.AbstractItemCommandProxy.prototype.getItem = function () {
    return this._cmd.getItem()
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.AddItemCommand = function (a, b, c) {
    JSG.graph.command.AddItemCommand._super.constructor.apply(this, arguments);
    this._index = c;
    this._parent = b
};
JSG.extend(JSG.graph.command.AddItemCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.AddItemCommand.prototype.undo = function () {
    var a = this._graphItem.getParent(), a = void 0 !== a ? a : this._parent;
    a.removeItem(this._graphItem)
};
JSG.graph.command.AddItemCommand.prototype.redo = function () {
    this._parent.addItem(this._graphItem, this._index)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.AddLabelCommand = function (a, b) {
    JSG.graph.command.AddLabelCommand._super.constructor.apply(this, arguments);
    this._parent = a;
    this._text = b;
    this._label = void 0
};
JSG.extend(JSG.graph.command.AddLabelCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.AddLabelCommand.prototype.undo = function () {
    this._parent.removeItem(this._label)
};
JSG.graph.command.AddLabelCommand.prototype.redo = function () {
    this._label = this._parent.addLabel(this._text)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.AddPortCommand = function (a, b, c, d) {
    JSG.graph.command.AddPortCommand._super.constructor.apply(this, arguments);
    this._parent = c;
    this._port = a;
    this._location = b.copy();
    this._relative = void 0 === d ? !1 : d
};
JSG.extend(JSG.graph.command.AddPortCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.AddPortCommand.prototype.undo = function () {
    this._parent.removePort(this._port)
};
JSG.graph.command.AddPortCommand.prototype.redo = function () {
    this._relative ? this._parent.addPortAtRelativeLocation(this._port, this._location) : this._parent.addPortAtLocation(this._port, this._location)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.Alignment = {
    TOP: 0,
    MIDDLE: 1,
    BOTTOM: 2,
    LEFT: 3,
    CENTER: 4,
    RIGHT: 5,
    HDISTRIBUTE: 6,
    VDISTRIBUTE: 7
};
JSG.graph.command.AlignItemsCommand = function (a, b) {
    JSG.graph.command.AlignItemsCommand._super.constructor.apply(this, arguments);
    this._iteminfos = [];
    this._alignFlag = b;
    var c;
    for (c = 0; c < a.length; c++) {
        var d = a[c].getModel();
        d instanceof JSG.graph.model.LineConnection || this._iteminfos.push({
            item: d,
            pin: d.getPin().copy(),
            angle: d.getAngle().copy()
        })
    }
};
JSG.extend(JSG.graph.command.AlignItemsCommand, JSG.graph.command.Command);
JSG.graph.command.AlignItemsCommand.prototype.restoreStateAfterUndo = function (a) {
    this.selectAll(this.getItemsFromInfos(), a)
};
JSG.graph.command.AlignItemsCommand.prototype.restoreStateAfterRedo = function (a) {
    this.selectAll(this.getItemsFromInfos(), a)
};
JSG.graph.command.AlignItemsCommand.prototype.getItemsFromInfos = function () {
    var a = [], b;
    for (b = 0; b < this._iteminfos.length; b++)a.push(this._iteminfos[b].item);
    return a
};
JSG.graph.command.AlignItemsCommand.prototype.execute = function () {
    this.redo()
};
JSG.graph.command.AlignItemsCommand.prototype.undo = function () {
    var a;
    for (a = 0; a < this._iteminfos.length; a++) {
        var b = this._iteminfos[a], c = b.item;
        c.setAngle(b.angle);
        c.getPin().setTo(b.pin);
        c.getAngle().evaluate(c);
        c.getPin().evaluate(c)
    }
};
JSG.graph.command.AlignItemsCommand.prototype.redo = function () {
    var a, b, c, d, e = 0, f = 0, g = [], k = [], h = JSG.boxCache.get(), m = JSG.boxCache.get(), l = JSG.rectCache.get(), p = JSG.rectCache.get(), n = this._iteminfos[0].item.getGraph(), q, r, t, u, w;
    for (q = 0; q < this._iteminfos.length; q++)if (u = this._iteminfos[q], w = u.item.getTranslatedBoundingBox(n, m).getBoundingRectangle(p), q) {
        a = Math.min(a, w.x);
        c = Math.min(c, w.y);
        b = Math.max(b, w.getRight());
        d = Math.max(d, w.getBottom());
        e += w.width;
        f += w.height;
        for (r = 0; r < g.length; r++)if (t = g[r].getTranslatedBoundingBox(n,
                h).getBoundingRectangle(l), t.x >= w.x) {
            g.insert(u.item, r);
            break
        }
        r === g.length && g.push(u.item);
        for (r = 0; r < k.length; r++)if (t = k[r].getTranslatedBoundingBox(n, h).getBoundingRectangle(l), t.y >= w.y) {
            k.insert(u.item, r);
            break
        }
        r === k.length && k.push(u.item)
    } else a = w.x, c = w.y, b = w.getRight(), d = w.getBottom(), e = w.width, f = w.height, g.push(u.item), k.push(u.item);
    r = a;
    t = c;
    var v = JSG.ptCache.get(), y;
    for (q = 0; q < this._iteminfos.length; q++)switch (u = this._iteminfos[q], v = u.item.getPinPoint(v), w = u.item.getTranslatedBoundingBox(n, m).getBoundingRectangle(p),
        JSG.graph.Utils.translatePointUp(v, u.item.getParent(), n), this._alignFlag) {
        case JSG.graph.command.Alignment.HDISTRIBUTE:
            if (this._iteminfos.length) {
                y = (b - a - e) / (this._iteminfos.length - 1);
                var C = g[q];
                u = this._getInfoForItem(C);
                u.item.getPinPoint(v);
                w = C.getTranslatedBoundingBox(n, h).getBoundingRectangle(l);
                v.x += r - w.x;
                this._setPinPoint(v, n, C);
                r += y + w.width
            }
            break;
        case JSG.graph.command.Alignment.VDISTRIBUTE:
            this._iteminfos.length && (y = (d - c - f) / (this._iteminfos.length - 1), C = k[q], u = this._getInfoForItem(C), u.item.getPinPoint(v),
                w = C.getTranslatedBoundingBox(n, h).getBoundingRectangle(l), v.y += t - w.y, this._setPinPoint(v, n, C), t += y + w.height);
            break;
        case JSG.graph.command.Alignment.TOP:
            v.y += c - w.y;
            this._setPinPoint(v, n, u.item);
            break;
        case JSG.graph.command.Alignment.MIDDLE:
            y = (d + c) / 2;
            v.y += y - w.getCenterY();
            this._setPinPoint(v, n, u.item);
            break;
        case JSG.graph.command.Alignment.BOTTOM:
            v.y += d - w.getBottom();
            this._setPinPoint(v, n, u.item);
            break;
        case JSG.graph.command.Alignment.LEFT:
            v.x += a - w.x;
            this._setPinPoint(v, n, u.item);
            break;
        case JSG.graph.command.Alignment.CENTER:
            y =
                (b + a) / 2;
            v.x += y - w.getCenterX();
            this._setPinPoint(v, n, u.item);
            break;
        case JSG.graph.command.Alignment.RIGHT:
            v.x += b - w.getRight(), this._setPinPoint(v, n, u.item)
    }
    JSG.ptCache.release(v);
    JSG.boxCache.release(m, h);
    JSG.rectCache.release(p, l)
};
JSG.graph.command.AlignItemsCommand.prototype._setPinPoint = function (a, b, c) {
    JSG.graph.Utils.translatePointDown(a, b, c.getParent());
    c.setPinPointTo(a)
};
JSG.graph.command.AlignItemsCommand.prototype._getInfoForItem = function (a) {
    a = a.getId();
    var b, c;
    for (b = 0; b < this._iteminfos.length; b++)if (c = this._iteminfos[b], a === c.item.getId())return c
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.ChangeParentCommand = function (a, b) {
    JSG.graph.command.ChangeParentCommand._super.constructor.apply(this, arguments);
    this._oldPin = a.getPin().copy();
    this._oldParent = a.getParent();
    this._newParent = b
};
JSG.extend(JSG.graph.command.ChangeParentCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.ChangeParentCommand.prototype.undo = function () {
    this._graphItem.getPin().setTo(this._oldPin);
    this._graphItem.changeParent(this._oldParent);
    this._graphItem.getPin().evaluate(this._graphItem)
};
JSG.graph.command.ChangeParentCommand.prototype.redo = function () {
    this._translateItemToParent(this._newParent);
    this._graphItem.changeParent(this._newParent)
};
JSG.graph.command.ChangeParentCommand.prototype._translateItemToParent = function (a) {
    var b = this._graphItem.getGraph(), c = this._graphItem.getPinPoint(JSG.ptCache.get()), d = this._graphItem.disableEvents();
    JSG.graph.Utils.traverseItemUp(this._graphItem.getParent(), b, function (a) {
        a.translateToParent(c)
    });
    JSG.graph.Utils.traverseItemDown(b, a, function (a) {
        a.translateFromParent(c)
    });
    this._graphItem.setPinPointTo(c);
    d && this._graphItem.enableEvents();
    JSG.ptCache.release(c)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.DropItemCommand = function (a) {
    JSG.graph.command.DropItemCommand._super.constructor.apply(this, arguments);
    this._editor = a.editor;
    this._target = a.target;
    this._libId = a.libId;
    this._libName = a.libName;
    this._newPinPoint = void 0 !== a.newPinPoint ? a.newPinPoint : new JSG.geometry.Point(0, 0);
    this._model = a.target.getModel();
    this._angle = void 0 !== a.angle ? a.angle : 0;
    this._nodes = void 0
};
JSG.extend(JSG.graph.command.DropItemCommand, JSG.graph.command.Command);
JSG.graph.command.DropItemCommand.prototype.restoreStateAfterRedo = function (a) {
    void 0 !== this._nodes && this.selectAll(this._nodes, a)
};
JSG.graph.command.DropItemCommand.prototype.execute = function () {
    this.redo()
};
JSG.graph.command.DropItemCommand.prototype.undo = function () {
    var a;
    for (a = 0; a < this._nodes.length; a++)this._model.removeItem(this._nodes[a])
};
JSG.graph.command.DropItemCommand.prototype.redo = function () {
    var a;
    for (a = 0; a < this._nodes.length; a++)this._model.addItem(this._nodes[a])
};
JSG.graph.command.DropItemCommand.prototype.execute = function () {
    var a = this._editor._graphViewer;
    a.getGraphView().clearFeedback();
    JSG.connectionRestorer = new JSG.graph.model.ConnectionRestorer;
    var b = JSG.graphItemFactory.createItemFromString(this._libId);
    b ? (this._nodes = [], this._nodes.push(b), b.setSize(3E3, 1E3)) : this._nodes = JSG.graphItemFactory.createShape(this._libId);
    if (!this._nodes || !this._nodes.length)return !1;
    a.getCoordinateSystem();
    var c = this._newPinPoint.copy(), b = this._editor.getGraph(), d = a.rootController.getView(),
        e;
    1 === this._nodes.length && (e = JSG.layoutFactory.getLayoutIndex(c, a, this._target, this._libName, !1, !0));
    JSG.setDrawingDisabled(!0);
    a.clearSelection();
    var f = this._nodes[0].getPinPoint(), g = this._angle;
    JSG.graph.Utils.traverseDown(d, this._target.getView(), function (a) {
        g -= a.getAngle();
        a.translateFromParent(c);
        return !0
    });
    for (var g = -1 !== this._angle ? g : 0, k, d = 0; d < this._nodes.length; d++)this._nodes[d].setAngle(g), k = this._nodes[d].getPinPoint(), k = new JSG.geometry.Point(k.x - (f.x - c.x), k.y - (f.y - c.y)), this._nodes[d].setPinPointTo(k),
        this._model.addItem(this._nodes[d]);
    JSG.connectionRestorer.updateIds(b);
    JSG.connectionRestorer = void 0;
    b._restoreConnections(b);
    b.evaluate();
    void 0 !== e && (f = this._target.getModelController(this._nodes[0]), e.before ? f.moveToIndex(e.index) : f.moveToIndex(e.index + 1));
    JSG.setDrawingDisabled(!1);
    for (d = 0; d < this._nodes.length; d++)f = this._target.getModelController(this._nodes[d]), a.select(f);
    b.setChanged(!0);
    this._editor.invalidate()
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.InternalMoveItemCommand = function (a, b) {
    JSG.graph.command.InternalMoveItemCommand._super.constructor.apply(this, arguments);
    this._oldPin = a.getPin().copy();
    this._newPinPoint = b.copy();
    this._vPos = a.getTextFormat().getVerticalPosition().getValue();
    this._hPos = a.getTextFormat().getHorizontalPosition().getValue()
};
JSG.extend(JSG.graph.command.InternalMoveItemCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.InternalMoveItemCommand.prototype.undo = function () {
    this._graphItem instanceof JSG.graph.model.TextNode && (this._graphItem.getTextFormat().setVerticalPosition(this._vPos), this._graphItem.getTextFormat().setHorizontalPosition(this._hPos));
    this._graphItem.getPin().setTo(this._oldPin);
    this._graphItem.getPin().evaluate(this._graphItem)
};
JSG.graph.command.InternalMoveItemCommand.prototype.redo = function () {
    this._graphItem instanceof JSG.graph.model.TextNode && (this._graphItem.getTextFormat().setVerticalPosition(JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.CUSTOM), this._graphItem.getTextFormat().setHorizontalPosition(JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.CUSTOM));
    this._graphItem.setPinPointTo(this._newPinPoint);
    this._graphItem.getPin().evaluate(this._graphItem)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.MoveNodeCommand = function (a, b) {
    function c(a, b) {
        var c;
        for (c = 0; c < a.length; c++) {
            var g = a[c];
            void 0 === b.get(g.getId()) && b.put(g.getId(), g.getPoints())
        }
    }

    JSG.graph.command.MoveNodeCommand._super.constructor.apply(this, arguments);
    this._pointsMap = function () {
        var b = a.getPorts(), e = new JSG.commons.Map, f, g;
        for (f = 0; f < b.length; f++)g = b[f], c(g.getIncomingEdges(), e), c(g.getOutgoingEdges(), e);
        return e
    }()
};
JSG.extend(JSG.graph.command.MoveNodeCommand, JSG.graph.command.InternalMoveItemCommand);
JSG.graph.command.MoveNodeCommand.prototype.undo = function () {
    function a(a, b) {
        var c, d, h;
        for (c = 0; c < a.length; c++)d = a[c], h = b.get(d.getId()), void 0 !== h && d.setPoints(h)
    }

    JSG.graph.command.MoveNodeCommand._super.undo.call(this);
    var b = this._graphItem.getPorts(), c;
    for (c = 0; c < b.length; c++) {
        var d = b[c];
        a(d.getIncomingEdges(), this._pointsMap);
        a(d.getOutgoingEdges(), this._pointsMap)
    }
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.MoveEdgeCommand = function (a, b) {
    JSG.graph.command.MoveEdgeCommand._super.constructor.apply(this, arguments);
    this._edgepoints = a.getPoints()
};
JSG.extend(JSG.graph.command.MoveEdgeCommand, JSG.graph.command.InternalMoveItemCommand);
JSG.graph.command.MoveEdgeCommand.prototype.undo = function () {
    JSG.graph.command.MoveEdgeCommand._super.undo.call(this);
    this._graphItem.setPoints(this._edgepoints)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.MoveItemCommand = function (a, b) {
    var c = a instanceof JSG.graph.model.Node ? new JSG.graph.command.MoveNodeCommand(a, b) : a instanceof JSG.graph.model.Edge ? new JSG.graph.command.MoveEdgeCommand(a, b) : new JSG.graph.command.InternalMoveItemCommand(a, b);
    JSG.graph.command.MoveItemCommand._super.constructor.call(this, c)
};
JSG.extend(JSG.graph.command.MoveItemCommand, JSG.graph.command.AbstractItemCommandProxy);
JSG.namespace("JSG.graph.command");
JSG.graph.command.TranslateItemsCommand = function () {
    function a(a, b) {
        var c, d;
        for (c = 0; c < a.length; c++)d = a[c], d.getLayoutAttributes().getLineBehavior().getValue() !== JSG.graph.attr.consts.LineBehavior.AUTO && void 0 === b.get(d.getId()) && b.put(d.getId(), d.getPoints())
    }

    function b(b, c) {
        c._items.push(b);
        c._itempins.push(b.getPin().copy());
        if (b instanceof JSG.graph.model.Node) {
            var d = c._pointsMap, e = b.getPorts(), f, p;
            for (f = 0; f < e.length; f++)p = e[f], a(p.getIncomingEdges(), d), a(p.getOutgoingEdges(), d)
        }
    }

    JSG.graph.command.TranslateItemsCommand._super.constructor.call(this);
    var c, d, e = arguments.length;
    this.translation = arguments[e - 1].copy();
    this._items = [];
    this._itempins = [];
    this._pointsMap = new JSG.commons.Map;
    for (c = 0; c < e - 1; c++)if (Array.isArray(arguments[c])) {
        var f = arguments[c];
        for (d = 0; d < f.length; d++)b(f[d], this)
    } else b(arguments[c], this)
};
JSG.extend(JSG.graph.command.TranslateItemsCommand, JSG.graph.command.Command);
JSG.graph.command.TranslateItemsCommand.prototype.execute = function () {
    this.redo()
};
JSG.graph.command.TranslateItemsCommand.prototype.undo = function () {
    function a(a, b) {
        var c, d, h;
        for (c = 0; c < a.length; c++)d = a[c], h = b.get(d.getId()), void 0 !== h && d.setPoints(h)
    }

    function b(b, c) {
        var d = b.getPorts(), k, h;
        for (k = 0; k < d.length; k++)h = d[k], a(h.getIncomingEdges(), c), a(h.getOutgoingEdges(), c)
    }

    var c, d;
    for (c = 0; c < this._items.length; c++)d = this._items[c], d.getPin().setTo(this._itempins[c]), d.getPin().evaluate(d), d instanceof JSG.graph.model.Node && b(d, this._pointsMap)
};
JSG.graph.command.TranslateItemsCommand.prototype.redo = function () {
    var a = this.translation, b;
    for (b = 0; b < this._items.length; b++)this._items[b].translate(a.x, a.y)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SizeItems = {VERTICALMAX: 0, VERTICALMIN: 1, HORIZONTALMAX: 2, HORIZONTALMIN: 3, MAX: 4, MIN: 5};
JSG.graph.command.SizeItemsCommand = function (a, b) {
    JSG.graph.command.SizeItemsCommand._super.constructor.apply(this, arguments);
    this.items = [];
    this.sizes = [];
    this.sizeFlag = b;
    var c, d;
    for (c = 0; c < a.length; c++)d = a[c].getModel(), d instanceof JSG.graph.model.Edge || (this.sizes.push(d.getSize(!0).copy()), this.items.push(d))
};
JSG.extend(JSG.graph.command.SizeItemsCommand, JSG.graph.command.Command);
JSG.graph.command.SizeItemsCommand.prototype.restoreStateAfterUndo = function (a) {
    this.selectAll(this.items, a)
};
JSG.graph.command.SizeItemsCommand.prototype.restoreStateAfterRedo = function (a) {
    this.selectAll(this.items, a)
};
JSG.graph.command.SizeItemsCommand.prototype.execute = function () {
    this.redo()
};
JSG.graph.command.SizeItemsCommand.prototype.undo = function () {
    var a, b;
    for (a = 0; a < this.items.length; a++)b = this.items[a], b.setSizeTo(this.sizes[a]), b.getSize(!0).evaluate(b)
};
JSG.graph.command.SizeItemsCommand.prototype.redo = function () {
    if (this.items.length) {
        var a = 0, b = 0, c = this.items[0].getWidth().getValue(), d = c, e = this.items[0].getHeight().getValue(), f = e, g = c * e, k = g, h = c, m = e, l = d, p = f, n;
        for (n = 1; n < this.items.length; n++)a = this.items[n].getWidth().getValue(), b = this.items[n].getHeight().getValue(), c = Math.min(c, a), e = Math.min(e, b), d = Math.max(a, d), f = Math.max(b, f), a * b > k && (l = a, p = b, k = a * b), a * b < g && (h = a, m = b, g = a * b);
        for (n = 0; n < this.items.length; n++)switch (this.sizeFlag) {
            case JSG.graph.command.SizeItems.VERTICALMAX:
                this.items[n].setHeight(f);
                break;
            case JSG.graph.command.SizeItems.VERTICALMIN:
                this.items[n].setHeight(e);
                break;
            case JSG.graph.command.SizeItems.HORIZONTALMAX:
                this.items[n].setWidth(d);
                break;
            case JSG.graph.command.SizeItems.HORIZONTALMIN:
                this.items[n].setWidth(c);
                break;
            case JSG.graph.command.SizeItems.MAX:
                this.items[n].setSize(l, p);
                break;
            case JSG.graph.command.SizeItems.MIN:
                this.items[n].setSize(h, m)
        }
    }
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.InternalResizeItemCommand = function (a, b) {
    JSG.graph.command.InternalResizeItemCommand._super.constructor.apply(this, arguments);
    this._oldPin = a.getPin().copy();
    this._oldSize = a.getSize(!0).copy();
    this._oldAngleExpr = a.getAngle().copy();
    this._newbbox = b.copy()
};
JSG.extend(JSG.graph.command.InternalResizeItemCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.InternalResizeItemCommand.prototype.undo = function () {
    this._graphItem.isSizeable() && (this._graphItem.getPin().setTo(this._oldPin), this._graphItem.setSizeTo(this._oldSize), this._graphItem.setAngle(this._oldAngleExpr), this._graphItem.evaluate())
};
JSG.graph.command.InternalResizeItemCommand.prototype.redo = function () {
    this._graphItem.isSizeable() && this._graphItem.setBoundingBoxTo(this._newbbox)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.ResizeNodeCommand = function (a, b) {
    function c(a, b) {
        var c, g;
        for (c = 0; c < a.length; c++)g = a[c], void 0 === b.get(g.getId()) && b.put(g.getId(), g.getPoints())
    }

    JSG.graph.command.ResizeNodeCommand._super.constructor.apply(this, arguments);
    a instanceof JSG.graph.model.TextNode && (this._oldSizeMode = a.getItemAttributes().getSizeMode().getExpression().copy(), this._newSizeMode = JSG.graph.attr.TextNodeAttributes.SizeMode.WIDTH);
    this._pointsMap = function () {
        var b = a.getPorts(), e = new JSG.commons.Map, f, g;
        for (f =
                 0; f < b.length; f++)g = b[f], c(g.getIncomingEdges(), e), c(g.getOutgoingEdges(), e);
        return e
    }()
};
JSG.extend(JSG.graph.command.ResizeNodeCommand, JSG.graph.command.InternalResizeItemCommand);
JSG.graph.command.ResizeNodeCommand.prototype.redo = function () {
    void 0 !== this._newSizeMode && this._graphItem.getItemAttributes().setSizeMode(this._newSizeMode);
    JSG.graph.command.ResizeNodeCommand._super.redo.call(this)
};
JSG.graph.command.ResizeNodeCommand.prototype.undo = function () {
    function a(a, b) {
        var c, d, h;
        for (c = 0; c < a.length; c++)d = a[c], h = b.get(d.getId()), void 0 !== h && d.setPoints(h)
    }

    void 0 !== this._oldSizeMode && this._graphItem.getItemAttributes().setSizeMode(this._oldSizeMode);
    JSG.graph.command.ResizeNodeCommand._super.undo.call(this);
    var b = this._graphItem.getPorts(), c, d;
    for (c = 0; c < b.length; c++)d = b[c], a(d.getIncomingEdges(), this._pointsMap), a(d.getOutgoingEdges(), this._pointsMap)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.ResizeItemCommand = function (a, b) {
    JSG.graph.command.ResizeItemCommand._super.constructor.apply(this, arguments);
    a instanceof JSG.graph.model.Node ? this.add(new JSG.graph.command.ResizeNodeCommand(a, b)) : a instanceof JSG.graph.model.Edge ? this.add(new JSG.graph.command.ResizeEdgeCommand(a, b)) : this.add(new JSG.graph.command.InternalResizeItemCommand(a, b))
};
JSG.extend(JSG.graph.command.ResizeItemCommand, JSG.graph.command.CompoundCommand);
JSG.namespace("JSG.graph.command");
JSG.graph.command.ReshapeItemCommand = function (a, b, c) {
    JSG.graph.command.ReshapeItemCommand._super.constructor.apply(this, arguments);
    this._index = b;
    this._point = c.copy();
    this._oldPoint = a.getReshapeCoordinateAt(b).toPoint()
};
JSG.extend(JSG.graph.command.ReshapeItemCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.ReshapeItemCommand.prototype.undo = function () {
    this._graphItem.setReshapeCoordinateAt(this._index, this._oldPoint)
};
JSG.graph.command.ReshapeItemCommand.prototype.redo = function () {
    var a = this._graphItem.getReshapeCoordinateAt(this._index), b = Math.min(a.getXMax(), this._point.x), b = Math.max(a.getXMin(), b), c = Math.min(a.getYMax(), this._point.y), c = Math.max(a.getYMin(), c);
    this._graphItem.setReshapeCoordinateAt(this._index, b, c)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.InternalRotateItemCommand = function (a, b, c) {
    JSG.graph.command.InternalRotateItemCommand._super.constructor.apply(this, arguments);
    this._angle = b;
    this._oldAngle = a.getAngle().copy();
    this._point = c ? c.copy() : void 0
};
JSG.extend(JSG.graph.command.InternalRotateItemCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.InternalRotateItemCommand.prototype.undo = function () {
    this._graphItem.rotate(-this._angle, this._point);
    this._graphItem.setAngle(this._oldAngle);
    this._graphItem.getAngle().evaluate(this._graphItem)
};
JSG.graph.command.InternalRotateItemCommand.prototype.redo = function () {
    this._graphItem.rotate(this._angle, this._point)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.ReplaceSubItemCommand = function (a, b, c) {
    JSG.graph.command.ReplaceSubItemCommand._super.constructor.call(this, a);
    this._index = b.getIndex();
    this._subItem = b;
    this._replacement = c
};
JSG.extend(JSG.graph.command.ReplaceSubItemCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.ReplaceSubItemCommand.prototype.undo = function () {
    this._graphItem.removeItem(this._replacement);
    this._graphItem.addItem(this._subItem, this._index)
};
JSG.graph.command.ReplaceSubItemCommand.prototype.redo = function () {
    this._graphItem.removeItem(this._subItem);
    this._graphItem.addItem(this._replacement, this._index)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.RotateNodeCommand = function (a, b, c) {
    function d(a, b) {
        var c, d;
        for (c = 0; c < a.length; c++)d = a[c], void 0 === b.get(d.getId()) && b.put(d.getId(), d.getPoints())
    }

    JSG.graph.command.RotateNodeCommand._super.constructor.apply(this, arguments);
    this._pointsMap = function () {
        var b = a.getPorts(), c = new JSG.commons.Map, g, k;
        for (g = 0; g < b.length; g++)k = b[g], d(k.getIncomingEdges(), c), d(k.getOutgoingEdges(), c);
        return c
    }()
};
JSG.extend(JSG.graph.command.RotateNodeCommand, JSG.graph.command.InternalRotateItemCommand);
JSG.graph.command.RotateNodeCommand.prototype.undo = function () {
    function a(a, b) {
        var c, d, h;
        for (c = 0; c < a.length; c++)d = a[c], h = b.get(d.getId()), void 0 !== h && d.setPoints(h)
    }

    JSG.graph.command.RotateNodeCommand._super.undo.call(this);
    var b = this._graphItem.getPorts(), c, d;
    for (c = 0; c < b.length; c++)d = b[c], a(d.getIncomingEdges(), this._pointsMap), a(d.getOutgoingEdges(), this._pointsMap)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.RotateEdgeCommand = function (a, b, c) {
    JSG.graph.command.RotateEdgeCommand._super.constructor.apply(this, arguments);
    this._edgepoints = a.getPoints();
    this._size = a.getSize();
    this._size.getWidth().hasFormula() || this._size.getHeight().hasFormula() ? this._size = this._size.copy() : this._size = void 0
};
JSG.extend(JSG.graph.command.RotateEdgeCommand, JSG.graph.command.InternalRotateItemCommand);
JSG.graph.command.RotateEdgeCommand.prototype.undo = function () {
    JSG.graph.command.RotateEdgeCommand._super.undo.call(this);
    this._graphItem.setPoints(this._edgepoints);
    this._size && (this._graphItem.setSizeTo(this._size), this._graphItem.getSize().evaluate(this._graphItem))
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.RotateItemCommand = function (a, b, c) {
    a = a instanceof JSG.graph.model.Node ? new JSG.graph.command.RotateNodeCommand(a, b, c) : a instanceof JSG.graph.model.Edge ? new JSG.graph.command.RotateEdgeCommand(a, b, c) : new JSG.graph.command.InternalRotateItemCommand(a, b, c);
    JSG.graph.command.RotateItemCommand._super.constructor.call(this, a)
};
JSG.extend(JSG.graph.command.RotateItemCommand, JSG.graph.command.AbstractItemCommandProxy);
JSG.namespace("JSG.graph.command");
JSG.graph.command.FormatItemCommand = function (a, b) {
    JSG.graph.command.FormatItemCommand._super.constructor.apply(this, arguments);
    this._newFormatMap = b.toMap();
    this._oldFormatMap = a.getFormat().toMap()
};
JSG.extend(JSG.graph.command.FormatItemCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.FormatItemCommand.prototype.undo = function () {
    this._graphItem.getFormat().reset();
    this._graphItem.getFormat().applyMap(this._oldFormatMap, this._graphItem)
};
JSG.graph.command.FormatItemCommand.prototype.redo = function () {
    this._graphItem.getFormat().applyMap(this._newFormatMap, this._graphItem)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.TextFormatItemCommand = function (a, b) {
    JSG.graph.command.TextFormatItemCommand._super.constructor.apply(this, arguments);
    this._oldFormat = a.getTextFormat().copy();
    this._newFormat = b.copy()
};
JSG.extend(JSG.graph.command.TextFormatItemCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.TextFormatItemCommand.prototype.undo = function () {
    this._oldFormat.isEmpty() ? this._graphItem.getTextFormat().reset() : this._setTextFormatTo(this._oldFormat)
};
JSG.graph.command.TextFormatItemCommand.prototype.redo = function () {
    this._setTextFormatTo(this._newFormat)
};
JSG.graph.command.TextFormatItemCommand.prototype._setTextFormatTo = function (a) {
    this._graphItem.getTextFormat().setFormatTo(a);
    this._graphItem instanceof JSG.graph.model.TextNode && this._graphItem.updateSize()
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetTextCommand = function (a, b, c) {
    JSG.graph.command.SetTextCommand._super.constructor.apply(this, arguments);
    this.oldText = b instanceof JSG.graph.expr.Expression ? b.copy() : b;
    this.newText = c
};
JSG.extend(JSG.graph.command.SetTextCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetTextCommand.prototype.undo = function () {
    this._graphItem.setText(this.oldText)
};
JSG.graph.command.SetTextCommand.prototype.redo = function () {
    this._graphItem.setText(this.newText);
    this._graphItem.evaluate()
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetNameCommand = function (a, b) {
    JSG.graph.command.SetNameCommand._super.constructor.apply(this, arguments);
    this.oldName = a.getName().copy();
    this.newName = b
};
JSG.extend(JSG.graph.command.SetNameCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetNameCommand.prototype.undo = function () {
    this._graphItem.setName(this.oldName)
};
JSG.graph.command.SetNameCommand.prototype.redo = function () {
    this._graphItem.setName(this.newName)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.AbstractGroupUngroupCommand = function () {
    JSG.graph.command.AbstractGroupUngroupCommand._super.constructor.apply(this, arguments);
    this._oldBBoxes = []
};
JSG.extend(JSG.graph.command.AbstractGroupUngroupCommand, JSG.graph.command.Command);
JSG.graph.command.AbstractGroupUngroupCommand.prototype.saveBBoxes = function (a) {
    var b, c;
    for (b = 0; b < a.length; b++)c = a[b], this._oldBBoxes.push({
        pin: c.getPin().copy(),
        size: c.getSize(!0).copy(),
        angle: c.getAngle().copy()
    })
};
JSG.graph.command.AbstractGroupUngroupCommand.prototype.restoreBBoxes = function (a) {
    var b, c, d;
    for (b = 0; b < a.length; b++)c = a[b], d = this._oldBBoxes[b], c.getPin().setTo(d.pin), c.setSizeTo(d.size), c.setAngle(d.angle), c.evaluate()
};
JSG.graph.command.AbstractGroupUngroupCommand.prototype.newGroup = function () {
    var a = new JSG.graph.model.Node(new JSG.graph.model.shapes.RectangleShape), b = JSG.graph.attr.consts;
    a.setItemAttribute(JSG.graph.attr.ItemAttributes.SELECTIONMODE, b.SelectionMode.AREA | b.SelectionMode.SELECTPARENT);
    a.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.NONE);
    a.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    return a
};
JSG.graph.command.AbstractGroupUngroupCommand.prototype.group = function (a, b) {
    function c(a, b) {
        var c = a[0].getBoundingBox(b), d = JSG.boxCache.get(), e, f;
        e = 1;
        for (f = a.length; e < f; e++)c.union(a[e].getBoundingBox(d));
        JSG.boxCache.release(d);
        return c
    }

    function d(a, b, c) {
        c.addItem(a);
        a.setName("group" + a.getId());
        a.setType("group");
        a.setBoundingBoxTo(b)
    }

    function e(a, b, c, d) {
        c = a.getAngle().getValue();
        var e = new JSG.geometry.Point(0, 0), f = JSG.graph.expr.NumberExpression, g = d.getWidth();
        d = d.getHeight();
        var k, u, w, v, y, C;
        k =
            0;
        for (u = b.length; k < u; k++)w = b[k], y = w.getItemAttributes(), y.setMoveable(JSG.graph.attr.consts.Moveable.NONE), y.setSizeable(!1), w.getOrigin(e), a.translateFromParent(e), w.rotate(-c), w.setOriginTo(e), v = w.getPin(), y = 0 !== g ? v.getX().getValue() / g + " * Parent!WIDTH" : 0, C = 0 !== d ? v.getY().getValue() / d + " * Parent!HEIGHT" : 0, v.setCoordinate(new f(0, y), new f(0, C)), v = w.getSize(), y = 0 !== g ? v.getWidth().getValue() / g + " * Parent!WIDTH" : 0, C = 0 !== d ? v.getHeight().getValue() / d + " * Parent!HEIGHT" : 0, w.setSize(new f(0, y), new f(0,
            C)), a.addItem(w)
    }

    a = function (a) {
        var b = [];
        if (a && 0 !== a.length) {
            var c = a[0].getParent(), d, e;
            d = 0;
            for (e = a.length; d < e; d++)a[d].getParent() === c && b.push(a[d])
        }
        return b
    }(a);
    if (!(2 > a.length)) {
        var f = a[0].getParent(), g = c(a, JSG.boxCache.get()), k = g.getTopLeft();
        d(b, g, f);
        e(b, a, k, g);
        JSG.boxCache.release(g)
    }
};
JSG.graph.command.AbstractGroupUngroupCommand.prototype.ungroup = function (a) {
    function b(a) {
        var b = [], c = a.getAngle().getValue(), g = new JSG.geometry.Point(0, 0), k = a.getItemAttributes().getSelectionMode().getValue();
        a.getItems().forEach(function (h) {
            h.getOrigin(g);
            a.translateToParent(g);
            h.rotate(c);
            h.setOriginTo(g);
            var m = h.getItemAttributes();
            m.setSelectionMode(k);
            m.setMoveable(JSG.graph.attr.consts.Moveable.BOTH);
            m.setSizeable(!0);
            m = h.getSize();
            h.setSize(m.getWidth().getValue(), m.getHeight().getValue());
            b.push(h)
        });
        return b
    }

    if (void 0 !== a) {
        var c = a.getParent();
        b(a).forEach(function (a) {
            c.addItem(a)
        });
        c.removeItem(a)
    }
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.GroupItemsCommand = function (a) {
    JSG.graph.command.GroupItemsCommand._super.constructor.apply(this, arguments);
    this._group = void 0;
    this._items = [];
    this._bboxes = [];
    var b;
    for (b = 0; b < a.length; b++)this._items.push(a[b].getModel())
};
JSG.extend(JSG.graph.command.GroupItemsCommand, JSG.graph.command.AbstractGroupUngroupCommand);
JSG.graph.command.GroupItemsCommand.prototype.restoreStateAfterUndo = function (a) {
    this.selectAll(this._items, a)
};
JSG.graph.command.GroupItemsCommand.prototype.restoreStateAfterRedo = function (a) {
    void 0 !== this._group && this.selectAll(this._group, a)
};
JSG.graph.command.GroupItemsCommand.prototype.execute = function () {
    this.saveBBoxes(this._items);
    this.redo()
};
JSG.graph.command.GroupItemsCommand.prototype.undo = function () {
    this.ungroup(this._group);
    this._group = void 0;
    this.restoreBBoxes(this._items)
};
JSG.graph.command.GroupItemsCommand.prototype.redo = function () {
    this._group = this.newGroup();
    this.group(this._items, this._group)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.UnGroupItemsCommand = function (a) {
    JSG.graph.command.UnGroupItemsCommand._super.constructor.apply(this, arguments);
    this._group = a;
    var b = [];
    this._group.getItems().forEach(function (a) {
        b.push(a)
    });
    this._items = b
};
JSG.extend(JSG.graph.command.UnGroupItemsCommand, JSG.graph.command.AbstractGroupUngroupCommand);
JSG.graph.command.UnGroupItemsCommand.prototype.restoreStateAfterUndo = function (a) {
    this.selectAll(this._group, a)
};
JSG.graph.command.UnGroupItemsCommand.prototype.restoreStateAfterRedo = function (a) {
    this.selectAll(this._items, a)
};
JSG.graph.command.UnGroupItemsCommand.prototype.execute = function () {
    this.redo()
};
JSG.graph.command.UnGroupItemsCommand.prototype.undo = function () {
    this.group(this._items, this._group)
};
JSG.graph.command.UnGroupItemsCommand.prototype.redo = function () {
    this.ungroup(this._group)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.ChangeItemOrder = {TOTOP: -1, TOBOTTOM: -2, UP: -3, DOWN: -4};
JSG.graph.command.ChangeItemOrderCommand = function (a, b) {
    JSG.graph.command.ChangeItemOrderCommand._super.constructor.apply(this, arguments);
    this._targetPosition = b;
    this._controller = a;
    this._oldIndex = this._controller.getIndex()
};
JSG.extend(JSG.graph.command.ChangeItemOrderCommand, JSG.graph.command.Command);
JSG.graph.command.ChangeItemOrderCommand.prototype.restoreStateAfterUndo = function (a) {
    this._select(this._controller, a)
};
JSG.graph.command.ChangeItemOrderCommand.prototype.restoreStateAfterRedo = function (a) {
    this._select(this._controller, a)
};
JSG.graph.command.ChangeItemOrderCommand.prototype._select = function (a, b) {
    var c = [];
    void 0 !== a && c.push(a);
    b.setSelection(c)
};
JSG.graph.command.ChangeItemOrderCommand.prototype.execute = function () {
    this.redo()
};
JSG.graph.command.ChangeItemOrderCommand.prototype.undo = function () {
    this._controller.moveToIndex(this._oldIndex)
};
JSG.graph.command.ChangeItemOrderCommand.prototype.redo = function () {
    switch (this._targetPosition) {
        case JSG.graph.command.ChangeItemOrder.TOTOP:
            this._controller.moveToTop();
            break;
        case JSG.graph.command.ChangeItemOrder.TOBOTTOM:
            this._controller.moveToBottom();
            break;
        case JSG.graph.command.ChangeItemOrder.UP:
            this._controller.moveUp();
            break;
        case JSG.graph.command.ChangeItemOrder.DOWN:
            this._controller.moveDown();
            break;
        default:
            this._controller.moveToIndex(this._targetPosition)
    }
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.ChangeAttributeCommand = function (a, b, c, d) {
    JSG.graph.command.ChangeAttributeCommand._super.constructor.apply(this, arguments);
    this._path = b;
    this._newValue = c;
    if (void 0 === d) {
        var e = a.getAttributeAtPath(b);
        void 0 !== e && (d = e.getExpression())
    }
    this._oldValue = d instanceof JSG.graph.expr.Expression ? d.copy() : d
};
JSG.extend(JSG.graph.command.ChangeAttributeCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.ChangeAttributeCommand.prototype.undo = function () {
    this._graphItem.setAttributeAtPath(this._path, this._oldValue)
};
JSG.graph.command.ChangeAttributeCommand.prototype.redo = function () {
    this._graphItem.setAttributeAtPath(this._path, this._newValue)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.CollapseItemCommand = function (a) {
    JSG.graph.command.CollapseItemCommand._super.constructor.apply(this);
    this._item = a;
    this._colBtnPos = this.getCollapseButtonPosition(a, new JSG.geometry.Point);
    var b = a.isCollapsed(), c = JSG.graph.attr.AttributeUtils.createItemAttributePath(JSG.graph.attr.ItemAttributes.COLLAPSED);
    this.add(new JSG.graph.command.ChangeAttributeCommand(a, c, !b, b));
    a.isMoveable() && this.add(new JSG.graph.command.TranslateItemsCommand(a, new JSG.geometry.Point))
};
JSG.extend(JSG.graph.command.CollapseItemCommand, JSG.graph.command.CompoundCommand);
JSG.graph.command.CollapseItemCommand.prototype.initNextCommand = function (a, b) {
    if (1 === b) {
        var c = this.getCollapseButtonPosition(this._item, JSG.ptCache.get());
        this._colBtnPos.subtract(c);
        a.translation.setTo(this._colBtnPos);
        JSG.ptCache.release(c)
    }
};
JSG.graph.command.CollapseItemCommand.prototype.getCollapseButtonPosition = function (a, b) {
    var c = a.getOrigin(b), d = a.getSizeAsPoint(JSG.ptCache.get()), e = JSG.ptCache.get();
    switch (a.getItemAttribute(JSG.graph.attr.ItemAttributes.COLLAPSEDBUTTON).getValue()) {
        case JSG.graph.attr.consts.ButtonPosition.TOPLEFT:
            e.set(0, 0);
            break;
        case JSG.graph.attr.consts.ButtonPosition.TOPRIGHT:
            e.set(d.x, 0);
            break;
        case JSG.graph.attr.consts.ButtonPosition.TOPCENTER:
            e.set(d.x / 2, 0);
            break;
        case JSG.graph.attr.consts.ButtonPosition.BOTTOMCENTER:
            e.set(d.x /
            2, d.y)
    }
    JSG.geometry.Utils.rotatePoint(e, a.getAngle().getValue());
    c.add(e);
    JSG.ptCache.release(d, e);
    return c
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.AttachCommand = function (a, b, c) {
    JSG.graph.command.AttachCommand._super.constructor.apply(this, arguments);
    this._port = b;
    this._attachToSourcePort = c;
    this._oldPointsCount = a.getPointsCount();
    this._oldparent = a.getParent()
};
JSG.extend(JSG.graph.command.AttachCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.AttachCommand.prototype.undo = function () {
    var a = this._graphItem.getPointsCount(), b = a - this._oldPointsCount, a = this._attachToSourcePort ? 0 : a - b;
    this._graphItem.detachPort(this._port);
    this._graphItem.removePointsAt(a, b);
    this._oldparent && this._graphItem.getParent() !== this._oldparent && this._switchToOldParent(this._graphItem, this._oldparent)
};
JSG.graph.command.AttachCommand.prototype.redo = function () {
    this._attachToSourcePort ? this._graphItem.setSourcePort(this._port) : this._graphItem.setTargetPort(this._port)
};
JSG.graph.command.AttachCommand.prototype._switchToOldParent = function (a, b) {
    (function () {
        var c = b.getGraph(), d = a.getOrigin(new JSG.geometry.Point(0, 0));
        JSG.graph.Utils.traverseItemUp(a.getParent(), c, function (a) {
            a.translateToParent(d)
        });
        JSG.graph.Utils.traverseItemDown(c, b, function (a) {
            a.translateFromParent(d)
        });
        a.setOriginTo(d)
    })();
    a.changeParent(b)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.DeletePortCommand = function (a) {
    JSG.graph.command.DeletePortCommand._super.constructor.apply(this, arguments);
    this.setPort(a)
};
JSG.extend(JSG.graph.command.DeletePortCommand, JSG.graph.command.Command);
JSG.graph.command.DeletePortCommand.prototype.setPort = function (a) {
    this._port = a;
    this._portnode = void 0 !== a ? a.getParent() : void 0
};
JSG.graph.command.DeletePortCommand.prototype.execute = function () {
    this.redo()
};
JSG.graph.command.DeletePortCommand.prototype.undo = function () {
    void 0 !== this._port && void 0 !== this._portnode && this._portnode.addPort(this._port)
};
JSG.graph.command.DeletePortCommand.prototype.redo = function () {
    void 0 !== this._port && void 0 !== this._portnode && this._portnode.removePort(this._port)
};
JSG.graph.command.DeletePortCommand.prototype.restoreStateAfterUndo = function (a) {
    void 0 !== this._port && this.selectAll(this._port, a)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.DetachCommand = function (a, b) {
    JSG.graph.command.DetachCommand._super.constructor.apply(this);
    this.add(new JSG.graph.command.InternalDetachCommand(a, b));
    this.add(new JSG.graph.command.DeletePortCommand(void 0))
};
JSG.extend(JSG.graph.command.DetachCommand, JSG.graph.command.CompoundCommand);
JSG.graph.command.DetachCommand.prototype.initNextCommand = function (a, b) {
    if (1 === b) {
        var c = this.commands[b - 1]._oldport;
        c && (0 === c.getEdgesCount() && c.isDeleteable()) && a.setPort(c)
    }
};
JSG.graph.command.InternalDetachCommand = function (a, b) {
    JSG.graph.command.InternalDetachCommand._super.constructor.apply(this, arguments);
    this._oldport = void 0;
    this._fromSource = b === a.getSourcePort()
};
JSG.extend(JSG.graph.command.InternalDetachCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.InternalDetachCommand.prototype.execute = function () {
    this._oldport = this._fromSource ? this._graphItem.getSourcePort() : this._graphItem.getTargetPort();
    JSG.graph.command.InternalDetachCommand._super.execute.call(this)
};
JSG.graph.command.InternalDetachCommand.prototype.undo = function () {
    this._oldport && (this._fromSource ? this._graphItem.setSourcePort : this._graphItem.setTargetPort).call(this._graphItem, this._oldport)
};
JSG.graph.command.InternalDetachCommand.prototype.redo = function () {
    this._graphItem.detachPort(this._oldport)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.InternalDeleteItemCommand = function (a) {
    JSG.graph.command.InternalDeleteItemCommand._super.constructor.apply(this, arguments);
    this._parent = a._parent;
    this._index = this._graphItem.getIndex()
};
JSG.extend(JSG.graph.command.InternalDeleteItemCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.InternalDeleteItemCommand.prototype.undo = function () {
    this._parent && this._parent.addItem(this._graphItem, this._index)
};
JSG.graph.command.InternalDeleteItemCommand.prototype.redo = function () {
    if (this._parent) {
        var a = this._graphItem.getItemAttributes();
        !0 === a.getSelected().getValue() && a.setSelected(!1);
        this._parent.removeItem(this._graphItem)
    }
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.DeleteEdgeCommand = function (a) {
    JSG.graph.command.DeleteEdgeCommand._super.constructor.apply(this);
    this._edge = a;
    this.add(new JSG.graph.command.DetachCommand(a, a.getSourcePort()));
    this.add(new JSG.graph.command.DetachCommand(a, a.getTargetPort()));
    this.add(new JSG.graph.command.InternalDeleteItemCommand(a))
};
JSG.extend(JSG.graph.command.DeleteEdgeCommand, JSG.graph.command.CompoundCommand);
JSG.namespace("JSG.graph.command");
JSG.graph.command.DeleteNodeCommand = function (a) {
    JSG.graph.command.DeleteNodeCommand._super.constructor.apply(this);
    this.detachEdges(a);
    this.add(new JSG.graph.command.InternalDeleteItemCommand(a))
};
JSG.extend(JSG.graph.command.DeleteNodeCommand, JSG.graph.command.CompoundCommand);
JSG.graph.command.DeleteNodeCommand.prototype.detachEdges = function (a) {
    var b = a.getId();
    a = a.getParent();
    for (var c, d, e, f; void 0 !== a;) {
        var g = a.getItems();
        c = 0;
        for (d = g.length; c < d; c++)e = g[c], e instanceof JSG.graph.model.LineConnection && (e.hasSourceNode() && (f = e.getSourceNode().createPath(), f.containsId(b) && this.add(this.createDetachCommand(e, e.getSourcePort()))), e.hasTargetNode() && (f = e.getTargetNode().createPath(), f.containsId(b) && this.add(this.createDetachCommand(e, e.getTargetPort()))));
        a = a.getParent()
    }
};
JSG.graph.command.DeleteNodeCommand.prototype.createDetachCommand = function (a, b) {
    return new JSG.graph.command.DetachCommand(a, b)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.DeleteItemCommand = function (a) {
    JSG.graph.command.DeleteItemCommand._super.constructor.apply(this);
    a instanceof JSG.graph.model.Node ? this.add(new JSG.graph.command.DeleteNodeCommand(a)) : a instanceof JSG.graph.model.Edge ? this.add(new JSG.graph.command.DeleteEdgeCommand(a)) : this.add(new JSG.graph.command.InternalDeleteItemCommand(a))
};
JSG.extend(JSG.graph.command.DeleteItemCommand, JSG.graph.command.CompoundCommand);
JSG.namespace("JSG.graph.command");
JSG.graph.command.PasteItemsCommand = function (a, b, c, d) {
    JSG.graph.command.PasteItemsCommand._super.constructor.apply(this, arguments);
    this.xml = a;
    this.items = [];
    this.viewer = b;
    this.parent = void 0 !== c ? c.getModel() : void 0;
    this.offset = d;
    this.oldSelection = b.getSelection()
};
JSG.extend(JSG.graph.command.PasteItemsCommand, JSG.graph.command.Command);
JSG.graph.command.PasteItemsCommand.prototype.execute = function () {
    var a = this._getStartNode();
    if (void 0 !== a && a.hasChildNodes()) {
        var b = this.viewer.getGraph();
        JSG.connectionRestorer = new JSG.graph.model.ConnectionRestorer;
        this._paste(a);
        JSG.connectionRestorer.updateIds(b);
        JSG.connectionRestorer = void 0;
        b.evaluate();
        b._restoreConnections(b)
    }
    this._selectItems(this.items)
};
JSG.graph.command.PasteItemsCommand.prototype._getStartNode = function () {
    if (void 0 !== this.xml)return (new DOMParser).parseFromString(this.xml, "text/xml").getElementsByTagName("clip")[0]
};
JSG.graph.command.PasteItemsCommand.prototype._paste = function (a) {
    void 0 === this.parent && (this.parent = this._getTargetParent());
    return this._pasteTo(this.parent, a)
};
JSG.graph.command.PasteItemsCommand.prototype._getTargetParent = function () {
    if (this.viewer.getDefaultController())return this.viewer.getDefaultController().getModel();
    var a = this.viewer.getSelectionProvider();
    if (a.hasSingleSelection()) {
        for (var b = JSG.graph.attr.ItemAttributes.CONTAINER, c = a.getFirstSelection(); !1 === c.getModel().getItemAttribute(b).getValue();)c = c.getParent();
        a = this._getPasteIds(a);
        return this._getVerifiedParent(c.getModel(), a)
    }
    return this.viewer.getGraphController().getModel()
};
JSG.graph.command.PasteItemsCommand.prototype._getPasteIds = function (a) {
    var b = [], c = this._getStartNode(), d, e;
    if (void 0 !== c && c.hasChildNodes())for (d = 0, e = c.childNodes.length; d < e; d++) {
        var f = c.childNodes.item(d);
        if ("graphitem" === f.nodeName || "gi" === f.nodeName)f = f.getAttribute("id"), void 0 !== f && b.push(Number(f))
    }
    a = a.getSelectionContext();
    if (void 0 !== a && "type.jsgpaste" === a.type)for (d = 0; d < a.length; d++)b.push(a[d]);
    return b
};
JSG.graph.command.PasteItemsCommand.prototype._getVerifiedParent = function (a, b) {
    for (var c = JSG.graph.attr.ItemAttributes.CONTAINER; void 0 !== a && (JSG.Arrays.contains(b, a.getId()) || !1 === a.getItemAttribute(c).getValue());)a = a.getParent();
    return a
};
JSG.graph.command.PasteItemsCommand.prototype._pasteTo = function (a, b) {
    var c = JSG.boxCache.get(), d = JSG.boxCache.get(), e, f, g;
    e = 0;
    for (f = b.childNodes.length; e < f; e++)if (g = b.childNodes.item(e), "graphitem" === g.nodeName || "gi" === g.nodeName) {
        var k = g.getAttribute("type");
        if (k = JSG.graphItemFactory.createItemFromString(k))a.addItem(k), k.readXML(g), k instanceof JSG.graph.model.TextNode && k.getTextFormat().setParent(a.getTextFormat()), k.getBoundingBox(c), 1 === e ? d.setTo(c) : d.union(c), this._translateToParent(k, a), this.items.push(k)
    }
    this._translateItems(this.items,
        d);
    JSG.boxCache.release(c, d)
};
JSG.graph.command.PasteItemsCommand.prototype._translateToParent = function (a, b) {
    var c = a.getAngle().getValue(), d = a.getPinPoint(JSG.ptCache.get());
    JSG.graph.Utils.traverseItemDown(a, b, function (a) {
        c -= a.getAngle().getValue();
        a.translateFromParent(d);
        return !0
    });
    a.disableRefresh();
    a.setAngle(c);
    a.setPinPointTo(d);
    a.enableRefresh();
    JSG.ptCache.release(d)
};
JSG.graph.command.PasteItemsCommand.prototype._translateItems = function (a, b) {
    var c = 0, d = void 0 !== this.offset ? JSG.ptCache.get().setTo(this.offset) : this._getOffset(this.parent, b, JSG.ptCache.get()), e, f;
    JSG.graph.Utils.traverseItemUp(this.parent, this.parent.getGraph(), function (a) {
        c += a.getAngle().getValue();
        return !0
    });
    d.rotate(-c);
    for (e = 0; e < a.length; e++)f = a[e], f.disableRefresh(), f.translate(d.x, d.y), f.enableRefresh();
    JSG.ptCache.release(d)
};
JSG.graph.command.PasteItemsCommand.prototype._getOffset = function (a, b, c) {
    a = c || new JSG.geometry.Point(0, 0);
    c = b.getTopLeft(JSG.ptCache.get());
    b = b.getCenter(JSG.ptCache.get()).add(c);
    this._getPasteCenter(a).subtract(b);
    JSG.ptCache.release(c, b);
    return a
};
JSG.graph.command.PasteItemsCommand.prototype._getPasteCenter = function (a) {
    var b = this.viewer, c = b.getSelectionProvider();
    a = a || new JSG.geometry.Point;
    if (c.hasSelection()) {
        var b = this._getSelectionBox(b, JSG.boxCache.get()), d = b.getTopLeft(JSG.ptCache.get());
        b.getCenter(a).add(d);
        JSG.boxCache.release(b);
        JSG.ptCache.release(d);
        c.hasSingleSelection() ? c.getFirstSelection().getModel() !== this.parent && a.add(JSG.clipOffset) : a.add(JSG.clipOffset)
    } else b.getScrollPanel().getViewPort().getBounds().getCenter(a), b.translateFromParent(a);
    return a
};
JSG.graph.command.PasteItemsCommand.prototype._getSelectionBox = function (a, b) {
    var c = a.getSelectionProvider();
    if (c.hasSingleSelection() && (c = c.getFirstSelection().getModel(), c instanceof JSG.graph.model.TextNode)) {
        var c = c.getParent(), d = c.getBoundingBox(b);
        JSG.graph.Utils.translateBoundingBoxUp(d, c.getParent(), c.getGraph());
        return d
    }
    return a.getSelectionView().getBoundingBox(b)
};
JSG.graph.command.PasteItemsCommand.prototype.undo = function () {
    var a;
    for (a = 0; a < this.items.length; a++)this.parent.removeItem(this.items[a])
};
JSG.graph.command.PasteItemsCommand.prototype.redo = function () {
    var a;
    for (a = 0; a < this.items.length; a++)this.parent.addItem(this.items[a])
};
JSG.graph.command.PasteItemsCommand.prototype.restoreStateAfterUndo = function (a) {
    void 0 !== this.oldSelection && a.getSelectionProvider().setSelection(this.oldSelection)
};
JSG.graph.command.PasteItemsCommand.prototype.restoreStateAfterRedo = function (a) {
    this._selectItems(this.items)
};
JSG.graph.command.PasteItemsCommand.prototype._selectItems = function (a) {
    var b = [], c = [], d = this.viewer.getGraphController(), e = this.viewer.getSelectionProvider(), f;
    e.clearSelection();
    for (f = 0; f < a.length; f++) {
        var g = d.getControllerByModelId(a[f].getId());
        void 0 !== g && (b.push(a[f].getId()), c.push(g))
    }
    b.type = "type.jsgpaste";
    e.setSelection(c, b)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetShapeCommand = function (a, b) {
    JSG.graph.command.SetShapeCommand._super.constructor.apply(this, arguments);
    this._oldShape = a._shape;
    this._newShape = b
};
JSG.extend(JSG.graph.command.SetShapeCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetShapeCommand.prototype.undo = function () {
    this._graphItem.setShapeTo(this._oldShape)
};
JSG.graph.command.SetShapeCommand.prototype.redo = function () {
    this._graphItem.setShapeTo(this._newShape)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetShapePointsCommand = function (a, b) {
    function c(a) {
        var b = [], c;
        for (c = 0; c < a.length; c++)b.push(a[c].copy());
        return b
    }

    function d(a) {
        var b = new JSG.geometry.PointList;
        a.forEach(function (a) {
            b.addPoint(a.copy())
        });
        return b
    }

    JSG.graph.command.SetShapePointsCommand._super.constructor.apply(this, arguments);
    this._oldbbox = a.getBoundingBox();
    this._newbbox = this._resizeBBox(a.getBoundingBox(), b);
    this._translate(b, this._oldbbox, this._newbbox);
    this._newpointlist = d(b);
    this._oldpointlist = d(a._shape.getPoints());
    this._oldCoordinates = c(a.getShape().getCoordinates());
    this._oldReshapeProperties = a._reshapeProperties.copy();
    this._oldReshapeCoordinates = c(a._reshapeCoordinates)
};
JSG.extend(JSG.graph.command.SetShapePointsCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetShapePointsCommand.prototype.undo = function () {
    this._graphItem.setBoundingBoxTo(this._oldbbox, !0);
    this._graphItem.getShape().setCoordinates(this._oldCoordinates);
    this._graphItem.setReshapeProperties(this._oldReshapeProperties);
    this._graphItem.setReshapeCoordinates(this._oldReshapeCoordinates);
    this._graphItem.evaluate()
};
JSG.graph.command.SetShapePointsCommand.prototype.redo = function () {
    this._graphItem.setBoundingBoxTo(this._newbbox, !0);
    this._setCoordinates(this._newbbox, this._newpointlist)
};
JSG.graph.command.SetShapePointsCommand.prototype._setCoordinates = function (a, b) {
    var c = a.getWidth(), d = a.getHeight(), e = [], f = b.getPoints(), g, k, h, m;
    g = 0;
    for (k = f.length; g < k; g++)h = 0 !== c ? f[g].x / c : 0, m = 0 !== d ? f[g].y / d : 0, h = new JSG.graph.expr.NumberExpression(h, "width * " + h.toFixed(5)), m = new JSG.graph.expr.NumberExpression(m, "height * " + m.toFixed(5)), e.push(new JSG.graph.Coordinate(h, m));
    this._graphItem._shape.setCoordinates(e);
    c = this._graphItem.getAttributeAtPath("keepreshapecoordinates");
    if (void 0 === c || !0 !==
        c.getValue())this._graphItem._reshapeCoordinates = [], this._graphItem._reshapeProperties.clear()
};
JSG.graph.command.SetShapePointsCommand.prototype._resizeBBox = function (a, b) {
    var c, d, e, f, g = new JSG.geometry.Point(0, 0);
    a.setSize(0, 0);
    b.forEach(function (b) {
        g.setTo(b).translate(a._topleft.x, a._topleft.y);
        c = void 0 === g.x ? c : void 0 === c ? g.x : g.x < c ? g.x : c;
        e = void 0 === g.x ? e : void 0 === e ? g.x : g.x > e ? g.x : e;
        d = void 0 === g.y ? d : void 0 === d ? g.y : g.y < d ? g.y : d;
        f = void 0 === g.y ? f : void 0 === f ? g.y : g.y > f ? g.y : f
    });
    g.set(c, d);
    a.rotatePoint(g);
    a.setTopLeftTo(g);
    a.setSize(e - c, f - d);
    return a
};
JSG.graph.command.SetShapePointsCommand.prototype._translate = function (a, b, c) {
    var d = c.getTopLeft().subtract(b.getTopLeft());
    b.rotateLocalPointInverse(d);
    a.forEach(function (a) {
        a.subtract(d)
    })
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.InsertLinePointsAtCommand = function (a, b, c) {
    JSG.graph.command.InsertLinePointsAtCommand._super.constructor.apply(this, arguments);
    this._index = b;
    var d = c, e = [], f;
    for (f = 0; f < d.length; f++)e.push(d[f].copy());
    this._newpoints = e
};
JSG.extend(JSG.graph.command.InsertLinePointsAtCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.InsertLinePointsAtCommand.prototype.undo = function () {
    this._doWithoutEvents(function (a) {
        a._graphItem.removePointsAt(a._index, a._newpoints.length)
    })
};
JSG.graph.command.InsertLinePointsAtCommand.prototype.redo = function () {
    this._doWithoutEvents(function (a) {
        a._graphItem.insertPointsAt(a._index, a._newpoints)
    })
};
JSG.graph.command.InsertLinePointsAtCommand.prototype._doWithoutEvents = function (a) {
    this._graphItem.disableEvents();
    this._graphItem.getShape().disableNotification();
    a.call(this, this);
    this._graphItem.getShape().enableNotification();
    this._graphItem.enableEvents()
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.RemoveLinePointsCommand = function (a, b) {
    JSG.graph.command.RemoveLinePointsCommand._super.constructor.apply(this, arguments);
    this._oldpoints = void 0;
    this._indices = b.slice(0);
    this._indices.sort(function (a, b) {
        return a < b ? -1 : a > b ? 1 : 0
    })
};
JSG.extend(JSG.graph.command.RemoveLinePointsCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.RemoveLinePointsCommand.prototype.execute = function () {
    var a = this._graphItem, b = this._indices, c = [], d;
    for (d = 0; d < b.length; d++) {
        var e = a.getPointAt(b[d]);
        void 0 !== e && c.push(e)
    }
    this._oldpoints = c;
    JSG.graph.command.RemoveLinePointsCommand._super.execute.call(this)
};
JSG.graph.command.RemoveLinePointsCommand.prototype.undo = function () {
    this._doWithoutEvents(function (a) {
        var b;
        for (b = 0; b < a._indices.length; b++)a._graphItem.insertPointsAt(a._indices[b], a._oldpoints[b])
    })
};
JSG.graph.command.RemoveLinePointsCommand.prototype.redo = function () {
    this._doWithoutEvents(function (a) {
        var b;
        for (b = 0; b < a._indices.length; b++)a._graphItem.removePointsAt(a._indices[b] - b, 1)
    })
};
JSG.graph.command.RemoveLinePointsCommand.prototype._doWithoutEvents = function (a) {
    this._graphItem.disableEvents();
    this._graphItem.getShape().disableNotification();
    a.call(this, this);
    this._graphItem.getShape().enableNotification();
    this._graphItem.enableEvents()
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetPinCommand = function (a, b) {
    JSG.graph.command.SetPinCommand._super.constructor.apply(this, arguments);
    this._oldPin = a.getPin().copy();
    this._newPin = b.copy()
};
JSG.extend(JSG.graph.command.SetPinCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetPinCommand.prototype.undo = function () {
    this._graphItem.getPin().setTo(this._oldPin);
    this._graphItem.getPin().evaluate(this._graphItem)
};
JSG.graph.command.SetPinCommand.prototype.redo = function () {
    this._graphItem.getPin().setTo(this._newPin);
    this._graphItem.getPin().evaluate(this._graphItem)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetSizeCommand = function (a, b) {
    JSG.graph.command.SetSizeCommand._super.constructor.apply(this, arguments);
    this._oldSize = a.getSize().copy();
    this._newSize = b.copy()
};
JSG.extend(JSG.graph.command.SetSizeCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetSizeCommand.prototype.undo = function () {
    this._graphItem.setSizeTo(this._oldSize);
    this._graphItem.getSize().evaluate(this._graphItem)
};
JSG.graph.command.SetSizeCommand.prototype.redo = function () {
    this._graphItem.setSizeTo(this._newSize);
    this._graphItem.getSize().evaluate(this._graphItem)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetLinePointAtCommand = function (a, b, c) {
    JSG.graph.command.SetLinePointAtCommand._super.constructor.apply(this, arguments);
    this._index = b;
    this._newpoint = c.copy();
    this._oldpoint = void 0
};
JSG.extend(JSG.graph.command.SetLinePointAtCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetLinePointAtCommand.prototype.execute = function () {
    this._oldpoint = this._graphItem.getPointAt(this._index);
    this.redo()
};
JSG.graph.command.SetLinePointAtCommand.prototype.undo = function () {
    void 0 !== this._oldpoint && this._graphItem.setPointAt(this._index, this._oldpoint.copy())
};
JSG.graph.command.SetLinePointAtCommand.prototype.redo = function () {
    this._graphItem.setPointAt(this._index, this._newpoint.copy())
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetLineShapePointsCommand = function (a, b) {
    JSG.graph.command.SetLineShapePointsCommand._super.constructor.apply(this, arguments);
    this._newpoints = function (a) {
        var b = [], e;
        for (e = 0; e < a.length; e++)b.push(a[e].copy());
        return b
    }(b);
    this._oldpoints = function (b) {
        var d = [], e;
        for (e = 0; e < b.length; e++)d.push(a.translateToParent(b[e].copy()));
        return d
    }(a._shape.getPoints())
};
JSG.extend(JSG.graph.command.SetLineShapePointsCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetLineShapePointsCommand.prototype.undo = function () {
    this._graphItem.setPoints(this._oldpoints)
};
JSG.graph.command.SetLineShapePointsCommand.prototype.redo = function () {
    this._graphItem.setPoints(this._newpoints)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetBezierShapePointsCommand = function (a, b, c, d) {
    function e(a) {
        var b = new JSG.geometry.PointList;
        a.forEach(function (a) {
            b.addPoint(a.copy())
        });
        return b
    }

    JSG.graph.command.SetBezierShapePointsCommand._super.constructor.apply(this, arguments);
    this._oldbbox = a.getBoundingBox();
    this._newbbox = this._resizeBBox(a.getBoundingBox(), b, c, d);
    this._translate(b, c, d, this._oldbbox, this._newbbox);
    this._newpointlist = e(b);
    this._newCpFrompointlist = e(c);
    this._newCpTopointlist = e(d);
    this._oldpointlist = e(a._shape.getPoints());
    this._oldCpFrompointlist = e(a._shape.getCpFromPoints());
    this._oldCpTopointlist = e(a._shape.getCpToPoints())
};
JSG.extend(JSG.graph.command.SetBezierShapePointsCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetBezierShapePointsCommand.prototype.undo = function () {
    this._graphItem.setBoundingBoxTo(this._oldbbox, !0);
    this._setCoordinates(this._oldbbox, this._oldpointlist, this._oldCpFrompointlist, this._oldCpTopointlist)
};
JSG.graph.command.SetBezierShapePointsCommand.prototype.redo = function () {
    this._graphItem.setBoundingBoxTo(this._newbbox, !0);
    this._setCoordinates(this._newbbox, this._newpointlist, this._newCpFrompointlist, this._newCpTopointlist)
};
JSG.graph.command.SetBezierShapePointsCommand.prototype._setCoordinates = function (a, b, c, d) {
    var e = a.getWidth();
    a = a.getHeight();
    var f = [], g, k, h, m = b.getPoints();
    b = 0;
    for (g = m.length; b < g; b++)k = 0 !== e ? m[b].x / e : 1, h = 0 !== a ? m[b].y / a : 1, k = new JSG.graph.expr.NumberExpression(k, "width * " + k.toFixed(5)), h = new JSG.graph.expr.NumberExpression(h, "height * " + h.toFixed(5)), f.push(new JSG.graph.Coordinate(k, h));
    this._graphItem._shape.setCoordinates(f);
    f = [];
    m = c.getPoints();
    b = 0;
    for (g = m.length; b < g; b++)k = 0 !== e ? m[b].x / e : 1, h = 0 !==
    a ? m[b].y / a : 1, k = new JSG.graph.expr.NumberExpression(k, "width * " + k.toFixed(5)), h = new JSG.graph.expr.NumberExpression(h, "height * " + h.toFixed(5)), f.push(new JSG.graph.Coordinate(k, h));
    this._graphItem._shape.setCpFromCoordinates(f);
    f = [];
    m = d.getPoints();
    b = 0;
    for (g = m.length; b < g; b++)k = 0 !== e ? m[b].x / e : 1, h = 0 !== a ? m[b].y / a : 1, k = new JSG.graph.expr.NumberExpression(k, "width * " + k.toFixed(5)), h = new JSG.graph.expr.NumberExpression(h, "height * " + h.toFixed(5)), f.push(new JSG.graph.Coordinate(k, h));
    this._graphItem._shape.setCpToCoordinates(f);
    this._graphItem._reshapeCoordinates = [];
    this._graphItem._reshapeProperties.clear()
};
JSG.graph.command.SetBezierShapePointsCommand.prototype._resizeBBox = function (a, b, c, d) {
    function e(a, b) {
        return void 0 === a ? b : void 0 === b ? a : a < b ? a : b
    }

    function f(a, b) {
        return void 0 === a ? b : void 0 === b ? a : a > b ? a : b
    }

    a.setSize(0, 0);
    var g, k, h, m, l = new JSG.geometry.Point(0, 0);
    b.forEach(function (b) {
        l.setTo(b).translate(a._topleft.x, a._topleft.y);
        g = e(l.x, g);
        h = f(l.x, h);
        k = e(l.y, k);
        m = f(l.y, m)
    });
    c.forEach(function (b) {
        l.setTo(b).translate(a._topleft.x, a._topleft.y);
        g = e(l.x, g);
        h = f(l.x, h);
        k = e(l.y, k);
        m = f(l.y, m)
    });
    d.forEach(function (b) {
        l.setTo(b).translate(a._topleft.x,
            a._topleft.y);
        g = e(l.x, g);
        h = f(l.x, h);
        k = e(l.y, k);
        m = f(l.y, m)
    });
    l.set(g, k);
    a.rotatePoint(l);
    a.setTopLeftTo(l);
    a.setSize(h - g, m - k);
    return a
};
JSG.graph.command.SetBezierShapePointsCommand.prototype._translate = function (a, b, c, d, e) {
    var f = e.getTopLeft().subtract(d.getTopLeft());
    d.rotateLocalPointInverse(f);
    a.forEach(function (a) {
        a.subtract(f)
    });
    b.forEach(function (a) {
        a.subtract(f)
    });
    c.forEach(function (a) {
        a.subtract(f)
    })
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetAttributeCommand = function (a, b, c, d) {
    JSG.graph.command.SetAttributeCommand._super.constructor.apply(this, arguments);
    this._setter = b;
    this._oldvalue = c instanceof JSG.graph.attr.Attribute ? c.getExpression() : c;
    this._oldvalue = this._oldvalue instanceof JSG.graph.expr.Expression ? this._oldvalue.copy() : this._oldvalue;
    this._newvalue = d
};
JSG.extend(JSG.graph.command.SetAttributeCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetAttributeCommand.prototype.undo = function () {
    this._setAttributeValue(this._oldvalue)
};
JSG.graph.command.SetAttributeCommand.prototype.redo = function () {
    this._setAttributeValue(this._newvalue)
};
JSG.graph.command.SetAttributeCommand.prototype._setAttributeValue = function (a) {
    var b = this._graphItem.getItemAttributes();
    b[this._setter].call(b, a, this._graphItem)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetAttributesMapCommand = function (a, b, c) {
    JSG.graph.command.SetAttributesMapCommand._super.constructor.apply(this, arguments);
    this._map = b;
    this._listpath = (this._oldMap = function (a) {
        function c(b, e) {
            var h = a.getAttribute(b);
            h && f.put(b, h.getExpression().copy())
        }

        var f = new JSG.commons.Map;
        if (a instanceof JSG.graph.attr.AttributeList)return b.iterate(c), f
    }(this._graphItem.getAttributeAtPath(c))) ? c : void 0
};
JSG.extend(JSG.graph.command.SetAttributesMapCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetAttributesMapCommand.prototype.undo = function () {
    var a = this._graphItem.getAttributeAtPath(this._listpath);
    a && a.applyMap(this._oldMap, this._graphItem)
};
JSG.graph.command.SetAttributesMapCommand.prototype.redo = function () {
    var a = this._graphItem.getAttributeAtPath(this._listpath);
    a && a.applyMap(this._map, this._graphItem)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetLayoutAttributeCommand = function (a, b, c, d) {
    JSG.graph.command.SetLayoutAttributeCommand._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.command.SetLayoutAttributeCommand, JSG.graph.command.SetAttributeCommand);
JSG.graph.command.SetLayoutAttributeCommand.prototype._setAttributeValue = function (a) {
    var b = this._graphItem.getLayoutAttributes();
    b[this._setter].call(b, a)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.SetTextSizeModeCommand = function (a, b) {
    JSG.graph.command.SetTextSizeModeCommand._super.constructor.apply(this, arguments);
    this._oldsize = a.getSize().copy();
    this._oldsizemode = a.getItemAttributes().getSizeMode().getExpression().copy();
    this._newsizemode = b
};
JSG.extend(JSG.graph.command.SetTextSizeModeCommand, JSG.graph.command.AbstractItemCommand);
JSG.graph.command.SetTextSizeModeCommand.prototype.undo = function () {
    this._graphItem.getItemAttributes().setSizeMode(this._oldsizemode);
    this._graphItem.setSizeTo(this._oldsize)
};
JSG.graph.command.SetTextSizeModeCommand.prototype.redo = function () {
    this._graphItem.getItemAttributes().setSizeMode(this._newsizemode)
};
JSG.namespace("JSG.graph.command");
JSG.graph.command.ResizeEdgeCommand = function (a, b) {
    function c(a) {
        a.subtract(h);
        g.rotateLocalPointInverse(a);
        a.x = 0 === k.x ? 0 : a.x / k.x;
        a.y = 0 === k.y ? 0 : a.y / k.y;
        return a
    }

    function d(a) {
        a = p.setTo(a);
        a.set(a.x * m.x, a.y * m.y);
        b.rotateLocalPoint(a);
        a.add(l);
        return a
    }

    var e = [], f = a.getPoints(), g = a.getBoundingBox(JSG.boxCache.get()), k = g.getSize(JSG.ptCache.get()), h = g.getTopLeft(JSG.ptCache.get()), m = b.getSize(JSG.ptCache.get()), l = b.getTopLeft(JSG.ptCache.get()), p = JSG.ptCache.get(), n, q;
    for (n = 0; n < f.length; n++)q = c(f[n]),
        e.push(d(q).copy());
    JSG.boxCache.release(g);
    JSG.ptCache.release(k, h, m, l, p);
    JSG.graph.command.ResizeEdgeCommand._super.constructor.call(this, a, e)
};
JSG.extend(JSG.graph.command.ResizeEdgeCommand, JSG.graph.command.SetLineShapePointsCommand);
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.InteractionUtils = {};
JSG.graph.interaction.InteractionUtils.highlightSnapItemofController = function (a, b, c) {
    function d(a) {
        var b;
        for (b = 0; b < k.length; b++) {
            if (a === k[b])return !0;
            for (var c = a.getParent(); c;) {
                if (c === k[b])return !0;
                c = c.getParent()
            }
        }
        return !1
    }

    function e(a, b, c) {
        var d = new JSG.graph.view.SnapFeedbackView;
        d.setOrigin(a, c);
        d.setTarget(b, c);
        return d
    }

    function f(a, b, c) {
        var d = new JSG.graph.view.SnapFeedbackView;
        d.setOrigin(c, a);
        d.setTarget(c, b);
        return d
    }

    var g = a.getInteractionHandler().viewer, k = g.getSelection();
    g.getGraphView();
    var h = 2 * JSG.snapRadius, m = new JSG.geometry.Point(b.x + b.width / 2, b.y + b.height / 2), l, p;
    c = JSG.boxCache.get();
    var n = JSG.rectCache.get(), q = JSG.ptCache.get(), r, t = a.getControllerForSnap(b, function (a, b) {
        return !a instanceof JSG.graph.controller.NodeController || !a.getModel().isVisible() || !a.getModel().getItemAttributes().getSnapTo().getValue() ? !1 : !0
    }), u, w;
    u = 0;
    for (w = t.length; u < w; u++) {
        var v = t[u], n = v.getModel().getTranslatedBoundingBox(g.getGraph(), c).getBoundingRectangle(n);
        r = n.getCenter(q);
        if (v._snapType & JSG.graph.interaction.SnapType.CENTERY ||
            v._snapType & JSG.graph.interaction.SnapType.TOP || v._snapType & JSG.graph.interaction.SnapType.BOTTOM)a._horizontalSnapController ? (Math.abs(r.x - m.x) < Math.abs(p.x - m.x) || d(a._horizontalSnapController)) && !d(v) && (p = r.copy(), a._horizontalSnapController = v) : (a._horizontalSnapController = v, p = r.copy());
        if (v._snapType & JSG.graph.interaction.SnapType.CENTERX || v._snapType & JSG.graph.interaction.SnapType.LEFT || v._snapType & JSG.graph.interaction.SnapType.RIGHT)a._verticalSnapController ? (Math.abs(r.y - m.y) < Math.abs(l.y -
        m.y) || d(a._verticalSnapController)) && !d(v) && (l = r.copy(), a._verticalSnapController = v) : (a._verticalSnapController = v, l = r.copy())
    }
    a._horizontalSnapController && (n = a._horizontalSnapController.getModel().getTranslatedBoundingBox(g.getGraph(), c).getBoundingRectangle(n), r = n.getCenter(q), l = g.getLayer(JSG.graph.view.LayerId.SNAPLINES), r.x > m.x ? (r = b.x - h, t = n.getRight() + h) : (r = b.getRight() + h, t = n.x - h), a._horizontalSnapController._snapType & JSG.graph.interaction.SnapType.CENTERY && (p = n.getCenter(q).y, l.push(e(r, t, p)),
    n.height === b.height && (l.push(e(r, t, n.y)), l.push(e(r, t, n.getBottom())))), a._horizontalSnapController._snapType & JSG.graph.interaction.SnapType.TOP && (p = n.y, l.push(e(r, t, p)), n.height === b.height && (l.push(e(r, t, n.getCenter(q).y)), l.push(e(r, t, n.getBottom())))), a._horizontalSnapController._snapType & JSG.graph.interaction.SnapType.BOTTOM && (p = n.getBottom(), l.push(e(r, t, p)), n.height === b.height && (l.push(e(r, t, n.y)), l.push(e(r, t, n.getCenter(q).y)))));
    a._verticalSnapController && (n = a._verticalSnapController.getModel().getTranslatedBoundingBox(g.getGraph(),
        c).getBoundingRectangle(n), r = n.getCenter(q), l = g.getLayer(JSG.graph.view.LayerId.SNAPLINES), r.y > m.y ? (g = b.y - h, m = n.getBottom() + h) : (g = b.getBottom() + h, m = n.y - h), a._verticalSnapController._snapType & JSG.graph.interaction.SnapType.CENTERX && (h = n.getCenter(q).x, l.push(f(g, m, h)), n.width === b.width && (l.push(f(g, m, n.x)), l.push(f(g, m, n.getRight())))), a._verticalSnapController._snapType & JSG.graph.interaction.SnapType.LEFT && (h = n.x, l.push(f(g, m, h)), n.width === b.width && (l.push(f(g, m, n.getCenter(q).x)), l.push(f(g, m, n.getRight())))),
    a._verticalSnapController._snapType & JSG.graph.interaction.SnapType.RIGHT && (h = n.getRight(), l.push(f(g, m, h)), n.width === b.width && (l.push(f(g, m, n.x)), l.push(f(g, m, n.getCenter(q).x)))));
    JSG.boxCache.release(c);
    JSG.ptCache.release(q);
    JSG.rectCache.release(n)
};
JSG.graph.interaction.InteractionUtils.getPortsController = function (a, b) {
    var c = b.findControllerAt(a.location.copy(), JSG.graph.controller.FindFlags.BOXWITHFRAME, function (a) {
        return a instanceof JSG.graph.controller.NodeController ? (a = a.getModel(), !(a instanceof JSG.graph.model.TextNode) && a.isVisible() && a.getItemAttributes().getPortMode().getValue() !== JSG.graph.attr.consts.PortMode.NONE) : !1
    });
    return c ? JSG.graph.interaction.InteractionUtils._checkForChildControllerAt(c, a, b) : void 0
};
JSG.graph.interaction.InteractionUtils._checkForChildControllerAt = function (a, b, c) {
    function d(b, c) {
        if (!1 === f && (f = b.isCollapsed(), b !== a && b.containsPoint(c, JSG.graph.controller.FindFlags.AREAWITHFRAME))) {
            var d = b.getModel();
            return !(d instanceof JSG.graph.model.TextNode) && d.isVisible() && d.getItemAttributes().getPortMode().getValue() !== JSG.graph.attr.consts.PortMode.NONE
        }
        return !1
    }

    var e, f = !1;
    a.hasChildren() && (b = c.translateFromParent(b.location.copy()), b = c.translateFromRoot(b, a.getView().getParent()), e = a.findControllerByConditionAndLocation(b,
        d));
    return e || a
};
JSG.graph.interaction.InteractionUtils.getPortsFor = function (a, b, c) {
    var d = a.getModel(), e = b.getViewer();
    a = a.getView();
    var f = e.rootController.getView(), g = b.currentLocation.copy(), k = b.alignToGrid(g, e, c);
    JSG.graph.Utils.traverseDown(f, a, function (a) {
        a.translateFromParent(g);
        a.translateFromParent(k);
        return !0
    });
    var h, m;
    b = [];
    e = e.getCoordinateSystem().metricToLogXNoZoom(JSG.portFindRadius);
    if (e = d.getShape().getValidPortLocation(g, k, d.isClosed(), c, e))c = e.copy(), JSG.graph.Utils.translatePointUp(c, a, f), m = this._createPortView(d,
        e), m.setPosition(c), m.setFillColor("rgba(255,0,0,0.5)"), b.push(m); else {
        var l = d.getShape().getValidPortLocations(d.isClosed(), c);
        if (l && l.length)for (e = 0, h = l.length; e < h; e++)c = l[e].copy(), JSG.graph.Utils.translatePointUp(c, a, f), m = this._createPortView(d, l[e]), m.setActive(!1), m.setPosition(c), m.setFillColor("rgba(255,255,255, 0.5)"), b.push(m)
    }
    return b
};
JSG.graph.interaction.InteractionUtils._createPortView = function (a, b) {
    var c = new JSG.graph.view.PositionFeedbackView;
    c._model = a;
    c._location = b;
    return c
};
JSG.graph.interaction.InteractionUtils.highlightTargetController = function (a, b) {
    var c = b.createFeedback(), d = a.getLayer(JSG.graph.view.LayerId.TARGETCONTAINER), e = c.getFormat();
    e.setFillColor("rgba(144,181,238,0.1)");
    e.setLineColor("rgba(144,181,238,0.7)");
    e.setLineWidth(150 / a.getZoom());
    e.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    c.getFeedbackView().drawDecorations = function (a, b) {
        a.setFillColor("#333333");
        a.setTextBaseline("top");
        a.setTextAlign(JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT);
        a.setFontName("Arial");
        a.setFontSize(8 / a.getCoordinateSystem().getZoom());
        a.setFont();
        a.fillText("Add to Container", 0, this._item.getHeight().getValue() + 100)
    };
    d.push(c)
};
JSG.graph.interaction.InteractionUtils.highlightControllerLayoutPosition = function (a, b, c) {
    function d(a, c, d) {
        var e = new JSG.graph.view.MarqueeFeedbackView, f = b.getLayer(JSG.graph.view.LayerId.LAYOUTMARKER);
        e._bgColor = JSG.graph.view.selection.SelectionView.MARKER_FILL_COLOR;
        e._fgColor = "#333333";
        d ? e.setBounds(c.x, a - 75, c.width, 150) : e.setBounds(a - 75, c.y, 150, c.height);
        f.push(e);
        return e
    }

    var e, f;
    if (c && (e = c.getModel(), c = e.getLayoutAttributes().getConstraints())) {
        f = JSG.boxCache.get();
        e = e._subItems[a.index];
        e =
            e.getTranslatedBoundingBox(b.getGraph(), f).getBoundingRectangle();
        switch (c.flowDirection) {
            case ARAC.layout.config.FlowDirection.ROW_FLOW:
                return a.before ? d(e.y, e, !0) : d(e.getBottom(), e, !0);
            case ARAC.layout.config.FlowDirection.COL_FLOW:
                return a.before ? d(e.x, e, !1) : d(e.getRight(), e, !1)
        }
        JSG.boxCache.release(f)
    }
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.Interaction = function () {
    this.startLocation = new JSG.geometry.Point(0, 0);
    this.currentLocation = new JSG.geometry.Point(0, 0);
    this.lastLocation = new JSG.geometry.Point(0, 0);
    this._delegate = this.interactionHandler = void 0
};
JSG.graph.interaction.Interaction.prototype.getInteractionHandler = function () {
    return this.interactionHandler
};
JSG.graph.interaction.Interaction.prototype.setInteractionHandler = function (a) {
    this.interactionHandler = a
};
JSG.graph.interaction.Interaction.prototype.setDelegate = function (a) {
    this._delegate = a
};
JSG.graph.interaction.Interaction.prototype._notifyDelegate = function () {
    if (this._delegate) {
        var a = Array.prototype.shift.call(arguments);
        if ("function" === typeof this._delegate[a])return Array.prototype.unshift.call(arguments, this), this._delegate[a].apply(this._delegate, arguments)
    }
};
JSG.graph.interaction.Interaction.prototype.getViewer = function () {
    return this.interactionHandler ? this.interactionHandler.viewer : void 0
};
JSG.graph.interaction.Interaction.prototype.activate = function (a) {
    a && a instanceof JSG.ui.viewer.GraphViewer && (a = a.getGraph()) && (a._blockLayout = !0)
};
JSG.graph.interaction.Interaction.prototype.deactivate = function (a) {
    a && a instanceof JSG.ui.viewer.GraphViewer && (a.clearLayer(JSG.graph.view.LayerId.LAYOUTMARKER), a.clearLayer(JSG.graph.view.LayerId.TARGETCONTAINER), a.clearLayer(JSG.graph.view.LayerId.SNAPLINES), a.clearInteractionFeedback(), (a = a.getGraph()) && delete a._blockLayout);
    this._delegate = void 0
};
JSG.graph.interaction.Interaction.prototype.isScrollBarEvent = function () {
    return !1
};
JSG.graph.interaction.Interaction.prototype.finishInteraction = function (a, b) {
    this.willFinish(a, b);
    this.didFinish(a, b)
};
JSG.graph.interaction.Interaction.prototype.willFinish = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.didFinish = function (a, b) {
    var c = this.getInteractionHandler();
    c.setActiveInteraction(c.getDefaultInteraction())
};
JSG.graph.interaction.Interaction.prototype.cancelInteraction = function (a, b) {
    this.didFinish(a, b)
};
JSG.graph.interaction.Interaction.prototype.doCancelInteraction = function (a, b) {
    return a && a.isPressed(JSG.ui.events.KeyType.ESC)
};
JSG.graph.interaction.Interaction.prototype.condition = function (a) {
    return !0
};
JSG.graph.interaction.Interaction.prototype.onResizeCanvas = function (a, b, c) {
    return !1
};
JSG.graph.interaction.Interaction.prototype.onMouseDown = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onMouseDoubleClick = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onMouseMove = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onMouseDrag = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onMouseUp = function (a, b) {
    this.finishInteraction(a, b)
};
JSG.graph.interaction.Interaction.prototype.onMouseExit = function (a, b) {
    this.cancelInteraction(a, b)
};
JSG.graph.interaction.Interaction.prototype.onMouseWheel = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onDragEnter = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onDragExit = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onDragLeave = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onDragOver = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onDrop = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onRotateStart = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onRotate = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onRotateEnd = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onPinchStart = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onPinch = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onPinchEnd = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onPanStart = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onPan = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onPanEnd = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onHold = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onKeyDown = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onKeyUp = function (a, b) {
};
JSG.graph.interaction.Interaction.prototype.onApplyAttributes = function (a, b, c) {
    return !1
};
JSG.graph.interaction.Interaction.prototype.canApplyAttributes = function (a, b, c) {
    return !1
};
JSG.graph.interaction.Interaction.prototype.setCurrentLocation = function (a) {
    this.currentLocation.setTo(a)
};
JSG.graph.interaction.Interaction.prototype.getCurrentLocation = function () {
    return this.currentLocation
};
JSG.graph.interaction.Interaction.prototype.setStartLocation = function (a) {
    this.startLocation.setTo(a)
};
JSG.graph.interaction.Interaction.prototype.getStartLocation = function () {
    return this.startLocation
};
JSG.graph.interaction.Interaction.prototype.setLastLocation = function (a) {
    this.lastLocation.setTo(a)
};
JSG.graph.interaction.Interaction.prototype.getLastLocation = function () {
    return this.lastLocation
};
JSG.graph.interaction.Interaction.prototype.getCursor = function () {
    return this.interactionHandler.getCursor()
};
JSG.graph.interaction.Interaction.prototype.setCursor = function (a) {
    this.interactionHandler.setCursor(a)
};
JSG.graph.interaction.Interaction.prototype.getControllerAtLocation = function (a, b) {
    var c = this.interactionHandler.viewer, d = b || this._allwaysTrueCondition, e = c.getCoordinateSystem().metricToLogXNoZoom(JSG.findRadius);
    return c.findControllerByConditionAndLocation(a, function (a, b) {
        var c = !1, h = a.getModel().getBoundingBox(JSG.boxCache.get());
        h.expandBy(e);
        h.containsPoint(b) && a.containsPoint(b, JSG.graph.controller.FindFlags.AREAWITHFRAME) && (c = d(a, b));
        JSG.boxCache.release(h);
        return c
    })
};
JSG.graph.interaction.Interaction.prototype._allwaysTrueCondition = function () {
    return !0
};
JSG.graph.interaction.Interaction.prototype.alignToGrid = function (a, b, c, d) {
    d = d || new JSG.geometry.Point(0, 0);
    d.setTo(a);
    if (a = b.getGraphSettings()) {
        if (!a.getSnapToGrid() || c)return d;
        c = a.getSnapStep();
        a = d.x % c;
        b = d.y % c;
        d.x = a > c / 2 ? d.x + (c - a) : d.x - a;
        d.y = b > c / 2 ? d.y + (c - b) : d.y - b
    }
    return d
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.InteractionActivator = function () {
    this.isDisposed = !1
};
JSG.graph.interaction.InteractionActivator.prototype.activateInteraction = function (a, b) {
    var c = b.getInteractionHandler();
    c && (a.setStartLocation(b.startLocation), a.setCurrentLocation(b.currentLocation), c.setActiveInteraction(a));
    return a
};
JSG.graph.interaction.InteractionActivator.prototype.init = function (a) {
    this.isDisposed = !1
};
JSG.graph.interaction.InteractionActivator.prototype.dispose = function (a) {
    this.isDisposed = !0
};
JSG.graph.interaction.InteractionActivator.prototype.getKey = function () {
    return ""
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.InteractionDispatcher = function () {
    JSG.graph.interaction.InteractionDispatcher._super.constructor.call(this);
    this._activators = new JSG.commons.Map
};
JSG.extend(JSG.graph.interaction.InteractionDispatcher, JSG.graph.interaction.Interaction);
JSG.graph.interaction.InteractionDispatcher.prototype.initAsDefault = function (a) {
};
JSG.graph.interaction.InteractionDispatcher.prototype.disposeAsDefault = function (a) {
};
JSG.graph.interaction.InteractionDispatcher.prototype.activate = function (a) {
    JSG.graph.interaction.InteractionDispatcher._super.activate.call(this, a);
    this._activators.iterate(function (b, c) {
        c.init(a)
    })
};
JSG.graph.interaction.InteractionDispatcher.prototype.deactivate = function (a) {
    JSG.graph.interaction.InteractionDispatcher._super.deactivate.call(this, a);
    this._activators.iterate(function (b, c) {
        c.dispose(a)
    })
};
JSG.graph.interaction.InteractionDispatcher.prototype.getActivatorsForFunc = function (a) {
    var b = [];
    this._activators.iterate(function (c, d) {
        "function" === typeof d[a] && b.push(d)
    });
    return b
};
JSG.graph.interaction.InteractionDispatcher.prototype.addActivator = function (a, b) {
    this._activators.put(a, b)
};
JSG.graph.interaction.InteractionDispatcher.prototype.getActivator = function (a) {
    return this._activators.get(a)
};
JSG.graph.interaction.InteractionDispatcher.prototype.getAllActivators = function () {
    return this._activators.elements()
};
JSG.graph.interaction.InteractionDispatcher.prototype.removeActivator = function (a) {
    (a = this._activators.remove(a)) && a.dispose(this.getViewer());
    return a
};
JSG.graph.interaction.InteractionDispatcher.prototype.removeAllActivators = function () {
    var a = this;
    this._activators.iterate(function (b, c) {
        c.dispose(a.getViewer())
    });
    this._activators.clear()
};
JSG.graph.interaction.InteractionDispatcher.prototype.condition = function (a) {
    return !0
};
JSG.graph.interaction.InteractionDispatcher.prototype.getControllerAt = function (a, b, c) {
};
JSG.graph.interaction.InteractionDispatcher.prototype.getActiveHandle = function () {
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.InteractionHandler = function (a) {
    this.viewer = a;
    this.isDragging = !1;
    this.gfxsys = void 0;
    this.commandStack = new JSG.graph.command.CommandStack;
    this.scrollTimer = this.activeInteraction = void 0
};
JSG.graph.interaction.InteractionHandler.prototype.registerGraphicSystem = function (a) {
    this.gfxsys = a
};
JSG.graph.interaction.InteractionHandler.prototype.unregisterGraphicSystem = function () {
    this.gfxsys = void 0
};
JSG.graph.interaction.InteractionHandler.prototype.getDefaultInteraction = function () {
    return this.viewer.getDefaultInteraction()
};
JSG.graph.interaction.InteractionHandler.prototype.setActiveInteraction = function (a) {
    this.activeInteraction && this.activeInteraction.deactivate(this.viewer);
    if (this.activeInteraction = a)this.activeInteraction.setInteractionHandler(this), this.activeInteraction.activate(this.viewer)
};
JSG.graph.interaction.InteractionHandler.prototype.getActiveInteraction = function () {
    this.activeInteraction || this.setActiveInteraction(this.viewer.getDefaultInteraction());
    return this.activeInteraction
};
JSG.graph.interaction.InteractionHandler.prototype.cancelActiveInteraction = function () {
    var a = this.getActiveInteraction();
    a && a.cancelInteraction(void 0, this.viewer)
};
JSG.graph.interaction.InteractionHandler.prototype.dispose = function () {
    this.activeInteraction && this.activeInteraction.deactivate(this.viewer);
    this.removeTimer()
};
JSG.graph.interaction.InteractionHandler.prototype.handleResizeCanvas = function (a, b) {
    this.getActiveInteraction().onResizeCanvas(a, b, this.viewer) || this.setActiveInteraction(this.viewer.getDefaultInteraction())
};
JSG.graph.interaction.InteractionHandler.prototype.handleGestureEvent = function (a) {
    function b() {
        c.isDragging = !0;
        d.setTo(a.location);
        c.viewer.translateFromParent(d);
        c.getActiveInteraction().setStartLocation(d)
    }

    var c = this, d = new JSG.geometry.Point(0, 0);
    d.setTo(a.location);
    this.viewer.translateFromParent(d);
    this.getActiveInteraction().setLastLocation(this.getActiveInteraction().getCurrentLocation());
    this.getActiveInteraction().setCurrentLocation(d);
    switch (a.type) {
        case JSG.ui.events.GestureEventType.CANCEL:
            this.setActiveInteraction(this.viewer.getDefaultInteraction());
            break;
        case JSG.ui.events.GestureEventType.ROTATESTART:
            b();
            this.getActiveInteraction().onRotateStart(a, this.viewer);
            break;
        case JSG.ui.events.GestureEventType.ROTATE:
            this.getActiveInteraction().onRotate(a, this.viewer);
            break;
        case JSG.ui.events.GestureEventType.ROTATEEND:
            this.isDragging = !1;
            this.getActiveInteraction().onRotateEnd(a, this.viewer);
            break;
        case JSG.ui.events.GestureEventType.PINCHSTART:
            b();
            this.getActiveInteraction().onPinchStart(a, this.viewer);
            break;
        case JSG.ui.events.GestureEventType.PINCH:
            this.getActiveInteraction().onPinch(a,
                this.viewer);
            break;
        case JSG.ui.events.GestureEventType.PINCHEND:
            this.isDragging = !1;
            this.getActiveInteraction().onPinchEnd(a, this.viewer);
            break;
        case JSG.ui.events.GestureEventType.PANSTART:
            b();
            this.getActiveInteraction().onPanStart(a, this.viewer);
            break;
        case JSG.ui.events.GestureEventType.PAN:
            this.getActiveInteraction().onPan(a, this.viewer);
            break;
        case JSG.ui.events.GestureEventType.PANEND:
            this.isDragging = !1;
            this.getActiveInteraction().onPanEnd(a, this.viewer);
            break;
        case JSG.ui.events.GestureEventType.HOLD:
            b(),
                this.getActiveInteraction().onHold(a, this.viewer)
    }
};
JSG.graph.interaction.InteractionHandler.prototype.handleMouseEvent = function (a) {
    var b = this, c = a.location.copy(), d = this.getActiveInteraction(), e = a.type, f = JSG.ui.events.MouseEventType;
    this.viewer.translateFromParent(c);
    d.setLastLocation(d.getCurrentLocation());
    d.setCurrentLocation(c);
    this.doCancelActiveInteraction(d, a) && d && (d.finishInteraction(a, this.viewer), d = this.getActiveInteraction(), d.setLastLocation(d.getCurrentLocation()), d.setCurrentLocation(c));
    if (e === f.DOWN && a.isClicked(JSG.ui.events.ButtonType.RIGHT))this.handleRightClick(a);
    else switch (e) {
        case f.DOWN:
            this.isDragging = !0;
            d.setStartLocation(c);
            d.onMouseDown(a, this.viewer);
            break;
        case f.DBLCLK:
            d.onMouseDoubleClick(a, this.viewer);
            break;
        case f.MOVE:
            if (this.isDragging)d.onMouseDrag(a, this.viewer), c = this.viewer.getGraph(), d = d.isScrollBarEvent(), c && (c.getSettings().getAutoScroll() && !d) && this.viewer._scrollPanel && (d = !a.isInCanvas(), this._lastEvent = a, void 0 === this.scrollTimer && d ? this.scrollTimer = setInterval(function () {
                    JSG.graph.interaction.InteractionHandler.prototype.scrollTimerFunction(b)
                },
                300) : d || this.removeTimer()); else d.onMouseMove(a, this.viewer);
            break;
        case f.UP:
            this.isDragging && this.removeTimer();
            this.isDragging = !1;
            d.onMouseUp(a, this.viewer);
            break;
        case f.EXIT:
            this.isDragging = !1;
            d.onMouseExit(a, this.viewer);
            break;
        case f.WHEEL:
            this.isDragging = !1, d.onMouseWheel(a, this.viewer)
    }
    a.doRepaint = this.isDragging || a.doRepaint
};
JSG.graph.interaction.InteractionHandler.prototype.doCancelActiveInteraction = function (a, b) {
    return b.type === JSG.ui.events.MouseEventType.DOWN ? a.doCancelInteraction(b, this.viewer) ? !0 : this.viewer.isScrollBarEvent && this.viewer.isScrollBarEvent(b) && a !== this.viewer.getDefaultInteraction() : !1
};
JSG.graph.interaction.InteractionHandler.prototype.handleRightClick = function (a) {
    var b = this.getActiveInteraction();
    b.handleRightClick && b.handleRightClick(a, this.viewer)
};
JSG.graph.interaction.InteractionHandler.prototype.scrollTimerFunction = function (a) {
    var b = a._lastEvent, c = a.viewer.getScrollPanel(), d, e;
    b.gesture ? (d = b.gesture.touches[0].clientX, e = b.gesture.touches[0].clientY) : (d = b.event.clientX, e = b.event.clientY);
    d <= b.canvasRect.left ? 100 > Math.abs(d - b.canvasRect.left) ? c.scroll(-500) : c.scroll(-1500) : d >= b.canvasRect.right && (100 > Math.abs(d - b.canvasRect.right) ? c.scroll(500) : c.scroll(1500));
    e <= b.canvasRect.top ? 100 > Math.abs(e - b.canvasRect.top) ? c.scroll(0, -500) : c.scroll(0,
        -1500) : e >= b.canvasRect.bottom && (100 > Math.abs(e - b.canvasRect.bottom) ? c.scroll(0, 500) : c.scroll(0, 1500));
    a.repaint()
};
JSG.graph.interaction.InteractionHandler.prototype.removeTimer = function (a) {
    this.scrollTimer && (window.clearInterval(this.scrollTimer), this.scrollTimer = void 0)
};
JSG.graph.interaction.InteractionHandler.prototype.handleDragEvent = function (a) {
    var b = new JSG.geometry.Point(0, 0);
    b.setTo(a.location);
    this.viewer.translateFromParent(b);
    this.getActiveInteraction().setCurrentLocation(b);
    switch (a.type) {
        case JSG.ui.events.DragEventType.DROP:
            this.getActiveInteraction().onDrop(a, this.viewer);
            break;
        case JSG.ui.events.DragEventType.ENTER:
            this.getActiveInteraction().onDragEnter(a, this.viewer);
            break;
        case JSG.ui.events.DragEventType.EXIT:
            this.getActiveInteraction().onDragExit(a,
                this.viewer);
            break;
        case JSG.ui.events.DragEventType.LEAVE:
            this.getActiveInteraction().onDragLeave(a, this.viewer);
            break;
        case JSG.ui.events.DragEventType.OVER:
            this.getActiveInteraction().onDragOver(a, this.viewer)
    }
};
JSG.graph.interaction.InteractionHandler.prototype.handleKeyEvent = function (a) {
    var b = new JSG.geometry.Point(0, 0), c = this.getActiveInteraction();
    b.setTo(a.location);
    this.viewer.translateFromParent(b);
    c.setCurrentLocation(b);
    if (c.doCancelInteraction(a, this.viewer))c.cancelInteraction(a, this.viewer), this.isDragging = !1, this.removeTimer(); else switch (a.type) {
        case JSG.ui.events.KeyEventType.DOWN:
            c.onKeyDown(a, this.viewer);
            break;
        case JSG.ui.events.KeyEventType.UP:
            c.onKeyUp(a, this.viewer)
    }
};
JSG.graph.interaction.InteractionHandler.prototype.getCursor = function () {
    return this.gfxsys.getCursor()
};
JSG.graph.interaction.InteractionHandler.prototype.setCursor = function (a) {
    this.gfxsys && this.gfxsys.setCursor(a)
};
JSG.graph.interaction.InteractionHandler.prototype.repaint = function () {
    this.gfxsys.paint()
};
JSG.graph.interaction.InteractionHandler.prototype.execute = function (a, b) {
    JSG.debug.log("execute command!");
    JSG.setDrawingDisabled(!0);
    this.commandStack.execute(a);
    void 0 !== b && b.call(this, a, this.viewer);
    a._interaction = this.getActiveInteraction();
    this.viewer.getGraphView().clearFeedback();
    this.viewer.getGraph().setChanged(!0);
    JSG.setDrawingDisabled(!1);
    this.repaint()
};
JSG.graph.interaction.InteractionHandler.prototype.undo = function () {
    if (this.isUndoAvailable()) {
        JSG.debug.log("undo command!");
        JSG.setDrawingDisabled(!0);
        this.viewer.clearSelection();
        var a = this.commandStack.undo();
        void 0 !== a && (a.restoreStateAfterUndo(this.viewer), a._interaction !== this.getActiveInteraction() && (a._interaction = void 0, this.setActiveInteraction(this.viewer.getDefaultInteraction())));
        this.viewer.getGraph().setChanged(!0);
        JSG.setDrawingDisabled(!1);
        this.repaint()
    }
};
JSG.graph.interaction.InteractionHandler.prototype.isUndoAvailable = function () {
    return 0 !== this.commandStack.undostack.length
};
JSG.graph.interaction.InteractionHandler.prototype.redo = function () {
    if (this.isRedoAvailable()) {
        JSG.debug.log("redo command!");
        JSG.setDrawingDisabled(!0);
        this.viewer.clearSelection();
        var a = this.commandStack.redo();
        void 0 !== a && a.restoreStateAfterRedo(this.viewer);
        this.viewer.getGraph().setChanged(!0);
        JSG.setDrawingDisabled(!1);
        this.repaint()
    }
};
JSG.graph.interaction.InteractionHandler.prototype.isRedoAvailable = function () {
    return 0 !== this.commandStack.redostack.length
};
JSG.graph.interaction.InteractionHandler.prototype.copySelection = function () {
    JSG.clipOffset = new JSG.geometry.Point(200, 200);
    JSG.clipXML = JSG.copyItems(this.viewer.getSelection())
};
JSG.graph.interaction.InteractionHandler.prototype.copySelectionFormat = function () {
    var a = this.viewer.getSelection();
    1 === a.length && (JSG.clipFormat = a[0].getModel().getFormat().copy(), JSG.clipTextFormat = a[0].getModel().getTextFormat().copy())
};
JSG.graph.interaction.InteractionHandler.prototype.cutSelection = function () {
    JSG.clipOffset = new JSG.geometry.Point(0, 0);
    JSG.clipXML = JSG.copyItems(this.viewer.getSelection());
    var a = new JSG.graph.command.CompoundCommand, b = this.viewer.getSelection(), c;
    for (c = b.length - 1; 0 <= c; c--)b[c].getModel().isDeleteable() && a.add(new JSG.graph.command.DeleteItemCommand(b[c].getModel()));
    this.execute(a);
    this.viewer.clearSelection();
    this.viewer.clearAllLayer();
    this.repaint()
};
JSG.graph.interaction.InteractionHandler.prototype.paste = function () {
    if (this.isPasteAvailable()) {
        var a = new JSG.graph.command.PasteItemsCommand(JSG.clipXML, this.viewer);
        this.execute(a)
    }
};
JSG.graph.interaction.InteractionHandler.prototype.isPasteAvailable = function () {
    return void 0 !== JSG.clipXML
};
JSG.graph.interaction.InteractionHandler.prototype.pasteFormat = function () {
    if (this.isPasteFormatAvailable()) {
        var a = JSG.clipFormat.copy(), b = void 0 !== JSG.clipTextFormat ? JSG.clipTextFormat.copy() : void 0, c = new JSG.graph.command.CompoundCommand, d = this.viewer.getSelection(), e, f;
        e = 0;
        for (f = d.length; e < f; e++)c.add(new JSG.graph.command.FormatItemCommand(d[e].getModel(), a)), void 0 !== b && c.add(new JSG.graph.command.TextFormatItemCommand(d[e].getModel(), b));
        this.execute(c)
    }
};
JSG.graph.interaction.InteractionHandler.prototype.isPasteFormatAvailable = function () {
    return 0 !== this.viewer.getSelection().length && void 0 !== JSG.clipFormat
};
JSG.graph.interaction.InteractionHandler.prototype.deleteSelection = function () {
    var a = this.viewer.getSelection(), b = [], c, d;
    c = 0;
    for (d = a.length; c < d; c++) {
        var e = a[c].getModel();
        e.isDeleteable() && b.push(e)
    }
    if (0 < b.length) {
        b.sort(function (a, b) {
            return -1 * (a.getIndex() - b.getIndex())
        });
        a = new JSG.graph.command.CompoundCommand;
        for (c = 0; c < b.length; c++)a.add(new JSG.graph.command.DeleteItemCommand(b[c]));
        this.execute(a)
    }
    this.viewer.clearSelection();
    this.viewer.clearAllLayer()
};
JSG.graph.interaction.InteractionHandler.prototype.groupSelection = function () {
    var a = this.viewer.getSelection();
    this.viewer.clearSelection();
    a = new JSG.graph.command.GroupItemsCommand(a);
    this.execute(a, function (a, c) {
        a.selectAll(a._group, c)
    })
};
JSG.graph.interaction.InteractionHandler.prototype.ungroupSelection = function () {
    var a = new JSG.graph.command.CompoundCommand, b = this.viewer.getSelection(), c, d;
    c = 0;
    for (d = b.length; c < d; c++)a.add(new JSG.graph.command.UnGroupItemsCommand(b[c].getModel()));
    this.execute(a)
};
JSG.graph.interaction.InteractionHandler.prototype.changeDrawingOrderSelection = function (a) {
    var b = new JSG.graph.command.CompoundCommand, c = this.viewer.getSelection(), d, e;
    if (a === JSG.graph.command.ChangeItemOrder.UP)for (d = c.length - 1; 0 <= d; d--)b.add(new JSG.graph.command.ChangeItemOrderCommand(c[d], a)); else for (d = 0, e = c.length; d < e; d++)b.add(new JSG.graph.command.ChangeItemOrderCommand(c[d], a));
    this.execute(b)
};
JSG.graph.interaction.InteractionHandler.prototype.editSelection = function () {
    var a = this.viewer.getSelection();
    if (1 === a.length) {
        switch (a[0].getModel().getShape().getType()) {
            case JSG.graph.model.shapes.LineShape.TYPE:
            case JSG.graph.model.shapes.OrthoLineShape.TYPE:
                a = new JSG.graph.interaction.EditLineShapeInteraction;
                break;
            case JSG.graph.model.shapes.BezierShape.TYPE:
            case JSG.graph.model.shapes.EllipseShape.TYPE:
                a = new JSG.graph.interaction.EditBezierShapeInteraction;
                break;
            default:
                a = new JSG.graph.interaction.EditShapeInteraction
        }
        this.setActiveInteraction(a)
    }
};
JSG.graph.interaction.InteractionHandler.prototype.alignSelection = function (a) {
    var b = this.viewer.getSelection();
    a = new JSG.graph.command.AlignItemsCommand(b, a);
    this.execute(a)
};
JSG.graph.interaction.InteractionHandler.prototype.sizeSelection = function (a) {
    var b = this.viewer.getSelection();
    a = new JSG.graph.command.SizeItemsCommand(b, a);
    this.execute(a)
};
JSG.graph.interaction.InteractionHandler.prototype.applyFormatMap = function (a) {
    this.applyMapToSelection(a, JSG.graph.attr.FormatAttributes.NAME)
};
JSG.graph.interaction.InteractionHandler.prototype.applyTextFormatMap = function (a) {
    this.applyMapToSelection(a, JSG.graph.attr.TextFormatAttributes.NAME)
};
JSG.graph.interaction.InteractionHandler.prototype.canApplyAttributes = function (a, b) {
    return this.getActiveInteraction().canApplyAttributes(a, b, this.viewer) ? !0 : 0 !== this.viewer.getSelection().length
};
JSG.graph.interaction.InteractionHandler.prototype.applyMapToSelection = function (a, b) {
    if (!this.getActiveInteraction().onApplyAttributes(a, b, this.viewer)) {
        var c = this.viewer.getSelection();
        if (0 !== c.length) {
            var d = new JSG.graph.command.CompoundCommand, e, f;
            e = 0;
            for (f = c.length; e < f; e++) {
                var g = c[e].getModel();
                d.add(new JSG.graph.command.SetAttributesMapCommand(g, a, b))
            }
            this.execute(d)
        }
    }
};
JSG.graph.interaction.InteractionHandler.prototype.executeLink = function (a) {
    function b(a) {
        var b = Array.prototype.slice.call(arguments).splice(1), c = a.split("."), d = c.pop(), e = this[c[0]], f = e, n;
        for (n = 1; n < c.length; n++)if (f = e, e = e[c[n]], void 0 === e)return "Undefined Namespace";
        if (void 0 === e)this[d].apply(this, b); else return c = e.prototype[d], void 0 === c && (c = e[d]), c ? c.apply(f, b) : "Undefined Function"
    }

    var c = a.getModel().getLink().getValue();
    if (c.length) {
        var d = c.indexOf(":");
        if (-1 !== d) {
            var e = c.substring(0, d), d = c.substring(d +
            1);
            if (d.length)try {
                switch (e) {
                    case "code":
                        (new Function("item", d))(a.getModel());
                        this.viewer.getGraph().markDirty();
                        this.repaint();
                        break;
                    case "function":
                        b(d, a.getModel());
                        break;
                    case "http":
                    case "https":
                        window.open(c, "_blank")
                }
            } catch (f) {
                alert("Error: " + f.message)
            }
        }
    }
};
JSG.graph.interaction.InteractionHandler.prototype.collapse = function (a) {
    a = new JSG.graph.command.CollapseItemCommand(a);
    this.execute(a);
    return !0
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.ActionHandle = function (a, b) {
    this._type = a;
    this._cursor = b || JSG.ui.Cursor.Style.AUTO
};
JSG.graph.interaction.ActionHandle.TYPE = {LINK: "link", EDIT: "edit"};
JSG.graph.interaction.ActionHandle.prototype.reset = function () {
    this._type = void 0;
    this._cursor = JSG.ui.Cursor.Style.AUTO
};
JSG.graph.interaction.ActionHandle.prototype.getType = function () {
    return this._type
};
JSG.graph.interaction.ActionHandle.prototype.setType = function (a) {
    this._type = a
};
JSG.graph.interaction.ActionHandle.prototype.getCursor = function () {
    return this._cursor
};
JSG.graph.interaction.ActionHandle.prototype.setCursor = function (a) {
    this._cursor = a
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.LinkHandle = function (a, b, c) {
    JSG.graph.interaction.LinkHandle._super.constructor.apply(this, arguments);
    this._controller = c
};
JSG.extend(JSG.graph.interaction.LinkHandle, JSG.graph.interaction.ActionHandle);
JSG.graph.interaction.LinkHandle.TYPE = {LINK: "link", EDIT: "edit"};
JSG.graph.interaction.LinkHandle.prototype.reset = function () {
    this._type = JSG.graph.interaction.LinkHandle.TYPE_EDIT;
    this._cursor = JSG.ui.Cursor.Style.TEXT
};
JSG.graph.interaction.LinkHandle.prototype.getController = function () {
    return this._controller
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.GraphInteraction = function () {
    JSG.graph.interaction.GraphInteraction._super.constructor.apply(this, arguments);
    this.registerActivators();
    this._keyHandler = new JSG.graph.interaction.DefaultKeyHandler;
    this._activeHandle = this._controller = void 0;
    this._cursorChanged = !1
};
JSG.extend(JSG.graph.interaction.GraphInteraction, JSG.graph.interaction.InteractionDispatcher);
JSG.graph.interaction.GraphInteraction.prototype.activate = function (a) {
    JSG.graph.interaction.GraphInteraction._super.activate.call(this, a);
    this._reset()
};
JSG.graph.interaction.GraphInteraction.prototype.deactivate = function (a) {
    JSG.graph.interaction.GraphInteraction._super.deactivate.call(this, a);
    this._reset()
};
JSG.graph.interaction.GraphInteraction.prototype._reset = function () {
    this._activeHandle = this._controller = void 0;
    this._cursorChanged = !1
};
JSG.graph.interaction.GraphInteraction.prototype.registerActivators = function () {
    this.addActivator(JSG.graph.interaction.ViewInteraction.Activator.KEY, new JSG.graph.interaction.ViewInteraction.Activator);
    this.addActivator(JSG.graph.interaction.CreateEdgeActivator.KEY, new JSG.graph.interaction.CreateEdgeActivator);
    this.addActivator(JSG.graph.interaction.CreateFriendActivator.KEY, new JSG.graph.interaction.CreateFriendActivator);
    this.addActivator(JSG.graph.interaction.ResizeActivator.KEY, new JSG.graph.interaction.ResizeActivator);
    this.addActivator(JSG.graph.interaction.ReshapeActivator.KEY, new JSG.graph.interaction.ReshapeActivator);
    this.addActivator(JSG.graph.interaction.RotateActivator.KEY, new JSG.graph.interaction.RotateActivator);
    JSG.graph.interaction.SheetActivator && (this.addActivator(JSG.graph.interaction.TabActivator.KEY, new JSG.graph.interaction.TabActivator), this.addActivator(JSG.graph.interaction.SheetActivator.KEY, new JSG.graph.interaction.SheetActivator));
    this.addActivator(JSG.graph.interaction.EditTextActivator.KEY,
        new JSG.graph.interaction.EditTextActivator);
    this.addActivator(JSG.graph.interaction.MoveActivator.KEY, new JSG.graph.interaction.MoveActivator);
    this.addActivator(JSG.graph.interaction.CommandButtonActivator.KEY, new JSG.graph.interaction.CommandButtonActivator);
    this.addActivator(JSG.graph.interaction.MarqueeActivator.KEY, new JSG.graph.interaction.MarqueeActivator);
    this.addActivator(JSG.graph.interaction.PinchInteraction.Activator.KEY, new JSG.graph.interaction.PinchInteraction.Activator);
    this.addActivator(JSG.graph.interaction.PanInteraction.Activator.KEY,
        new JSG.graph.interaction.PanInteraction.Activator);
    this.addActivator(JSG.graph.interaction.LinkActivator.KEY, new JSG.graph.interaction.LinkActivator)
};
JSG.graph.interaction.GraphInteraction.prototype.setDefaultKeyHandler = function (a) {
    this._keyHandler = a
};
JSG.graph.interaction.GraphInteraction.prototype.condition = function (a) {
    var b, c, d, e;
    if (a.getModel()instanceof JSG.graph.model.TextNode) {
        if (b = a.getParent())for (d = 0, e = b.children.length; d < e; d++)if (c = b.children[d], c.getModel()instanceof JSG.graph.model.TextNode && c.isSelected())return !0;
        if (!a.getParent().isSelected())return !1
    }
    return a.isSelectable()
};
JSG.graph.interaction.GraphInteraction.prototype.getControllerAt = function (a, b, c) {
    b = b || JSG.graph.controller.FindFlags.AUTOMATIC;
    if (c || !this._controller || b !== JSG.graph.controller.FindFlags.AUTOMATIC)this._controller = this._findControllerAt(a, b, c, this.getViewer());
    return this._controller
};
JSG.graph.interaction.GraphInteraction.prototype._findControllerAt = function (a, b, c, d) {
    c = c || this.condition;
    return d.findControllerAt(a, b, c)
};
JSG.graph.interaction.GraphInteraction.prototype.getActiveHandle = function () {
    return this._activeHandle
};
JSG.graph.interaction.GraphInteraction.prototype._setActiveHandle = function (a) {
    this._activeHandle = void 0;
    a && a.getType() && (this._activeHandle = a);
    this._activeHandle ? JSG.graph.interaction.GraphInteraction._super.setCursor.call(this, this._activeHandle.getCursor()) : this._cursorChanged || JSG.graph.interaction.GraphInteraction._super.setCursor.call(this, JSG.ui.Cursor.Style.AUTO)
};
JSG.graph.interaction.GraphInteraction.prototype.handleRightClick = function (a, b) {
    var c = a.event.keyCode;
    if (0 === c || !c)if (c = this.getControllerAt(a.location, JSG.graph.controller.FindFlags.AREA, this._rightClickCondition), c = this._selectOnRightClick(c, b), c instanceof JSG.graph.controller.GraphController) {
        var c = b.getSelectionView(), d = JSG.ptCache.get().setTo(a.location);
        b.translateFromParent(d);
        c && c.containsPoint(d) || (b.clearSelection(!0), this.getInteractionHandler().repaint());
        JSG.ptCache.release(d)
    } else c && !c.isSelected() && (b.clearSelection(!1), b.select(c), this.getInteractionHandler().repaint())
};
JSG.graph.interaction.GraphInteraction.prototype._rightClickCondition = function (a, b) {
    return a.isSelectable() && a.containsPoint(b, JSG.graph.controller.FindFlags.AUTOMATIC)
};
JSG.graph.interaction.GraphInteraction.prototype._selectOnRightClick = function (a, b) {
    if (a && !(a instanceof JSG.graph.controller.GraphController)) {
        var c = a.getParent(), d = c.getModel().getType().getValue();
        if (c.isSelected() || "bpmnpool" !== d && "bpmnlane" !== d) {
            var e = a.getModel();
            if (e instanceof JSG.graph.model.TextNode) {
                var c = e.getParent(), d = a.getParent(), f = c.getBoundingBox(JSG.boxCache.get()), c = e.getTranslatedBoundingBox(c.getParent(), JSG.boxCache.get());
                f.doesIntersectWith(c) && !a.isSelected() && (a = d);
                JSG.boxCache.release(f,
                    c)
            }
        } else a = c
    }
    return a && !a.isSelected() ? a : void 0
};
JSG.graph.interaction.GraphInteraction.prototype.onResizeCanvas = function (a, b, c) {
    var d = this.getActivator(JSG.graph.interaction.EditTextActivator.KEY);
    return d ? d.onResizeCanvas(a, b, c, this) : !1
};
JSG.graph.interaction.GraphInteraction.prototype.onRotateStart = function (a, b) {
    var c = this.getActivator(JSG.graph.interaction.RotateActivator.KEY);
    if (c)c.onRotateStart(a, b, this)
};
JSG.graph.interaction.GraphInteraction.prototype.onPinchStart = function (a, b) {
    var c = this.getActivator(JSG.graph.interaction.PinchInteraction.Activator.KEY);
    if (c)c.onPinchStart(a, b, this)
};
JSG.graph.interaction.GraphInteraction.prototype.onPanStart = function (a, b) {
    var c = this.getActivator(JSG.graph.interaction.PanInteraction.Activator.KEY);
    if (c)c.onPanStart(a, b, this)
};
JSG.graph.interaction.GraphInteraction.prototype.onMouseDown = function (a, b) {
    if (JSG.touchDevice)this.onMouseMove(a, b);
    this._controller = void 0;
    var c = this.getActivatorsForFunc("onMouseDown");
    this.sortActivatorsForFunc("onMouseDown", c);
    var d;
    for (d = 0; d < c.length && (c[d].onMouseDown(a, b, this), !0 !== a.hasActivated); d++);
};
JSG.graph.interaction.GraphInteraction.prototype.onMouseDoubleClick = function (a, b) {
    this._controller = void 0;
    var c = this.getActivatorsForFunc("onMouseDoubleClick"), d;
    this.sortActivatorsForFunc("onMouseDoubleClick", c);
    for (d = 0; d < c.length && (c[d].onMouseDoubleClick(a, b, this), !0 !== a.hasActivated); d++);
};
JSG.graph.interaction.GraphInteraction.prototype.onMouseMove = function (a, b) {
    this._reset();
    var c = this.getActivatorsForFunc("onMouseMove"), d;
    this.sortActivatorsForFunc("onMouseMove", c);
    for (d = 0; d < c.length && (c[d].onMouseMove(a, b, this), !0 !== a.hasActivated); d++);
    this._updateCursor(a, b)
};
JSG.graph.interaction.GraphInteraction.prototype._updateCursor = function (a, b) {
    var c;
    a.isConsumed || a.hasActivated || (b.hasSelection() && (c = a.location.copy(), b.translateFromParent(c), c = b.getHandleAt(c, a)), this._setActiveHandle(c))
};
JSG.graph.interaction.GraphInteraction.prototype.setCursor = function (a) {
    this._cursorChanged = !0;
    JSG.graph.interaction.GraphInteraction._super.setCursor.call(this, a)
};
JSG.graph.interaction.GraphInteraction.prototype.onMouseDrag = function (a, b) {
    var c = this.getActivatorsForFunc("onMouseDrag"), d;
    this.sortActivatorsForFunc("onMouseDrag", c);
    for (d = 0; d < c.length && (c[d].onMouseDrag(a, b, this), !0 !== a.hasActivated); d++);
};
JSG.graph.interaction.GraphInteraction.prototype.onMouseUp = function (a, b) {
    this._controller = void 0;
    var c = this.getActivatorsForFunc("onMouseUp"), d;
    this.sortActivatorsForFunc("onMouseUp", c);
    for (d = 0; d < c.length && (c[d].onMouseUp(a, b, this), !0 !== a.hasActivated); d++);
};
JSG.graph.interaction.GraphInteraction.prototype.onKeyDown = function (a, b) {
    var c = this.getActivatorsForFunc("onKeyDown"), d;
    this.sortActivatorsForFunc("onKeyDown", c);
    for (d = 0; d < c.length && (c[d].onKeyDown(a, b, this), !0 !== a.hasActivated); d++);
    if (void 0 !== this._keyHandler && !a.hasActivated)this._keyHandler.onKeyDown(a, b, this)
};
JSG.graph.interaction.GraphInteraction.prototype.onKeyUp = function (a, b) {
    var c = this.getActivatorsForFunc("onKeyUp"), d;
    this.sortActivatorsForFunc("onKeyUp", c);
    for (d = 0; d < c.length && (c[d].onKeyUp(a, b, this), !0 !== a.hasActivated); d++);
    if (void 0 !== this._keyHandler && !a.hasActivated)this._keyHandler.onKeyUp(a, b, this)
};
JSG.graph.interaction.GraphInteraction.prototype.sortActivatorsForFunc = function (a, b) {
    var c;
    switch (a) {
        case "onMouseUp":
            c = this._compareOnMouseUp;
            break;
        case "onMouseDown":
            c = this._compareOnMouseDown;
            break;
        case "onMouseDoubleClick":
            c = this._compareOnMouseDoubleClick;
            break;
        case "onMouseMove":
            c = this._compareOnMouseMove;
            break;
        case "onKeyDown":
            c = this._compareOnKeyDown
    }
    void 0 !== c && b.sort(c);
    return b
};
JSG.graph.interaction.GraphInteraction.prototype._compareOnMouseDown = function (a, b) {
    return a.getKey() === JSG.graph.interaction.MoveActivator.KEY ? 1 : 0
};
JSG.graph.interaction.GraphInteraction.prototype._compareOnMouseMove = function (a, b) {
    return a.getKey() === JSG.graph.interaction.CreateEdgeActivator.KEY ? 1 : 0
};
JSG.graph.interaction.GraphInteraction.prototype._compareOnMouseUp = function (a, b) {
    return a.getKey() === JSG.graph.interaction.CreateFriendActivator.KEY ? 1 : 0
};
JSG.graph.interaction.GraphInteraction.prototype._compareOnKeyDown = function (a, b) {
    return a.getKey() === JSG.graph.interaction.CreateFriendActivator.KEY ? -1 : 0
};
JSG.graph.interaction.GraphInteraction.prototype._compareOnMouseDoubleClick = function (a, b) {
    return a.getKey() === JSG.graph.interaction.EditTextActivator.KEY ? 1 : 0
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.ReadOnlyInteraction = function () {
    JSG.graph.interaction.ReadOnlyInteraction._super.constructor.apply(this, arguments);
    this._oldGraphSettings = void 0
};
JSG.extend(JSG.graph.interaction.ReadOnlyInteraction, JSG.graph.interaction.GraphInteraction);
JSG.graph.interaction.ReadOnlyInteraction.prototype.registerActivators = function () {
    this.addActivator(JSG.graph.interaction.MarqueeActivator.KEY, new JSG.graph.interaction.MarqueeActivator)
};
JSG.graph.interaction.ReadOnlyInteraction.prototype.initAsDefault = function (a) {
    JSG.graph.interaction.ReadOnlyInteraction._super.initAsDefault.call(this, a);
    var b = a.getSelectionView();
    b && (b = b.getStyle(), b.areMarkersVisible = !1, b.isRotateMarkerVisible = !1, b.lineWidth = 100, b.lineColor = "#ff7f27", b.lineStyle = JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    if (a = (a = a.getGraph()) ? a.getSettings() : void 0)this._oldGraphSettings = a.copy(), a.setGridVisible(!1)
};
JSG.graph.interaction.ReadOnlyInteraction.prototype.disposeAsDefault = function (a) {
    JSG.graph.interaction.ReadOnlyInteraction._super.disposeAsDefault.call(this, a);
    var b = a.getGraph();
    (b = b ? b.getSettings() : void 0) && this._oldGraphSettings && b.setTo(this._oldGraphSettings);
    (a = a.getSelectionView()) && a.getStyle().reset()
};
JSG.graph.interaction.ReadOnlyInteraction.prototype.setCursor = function (a) {
    a === JSG.ui.Cursor.Style.AUTO && JSG.graph.interaction.ReadOnlyInteraction._super.setCursor.call(this, a)
};
JSG.graph.interaction.ReadOnlyInteraction.prototype.getActiveHandle = function () {
};
JSG.graph.interaction.ReadOnlyInteraction.prototype._updateCursor = function (a, b) {
};
JSG.graph.interaction.ReadOnlyInteraction.prototype.onKeyDown = function (a, b) {
    switch (a.key) {
        case 9:
        case 27:
        case 65:
        case 107:
        case 109:
            JSG.graph.interaction.ReadOnlyInteraction._super.onKeyDown.call(this, a, b)
    }
};
JSG.graph.interaction.ReadOnlyInteraction.prototype.onKeyUp = function (a, b) {
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.SnapType = {NONE: 0, CENTERX: 1, CENTERY: 2, LEFT: 4, TOP: 8, RIGHT: 16, BOTTOM: 32};
JSG.graph.interaction.AbstractInteraction = function () {
    JSG.graph.interaction.AbstractInteraction._super.constructor.apply(this, arguments);
    this.feedback = [];
    this.actionFeedback = void 0;
    this._subfeedbacks = new JSG.commons.Map;
    this._offset = new JSG.geometry.Point(0, 0);
    this._horizontalSnapController = this._verticalSnapController = void 0
};
JSG.extend(JSG.graph.interaction.AbstractInteraction, JSG.graph.interaction.Interaction);
JSG.graph.interaction.AbstractInteraction.prototype.deactivate = function (a) {
    a.removeInteractionFeedback(this.actionFeedback);
    this.feedback = [];
    this._subfeedbacks.clear();
    this.actionFeedback = void 0;
    JSG.graph.interaction.AbstractInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.AbstractInteraction.prototype.updateFeedback = function (a, b, c) {
};
JSG.graph.interaction.AbstractInteraction.prototype.updateSubFeedbacks = function (a, b, c) {
};
JSG.graph.interaction.AbstractInteraction.prototype.createCommand = function (a, b, c, d) {
};
JSG.graph.interaction.AbstractInteraction.prototype.onRotate = function (a, b) {
    this.onMouseDrag(a, b)
};
JSG.graph.interaction.AbstractInteraction.prototype.onMouseDown = function (a, b) {
    JSG.touchDevice && (this.actionFeedback || (this.actionFeedback = this.createActionFeedback(a, b)), this.actionFeedback && (this.updateActionFeedback(a, b), b.addInteractionFeedback(this.actionFeedback)))
};
JSG.graph.interaction.AbstractInteraction.prototype.onMouseDrag = function (a, b) {
    this._setFeedback(a, b);
    this._offset.setTo(this.currentLocation);
    this._offset.subtract(this.lastLocation);
    this.updateFeedback(a, b, this._offset);
    this.updateSubFeedbacks(a, b, this._subfeedbacks.elements());
    this.actionFeedback || (this.actionFeedback = this.createActionFeedback(a, b)) && b.addInteractionFeedback(this.actionFeedback);
    this.updateActionFeedback(a, b);
    this.lastLocation.setTo(this.currentLocation)
};
JSG.graph.interaction.AbstractInteraction.prototype.createActionFeedback = function (a, b) {
};
JSG.graph.interaction.AbstractInteraction.prototype.updateActionFeedback = function (a, b) {
};
JSG.graph.interaction.AbstractInteraction.prototype._setFeedback = function (a, b) {
    if (0 === this.feedback.length) {
        this._subfeedbacks.clear();
        var c = b.getSelection();
        0 !== c.length && (this.lastLocation.setTo(this.getStartLocation()), this._createAndAddSelectionFeedback(c, b))
    }
};
JSG.graph.interaction.AbstractInteraction.prototype._createAndAddSelectionFeedback = function (a, b) {
    function c(a, b) {
        var c, d = a.getId();
        for (c = 0; c < b.length; c++)if (b[c].getOriginalItem().getId() === d)return b[c]
    }

    var d, e, f, g, k, h, m = [];
    d = 0;
    for (e = a.length; d < e; d++)if (f = this._createSelectionFeedback(a[d], b))this.feedback.push(f), b.addInteractionFeedback(f), JSG.touchDevice || (this._createSubFeedbacks(a[d], f), a[d]instanceof JSG.graph.controller.ConnectionController && m.push(f));
    d = 0;
    for (e = m.length; d < e; d++) {
        f = m[d];
        g =
            f.getOriginalItem();
        if (k = g.getSourcePort())if (h = k.getParent(), k = h.getPortIndex(k), h = c(h, this.feedback))h = h._fbItem.getPortAt(k), f.setSourcePort(h), f.getFeedbackItem().getSourcePort = JSG.graph.model.Edge.prototype.getSourcePort;
        if (k = g.getTargetPort())if (h = k.getParent(), g = c(h, this.feedback))h = g._fbItem.getPortAt(h.getPortIndex(k)), f.setTargetPort(h), f.getFeedbackItem().getTargetPort = JSG.graph.model.Edge.prototype.getTargetPort
    }
    (function (a, b) {
        b.forEach(function (b) {
            a.remove(b.getOriginalItem().getId())
        })
    })(this._subfeedbacks,
        this.feedback);
    this._subfeedbacks.iterate(function (a, c) {
        b.addInteractionFeedback(c.getFeedbackView())
    })
};
JSG.graph.interaction.AbstractInteraction.prototype._createSelectionFeedback = function (a, b) {
    return a.createFeedback()
};
JSG.graph.interaction.AbstractInteraction.prototype._createSubFeedbacks = function (a, b) {
    function c(a, b) {
        var c, d = n.get(a.getId());
        void 0 === d && (c = b.getControllerByModelId(a.getId())) && (d = c.createFeedback(), d.getFeedbackItem().disableEvents(), d.getFeedbackItem().getShape().disableNotification(), n.put(d.getOriginalItem().getId(), d));
        return d
    }

    function d(a) {
        if (a = c(a, p))a.setTargetPort(l), a.getFeedbackItem().getTargetPort = JSG.graph.model.Edge.prototype.getTargetPort
    }

    function e(a) {
        if (a = c(a, p))a.setSourcePort(l),
            a.getFeedbackItem().getSourcePort = JSG.graph.model.Edge.prototype.getSourcePort
    }

    var f, g, k, h, m, l, p, n = this._subfeedbacks;
    if (a instanceof JSG.graph.controller.NodeController)for (f = a.getModel(), k = f.getPorts(), m = b.getFeedbackItem(), p = a.getGraphController(), f = 0; f < k.length; f++)if (l = m.getPortAt(f))g = k[f], h = g.getIncomingEdges(), h.forEach(d), h = g.getOutgoingEdges(), h.forEach(e)
};
JSG.graph.interaction.AbstractInteraction.prototype.onMouseUp = function (a, b) {
    this._offset.setTo(this.currentLocation);
    this._offset.subtract(this.startLocation);
    this.finishInteraction(a, b)
};
JSG.graph.interaction.AbstractInteraction.prototype.finishInteraction = function (a, b) {
    this.willFinish(a, b, this._offset);
    this.didFinish(a, b)
};
JSG.graph.interaction.AbstractInteraction.prototype.cancelInteraction = function (a, b) {
    a && (a.doRepaint = !0);
    this.setCursor(JSG.ui.Cursor.Style.AUTO);
    JSG.graph.interaction.AbstractInteraction._super.cancelInteraction.call(this, a, b)
};
JSG.graph.interaction.AbstractInteraction.prototype.willFinish = function (a, b, c) {
    var d, e, f, g, k = this.getInteractionHandler();
    if (k) {
        e = [];
        g = b.getSelection();
        for (d = 0; d < g.length; d++)(f = this.createCommand(c, g[d], a, b)) && e.push(f);
        e.length && k.execute(this._createCommand(e), this.executed)
    }
};
JSG.graph.interaction.AbstractInteraction.prototype.executed = function (a, b) {
};
JSG.graph.interaction.AbstractInteraction.prototype._createCommand = function (a, b) {
    var c, d, e;
    if (1 === a.length)return a[0];
    e = new JSG.graph.command.CompoundCommand(b);
    c = 0;
    for (d = a.length; c < d; c++)e.add(a[c]);
    return e
};
JSG.graph.interaction.AbstractInteraction.prototype.getSnapRect = function (a, b) {
    var c, d = b || new JSG.geometry.Rectangle(0, 0, 0, 0);
    c = a.getSelectionView().getBoundingBox(JSG.boxCache.get());
    c.getBoundingRectangle(d);
    JSG.boxCache.release(c);
    return d
};
JSG.graph.interaction.AbstractInteraction.prototype.getSnapAndGridOffset = function (a, b, c, d) {
    var e, f, g;
    g = d || new JSG.geometry.Point(0, 0);
    d = this.currentLocation.copy().subtract(this.startLocation);
    e = JSG.ptCache.get(c.x + d.x, c.y + d.y);
    c = JSG.ptCache.get(c.getRight() + d.x, c.getBottom() + d.y);
    f = this.alignToGrid(e, a, b.event.altKey, JSG.ptCache.get());
    b = this.alignToGrid(c, a, b.event.altKey, JSG.ptCache.get());
    this.alignToSnapController(e, c, f, b, a);
    g.x = e.x - f.x < c.x - b.x ? d.x + f.x - e.x : d.x + b.x - c.x;
    g.y = e.y - f.y < c.y - b.y ? d.y +
    f.y - e.y : d.y + b.y - c.y;
    JSG.ptCache.release(e, f, c, b);
    return g
};
JSG.graph.interaction.AbstractInteraction.prototype.getControllerForSnap = function (a, b) {
    function c() {
        return !0
    }

    var d, e = this.interactionHandler.viewer, f = e.getGraph(), g = [];
    d = b || c;
    e.findControllerByConditionAndBox(a, function (a, b) {
        var c = !1, l = a.getModel().getTranslatedBoundingBox(f, JSG.boxCache.get()), p = l.getBoundingRectangle(JSG.rectCache.get()), n = p.getCenter(JSG.ptCache.get()), q = JSG.ptCache.get(b.x + b.width / 2, b.y + b.height / 2), r, t, u;
        if (c = d(a, b))a._snapType = JSG.graph.interaction.SnapType.NONE, r = Math.abs(q.x -
        n.x), t = Math.abs(b.x - p.x), u = Math.abs(b.getRight() - p.getRight()), c = e.getCoordinateSystem().metricToLogXNoZoom(JSG.findRadius), r < c && r <= t && r <= u ? a._snapType |= JSG.graph.interaction.SnapType.CENTERX : t < c && t <= r && t <= u ? a._snapType |= JSG.graph.interaction.SnapType.LEFT : u < c && (u <= r && u <= t) && (a._snapType |= JSG.graph.interaction.SnapType.RIGHT), r = Math.abs(q.y - n.y), t = Math.abs(b.y - p.y), u = Math.abs(b.getBottom() - p.getBottom()), r < c && r <= t && r <= u ? a._snapType |= JSG.graph.interaction.SnapType.CENTERY : t < c && t <= r && t <= u ? a._snapType |=
            JSG.graph.interaction.SnapType.TOP : u < c && (u <= r && u <= t) && (a._snapType |= JSG.graph.interaction.SnapType.BOTTOM), a._snapType !== JSG.graph.interaction.SnapType.NONE && g.push(a);
        JSG.boxCache.release(l);
        JSG.rectCache.release(p);
        JSG.ptCache.release(n, q);
        return !1
    });
    return g
};
JSG.graph.interaction.AbstractInteraction.prototype.alignToSnapController = function (a, b, c, d, e) {
    var f = JSG.boxCache.get(), g = JSG.rectCache.get(), k = JSG.rectCache.get(), h = JSG.ptCache.get(), m = JSG.ptCache.get(), l = e.getCoordinateSystem().metricToLogXNoZoom(JSG.findRadius);
    if (this._horizontalSnapController)switch (g.set(a.x, a.y, b.x - a.x, b.y - a.y), h = g.getCenter(h), k = this._horizontalSnapController.getModel().getTranslatedBoundingBox(e.getGraph(), f).getBoundingRectangle(k), m = k.getCenter(m), this._horizontalSnapController._snapType) {
        case JSG.graph.interaction.SnapType.CENTERY:
            Math.abs(h.y -
            m.y) < l && (c.y = a.y - (h.y - m.y), d.y = b.y - (h.y - m.y));
            break;
        case JSG.graph.interaction.SnapType.TOP:
            Math.abs(g.y - k.y) < l && (c.y = a.y - (g.y - k.y), d.y = b.y - (g.y - k.y));
            break;
        case JSG.graph.interaction.SnapType.BOTTOM:
            Math.abs(g.getBottom() - k.getBottom()) < l && (c.y = a.y - (g.getBottom() - k.getBottom()), d.y = b.y - (g.getBottom() - k.getBottom()))
    }
    if (this._verticalSnapController)switch (g.set(a.x, a.y, b.x - a.x, b.y - a.y), h = g.getCenter(h), k = this._verticalSnapController.getModel().getTranslatedBoundingBox(e.getGraph(), f).getBoundingRectangle(k),
        m = k.getCenter(m), this._verticalSnapController._snapType) {
        case JSG.graph.interaction.SnapType.CENTERX:
            Math.abs(h.x - m.x) < l && (c.x = a.x - (h.x - m.x), d.x = b.x - (h.x - m.x));
            break;
        case JSG.graph.interaction.SnapType.LEFT:
            Math.abs(g.x - k.x) < l && (c.x = a.x - (g.x - k.x), d.x = b.x - (g.x - k.x));
            break;
        case JSG.graph.interaction.SnapType.RIGHT:
            Math.abs(g.getRight() - k.getRight()) < l && (c.x = a.x - (g.getRight() - k.getRight()), d.x = b.x - (g.getRight() - k.getRight()))
    }
    JSG.boxCache.release(f);
    JSG.rectCache.release(g, k);
    JSG.ptCache.release(h, m)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.DragDropInteraction = function (a, b) {
    JSG.graph.interaction.DragDropInteraction._super.constructor.apply(this, arguments);
    this._dragInteraction = new JSG.graph.interaction.DragDropInteraction.Drag(a);
    this._dropInteraction = new JSG.graph.interaction.DragDropInteraction.Drop(b, this)
};
JSG.extend(JSG.graph.interaction.DragDropInteraction, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.DragDropInteraction.prototype.setDraggedItem = function (a) {
    this._dragInteraction.createFeedback(a);
    this._dropInteraction.createFeedback(a)
};
JSG.graph.interaction.DragDropInteraction.prototype.setDropDelegate = function (a) {
    this._dropInteraction.setDelegate(a)
};
JSG.graph.interaction.DragDropInteraction.prototype.registerTargetEditor = function (a) {
    this._dropInteraction.setTarget(a)
};
JSG.graph.interaction.DragDropInteraction.prototype._updatePositions = function () {
    this._dragInteraction.startLocation = this.startLocation;
    this._dragInteraction.currentLocation = this.currentLocation;
    this._dropInteraction.startLocation = this.startLocation;
    this._dropInteraction.currentLocation = this.currentLocation
};
JSG.graph.interaction.DragDropInteraction.prototype.onMouseDown = function (a, b) {
    JSG.keepFocus = !0;
    this._updatePositions();
    this._dragInteraction.onMouseDown(a, b);
    this._dropInteraction.onMouseDown(a, b)
};
JSG.graph.interaction.DragDropInteraction.prototype.updateFeedback = function (a, b, c) {
    this._updatePositions();
    this._dragInteraction.updateFeedback(a, b, c);
    this._dropInteraction.updateFeedback(a, b, c)
};
JSG.graph.interaction.DragDropInteraction.prototype.onMouseUp = function (a, b) {
    this.updateFeedback(a, b, new JSG.geometry.Point(0, 0));
    var c = this._dropInteraction.drop(a);
    this.finished(b);
    c && this.activateTextEditor()
};
JSG.graph.interaction.DragDropInteraction.prototype.activateTextEditor = function () {
};
JSG.graph.interaction.DragDropInteraction.prototype.finished = function (a) {
    JSG.keepFocus = !1;
    var b = this._dropInteraction.getTarget();
    this._dragInteraction.finished(a);
    this._dropInteraction.finished(a);
    a = this.getInteractionHandler();
    a.setActiveInteraction(a.getDefaultInteraction());
    a = b.getInteractionHandler();
    a.setActiveInteraction(a.getDefaultInteraction());
    b.repaint()
};
JSG.graph.interaction.DragDropInteraction.prototype.cancelInteraction = function (a, b) {
    this.finished(b);
    a && (a.doRepaint = !0)
};
JSG.graph.interaction.DragDropInteraction.prototype.deactivate = function (a) {
    JSG.keepFocus = !1;
    this._dragInteraction.deactivate(a);
    this._dropInteraction.deactivate(a);
    this._dropInteraction = this._dragInteraction = void 0
};
JSG.graph.interaction.DragDropInteraction.prototype.createDropCommand = function (a, b, c) {
    var d = a.getType().getValue();
    a = {libId: d, libName: d, newPinPoint: a.getPinPoint(), target: b, editor: c};
    return d ? new JSG.graph.command.DropItemCommand(a) : void 0
};
JSG.graph.interaction.DragDropInteraction.DnD = function (a) {
    JSG.graph.interaction.DragDropInteraction.DnD._super.constructor.call(this);
    this._viewer = a;
    this._feedback = void 0
};
JSG.extend(JSG.graph.interaction.DragDropInteraction.DnD, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.DragDropInteraction.DnD.prototype.getFeedback = function () {
    return this._feedback
};
JSG.graph.interaction.DragDropInteraction.DnD.prototype.createFeedback = function (a) {
    this.clearFeedbacksAndHighlights();
    var b, c;
    b = a.getType().getValue();
    (a = JSG.graphItemFactory.createItemFromString(b)) ? (b = [], b.push(a)) : b = JSG.graphItemFactory.createShape(b);
    b && 0 < b.length && (c = this.createFeedbackViewFor(b[0], this._viewer));
    return this._feedback = c
};
JSG.graph.interaction.DragDropInteraction.DnD.prototype.createFeedbackViewFor = function (a, b) {
    var c = b.getControllerFactory().createController(a);
    c.getViewer = function () {
        return b
    };
    c.refresh();
    var d = c.getView();
    c.deactivate();
    return d
};
JSG.graph.interaction.DragDropInteraction.DnD.prototype.clearFeedbacksAndHighlights = function () {
    var a = this._viewer.getGraphView();
    this._viewer.clearLayer(JSG.graph.view.LayerId.LAYOUTMARKER);
    this._viewer.clearLayer(JSG.graph.view.LayerId.TARGETCONTAINER);
    this._viewer.clearLayer(JSG.graph.view.LayerId.SNAPLINES);
    a.clearFeedback()
};
JSG.graph.interaction.DragDropInteraction.DnD.prototype.onMouseDown = function (a, b) {
    if (this._feedback) {
        var c = this.startLocation.copy();
        this._viewer.translateFromParent(c);
        this._feedback.getItem().setPinPointTo(c);
        this._viewer.getGraphView().addFeedback(this._feedback)
    }
};
JSG.graph.interaction.DragDropInteraction.DnD.prototype.getPosition = function (a, b, c) {
    c = c ? c.getBoundingClientRect() : a.canvasRect;
    a = new JSG.geometry.Point(a.windowLocation.x - c.left, a.windowLocation.y - c.top);
    return b.deviceToLogPoint(a)
};
JSG.graph.interaction.DragDropInteraction.DnD.prototype.finished = function (a) {
};
JSG.graph.interaction.DragDropInteraction.DnD.prototype.deactivate = function (a) {
    this.clearFeedbacksAndHighlights()
};
JSG.graph.interaction.DragDropInteraction.Drag = function (a) {
    JSG.graph.interaction.DragDropInteraction.Drag._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.DragDropInteraction.Drag, JSG.graph.interaction.DragDropInteraction.DnD);
JSG.graph.interaction.DragDropInteraction.Drag.prototype.createFeedback = function (a) {
    this.clearFeedbacksAndHighlights();
    this._feedback = this.createFeedbackViewFor(a.copy(), this._viewer);
    a = a.getSizeAsPoint();
    this._feedback.getItem().setSize(a.x, a.y)
};
JSG.graph.interaction.DragDropInteraction.Drag.prototype.updateFeedback = function (a, b, c) {
    a = this.getPosition(a, this._viewer.getCoordinateSystem());
    this._viewer.translateFromParent(a);
    this._feedback.getItem().setPinPointTo(a)
};
JSG.graph.interaction.DragDropInteraction.Drop = function (a, b) {
    JSG.graph.interaction.DragDropInteraction.Drop._super.constructor.call(this, a);
    this._targetController = this._targetEditor = void 0;
    this._mainInteraction = b
};
JSG.extend(JSG.graph.interaction.DragDropInteraction.Drop, JSG.graph.interaction.DragDropInteraction.DnD);
JSG.graph.interaction.DragDropInteraction.Drop.prototype.getTarget = function () {
    return this._targetEditor
};
JSG.graph.interaction.DragDropInteraction.Drop.prototype.setTarget = function (a) {
    this._targetEditor = a;
    this._trgtCanvas = document.getElementById(a.getCanvasId());
    this.setInteractionHandler(a.getInteractionHandler())
};
JSG.graph.interaction.DragDropInteraction.Drop.prototype.getViewer = function () {
    return this._viewer
};
JSG.graph.interaction.DragDropInteraction.Drop.prototype.updateFeedback = function (a, b, c) {
    b = this.getPosition(a, this._viewer.getCoordinateSystem(), this._trgtCanvas);
    this._viewer.getGraphView();
    this._targetController = c = (c = this._notifyDelegate("findTargetControllerAt", b, a, this._viewer)) || this.findTargetControllerAt(b, a, this._viewer);
    this._viewer.translateFromParent(b);
    this._viewer.clearLayer(JSG.graph.view.LayerId.LAYOUTMARKER);
    this._viewer.clearLayer(JSG.graph.view.LayerId.TARGETCONTAINER);
    this._viewer.clearLayer(JSG.graph.view.LayerId.SNAPLINES);
    this._notifyDelegate("highlightTargetController", c, b, a, this._viewer) || this.highlightTargetController(c, b, a, this._viewer);
    this._feedback.getItem().setPinPointTo(b);
    if (this._viewer.getGraphSettings().getSnapToShapes() && (this._horizontalSnapController = this._verticalSnapController = void 0, this._viewer.getGraphSettings().getSnapToShapes() && !a.event.altKey)) {
        c = this._feedback.getBoundingBox();
        var d = c.getBoundingRectangle();
        this._targetEditor.getVisibleGraphRect().intersect(c.toRectangle()) && JSG.graph.interaction.InteractionUtils.highlightSnapItemofController(this,
            d, a.event.altKey)
    }
    a = this.getSnapAndGridOffset(this._viewer, a);
    b.translate(a.x, a.y);
    this._feedback.getItem().setPinPointTo(b);
    this._targetEditor.repaint()
};
JSG.graph.interaction.DragDropInteraction.Drop.prototype.findTargetControllerAt = function (a, b, c) {
    function d(a) {
        return JSG.graphItemFactory.isValidSubItem(e, a.getModel().getType().getValue()) ? a.getModel().isContainer() && a.getModel().isVisible() && !(a instanceof JSG.graph.controller.ConnectionController) && !(a instanceof JSG.graph.controller.PortController) && !(a instanceof JSG.graph.controller.GraphController) : !1
    }

    var e;
    if (this._feedback)return e = this._feedback.getItem(), c.findControllerAt(a, JSG.graph.controller.FindFlags.AREA,
        d)
};
JSG.graph.interaction.DragDropInteraction.Drop.prototype.highlightTargetController = function (a, b, c, d) {
    c = !1;
    if (a = this._validateController(a, b, d)) {
        c = !0;
        JSG.graph.interaction.InteractionUtils.highlightTargetController(d, a);
        var e = this._feedback.getItem().getType().getValue();
        ((b = JSG.layoutFactory.getLayoutIndex(b, d, a, e, !0, !0)) || 0 === b) && JSG.graph.interaction.InteractionUtils.highlightControllerLayoutPosition(b, d, a)
    }
    return c
};
JSG.graph.interaction.DragDropInteraction.Drop.prototype._validateController = function (a, b, c) {
    function d(a) {
        a.getModel().getTranslatedBoundingBox(g, f);
        return f.containsPoint(b)
    }

    var e, f = JSG.boxCache.get(), g = c.getGraph();
    a && (e = d(a) ? a : d(a.getParent()) ? a.getParent() : void 0);
    JSG.boxCache.release(f);
    return e instanceof JSG.graph.controller.GraphController ? void 0 : e
};
JSG.graph.interaction.DragDropInteraction.Drop.prototype.getSnapAndGridOffset = function (a, b) {
    var c = new JSG.geometry.Point(0, 0), d = this._feedback.getBoundingBox().getBoundingRectangle(), e = new JSG.geometry.Point(d.x, d.y), d = new JSG.geometry.Point(d.getRight(), d.getBottom()), f = this.alignToGrid(e, a, b.event.altKey), g = this.alignToGrid(d, a, b.event.altKey);
    this.alignToSnapController(e, d, f, g, a);
    c.x = e.x - f.x < d.x - g.x ? f.x - e.x : g.x - d.x;
    c.y = e.y - f.y < d.y - g.y ? f.y - e.y : g.y - d.y;
    return c
};
JSG.graph.interaction.DragDropInteraction.Drop.prototype.drop = function (a) {
    function b(a, b) {
        a && b && b.execute(a)
    }

    var c;
    if (c = function (b) {
            var c = document.elementFromPoint(a.windowLocation.x, a.windowLocation.y);
            return c && "canvas" === c.nodeName.toLowerCase() && c._jsgEditor ? b === c.id : !1
        }(this._trgtCanvas.id)) {
        var d = this._notifyDelegate("createDropCommand", a);
        d || (this._targetController || (this._targetController = this._viewer.getGraphController()), d = this._mainInteraction.createDropCommand(this._feedback.getItem(),
            this._targetController, this._targetEditor));
        b(d, this.getInteractionHandler())
    }
    return c
};
JSG.graph.interaction.DragDropInteraction.Drop.prototype.deactivate = function (a) {
    this._targetController = void 0;
    this._notifyDelegate("deactivate", this._viewer);
    JSG.graph.interaction.DragDropInteraction.Drop._super.deactivate.call(this, a)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.CreateItemInteraction = function (a, b) {
    JSG.graph.interaction.CreateItemInteraction._super.constructor.apply(this, arguments);
    this._graphItem = a;
    this._parent = this._fbView = void 0;
    this._label = b
};
JSG.extend(JSG.graph.interaction.CreateItemInteraction, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.CreateItemInteraction.prototype.activate = function (a) {
    JSG.graph.interaction.CreateItemInteraction._super.activate.call(this, a);
    a.clearSelection()
};
JSG.graph.interaction.CreateItemInteraction.prototype.deactivate = function (a) {
    this._parent = this._fbView = this._bbox = this._graphItem = void 0;
    JSG.graph.interaction.CreateItemInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.CreateItemInteraction.prototype.onMouseDown = function (a, b) {
    this._parent = this._findParentControllerAt(a.location.copy(), b)
};
JSG.graph.interaction.CreateItemInteraction.prototype._setFeedback = function (a, b) {
    this._fbView || (this._fbView = this.createFeedback(this._graphItem, b), this.initializeFeedback(this._fbView, b, a), b.addInteractionFeedback(this._fbView), this.lastLocation.setTo(this.getStartLocation()), (this.actionFeedback = this.createActionFeedback()) && b.addInteractionFeedback(this.actionFeedback))
};
JSG.graph.interaction.CreateItemInteraction.prototype.createActionFeedback = function (a, b) {
    return new JSG.graph.view.SelectionFeedbackView(11)
};
JSG.graph.interaction.CreateItemInteraction.prototype.updateActionFeedback = function (a, b) {
    if (this.actionFeedback && this._graphItem) {
        var c = this._graphItem.getBoundingBox();
        this.actionFeedback._box.setTo(c)
    }
};
JSG.graph.interaction.CreateItemInteraction.prototype.createFeedback = function (a, b) {
    var c = b.getControllerFactory().createController(a);
    c.getViewer = function () {
        return b
    };
    c.refresh();
    var d = c.getView();
    c.deactivate();
    return d
};
JSG.graph.interaction.CreateItemInteraction.prototype.initializeFeedback = function (a, b, c) {
    a = this._graphItem.getPin();
    a.setLocalPoint(0, 0);
    b = this.alignToGrid(this.startLocation, b, c.event.altKey, new JSG.geometry.Point(0, 0));
    a.setPointTo(b)
};
JSG.graph.interaction.CreateItemInteraction.prototype.updateFeedback = function (a, b, c) {
    var d = this.alignToGrid(this.startLocation, b, a.event.altKey, new JSG.geometry.Point(0, 0)), e = this.alignToGrid(this.lastLocation, b, a.event.altKey, new JSG.geometry.Point(0, 0));
    c = d.x - e.x;
    d = d.y - e.y;
    e = e.copy();
    e.x = Math.min(e.x, e.x + c);
    e.y = Math.min(e.y, e.y + d);
    e = this.alignToGrid(e, b, a.event.altKey, e);
    this._graphItem.setPinPointTo(e);
    this._graphItem.setSize(Math.abs(c), Math.abs(d))
};
JSG.graph.interaction.CreateItemInteraction.prototype.onMouseMove = function (a, b) {
    this._highlightTargetController(a, b);
    this.setCursor(JSG.ui.Cursor.Style.CROSS);
    a.isConsumed = !0
};
JSG.graph.interaction.CreateItemInteraction.prototype._highlightTargetController = function (a, b) {
    var c;
    b.clearLayer(JSG.graph.view.LayerId.TARGETCONTAINER);
    (c = this._findParentControllerAt(a.location.copy(), b)) && JSG.graph.interaction.InteractionUtils.highlightTargetController(b, c);
    a.doRepaint = !0
};
JSG.graph.interaction.CreateItemInteraction.prototype._findParentControllerAt = function (a, b) {
    var c = this;
    return b.getDefaultController() ? b.getDefaultController() : b.findControllerAt(a, JSG.graph.controller.FindFlags.AREA, function (a) {
        return c._graphItem && !JSG.graphItemFactory.isValidSubItem(c._graphItem, a.getModel().getType().getValue()) ? !1 : a.getModel().isContainer() && a.getModel().isVisible() && !(a instanceof JSG.graph.controller.ConnectionController) && !(a instanceof JSG.graph.controller.PortController) && !(a instanceof JSG.graph.controller.GraphController)
    })
};
JSG.graph.interaction.CreateItemInteraction.prototype.willFinish = function (a, b) {
    var c = this.getInteractionHandler(), d = this._graphItem.getSize();
    if (c && this.hasExtend(b, d)) {
        var d = this._graphItem.copy(), e = b.getRootController(), f = e.getContent().getModel(), f = this._initNewItem(d, f, this._graphItem);
        c.execute(new JSG.graph.command.AddItemCommand(d, f));
        this._parent = this._parent || e.getContent();
        this._parent.selectItem(d, !0);
        this._label && d.addLabel(this._label)
    }
};
JSG.graph.interaction.CreateItemInteraction.prototype.hasExtend = function (a, b) {
    var c = a.getCoordinateSystem().metricToLogXNoZoom(250);
    return Math.abs(b.getWidth().getValue()) > c || Math.abs(b.getHeight().getValue()) > c
};
JSG.graph.interaction.CreateItemInteraction.prototype._initNewItem = function (a, b, c) {
    var d = c.getAngle().getValue(), e = c.getOrigin(), f = this._parent ? this._parent.getModel() : b;
    JSG.graph.Utils.traverseItemDown(b, f, function (a) {
        d -= a.getAngle().getValue();
        a.translateFromParent(e);
        return !0
    });
    a.setAngle(d);
    this._initPinOf(a);
    a.setSizeTo(c.getSize());
    a.setOriginTo(e);
    return f
};
JSG.graph.interaction.CreateItemInteraction.prototype._initPinOf = function (a) {
    a = a.getPin();
    a.setLocalCoordinate(new JSG.graph.expr.NumberExpression(0, "WIDTH * 0.5"), new JSG.graph.expr.NumberExpression(0, "HEIGHT * 0.5"));
    a.evaluate()
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.CreateNodeInteraction = function (a, b) {
    arguments[0] = new JSG.graph.model.Node(a);
    JSG.graph.interaction.CreateNodeInteraction._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.CreateNodeInteraction, JSG.graph.interaction.CreateItemInteraction);
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.CreateEdgeInteraction = function (a, b) {
    JSG.graph.interaction.CreateEdgeInteraction._super.constructor.apply(this, arguments);
    this._targetPortInfo = this._sourcePortInfo = this._portFeedback = void 0
};
JSG.extend(JSG.graph.interaction.CreateEdgeInteraction, JSG.graph.interaction.CreateItemInteraction);
JSG.graph.interaction.CreateEdgeInteraction.prototype.deactivate = function (a) {
    this._targetPortInfo = this._sourcePortInfo = this._portFeedback = void 0;
    JSG.graph.interaction.CreateEdgeInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.updateFeedback = function (a, b, c) {
    a = this._alignedLocation(this.lastLocation, b, a);
    this._graphItem.setEndPointTo(a);
    this._graphItem.refresh()
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.initializeFeedback = function (a, b, c) {
    this._graphItem.getParent = function () {
        return b.getGraph()
    };
    this._graphItem.getSourcePort() || JSG.graph.interaction.CreateEdgeInteraction._super.initializeFeedback.call(this, a, b, c)
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.createActionFeedback = function (a, b) {
    return new JSG.graph.view.SelectionFeedbackView(12)
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.updateActionFeedback = function (a, b) {
    if (this.actionFeedback && this._graphItem) {
        var c = this._graphItem.getBoundingBox();
        this.actionFeedback._box.setTo(c);
        c = this.alignToGrid(this.lastLocation, b, a.event.altKey, new JSG.geometry.Point(0, 0));
        this.actionFeedback._point.setTo(c)
    }
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.onMouseDown = function (a, b) {
    JSG.graph.interaction.CreateEdgeInteraction._super.onMouseDown.call(this, a, b);
    var c = this._alignedLocation(this.startLocation, b, a);
    JSG.touchDevice && this.highlightPortsUnderMouse(a, b);
    this._graphItem.setEndPointTo(c);
    this._attachSourcePort()
};
JSG.graph.interaction.CreateEdgeInteraction.prototype._attachSourcePort = function () {
    function a(a, b) {
        var c = b.copy();
        JSG.graph.Utils.traverseItemDown(a.getGraph(), a, function (a) {
            a.translateFromParent(c);
            return !0
        });
        return {
            getParent: function () {
                return a
            }, getConnectionPoint: function (a, d) {
                return a ? c : b
            }
        }
    }

    if (void 0 !== this._portFeedback && void 0 !== this._portFeedback._model.addPortAtLocation) {
        this._sourcePortInfo = this._createPortInfo();
        var b = this._getPortLocation(this._sourcePortInfo);
        this._graphItem.getPin().setPointTo(b);
        this._graphItem.hasSourceAttached = function () {
            return !0
        };
        var c = a(this._sourcePortInfo.node, b);
        this._graphItem.getSourcePort = function () {
            return c
        }
    }
};
JSG.graph.interaction.CreateEdgeInteraction.prototype._getPortLocation = function (a) {
    var b = new JSG.geometry.Point(0, 0);
    b.setTo(a.location);
    JSG.graph.Utils.translatePointUp(b, a.node, a.node.getGraph());
    return b
};
JSG.graph.interaction.CreateEdgeInteraction.prototype._alignedLocation = function (a, b, c) {
    return this.alignToGrid(a, b, c.event.altKey)
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.onMouseDrag = function (a, b) {
    this.setPortFeedback(b, a);
    JSG.graph.interaction.CreateEdgeInteraction._super.onMouseDrag.call(this, a, b)
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.onMouseMove = function (a, b) {
    this.setPortFeedback(b, a);
    this.setCursor(JSG.ui.Cursor.Style.CROSS);
    a.isConsumed = !0
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.setPortFeedback = function (a, b) {
    this._portFeedback = void 0;
    this.highlightPortsUnderMouse(b, a);
    b.doRepaint = !0
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.highlightPortsUnderMouse = function (a, b) {
    b.clearLayer(JSG.graph.view.LayerId.PORTS);
    var c = JSG.graph.interaction.InteractionUtils.getPortsController(a, b);
    if (c) {
        var c = JSG.graph.interaction.InteractionUtils.getPortsFor(c, this, a.event.altKey), d = b.getLayer(JSG.graph.view.LayerId.PORTS);
        JSG.Arrays.addAll(d, c);
        1 === c.length && (this._portFeedback = c[0])
    }
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.onMouseUp = function (a, b) {
    this._attachTargetPort();
    this.finishInteraction(a, b)
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.willFinish = function (a, b, c) {
    function d(a) {
        return a.getModel()instanceof JSG.graph.model.TextNode && !a.getParent().isSelected() ? !1 : a.isSelectable() && !(a instanceof JSG.graph.controller.GraphController)
    }

    function e(a, b) {
        f.executed(a, b)
    }

    var f = this;
    this.hasExtend(50) ? (a = this.getInteractionHandler()) && a.execute(this.createCommand(b), e) : (c = b.findControllerAt(a.location, JSG.graph.controller.FindFlags.AUTOMATIC, d), a.isPressed(JSG.ui.events.KeyType.CTRL) ||
    b.clearSelection(), c && b.select(c))
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.hasExtend = function (a) {
    a = a || 50;
    return Math.abs(this.currentLocation.x - this.startLocation.x) > a || Math.abs(this.currentLocation.y - this.startLocation.y) > a
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.createCommand = function (a) {
    var b = this._graphItem.copy();
    a = a.getRootController().getContent().getModel();
    a = this._initNewItem(b, a, this._graphItem);
    var c = new JSG.graph.command.CompoundCommand;
    this._sourcePortInfo && this._sourcePortInfo.isNew && c.add(new JSG.graph.command.AddPortCommand(this._sourcePortInfo.port, this._sourcePortInfo.location, this._sourcePortInfo.node));
    this._targetPortInfo && this._targetPortInfo.isNew && c.add(new JSG.graph.command.AddPortCommand(this._targetPortInfo.port,
        this._targetPortInfo.location, this._targetPortInfo.node));
    c.add(new JSG.graph.command.AddItemCommand(b, a));
    this._sourcePortInfo && this._sourcePortInfo.port && c.add(new JSG.graph.command.AttachCommand(b, this._sourcePortInfo.port, !0));
    this._targetPortInfo && this._targetPortInfo.port && c.add(new JSG.graph.command.AttachCommand(b, this._targetPortInfo.port, !1));
    return 1 === c.commands.length ? c.commands[0] : c
};
JSG.graph.interaction.CreateEdgeInteraction.prototype._initNewItem = function (a, b, c) {
    var d = c.getAngle().getValue(), e = c.getOrigin(), f = c.getPoints();
    c = function (a, c) {
        var d, e;
        c._sourcePortInfo || c._targetPortInfo ? c._sourcePortInfo && !c._targetPortInfo ? d = c._sourcePortInfo.node.getParent() : !c._sourcePortInfo && c._targetPortInfo ? (d = c._parent ? c._parent.getModel() : b, d = JSG.graph.Utils.findCommonParent(d, c._targetPortInfo.node.getParent(), b)) : c._sourcePortInfo && c._targetPortInfo && (d = c._sourcePortInfo.node.getParent(),
            e = c._targetPortInfo.node.getParent(), d = JSG.graph.Utils.findCommonParent(d, e, b)) : d = c._parent ? c._parent.getModel() : b;
        return d || b
    }(a, this);
    JSG.graph.Utils.traverseItemDown(b, c, function (a) {
        var b;
        for (b = 0; b < f.length; b++)a.translateFromParent(f[b]);
        a.translateFromParent(e);
        d -= a.getAngle().getValue();
        return !0
    });
    a.setAngle(d);
    a.setOriginTo(e);
    a.setPoints(f);
    a.getPin().setLocalCoordinateTo(JSG.graph.Coordinate.fromXY(0, 0));
    this._label && a.addLabel("Text");
    return c
};
JSG.graph.interaction.CreateEdgeInteraction.prototype._attachTargetPort = function () {
    function a(a, b) {
        return {
            getParent: function () {
                return a
            }, getConnectionPoint: function (c, g) {
                return c ? a.translateFromParent(b.copy()) : b
            }
        }
    }

    if (void 0 !== this._portFeedback && void 0 !== this._portFeedback._model.addPortAtLocation) {
        this._targetPortInfo = this._createPortInfo();
        var b = this._getPortLocation(this._targetPortInfo);
        this._graphItem.hasTargetAttached = function () {
            return !0
        };
        var c = a(this._targetPortInfo.node, b);
        this._graphItem.getTargetPort =
            function () {
                return c
            }
    }
};
JSG.graph.interaction.CreateEdgeInteraction.prototype._createPortInfo = function () {
    var a = {};
    a.node = this._portFeedback._model;
    a.port = this._portFeedback._model.getPortAtLocation(this._portFeedback._location);
    a.location = this._portFeedback._location.copy();
    a.port || (a.port = new JSG.graph.model.Port, a.isNew = !0);
    return a
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.executed = function (a, b) {
    var c;
    var d, e, f;
    if (a instanceof JSG.graph.command.CompoundCommand) {
        f = a.commands;
        for (c = 0; c < f.length; c++)if (f[c]instanceof JSG.graph.command.AbstractItemCommand && (e = f[c].getItem(), e instanceof JSG.graph.model.LineConnection)) {
            d = e;
            break
        }
        c = d
    } else c = a.getItem();
    this._createdItem(c, b)
};
JSG.graph.interaction.CreateEdgeInteraction.prototype._createdItem = function (a, b) {
    b.getRootController().getContent().selectItem(a, !0)
};
JSG.graph.interaction.CreateEdgeInteraction.prototype.didFinish = function (a, b) {
    b.clearLayer(JSG.graph.view.LayerId.PORTS);
    JSG.graph.interaction.CreateEdgeInteraction._super.didFinish.call(this, a, b)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.CreateOrthoEdgeInteraction = function (a, b, c) {
    a || (a = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape));
    JSG.graph.interaction.CreateOrthoEdgeInteraction._super.constructor.call(this, a, c);
    this._ortholine = this._graphItem._shape;
    JSG.Arrays.removeAll(this._ortholine._coordinates);
    this._creationmode = void 0;
    this.useCreationMode(b || JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE.CLICK)
};
JSG.extend(JSG.graph.interaction.CreateOrthoEdgeInteraction, JSG.graph.interaction.CreateEdgeInteraction);
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.deactivate = function (a) {
    this._creationmode = this._ortholine = void 0;
    JSG.graph.interaction.CreateOrthoEdgeInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.useCreationMode = function (a) {
    this._creationmode = a;
    this._useDragCreationMode() || this._graphItem.getLayoutAttributes().setLineBehavior(JSG.graph.attr.consts.LineBehavior.MANUAL)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype._useDragCreationMode = function () {
    return this._creationmode === JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE.DRAG
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.onMouseDown = function (a, b) {
    var c = this._ortholine.getCoordinatesCount() - 1;
    JSG.touchDevice && this.highlightPortsUnderMouse(a, b);
    if (0 > c)this.initEdge(this._ortholine, b, a); else if (this.hitTargetPort())this.finishInteraction(a, b); else if (this._graphItem.isVisible()) {
        var d = this._alignedLocation(this.currentLocation.copy(), b, a), d = this._graphItem.translateFromParent(d);
        this._ortholine.setCoordinateAtToPoint(c, d);
        this._graphItem.getLayoutAttributes().setLineBehavior(JSG.graph.attr.consts.LineBehavior.MANUAL);
        this._ortholine.addCoordinate(JSG.graph.Coordinate.fromPoint(d))
    } else this.finishInteraction(a, b)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.initEdge = function (a, b, c) {
    a.addCoordinate(JSG.graph.Coordinate.fromXY(0, 0));
    a.addCoordinate(JSG.graph.Coordinate.fromXY(0, 0));
    a.addCoordinate(JSG.graph.Coordinate.fromXY(0, 0));
    this._useDragCreationMode() && (a.addCoordinate(JSG.graph.Coordinate.fromXY(0, 0)), this._graphItem.getLayoutAttributes().setLineBehavior(JSG.graph.attr.consts.LineBehavior.AUTO));
    !this._parent && (a = c.location.copy(), this._parent = b.findControllerAt(a, JSG.graph.controller.FindFlags.AUTOMATIC),
    this._parent instanceof JSG.graph.controller.ConnectionController || this._parent instanceof JSG.graph.controller.PortController) && (this._parent = this._parent.getParent());
    this._setFeedback(c, b);
    this._attachSourcePort();
    b = this._useDragCreationMode();
    this._graphItem.setItemAttribute(JSG.graph.attr.ItemAttributes.VISIBLE, b)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.hitTargetPort = function () {
    if (this._portFeedback) {
        if (this._graphItem.getSourcePort()) {
            var a = this._portFeedback.getPosition(), b = this._graphItem.getSourcePort().getConnectionPoint();
            return !a.isEqualTo(b, 1)
        }
        return !0
    }
    return !1
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype._attachSourcePort = function () {
    JSG.graph.interaction.CreateOrthoEdgeInteraction._super._attachSourcePort.call(this);
    var a = this._graphItem;
    if (a.hasSourceAttached()) {
        var b = this._getPortLocation(this._sourcePortInfo), b = this._createCoordinateProxy(a.getStartCoordinate(), a.translateFromParent(b));
        a.setStartCoordinateTo(b)
    }
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.onMouseDrag = function (a, b) {
    if (!this._useDragCreationMode() && 3 === this._graphItem.getPointsCount()) {
        var c = this._ortholine.getCoordinates(), d = c[0].toPoint();
        200 < c[c.length - 1].toPoint().subtract(d).length() && (this._ortholine.addCoordinate(JSG.graph.Coordinate.fromXY(0, 0)), this._creationmode = JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE.DRAG, this._graphItem.getLayoutAttributes().setLineBehavior(JSG.graph.attr.consts.LineBehavior.AUTO))
    }
    this.setPortFeedback(b,
        a);
    this._updateFeedback(b, a)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.onMouseMove = function (a, b) {
    this.setPortFeedback(b, a);
    this._updateFeedback(b, a);
    this.setCursor(JSG.ui.Cursor.Style.CROSS);
    a.isConsumed = !0
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.setPortFeedback = function (a, b) {
    function c(a, b) {
        var c = b.copy();
        JSG.graph.Utils.traverseItemDown(a.getGraph(), a, function (a) {
            a.translateFromParent(c);
            return !0
        });
        return {
            getParent: function () {
                return a
            }, getConnectionPoint: function (a, d) {
                return a ? c : b
            }
        }
    }

    function d(a, b) {
        var d = b._graphItem, e = b._ortholine;
        d.pointsCount = d.getPointsCount();
        b._targetPortInfo = b._createPortInfo();
        d.hasTargetAttached = function () {
            return !0
        };
        var f = b._getPortLocation(b._targetPortInfo),
            p = c(b._targetPortInfo.node, f);
        d.getTargetPort = function () {
            return p
        };
        var f = b._createCoordinateProxy(d.getEndCoordinate(), d.translateFromParent(f)), n = e.disableRefresh();
        d.setEndCoordinateTo(f);
        e.layoutFrom(p);
        !0 === n && e.enableRefresh()
    }

    function e(a) {
        return a.getCoordinate ? a.getCoordinate() : a
    }

    function f(a) {
        a._targetPortInfo = void 0;
        a._graphItem.hasTargetAttached = function () {
            return !1
        };
        a._graphItem.getTargetPort = function () {
        };
        a._graphItem.setEndCoordinateTo(e(a._graphItem.getEndCoordinate()));
        if (0 < a._graphItem.pointsCount) {
            var b =
                a._graphItem.getPointsCount();
            a._graphItem.pointsCount !== b && a._ortholine.removeCoordinatesAt(a._graphItem.pointsCount, b - a._graphItem.pointsCount);
            a._graphItem.pointsCount = 0
        }
    }

    JSG.graph.interaction.CreateOrthoEdgeInteraction._super.setPortFeedback.call(this, a, b);
    1 < this._graphItem.getPointsCount() && (this._graphItem.hasTargetAttached() && f(this), this.hitTargetPort() && (this._graphItem.hasTargetAttached() || d(this._portFeedback, this)))
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype._createCoordinateProxy = function (a, b) {
    var c = new JSG.graph.CoordinateProxy(a);
    c.location = b.copy();
    c.setX = function (a) {
    };
    c.setY = function (a) {
    };
    c.evaluate = function (a) {
    };
    c.copy = function () {
        var a = new JSG.graph.Coordinate;
        a.setToPoint(this.toPoint());
        return a
    };
    c.toPoint = function (a) {
        return a ? a.setTo(this.location) : this.location.copy()
    };
    return c
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype._updateFeedback = function (a, b) {
    var c = this._ortholine._coordinates, d = this._alignedLocation(this.currentLocation.copy(), a, b), e = c.length - 1, d = this._graphItem.translateFromParent(d);
    if (2 === e && !this._useDragCreationMode()) {
        var f = JSG.ptCache.get(0, 0), g = c[0].toPoint();
        this._graphItem.hasSourceAttached() ? this._ortholine.getOrthoDirectionFromPort(this._graphItem.getSourcePort(), 0, e, f) : this._ortholine.getOrthoDirectionFromLine(g, d.copy(), f);
        f.setLength(JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT);
        f.add(g);
        c[1].setToPoint(f);
        JSG.ptCache.release(f)
    }
    this._ortholine.setCoordinateAtToPoint(e, d);
    c = this._useDragCreationMode() || this.hasExtend();
    this._graphItem.setItemAttribute(JSG.graph.attr.ItemAttributes.VISIBLE, c);
    this._graphItem.refresh();
    this.updateActionFeedback(b, a)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.updateActionFeedback = function (a, b) {
    if (this.actionFeedback && this._graphItem) {
        var c = this._graphItem.getBoundingBox();
        this.actionFeedback._box.setTo(c);
        c = this.alignToGrid(this.lastLocation, b, a.event.altKey, new JSG.geometry.Point(0, 0));
        this.actionFeedback._point.setTo(c)
    }
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.onMouseUp = function (a, b) {
    this._useDragCreationMode() && this.finishInteraction(a, b)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.onMouseDoubleClick = function (a, b) {
    this.hasExtend(500) ? this.finishInteraction(a, b) : this.cancelInteraction(a, b)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.cancelInteraction = function (a, b) {
    JSG.graph.interaction.CreateOrthoEdgeInteraction._super.cancelInteraction.call(this, a, b);
    !a.isConsumed && a instanceof JSG.ui.events.MouseEvent && this.getInteractionHandler().handleMouseEvent(a)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.willFinish = function (a, b, c) {
    function d(a) {
        for (var b = a.length - 1, c = b, d = new JSG.geometry.Point(0, 0), e = new JSG.geometry.Point(0, 0); 1 < b;)if (a[b].toPoint(d), d.subtract(a[b - 1].toPoint(e)), 200 > d.length())JSG.Arrays.removeAt(a, b), b--; else break;
        return b !== c
    }

    function e(a, b) {
        f.executed(a, b)
    }

    var f = this;
    if (c = this.getInteractionHandler()) {
        d(this._ortholine.getCoordinates()) && this._ortholine.refresh();
        var g = this.createCommand(b);
        g ? c.execute(g, e) : this.cancelInteraction(a,
            b)
    }
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype._initNewItem = function (a, b, c) {
    this._graphItem._lineBehavior = a.getLayoutAttributes().getLineBehavior().getValue();
    a.getLayoutAttributes().setLineBehavior(JSG.graph.attr.consts.LineBehavior.DISABLED);
    return JSG.graph.interaction.CreateOrthoEdgeInteraction._super._initNewItem.call(this, a, b, c)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype._createdItem = function (a, b) {
    a.getLayoutAttributes().setLineBehavior(this._graphItem._lineBehavior);
    JSG.graph.interaction.CreateOrthoEdgeInteraction._super._createdItem.call(this, a, b)
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.prototype.hasExtend = function (a) {
    var b = this._graphItem.getSize();
    a = a || 500;
    return Math.abs(b.getWidth().getValue()) > a || Math.abs(b.getHeight().getValue()) > a
};
JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE = {DRAG: 1, CLICK: 2};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.CreatePolyLineInteraction = function (a) {
    JSG.graph.interaction.CreatePolyLineInteraction._super.constructor.apply(this, arguments);
    this._polyline = a;
    this._polyshape = a._shape;
    this._isClosed = this._polyline.isClosed();
    this._polyline.setItemAttribute(JSG.graph.attr.ItemAttributes.CLOSED, !1);
    this._parent = this._fbView = void 0;
    this._lastAction = 0
};
JSG.extend(JSG.graph.interaction.CreatePolyLineInteraction, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.CreatePolyLineInteraction._INIT = 0;
JSG.graph.interaction.CreatePolyLineInteraction._MOUSE_UP = 1;
JSG.graph.interaction.CreatePolyLineInteraction._MOUSE_DOWN = 2;
JSG.graph.interaction.CreatePolyLineInteraction._MOUSE_MOVE = 4;
JSG.graph.interaction.CreatePolyLineInteraction._MOUSE_DRAG = 8;
JSG.graph.interaction.CreatePolyLineInteraction.prototype.deactivate = function (a) {
    this._parent = this._fbView = this._polyline = void 0;
    JSG.graph.interaction.CreatePolyLineInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.onMouseDown = function (a, b) {
    var c = this._polyshape.getCoordinatesCount() - 1, d = new JSG.geometry.Point(0, 0);
    this._parent || (b.getDefaultController() ? this._parent = b.getDefaultController() : this._parent = b.findControllerAt(d.setTo(a.location), JSG.graph.controller.FindFlags.AUTOMATIC));
    this._fbView || (d = b.getControllerFactory().createController(this._polyline), this._polyline.setItemAttribute(JSG.graph.attr.ItemAttributes.CLOSED, !1), this._fbView = d.getView(),
        this.lastLocation.setTo(this.getStartLocation()), b.addInteractionFeedback(this._fbView));
    0 > c ? (c = new JSG.graph.Coordinate, d = this.alignToGrid(this.currentLocation.copy(), b, a.event.altKey), c.set(d.x, d.y), this._polyshape.addCoordinate(c), this._polyshape.addCoordinate(c.copy())) : this._addNewPoint(this._polyshape, a, b);
    JSG.graph.interaction.CreatePolyLineInteraction._super.onMouseDown.call(this, a, b)
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype._addNewPoint = function (a, b, c) {
    var d = a.getCoordinatesCount() - 1, e = a.getCoordinateAt(d), d = a.getCoordinateAt(d - 1);
    b = this.alignToGrid(this.currentLocation.copy(), c, b.event.altKey);
    c = c.getCoordinateSystem().metricToLogXNoZoom(JSG.createThreshhold);
    this._atSameLocation(d.toPoint(), b, c) || (e.set(b.x, b.y), a.addCoordinate(e.copy()))
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype._atSameLocation = function (a, b, c) {
    a.subtract(b);
    c = c || 250;
    return a.length() < c
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.onMouseDrag = function (a, b) {
    this._updateFeedback(a, b);
    this._lastAction = JSG.graph.interaction.CreatePolyLineInteraction._MOUSE_DRAG
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.onMouseMove = function (a, b) {
    function c() {
        var c = b.findControllerAt(a.location.copy(), JSG.graph.controller.FindFlags.AREA, function (a) {
            return a.getModel().isContainer() && a.getModel().isVisible() && !(a instanceof JSG.graph.controller.ConnectionController) && !(a instanceof JSG.graph.controller.PortController) && !(a instanceof JSG.graph.controller.GraphController)
        });
        c && JSG.graph.interaction.InteractionUtils.highlightTargetController(b, c)
    }

    b.clearLayer(JSG.graph.view.LayerId.TARGETCONTAINER);
    0 === this._polyshape.getCoordinatesCount() && c();
    a.doRepaint = !0;
    a.isConsumed = !0;
    this.setCursor(JSG.ui.Cursor.Style.CROSS);
    this._updateFeedback(a, b)
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.onMouseExit = function (a, b) {
    JSG.graph.interaction.CreatePolyLineInteraction._super.onMouseExit.call(this, a, b)
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.createActionFeedback = function (a, b) {
    return new JSG.graph.view.SelectionFeedbackView(12)
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.updateActionFeedback = function (a, b) {
    if (this.actionFeedback && this._polyline) {
        var c = this.getNewBoundingBox(this._polyline._shape);
        this.actionFeedback._box.setTo(c);
        c = this.alignToGrid(this.lastLocation, b, a.event.altKey, new JSG.geometry.Point(0, 0));
        this.actionFeedback._point.setTo(c)
    }
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype._updateFeedback = function (a, b) {
    var c = this._polyshape.getCoordinatesCount() - 1, d = this.alignToGrid(this.currentLocation.copy(), b, a.event.altKey);
    if (c = this._polyshape.getCoordinateAt(c))this._offset.setTo(d), this.lastLocation.setTo(d), c.set(this._offset.x, this._offset.y);
    this._polyshape.refresh();
    this.updateActionFeedback(a, b)
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.onMouseUp = function (a, b) {
    this._lastAction === JSG.graph.interaction.CreatePolyLineInteraction._MOUSE_DRAG && this._addNewPoint(this._polyshape, a, b);
    this._lastAction = JSG.graph.interaction.CreatePolyLineInteraction._MOUSE_UP
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.onMouseDoubleClick = function (a, b) {
    this.finishInteraction(a, b)
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.willFinish = function (a, b) {
    var c;
    if (c = this.getInteractionHandler()) {
        for (var d = this._polyshape.getCoordinates(), e = d.length - 1, f = e, g = new JSG.geometry.Point(0, 0); 1 < e;)if (d[e].toPoint(g), this._atSameLocation(g, d[e - 1].toPoint(), 100))JSG.Arrays.removeAt(d, e), e--; else break;
        e !== f && this._polyshape.refresh();
        d = this._polyline.copy();
        e = b.getRootController();
        e = this._parent ? this._parent.getModel() : e.getContent().getModel();
        this.initNewItem(d, b);
        c.execute(new JSG.graph.command.AddItemCommand(d,
            e));
        this._parent && this._parent.selectItem(d, !0)
    }
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.initNewItem = function (a, b) {
    var c = 0, d = this.getNewBoundingBox(a._shape), e = d.getTopLeft();
    if (this._parent) {
        var f = this._parent.getView(), g = b.rootController.getView();
        JSG.graph.Utils.traverseDown(g, f, function (a) {
            c -= a.getAngle();
            a.translateFromParent(e);
            return !0
        });
        a.setAngle(c)
    }
    f = d.getSize();
    this.translate(a._shape, d.getTopLeft(), f);
    d = a.getPin();
    d.setLocalCoordinate(new JSG.graph.expr.NumberExpression(0, "WIDTH * 0.5"), new JSG.graph.expr.NumberExpression(0,
        "HEIGHT * 0.5"));
    d.evaluate();
    a.setSize(f.x, f.y);
    a.setOriginTo(e);
    a.setItemAttribute(JSG.graph.attr.ItemAttributes.CLOSED, this._isClosed)
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.getNewBoundingBox = function (a, b) {
    return a.getPointList().getBoundingBox(b)
};
JSG.graph.interaction.CreatePolyLineInteraction.prototype.translate = function (a, b, c) {
    var d = JSG.geometry.Utils, e = new JSG.geometry.Point(0, 0);
    a.getCoordinates().forEach(function (a) {
        a.toPoint(e);
        e.translate(-b.x, -b.y);
        var g = 0 !== c.y ? e.y / c.y : 0;
        a.set(new JSG.graph.expr.NumberExpression(0, "width * " + d.roundTo(0 !== c.x ? e.x / c.x : 0, 2)), new JSG.graph.expr.NumberExpression(0, "height * " + d.roundTo(g, 2)))
    })
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.CreateBezierInteraction = function (a) {
    JSG.graph.interaction.CreateBezierInteraction._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.CreateBezierInteraction, JSG.graph.interaction.CreatePolyLineInteraction);
JSG.graph.interaction.CreateBezierInteraction.prototype.translate = function (a, b, c) {
    var d = new JSG.geometry.Point(0, 0), e = new JSG.geometry.Point(0, 0), f = JSG.graph.expr.NumberExpression, g = JSG.geometry.Utils;
    a.getCoordinates().forEach(function (a) {
        a.toPoint(d);
        d.translate(-b.x, -b.y);
        e.set(g.roundTo(d.x / c.x, 2), g.roundTo(d.y / c.y, 2));
        a.set(new f(d.x, "WIDTH * " + e.x), new f(d.x, "HEIGHT * " + e.y))
    });
    a.getCpFromPoints().forEach(function (d) {
        d.translate(-b.x, -b.y);
        e.set(g.roundTo(d.x / c.x, 2), g.roundTo(d.y / c.y, 2));
        d =
            new JSG.graph.Coordinate(new f(0, "WIDTH * " + e.x), new f(0, "HEIGHT * " + e.y));
        a.getCpFromCoordinates().push(d)
    });
    a.getCpToPoints().forEach(function (d) {
        d.translate(-b.x, -b.y);
        e.set(g.roundTo(d.x / c.x, 2), g.roundTo(d.y / c.y, 2));
        d = new JSG.graph.Coordinate(new f(0, "WIDTH * " + e.x), new f(0, "HEIGHT * " + e.y));
        a.getCpToCoordinates().push(d)
    })
};
JSG.graph.interaction.CreateBezierInteraction.prototype.getNewBoundingBox = function (a, b) {
    var c = b || new JSG.geometry.BoundingBox(0, 0), d, e;
    a.getBezierPoints(a.getPoints());
    a.getPointList().getBoundingBox(c);
    d = a.getCpFromPointList().getBoundingBox(JSG.boxCache.get());
    e = a.getCpToPointList().getBoundingBox(JSG.boxCache.get());
    c.union(d);
    c.union(e);
    JSG.boxCache.release(d, e);
    return c
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.CreateFriendInteraction = function (a, b) {
    JSG.graph.interaction.CreateFriendInteraction._super.constructor.call(this);
    this._friends = a;
    this._friendedges = [];
    this._friendports = new JSG.commons.Map;
    this._srcnode = b;
    this._pinPoints = [];
    this._isInitialized = !1;
    this._connection = this._target = this._source = void 0
};
JSG.extend(JSG.graph.interaction.CreateFriendInteraction, JSG.graph.interaction.CreateItemInteraction);
JSG.graph.interaction.CreateFriendInteraction.prototype.deactivate = function (a) {
    this._pinPoints = this._srcnode = this._connection = this._target = this._source = this._friendports = this._friendedges = this._friends = void 0;
    JSG.graph.interaction.CreateFriendInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.CreateFriendInteraction.prototype.onMouseDown = function (a, b) {
    var c = this._friends[0];
    this._snapRect = void 0;
    this._source = this._createPortInfo(this._srcnode);
    this._target = this._createPortInfo(c, c.getWidth().getValue() / 2, c.getHeight().getValue() / 2)
};
JSG.graph.interaction.CreateFriendInteraction.prototype._createPortInfo = function (a, b, c) {
    var d = new JSG.geometry.Point(0, 0);
    void 0 != b && void 0 != c ? d.set(b, c) : (b = a.getBoundingBox(), d.set(b.getWidth() / 2, b.getHeight() / 2));
    b = {};
    b.node = a;
    b.port = a.getPortAtLocation(d);
    b.location = d;
    b.port || (b.port = new JSG.graph.model.Port, b.isNew = !0);
    return b
};
JSG.graph.interaction.CreateFriendInteraction.prototype._setFeedback = function (a, b) {
    function c(c, d) {
        function g(a, b) {
            var c;
            for (c = 0; c < b.length; c++)a.put(b[c].getId(), b[c])
        }

        var k, h = c[0].getPinPoint(), m = new JSG.geometry.Point(0, 0), l = new JSG.geometry.Point(0, 0), p = d.alignToGrid(d.startLocation, b, a.event.altKey, new JSG.geometry.Point(0, 0));
        for (k = 0; k < c.length; k++) {
            l = c[k].getPinPoint(l);
            m.set(l.x - (h.x - p.x), l.y - (h.y - p.y));
            c[k].setPinPointTo(m);
            d._pinPoints.push(m.copy());
            var n = d.createFeedback(c[k], b);
            b.addInteractionFeedback(n);
            c[k]instanceof JSG.graph.model.Edge ? d._friendedges.push(c[k]) : g(d._friendports, c[k].getPorts())
        }
        (function () {
            var a, b, c = new JSG.geometry.Point(0, 0);
            new JSG.geometry.Point(0, 0);
            for (a = 0; a < d._friendedges.length; a++)c = d._friendedges[a].getPinPoint(c), (b = d._friendports.get(d._friendedges[a].sourcePortId)) && d._friendedges[a].setSourcePort(b), (b = d._friendports.get(d._friendedges[a].targetPortId)) && d._friendedges[a].setTargetPort(b)
        })()
    }

    if (0 !== this._friends.length && !this._isInitialized) {
        this._isInitialized = !0;
        if (!this._connection) {
            this._connection = this.createConnection();
            var d = this.createConnectionFeedback(a, b);
            b.addInteractionFeedback(d)
        }
        c(this._friends, this)
    }
    this.lastLocation.setTo(this.getStartLocation())
};
JSG.graph.interaction.CreateFriendInteraction.prototype.createConnection = function () {
    var a = JSG.graphItemFactory.createItemFromString(JSG.defaultEdgeType), b = this._source.location.copy();
    JSG.graph.Utils.translatePointUp(b, this._source.node, this._source.node.getGraph());
    a.setPinPointTo(b);
    var c = this.createPortDummy(this._source);
    a.hasSourceAttached = function () {
        return !0
    };
    a.getSourcePort = function () {
        return c
    };
    var d = this.createPortDummy(this._target);
    a.hasTargetAttached = function () {
        return !0
    };
    a.getTargetPort =
        function () {
            return d
        };
    return a
};
JSG.graph.interaction.CreateFriendInteraction.prototype.createPortDummy = function (a) {
    var b = a.node, c = JSG.graph.Utils.translatePointUp(a.location.copy(), b, b.getGraph());
    return {
        getParent: function () {
            return b
        }, getConnectionPoint: function (a, e) {
            return a ? b.translateFromParent(c.copy()) : c
        }
    }
};
JSG.graph.interaction.CreateFriendInteraction.prototype.createConnectionFeedback = function (a, b) {
    return this.createFeedback(this._connection, b)
};
JSG.graph.interaction.CreateFriendInteraction.prototype.getSnapRect = function (a, b) {
    var c, d = b || new JSG.geometry.Rectangle(0, 0, 0, 0), e = this._friends[0].getBoundingBox(new JSG.geometry.BoundingBox(0, 0)), f = JSG.boxCache.get();
    for (c = 1; c < this._friends.length; c++)e.union(this._friends[c].getBoundingBox(f));
    JSG.boxCache.release(f);
    e.getBoundingRectangle(d);
    return d
};
JSG.graph.interaction.CreateFriendInteraction.prototype.updateFeedback = function (a, b, c) {
    this._snapRect || (this._snapRect = this.getSnapRect(b));
    b.clearLayer(JSG.graph.view.LayerId.SNAPLINES);
    this._horizontalSnapController = this._verticalSnapController = void 0;
    if (b.getGraphSettings().getSnapToShapes() && 0 === this._friends.length && !a.event.altKey) {
        c = JSG.rectCache.get().setTo(this._snapRect);
        var d = this.currentLocation.copy();
        d.subtract(this.startLocation);
        c.translate(d.x, d.y);
        JSG.graph.interaction.InteractionUtils.highlightSnapItemofController(this,
            c, a.event.altKey);
        JSG.rectCache.release(c)
    }
    b = this.getSnapAndGridOffset(b, a, this._snapRect);
    for (a = 0; a < this._friends.length; a++)c = this._pinPoints[a].copy(), c.translate(b.x, b.y), this._friends[a].setPinPointTo(c);
    this._connection && (a = this._friends[0].getBoundingBox(JSG.boxCache.get()), b = a.getBoundingRectangle(JSG.rectCache.get()), c = b.getCenter(JSG.ptCache.get()), this._connection.translateFromParent(c), this._connection.getEndCoordinate().set(c.x, c.y), this._connection.refresh(), JSG.ptCache.release(c), JSG.boxCache.release(a),
        JSG.rectCache.release(b))
};
JSG.graph.interaction.CreateFriendInteraction.prototype.onMouseMove = function (a, b) {
};
JSG.graph.interaction.CreateFriendInteraction.prototype.onMouseDrag = function (a, b) {
    this._highlightTargetController(a, b);
    JSG.graph.interaction.CreateFriendInteraction._super.onMouseDrag.call(this, a, b)
};
JSG.graph.interaction.CreateFriendInteraction.prototype.onMouseUp = function (a, b) {
    this.finishInteraction(a, b)
};
JSG.graph.interaction.CreateFriendInteraction.prototype._findParentControllerAt = function (a, b) {
    var c = this;
    return b.findControllerAt(a, JSG.graph.controller.FindFlags.AREA, function (a) {
        return c._friends[0] && !JSG.graphItemFactory.isValidSubItem(c._friends[0], a.getModel().getType().getValue()) ? !1 : a.getModel().isContainer() && a.getModel().isVisible() && !(a instanceof JSG.graph.controller.ConnectionController) && !(a instanceof JSG.graph.controller.PortController) && !(a instanceof JSG.graph.controller.GraphController)
    })
};
JSG.graph.interaction.CreateFriendInteraction.prototype.willFinish = function (a, b, c) {
    function d(a, b, c) {
        var d = e.get(a.getParent().getId());
        a = a.getParent().getPorts().indexOf(a);
        c.call(b, d.getPortAt(a))
    }

    var e;
    if ((c = this.getInteractionHandler()) && this._connection) {
        this._parent = this._findParentControllerAt(a.location.copy(), b);
        var f = b.getRootController().getContent().getModel();
        a = new JSG.graph.command.CompoundCommand;
        e = new JSG.commons.Map;
        for (b = 0; b < this._friends.length; b++) {
            var g = this._friends[b].copy(),
                k = this._initNewItem(g, f, this._friends[b]);
            a.add(new JSG.graph.command.AddItemCommand(g, k));
            e.put(this._friends[b].getId(), g)
        }
        for (b = 0; b < this._friendedges.length; b++)g = e.get(this._friendedges[b].getId()), (k = this._friendports.get(this._friendedges[b].sourcePortId)) && d(k, g, g.setSourcePort), (k = this._friendports.get(this._friendedges[b].targetPortId)) && d(k, g, g.setTargetPort);
        this._addPortCommands(a, e.get(this._target.node.getId()));
        b = this._addConnectionCommand(a, f);
        this._addAttachCommands(a, b);
        c.execute(a,
            this.executed)
    }
};
JSG.graph.interaction.CreateFriendInteraction.prototype._initPinOf = function (a) {
    a instanceof JSG.graph.model.Edge || JSG.graph.interaction.CreateFriendInteraction._super._initPinOf.call(this, a)
};
JSG.graph.interaction.CreateFriendInteraction.prototype._addPortCommands = function (a, b) {
    var c = this._source, d = this._target;
    c && c.isNew && a.add(new JSG.graph.command.AddPortCommand(c.port, c.location, c.node));
    d && d.isNew && a.add(new JSG.graph.command.AddPortCommand(d.port, d.location, b))
};
JSG.graph.interaction.CreateFriendInteraction.prototype._addConnectionCommand = function (a, b) {
    var c = this._connection.copy(), d = this._initNewFriendConnection(c, b, this._connection);
    a.add(new JSG.graph.command.AddItemCommand(c, d));
    return c
};
JSG.graph.interaction.CreateFriendInteraction.prototype._initNewFriendConnection = function (a, b, c) {
    a = JSG.graph.interaction.CreateFriendInteraction._super._initNewItem.call(this, a, b, c);
    c = c.getSourcePort().getParent();
    return (c !== a ? JSG.graph.Utils.findCommonParent(c, a, a.getGraph()) : a) || b
};
JSG.graph.interaction.CreateFriendInteraction.prototype._addAttachCommands = function (a, b) {
    var c = this._source, d = this._target;
    c && c.port && a.add(new JSG.graph.command.AttachCommand(b, c.port, !0));
    d && d.port && a.add(new JSG.graph.command.AttachCommand(b, d.port, !1))
};
JSG.graph.interaction.CreateFriendInteraction.prototype.executed = function (a, b) {
    function c(a) {
        if (a instanceof JSG.graph.command.AddItemCommand && a._graphItem instanceof JSG.graph.model.Node)(a = b.findControllerForItem(a._graphItem)) && d.push(a); else if (a.commands) {
            var e = a.commands;
            for (a = 0; a < e.length; a++)c(e[a], d)
        }
    }

    var d = [];
    c(a);
    if (0 !== d.length) {
        var e = b.getSelectionProvider();
        e.clearSelection();
        e.selectAll(d)
    }
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.EditShapeInteraction = function () {
    JSG.graph.interaction.EditShapeInteraction._super.constructor.apply(this, arguments);
    this._selection = this._editview = this._marker = this._item = this._view = void 0;
    this._shapeListener = this.createShapeListener()
};
JSG.extend(JSG.graph.interaction.EditShapeInteraction, JSG.graph.interaction.Interaction);
JSG.graph.interaction.EditShapeInteraction.prototype.activate = function (a) {
    var b = a.getSelectionProvider();
    (this._selection = b.hasSingleSelection() ? b.getFirstSelection() : void 0) ? (this._view = this._selection.getView(), this._graphView = a.getGraphView(), this._item = this._view._item, this._item.addEventListener(JSG.graph.model.events.Event.SHAPE, this._shapeListener), this._editview = this.createEditShapeView(a.getCoordinateSystem()), this.initEditView(this._editview), a.clearSelection(), a.setOverlayView(this._editview),
        this.getInteractionHandler().repaint()) : this.didFinish(void 0, a)
};
JSG.graph.interaction.EditShapeInteraction.prototype.createShapeListener = function () {
    return new JSG.graph.interaction.EditShapeInteraction.ShapeListener(this)
};
JSG.graph.interaction.EditShapeInteraction.prototype.createEditShapeView = function (a) {
    return new JSG.graph.view.EditShapeView(a)
};
JSG.graph.interaction.EditShapeInteraction.prototype.initEditView = function (a) {
    a.setIsClosed(this._item.isClosed());
    this.setPointList(this._item._shape.getPointList())
};
JSG.graph.interaction.EditShapeInteraction.prototype.deactivate = function (a) {
    a.removeOverlayView();
    this._item && (this._item.removeEventListener(JSG.graph.model.events.Event.SHAPE, this._shapeListener), this._item = void 0);
    this._selection = this._editview = this._marker = this._view = void 0;
    JSG.graph.interaction.EditShapeInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.EditShapeInteraction.prototype.createActionFeedback = function (a, b) {
    var c = new JSG.graph.view.PositionFeedbackView, d = a.location.copy();
    b.translateFromParent(d);
    c.setPosition(d);
    return c
};
JSG.graph.interaction.EditShapeInteraction.prototype.updateActionFeedback = function (a, b) {
    if (this.actionFeedback) {
        var c = a.location.copy();
        b.translateFromParent(c);
        this.actionFeedback.setPosition(c)
    }
};
JSG.graph.interaction.EditShapeInteraction.prototype.setPointList = function (a) {
    if (a && !a.isEmpty()) {
        var b = this._item.getOrigin(), c = this.translateOriginAndAngle(b, this._item.getAngle().getValue());
        this._editview.setPointList(a, b, c)
    }
};
JSG.graph.interaction.EditShapeInteraction.prototype.translateOriginAndAngle = function (a, b) {
    var c = this._graphView, d = this._view.getParent();
    JSG.graph.Utils.traverseUp(d, c, function (c) {
        c.translateToParent(a);
        b += c.getAngle();
        return !0
    });
    return b
};
JSG.graph.interaction.EditShapeInteraction.prototype.getMarkerAt = function (a, b) {
    if (this._editview) {
        var c = b.getCoordinateSystem().metricToLogXNoZoom(JSG.findRadius);
        this._editview.translatePoint(a);
        return this._editview.getMarkerAt(a, c)
    }
};
JSG.graph.interaction.EditShapeInteraction.prototype.onKeyDown = function (a, b) {
    if (a.event.ctrlKey)switch (a.event.keyCode) {
        case 90:
            this.getInteractionHandler().undo();
            break;
        case 89:
            this.getInteractionHandler().redo()
    }
};
JSG.graph.interaction.EditShapeInteraction.prototype.onMouseDown = function (a, b) {
    this.setCurrentMarker(a, b);
    this._marker ? this.actionFeedback || (this.actionFeedback = this.createActionFeedback(a, b), this.updateActionFeedback(a, b), b.addInteractionFeedback(this.actionFeedback)) : this.didFinish(a, b)
};
JSG.graph.interaction.EditShapeInteraction.prototype.onMouseMove = function (a, b) {
    this.setCurrentMarker(a, b)
};
JSG.graph.interaction.EditShapeInteraction.prototype.setCurrentMarker = function (a, b) {
    var c = new JSG.geometry.Point(0, 0);
    c.setTo(a.location);
    b.translateFromParent(c);
    (this._marker = this.getMarkerAt(c, b)) ? (c = -1 === this._marker.index ? JSG.ui.Cursor.Style.CROSS : JSG.ui.Cursor.Style.MOVE, this.getInteractionHandler().setCursor(c)) : this.getInteractionHandler().setCursor(JSG.ui.Cursor.Style.AUTO)
};
JSG.graph.interaction.EditShapeInteraction.prototype.onMouseDrag = function (a, b) {
    if (this._marker) {
        -1 === this._marker.index && (this._marker = this._editview.insertMarker(this._marker));
        var c = this.alignToGrid(this.currentLocation.copy(), b, a.event.altKey);
        this._editview.translatePoint(c);
        this._marker.setCenterTo(c);
        this.updateActionFeedback(a, b)
    }
};
JSG.graph.interaction.EditShapeInteraction.prototype.onMouseUp = function (a, b) {
    this._marker && this._performChange()
};
JSG.graph.interaction.EditShapeInteraction.prototype.deleteMarker = function (a) {
    return a && 2 < this._editview.getMarkerCount() ? (this._editview.deleteMarker(a), this._performChange(), !0) : !1
};
JSG.graph.interaction.EditShapeInteraction.prototype.close = function (a) {
    this.getInteractionHandler() && this._editview.setIsClosed(a)
};
JSG.graph.interaction.EditShapeInteraction.prototype._performChange = function () {
    var a = this.getInteractionHandler();
    if (a) {
        var b = this._createCustomCompoundCommand(), c = this._item._shape.getType();
        (c = this._createSwitchShapeCommandIfNecessary(this._item, c)) && b.add(c);
        b.add(this._createEditShapeCommand(this._item, this._editview.getMarkerPoints()));
        a.execute(b);
        this.actionFeedback = void 0
    }
};
JSG.graph.interaction.EditShapeInteraction.prototype._createCustomCompoundCommand = function () {
    var a = new JSG.graph.command.CompoundCommand;
    a.restoreStateAfterUndo = function (b) {
        if (b.getGraphicSystem) {
            var c = b.getGraphicSystem().interactionHandler;
            c && a._interaction !== c.getActiveInteraction() && Object.getPrototypeOf(a).restoreStateAfterUndo.call(a, b)
        }
    };
    a.restoreStateAfterRedo = function (b) {
        if (b.getGraphicSystem) {
            var c = b.getGraphicSystem().interactionHandler;
            c && a._interaction !== c.getActiveInteraction() && Object.getPrototypeOf(a).restoreStateAfterRedo.call(a,
                b)
        }
    };
    return a
};
JSG.graph.interaction.EditShapeInteraction.prototype._createSwitchShapeCommandIfNecessary = function (a, b) {
    var c;
    JSG.graph.model.shapes.RectangleShape.TYPE === b ? (c = new JSG.graph.model.shapes.PolygonShape(!0), c.setCoordinates(a._shape.getCoordinates()), c = new JSG.graph.command.SetShapeCommand(a, c)) : JSG.graph.model.shapes.EllipseShape.TYPE === b && (c = new JSG.graph.model.shapes.BezierShape(!0), c.setCoordinates(a._shape.getCoordinates()), c = new JSG.graph.command.SetShapeCommand(a, c));
    return c
};
JSG.graph.interaction.EditShapeInteraction.prototype._createEditShapeCommand = function (a, b) {
    return new JSG.graph.command.SetShapePointsCommand(this._item, b)
};
JSG.graph.interaction.EditShapeInteraction.prototype.cancelInteraction = function (a, b) {
    a && (a.doRepaint = !0);
    this.setCursor(JSG.ui.Cursor.Style.AUTO);
    JSG.graph.interaction.EditShapeInteraction._super.cancelInteraction.call(this, a, b)
};
JSG.graph.interaction.EditShapeInteraction.prototype.didFinish = function (a, b) {
    var c = this._selection;
    JSG.graph.interaction.EditShapeInteraction._super.didFinish.call(this, a, b);
    !a.isConsumed && a instanceof JSG.ui.events.MouseEvent ? this.getInteractionHandler().handleMouseEvent(a) : c && b.select(c)
};
JSG.graph.interaction.EditShapeInteraction.ShapeListener = function (a) {
    this._interaction = a
};
JSG.graph.interaction.EditShapeInteraction.ShapeListener.prototype.handlePreEvent = function (a) {
};
JSG.graph.interaction.EditShapeInteraction.ShapeListener.prototype.handlePostEvent = function (a) {
    this._interaction.setPointList(this._interaction._item._shape.getPointList())
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.EditLineShapeInteraction = function () {
    JSG.graph.interaction.EditLineShapeInteraction._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.EditLineShapeInteraction, JSG.graph.interaction.EditShapeInteraction);
JSG.graph.interaction.EditLineShapeInteraction.prototype.createEditShapeView = function (a) {
    return new JSG.graph.view.EditLineShapeView(a)
};
JSG.graph.interaction.EditLineShapeInteraction.prototype._createSwitchShapeCommandIfNecessary = function (a, b) {
    if (JSG.graph.model.shapes.OrthoLineShape.TYPE === b) {
        var c = new JSG.graph.model.shapes.LineShape;
        c.setCoordinates(a._shape.getCoordinates());
        return new JSG.graph.command.SetShapeCommand(a, c)
    }
};
JSG.graph.interaction.EditLineShapeInteraction.prototype._createEditShapeCommand = function (a, b) {
    var c = this._graphView, d = this._view.getParent();
    b = this._editview.getMarkerPoints(!0);
    b.forEach(function (a) {
        JSG.graph.Utils.traverseDown(c, d, function (b) {
            b.translateFromParent(a);
            return !0
        })
    });
    return new JSG.graph.command.SetLineShapePointsCommand(this._item, b)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.EditBezierShapeInteraction = function () {
    JSG.graph.interaction.EditBezierShapeInteraction._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.EditBezierShapeInteraction, JSG.graph.interaction.EditShapeInteraction);
JSG.graph.interaction.EditBezierShapeInteraction.prototype.createShapeListener = function () {
    return new JSG.graph.interaction.EditBezierShapeInteraction.ShapeListener(this)
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.createEditShapeView = function (a) {
    return new JSG.graph.view.EditBezierShapeView(a)
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.initEditView = function (a) {
    JSG.graph.interaction.EditBezierShapeInteraction._super.initEditView.call(this, a);
    this.setCpFromPointList(this._item._shape.getCpFromPointList());
    this.setCpToPointList(this._item._shape.getCpToPointList())
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.setCpToPointList = function (a) {
    if (a && !a.isEmpty()) {
        var b = this._item.getOrigin(), c = this.translateOriginAndAngle(b, this._item.getAngle().getValue());
        this._editview.setCpToPointList(a, b, c)
    }
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.setCpFromPointList = function (a) {
    if (a && !a.isEmpty()) {
        var b = this._item.getOrigin(), c = this.translateOriginAndAngle(b, this._item.getAngle().getValue());
        this._editview.setCpFromPointList(a, b, c)
    }
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.getCpFromMarkerAt = function (a, b) {
    if (this._editview) {
        var c = b.getCoordinateSystem().metricToLogXNoZoom(JSG.findRadius);
        this._editview.translatePoint(a);
        return this._editview.getCpFromMarkerAt(a, c)
    }
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.getCpToMarkerAt = function (a, b) {
    if (this._editview) {
        var c = b.getCoordinateSystem().metricToLogXNoZoom(JSG.findRadius);
        this._editview.translatePoint(a);
        return this._editview.getCpToMarkerAt(a, c)
    }
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.onMouseDown = function (a, b) {
    this.setCurrentMarker(a, b);
    this._marker || this._cpFromMarker || this._cpToMarker ? this.actionFeedback || (this.actionFeedback = this.createActionFeedback(a, b), this.updateActionFeedback(a, b), b.addInteractionFeedback(this.actionFeedback)) : this.didFinish(a, b)
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.setCurrentMarker = function (a, b) {
    var c = JSG.ui.Cursor.Style.AUTO, d = new JSG.geometry.Point(0, 0), e = new JSG.geometry.Point(0, 0);
    d.setTo(a.location);
    b.translateFromParent(d);
    this._cpToMarker = this._cpFromMarker = this._marker = void 0;
    (this._cpFromMarker = this.getCpFromMarkerAt(e.setTo(d), b)) ? c = JSG.ui.Cursor.Style.MOVE : (this._cpToMarker = this.getCpToMarkerAt(e.setTo(d), b)) ? c = JSG.ui.Cursor.Style.MOVE : (this._marker = this.getMarkerAt(e.setTo(d), b)) && (c = -1 ===
    this._marker.index ? JSG.ui.Cursor.Style.CROSS : JSG.ui.Cursor.Style.MOVE);
    this.getInteractionHandler().setCursor(c)
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.onMouseDrag = function (a, b) {
    var c = this.alignToGrid(this.currentLocation.copy(), b, a.event.altKey);
    this._editview.translatePoint(c);
    if (this._cpFromMarker)this._cpFromMarker.setCenterTo(c); else if (this._cpToMarker)this._cpToMarker.setCenterTo(c); else if (this._marker) {
        var d = !1;
        -1 === this._marker.index && (this._marker = this._editview.insertMarker(this._marker), this._marker.isTemporary = !1, d = !0);
        var e = this._marker.center.copy();
        this._marker.setCenterTo(c);
        var f = this._marker.center.copy();
        f.subtract(e);
        var g = this._marker.index, e = this._editview.getCpToMarker(g), k = this._editview.getCpFromMarker(g);
        d ? (f = this._editview.getMarker(g - 1), d = g === this._editview.getMarkerCount() - 1 ? this._editview.getMarker(0) : this._editview.getMarker(g + 1), f = f.getLocation(new JSG.geometry.Point(0, 0)), g = d.getLocation(new JSG.geometry.Point(0, 0)), d = 0.2 * (g.x - f.x), f = 0.2 * (g.y - f.y), k.setLocation(c.x - d, c.y - f), e.setLocation(c.x + d, c.y + f)) : (c = e.getLocation(new JSG.geometry.Point(0, 0)), c.add(f),
            e.setLocationTo(c), c = k.getLocation(c), c.add(f), k.setLocationTo(c))
    }
    this.updateActionFeedback(a, b)
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.onMouseUp = function (a, b) {
    (this._marker || this._cpFromMarker || this._cpToMarker) && this._performChange()
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.deleteMarker = function (a) {
    if (a && 2 < this._editview.getMarkerCount()) {
        var b = a.index, c = this._editview.getCpToMarker(b), b = this._editview.getCpFromMarker(b);
        this._editview.deleteMarker(a);
        this._editview.deleteCpFromMarker(b);
        this._editview.deleteCpToMarker(c);
        this._performChange();
        return !0
    }
    return !1
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.changeMarkerToEdge = function (a) {
    if (!a)return !1;
    var b = a.index, c = this._editview.getCpToMarker(b), d = this._editview.getCpFromMarker(b), e;
    e = b ? this._editview.getMarker(b - 1) : this._editview.getMarker(this._editview.getMarkerCount() - 1);
    b = b === this._editview.getMarkerCount() - 1 ? this._editview.getMarker(0) : this._editview.getMarker(b + 1);
    a = a.getCenter(new JSG.geometry.Point(0, 0));
    e = e.getCenter(new JSG.geometry.Point(0, 0));
    b = b.getCenter(new JSG.geometry.Point(0,
        0));
    e.x = a.x - 0.3 * (a.x - e.x);
    e.y = a.y - 0.3 * (a.y - e.y);
    b.x = a.x + 0.3 * (b.x - a.x);
    b.y = a.y + 0.3 * (b.y - a.y);
    d.setCenter(e.x, e.y);
    c.setCenter(b.x, b.y);
    this._performChange();
    return !0
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype.changeMarkerToCurve = function (a) {
    if (!a)return !1;
    var b = a.index, c = this._editview.getCpToMarker(b), d = this._editview.getCpFromMarker(b), e;
    e = b ? this._editview.getMarker(b - 1) : this._editview.getMarker(this._editview.getMarkerCount() - 1);
    b = b === this._editview.getMarkerCount() - 1 ? this._editview.getMarker(0) : this._editview.getMarker(b + 1);
    a = a.getCenter(new JSG.geometry.Point(0, 0));
    e = e.getCenter(new JSG.geometry.Point(0, 0));
    b = b.getCenter(new JSG.geometry.Point(0,
        0));
    d.setCenter(a.x - 0.3 * (b.x - e.x), a.y - 0.3 * (b.y - e.y));
    c.setCenter(a.x + 0.3 * (b.x - e.x), a.y + 0.3 * (b.y - e.y));
    this._performChange();
    return !0
};
JSG.graph.interaction.EditBezierShapeInteraction.prototype._performChange = function () {
    function a(a, b, c) {
        JSG.graph.model.shapes.RectangleShape.TYPE === b ? (b = new JSG.graph.model.shapes.PolygonShape, b.setCoordinates(a._shape.getCoordinates()), c.add(new JSG.graph.command.SetShapeCommand(a, b))) : JSG.graph.model.shapes.EllipseShape.TYPE === b && (b = new JSG.graph.model.shapes.BezierShape, b.setCoordinates(a._shape.getCoordinates()), b.setCpFromCoordinates(a._shape.getCpFromCoordinates()), b.setCpToCoordinates(a._shape.getCpToCoordinates()),
            c.add(new JSG.graph.command.SetShapeCommand(a, b)))
    }

    var b = this.getInteractionHandler();
    if (b) {
        var c = this._item._shape.getType(), d = this._createCustomCompoundCommand();
        a(this._item, c, d);
        if (c === JSG.graph.model.shapes.LineShape.TYPE) {
            var e = this._graphView, f = this._view.getParent(), c = this._editview.getMarkerPoints(!0);
            c.forEach(function (a) {
                JSG.graph.Utils.traverseDown(e, f, function (b) {
                    b.translateFromParent(a);
                    return !0
                })
            });
            d.add(new JSG.graph.command.SetLineShapePointsCommand(this._item, c))
        } else d.add(new JSG.graph.command.SetBezierShapePointsCommand(this._item,
            this._editview.getMarkerPoints(!1), this._editview.getCpFromMarkerPoints(!1), this._editview.getCpToMarkerPoints(!1)));
        b.execute(d);
        this.actionFeedback = void 0
    }
};
JSG.graph.interaction.EditBezierShapeInteraction.ShapeListener = function (a) {
    this._interaction = a
};
JSG.graph.interaction.EditBezierShapeInteraction.ShapeListener.prototype.handlePreEvent = function (a) {
};
JSG.graph.interaction.EditBezierShapeInteraction.ShapeListener.prototype.handlePostEvent = function (a) {
    var b = this._interaction._item._shape;
    switch (a.detailId) {
        case JSG.graph.model.events.ShapeEvent.COORDS_SET_CPFROM:
            this._interaction.setCpFromPointList(b.getCpFromPointList());
            break;
        case JSG.graph.model.events.ShapeEvent.COORDS_SET_CPTO:
            this._interaction.setCpToPointList(b.getCpToPointList());
            break;
        default:
            this._interaction.setPointList(b.getPointList())
    }
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.MarqueeInteraction = function () {
    JSG.graph.interaction.MarqueeInteraction._super.constructor.apply(this, arguments);
    this._feedbackRect = void 0
};
JSG.extend(JSG.graph.interaction.MarqueeInteraction, JSG.graph.interaction.Interaction);
JSG.graph.interaction.MarqueeInteraction.prototype.deactivate = function (a) {
    a.removeInteractionFeedback(this._feedbackRect);
    this._feedbackRect = void 0;
    JSG.graph.interaction.MarqueeInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.MarqueeInteraction.prototype.onMouseDrag = function (a, b) {
    var c = new JSG.geometry.Point(0, 0);
    c.setTo(a.location);
    b.translateFromParent(c);
    this._getFeedbackRect(b).setBounds(Math.min(this.startLocation.x, c.x), Math.min(this.startLocation.y, c.y), Math.abs(c.x - this.startLocation.x), Math.abs(c.y - this.startLocation.y))
};
JSG.graph.interaction.MarqueeInteraction.prototype._getFeedbackRect = function (a) {
    this._feedbackRect || (a.clearInteractionFeedback(), this._feedbackRect = new JSG.graph.view.MarqueeFeedbackView, a.addInteractionFeedback(this._feedbackRect));
    return this._feedbackRect
};
JSG.graph.interaction.MarqueeInteraction.prototype.willFinish = function (a, b, c) {
    this._feedbackRect && this._doSelect(b)
};
JSG.graph.interaction.MarqueeInteraction.prototype._doSelect = function (a) {
    var b = [], c = JSG.ptCache.get(), d = JSG.boxCache.get(), e = this._feedbackRect.getBounds(JSG.rectCache.get()), f = a.getRootController().getContent(), g = a.getGraphView(), k = g.getItem();
    f.traverse(function (a) {
        var m = a.getModel(), l = m.getItemAttribute(JSG.graph.attr.ItemAttributes.ITEMPART).getValue();
        if (a === f)return !0;
        var p;
        if (p = !l)if (p = a instanceof JSG.graph.controller.ConnectionController)if (p = m.isSelectable()) {
            var n, q = m.getTranslatedShapePoints(k),
                r = 0 !== q.length;
            p = 0;
            for (n = q.length; p < n && r; p++)r = e.containsPoint(q[p]);
            p = r
        }
        if (p)return b.push(a), !1;
        p = a.getView();
        p.getOrigin(c);
        p = p.getTranslatedBoundingBox(g, d);
        return l || m instanceof JSG.graph.model.TextNode || !m.isSelectable() || !e.containsBoundingBox(p) ? !(a instanceof JSG.graph.controller.ContentNodeController) : (b.push(a), !1)
    });
    a.setSelection(b);
    JSG.ptCache.release(c);
    JSG.boxCache.release(d);
    JSG.rectCache.release(e)
};
JSG.graph.interaction.MarqueeInteraction.prototype.onMouseExit = function (a, b) {
    this.cancelInteraction(a, b)
};
JSG.graph.interaction.MarqueeInteraction.prototype.cancelInteraction = function (a, b) {
    a && (a.doRepaint = !0);
    this.setCursor(JSG.ui.Cursor.Style.AUTO);
    JSG.graph.interaction.MarqueeInteraction._super.cancelInteraction.call(this, a, b)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.MoveInteraction = function () {
    JSG.graph.interaction.MoveInteraction._super.constructor.apply(this, arguments);
    this._failed = !1;
    this._keyOffset = void 0
};
JSG.extend(JSG.graph.interaction.MoveInteraction, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.MoveInteraction.MOVE_THRESHOLD = 100;
JSG.graph.interaction.MoveInteraction.prototype.deactivate = function (a) {
    this._keyOffset = void 0;
    a.getSelectionView().setVisible(!0);
    this._notifyDelegate("deactivate", a);
    JSG.graph.interaction.MoveInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.MoveInteraction.prototype._createSelectionFeedback = function (a, b) {
    if (this._isMoveable(a, b)) {
        var c = a.createFeedback();
        c && !c.isMoveable() && c.setMoveable(JSG.graph.attr.consts.Moveable.BOTH);
        return c
    }
};
JSG.graph.interaction.MoveInteraction.prototype._createAndAddSelectionFeedback = function (a, b) {
    JSG.graph.interaction.MoveInteraction._super._createAndAddSelectionFeedback.call(this, a, b);
    var c;
    for (c = 0; c < this.feedback.length; c++) {
        var d = this.feedback[c].getFeedbackItem();
        d.getShape().getType() === JSG.graph.model.shapes.OrthoLineShape.TYPE && d.getLayoutAttributes().setLineBehavior(JSG.graph.attr.consts.LineBehavior.DISABLED)
    }
};
JSG.graph.interaction.MoveInteraction.prototype.onKeyDown = function (a, b) {
    if (!this._keyOffset)switch (a.event.keyCode) {
        case 37:
        case 38:
        case 39:
        case 40:
            b.getSelectionView().setVisible(!1), this._failed = !1, this._setFeedback(a, b), this._keyOffset = new JSG.geometry.Point(0, 0), a.doRepaint = !0
    }
    if (this._keyOffset) {
        switch (a.event.keyCode) {
            case 37:
                this._keyOffset.x -= a.event.shiftKey ? 1E3 : a.event.ctrlKey ? a.cs.deviceToLogX(1) : b.getGraphSettings().getSnapStep();
                break;
            case 38:
                this._keyOffset.y -= a.event.shiftKey ? 1E3 : a.event.ctrlKey ?
                    a.cs.deviceToLogX(1) : b.getGraphSettings().getSnapStep();
                break;
            case 39:
                this._keyOffset.x += a.event.shiftKey ? 1E3 : a.event.ctrlKey ? a.cs.deviceToLogX(1) : b.getGraphSettings().getSnapStep();
                break;
            case 40:
                this._keyOffset.y += a.event.shiftKey ? 1E3 : a.event.ctrlKey ? a.cs.deviceToLogX(1) : b.getGraphSettings().getSnapStep()
        }
        this._updateFeedback(a, b, this._keyOffset);
        this.updateSubFeedbacks(a, b, this._subfeedbacks.elements());
        a.doRepaint = !0
    }
};
JSG.graph.interaction.MoveInteraction.prototype.onKeyUp = function (a, b) {
    switch (a.event.keyCode) {
        case 37:
        case 38:
        case 39:
        case 40:
            this._keyOffset && (this._offset.setTo(this._keyOffset), this.finishInteraction(a, b), a.doRepaint = !0)
    }
};
JSG.graph.interaction.MoveInteraction.prototype.onMouseDown = function (a, b) {
    this._failed = !1;
    JSG.graph.interaction.MoveInteraction._super.onMouseDown.call(this, a, b)
};
JSG.graph.interaction.MoveInteraction.prototype.createActionFeedback = function (a, b) {
    var c = new JSG.graph.view.SelectionFeedbackView(10), d = b.getSelectionView();
    d.refresh();
    c.setBoundingBox(d.getBoundingBox());
    d.setVisible(!1);
    return c
};
JSG.graph.interaction.MoveInteraction.prototype.updateActionFeedback = function (a, b) {
    if (this.actionFeedback && this.feedback.length) {
        var c = b.getSelectionView().getBoundingBox(), d = this.getSnapRect(b), d = this.getSnapAndGridOffset(b, a, d);
        c.translateTo(d);
        this.actionFeedback.setBoundingBox(c)
    }
};
JSG.graph.interaction.MoveInteraction.prototype.updateFeedback = function (a, b, c) {
    c = this.getSnapRect(b);
    c = this.getSnapAndGridOffset(b, a, c);
    this._updateFeedback(a, b, c)
};
JSG.graph.interaction.MoveInteraction.prototype._updateFeedback = function (a, b, c) {
    function d(a, b) {
        if (a) {
            var c, d = a.getOriginal ? a.getOriginal().getId() : a.getId();
            for (c = 0; c < b.length; c++)if (b[c].getOriginalItem().getId() === d)return !0
        }
        return !1
    }

    function e(a, b) {
        var c = a.getFeedbackItem();
        if (c.hasSourceAttached()) {
            var e = c.getSourcePort().getParent();
            d(e, b) || a.detachFromSource()
        }
        c.hasTargetAttached() && (c = c.getTargetPort().getParent(), d(c, b) || a.detachFromTarget())
    }

    var f, g, k = new JSG.geometry.Point(0, 0);
    f = 0;
    for (g =
             this.feedback.length; f < g; f++) {
        var h = this.feedback[f], m = h.isMoveable(), l = h.getOriginalItem().getTranslatedPoint(h.getOriginalItem().getOrigin(), b.getGraph()), k = h.getOrigin(k), p = this.adjustOffset(c, h.getOriginalItem(), b, a);
        (m & JSG.graph.attr.consts.Moveable.BOTH) === JSG.graph.attr.consts.Moveable.BOTH ? (k.x = l.x + p.x, k.y = l.y + p.y) : m & JSG.graph.attr.consts.Moveable.VERTICAL ? (k.x = l.x, k.y = l.y + p.y) : m & JSG.graph.attr.consts.Moveable.HORIZONTAL && (k.x = l.x + p.x, k.y = l.y);
        h.getFeedbackItem()instanceof JSG.graph.model.Edge &&
        e(h, this.feedback);
        h.setOriginTo(k)
    }
};
JSG.graph.interaction.MoveInteraction.prototype.updateSubFeedbacks = function (a, b, c) {
    if (this.isCopyOnMoveEvent(a))for (a = 0; a < c.length; a++)c[a].getFeedbackItem().setItemAttribute(JSG.graph.attr.ItemAttributes.VISIBLE, !1)
};
JSG.graph.interaction.MoveInteraction.prototype.onMouseDrag = function (a, b) {
    function c(a, b, c) {
        var d = a.getNodes();
        for (a = 0; a < d.length; a++)d[a]._node === b && (d[a]._nodefb = c)
    }

    function d(a, b, c) {
        var d = a.getEdges();
        for (a = 0; a < d.length; a++)d[a]._edge === b && (d[a]._edgefb = c)
    }

    var e, f, g;
    b.clearLayer(JSG.graph.view.LayerId.LAYOUTMARKER);
    b.clearLayer(JSG.graph.view.LayerId.TARGETCONTAINER);
    b.clearLayer(JSG.graph.view.LayerId.SNAPLINES);
    this._horizontalSnapController = this._verticalSnapController = void 0;
    if (!0 !== this._notifyDelegate("highlightTargetController",
            a, b) && (!(f = this.findTargetController(a, b)) || f instanceof JSG.graph.controller.GraphController || (JSG.graph.interaction.InteractionUtils.highlightTargetController(b, f), ((e = this.findLayoutIndex(b, f, !0)) || 0 === e) && JSG.graph.interaction.InteractionUtils.highlightControllerLayoutPosition(e, b, f)), b.getGraphSettings().getSnapToShapes() && this.feedback.length && !a.event.altKey)) {
        var k = b.getSelection();
        e = 0;
        for (f = k.length; e < f && (k[e].getModel().getItemAttributes().getMoveable().getValue() & JSG.graph.attr.consts.Moveable.BOTH) ===
        JSG.graph.attr.consts.Moveable.BOTH; e++);
        e === f && (f = this.currentLocation.copy(), f.subtract(this.startLocation), e = b.getSelectionView().getBoundingBox().getBoundingRectangle(), e.translate(f.x, f.y), JSG.graph.interaction.InteractionUtils.highlightSnapItemofController(this, e, a.event.altKey))
    }
    a.doRepaint = !0;
    this.setCursor(JSG.ui.Cursor.Style.MOVE);
    JSG.graph.interaction.MoveInteraction._super.onMouseDrag.call(this, a, b);
    if ((f = this.findTargetController(a, b)) && f instanceof JSG.graph.controller.GraphController)if (f =
            f.graph, k = f.getLayoutAttributes(), k.getAutoLayout().getValue()) {
        if (e = k.getLayouter())if (k = k.getConstraints(), g = JSG.layoutFactory.getLayoutModel(f, k)) {
            var h = g.getNodes();
            for (f = 0; f < h.length; f++)h[f].fixed = !0;
            for (f = 0; f < this.feedback.length; f++)this.feedback[f]._orgItem instanceof JSG.graph.model.Node ? c(g, this.feedback[f]._orgItem, this.feedback[f]._fbItem) : this.feedback[f]._orgItem instanceof JSG.graph.model.Edge && d(g, this.feedback[f]._orgItem, this.feedback[f]._fbItem);
            this._subfeedbacks && this._subfeedbacks.iterate(function (a,
                                                                       b) {
                b._orgItem instanceof JSG.graph.model.Node ? c(g, b._orgItem, b._fbItem) : b._orgItem instanceof JSG.graph.model.Edge && d(g, b._orgItem, b._fbItem)
            });
            e.layout(g, k)
        }
    } else if (g = JSG.layoutFactory.getLayoutModel(f, void 0)) {
        e = g.getNodes();
        for (f = 0; f < e.length; f++)e[f].fixed = !0, e[f].fbonly = !0;
        e = g.getEdges();
        for (f = 0; f < e.length; f++)e[f].fbonly = !0;
        for (f = 0; f < this.feedback.length; f++)this.feedback[f]._orgItem instanceof JSG.graph.model.Node ? c(g, this.feedback[f]._orgItem, this.feedback[f]._fbItem) : this.feedback[f]._orgItem instanceof
        JSG.graph.model.Edge && d(g, this.feedback[f]._orgItem, this.feedback[f]._fbItem);
        this._subfeedbacks && this._subfeedbacks.iterate(function (a, b) {
            b._orgItem instanceof JSG.graph.model.Node ? c(g, b._orgItem, b._fbItem) : b._orgItem instanceof JSG.graph.model.Edge && d(g, b._orgItem, b._fbItem)
        });
        ARAC.layout.apply(g, void 0, ARAC.layout.defaultConfigStore ? ARAC.layout.defaultConfigStore.get("Edge-StoreData") : void 0)
    }
};
JSG.graph.interaction.MoveInteraction.prototype.findTargetController = function (a, b) {
    if (b.getDefaultController())return b.getDefaultController();
    var c = b.getSelection();
    if (c.length) {
        var d, e = c[0].getParent();
        for (d = 0; d < c.length; d++) {
            var f = c[d];
            if (f.getParent() !== e || (!this._isMoveable(f, b) || f.getModel()instanceof JSG.graph.model.TextNode) || c[d].getModel().getItemAttributes().getMoveable().getValue() & JSG.graph.attr.consts.Moveable.LIMITTOCONTAINER)return
        }
        var g = this.isCopyOnMoveEvent(a), k = b.getRootController().getContent();
        (c = b.findControllerAt(a.location.copy(), JSG.graph.controller.FindFlags.AREA, function (a) {
            var c;
            if (!a.getModel().isContainer() || !a.getModel().isVisible() || a instanceof JSG.graph.controller.GraphController || a instanceof JSG.graph.controller.ConnectionController || a instanceof JSG.graph.controller.PortController)return !1;
            var d = b.getSelection();
            for (c = 0; c < d.length; c++) {
                if (!JSG.graphItemFactory.isValidSubItem(d[c].getModel(), a.getModel().getType().getValue()))return !1;
                if (a === d[c])return k = a.getParent(), !1;
                if (!g)for (var e = a.getParent(); e && !(e instanceof JSG.graph.controller.GraphController);) {
                    if (e === d[c])return k = e.getParent(), !1;
                    e = e.getParent()
                }
            }
            return !0
        })) ? c instanceof JSG.graph.controller.ContentNodeController && (c = c.getContentPaneController()) : c = k;
        return c
    }
};
JSG.graph.interaction.MoveInteraction.prototype._isMoveable = function (a, b) {
    var c = a.getModel();
    return c.getItemAttributes().getMoveable().getValue() === JSG.graph.attr.consts.Moveable.NONE ? c instanceof JSG.graph.model.Edge ? this.isMoved(c.sourceNode, b) && this.isMoved(c.targetNode, b) : !1 : !0
};
JSG.graph.interaction.MoveInteraction.prototype.findLayoutIndex = function (a, b, c) {
    if (b) {
        var d = a.getSelection();
        return d.length ? JSG.layoutFactory.getLayoutIndex(this.currentLocation.copy(), a, b, d[0].getModel().getType().getValue(), c, !1) : void 0
    }
};
JSG.graph.interaction.MoveInteraction.prototype.onMouseExit = function (a, b) {
    this._failed = !0;
    this.cancelInteraction(a, b)
};
JSG.graph.interaction.MoveInteraction.prototype.onMouseUp = function (a, b) {
    JSG.graph.interaction.MoveInteraction._super.onMouseUp.call(this, a, b);
    !0 !== this._failed || a.isConsumed || this.getInteractionHandler().handleMouseEvent(a)
};
JSG.graph.interaction.MoveInteraction.prototype.willFinish = function (a, b, c) {
    if (this._keyOffset)this._handleMouseUp(b, this._keyOffset, a); else {
        var d = this.getSnapRect(b, JSG.rectCache.get()), e = this.getSnapAndGridOffset(b, a, d, JSG.ptCache.get()), f = b.getCoordinateSystem().metricToLogXNoZoom(JSG.graph.interaction.MoveInteraction.MOVE_THRESHOLD);
        Math.abs(c.x) < f && Math.abs(c.y) < f ? this._failed = !0 : this._handleMouseUp(b, e, a);
        JSG.ptCache.release(e);
        JSG.rectCache.release(d)
    }
};
JSG.graph.interaction.MoveInteraction.prototype.isCopyOnMoveEvent = function (a) {
    return a && (a.event.ctrlKey && !a.event.altKey) && !this._keyOffset
};
JSG.graph.interaction.MoveInteraction.prototype.isMoveHVEvent = function (a) {
    return a && a.event.shiftKey && this._keyOffset
};
JSG.graph.interaction.MoveInteraction.prototype._handleMouseUp = function (a, b, c) {
    function d(a, b) {
        var c, d = a.getId();
        for (c = 0; c < b.length; c++) {
            var e = b[c];
            if (e.getOriginalItem().getId() === d)return e
        }
    }

    function e(a) {
        var b, c = new JSG.geometry.Point(0, 0);
        for (b = 0; b < a.length; b++) {
            var d = a[b].getOriginalItem();
            d.sourceNode === d.targetNode && (c = a[b].getFeedbackItem().getOrigin(c), JSG.graph.Utils.translatePointDown(c, d.getGraph(), d.getParent()), f.push(new JSG.graph.command.MoveItemCommand(d, c)))
        }
    }

    var f, g, k, h, m = this.getInteractionHandler();
    if (m)if (g = this._notifyDelegate("createCommand", c, a))m.execute(g), this._notifyDelegate("setSelection", c, a); else {
        var l, p = this.isCopyOnMoveEvent(c);
        if (!this._keyOffset) {
            (h = this.findTargetController(c, a)) && (l = this.findLayoutIndex(a, h, !1, !1));
            var n = this._notifyDelegate("allowCopyOnMove", c, a);
            if (p && !1 !== n) {
                (b = this._notifyDelegate("createCopyOnMoveCommand", h, c, a)) ? m.execute(b) : (b = JSG.copyItems(a.getSelection()), l = this.getSnapRect(a), g = this.getSnapAndGridOffset(a, c, l), a = new JSG.graph.command.PasteItemsCommand(b,
                    a, h, g), m.execute(a));
                return
            }
        }
        var q, r = [], n = [], t = [], u = !1;
        f = [];
        k = a.getSelection();
        for (q = 0; q < k.length; q++) {
            var w = k[q], v = w.getModel();
            this._isMoveable(w, a) && (v instanceof JSG.graph.model.LineConnection ? (u = !0, g = this.adjustOffset(b, v, a, c), this._moveConnectionCmd(f, g, w, d(v, this.feedback), h, c, a)) : (r.push(w), t.push(d(v, this.feedback))));
            n.push(v)
        }
        this._subfeedbacks.isEmpty() || p || e(this._subfeedbacks.elements());
        for (q = 0; q < r.length; q++)g = this.adjustOffset(b, k[q].getModel(), a, c), this._moveItemCmd(f, g, r[q], t[q],
            h, c, a);
        if (l || 0 === l)l.before ? f.push(new JSG.graph.command.ChangeItemOrderCommand(k[0], l.index)) : f.push(new JSG.graph.command.ChangeItemOrderCommand(k[0], l.index + 1));
        g = this._createCommand(f, u);
        g instanceof JSG.graph.command.CompoundCommand && g.disableRefresh(!0);
        m.execute(g);
        var m = a.getSelectionProvider(), y = a.getRootController().getContent();
        k = [];
        n.forEach(function (a) {
            (a = y.getControllerByModelId(a.getId())) && k.push(a)
        });
        m.selectAll(k);
        a.onSelectionChanged()
    }
};
JSG.graph.interaction.MoveInteraction.prototype.adjustOffset = function (a, b, c, d) {
    a = a.copy();
    this.isMoveHVEvent(d) && (Math.abs(this.currentLocation.x - this.startLocation.x) > Math.abs(this.currentLocation.y - this.startLocation.y) ? a.y = 0 : a.x = 0);
    d = b.getItemAttributes().getMoveable().getValue();
    (d & JSG.graph.attr.consts.Moveable.BOTH) !== JSG.graph.attr.consts.Moveable.BOTH && (d & JSG.graph.attr.consts.Moveable.VERTICAL ? a.x = 0 : d & JSG.graph.attr.consts.Moveable.HORIZONTAL && (a.y = 0));
    if (d & JSG.graph.attr.consts.Moveable.LIMITTOCONTAINER) {
        var e,
            f;
        e = b.getTranslatedBoundingBox(c.getGraph());
        f = b.getParent().getTranslatedBoundingBox(c.getGraph());
        b = f.getPoints();
        c = e.getPoints();
        var g = f.getCenter().add(f.getTopLeft());
        for (e = 0; 4 > e; e++)c[e].translate(a.x, a.y);
        for (e = 0; 4 > e; e++) {
            var k = this.getLinePolylineOffset(c[e], g, b, !1);
            if (k) {
                for (f = 0; 4 > f; f++)c[f].translate(-Math.round(k.x), -Math.round(k.y));
                d & JSG.graph.attr.consts.Moveable.HORIZONTAL && (a.x -= Math.round(k.x));
                d & JSG.graph.attr.consts.Moveable.VERTICAL && (a.y -= Math.round(k.y))
            }
        }
    }
    return a
};
JSG.graph.interaction.MoveInteraction.prototype.getLinePolylineOffset = function (a, b, c, d) {
    var e, f, g = new JSG.geometry.Point(0, 0);
    e = 0;
    for (f = c.length; e < f; e++)if (e === f - 1) {
        if (JSG.geometry.Utils.getIntersectionOfLines(c[e], c[0], a, b, g, d))return JSG.geometry.Utils.getLinePointOffset(c[e], c[0], a)
    } else if (JSG.geometry.Utils.getIntersectionOfLines(c[e], c[e + 1], a, b, g, d))return JSG.geometry.Utils.getLinePointOffset(c[e], c[e + 1], a)
};
JSG.graph.interaction.MoveInteraction.prototype._moveItemCmd = function (a, b, c, d, e, f, g) {
    function k(a) {
        a.translateFromParent(m);
        h -= a.getAngle()
    }

    var h, m;
    if (d) {
        b = c.getModel();
        f = d.getFeedbackItem();
        g = g.rootController.getView();
        var l = e ? e.getView() : c.getView().getParent();
        h = d.getAngle();
        m = f.getPinPoint();
        JSG.graph.Utils.traverseDown(g, l, k);
        e && c.getParent() !== e && (a.push(new JSG.graph.command.ChangeParentCommand(b, e.getModel())), (c = h - b.getAngle().getValue()) && a.push(new JSG.graph.command.RotateItemCommand(b,
            c)));
        a.push(new JSG.graph.command.MoveItemCommand(b, m))
    }
};
JSG.graph.interaction.MoveInteraction.prototype._moveConnectionCmd = function (a, b, c, d, e, f, g) {
    var k = c.getModel();
    c.isAttached() && (k.sourceNode && (this.isMoved(k.sourceNode, g) || a.push(new JSG.graph.command.DetachCommand(k, k.getSourcePort()))), k.targetNode && (this.isMoved(k.targetNode, g) || a.push(new JSG.graph.command.DetachCommand(k, k.getTargetPort()))));
    this._moveItemCmd(a, b, c, d, e, f, g)
};
JSG.graph.interaction.MoveInteraction.prototype.isMoved = function (a, b) {
    for (var c = !1; a && !(c = b.isSelected(a));)a = a.getParent();
    return c
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.RotateInteraction = function () {
    JSG.graph.interaction.RotateInteraction._super.constructor.apply(this, arguments);
    this._selectionpin = void 0;
    this._rotation = this._lastRotationAngle = 0
};
JSG.extend(JSG.graph.interaction.RotateInteraction, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.RotateInteraction.prototype._ROTATION_STEP = 5;
JSG.graph.interaction.RotateInteraction.prototype.deactivate = function (a) {
    this._selectionpin = void 0;
    this._lastRotationAngle = 0;
    a.getSelectionView().setVisible(!0);
    JSG.graph.interaction.RotateInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.RotateInteraction.prototype.onRotateStart = function (a, b) {
    this.onMouseDown(a, b)
};
JSG.graph.interaction.RotateInteraction.prototype.onRotateEnd = function (a, b) {
    this.onMouseUp(a, b)
};
JSG.graph.interaction.RotateInteraction.prototype.onMouseDown = function (a, b) {
    var c = b.getSelectionView();
    this._selectionpin = c.getPinPoint();
    c.setVisible(!1);
    JSG.graph.interaction.RotateInteraction._super.onMouseDown.call(this, a, b)
};
JSG.graph.interaction.RotateInteraction.prototype.createActionFeedback = function (a, b) {
    var c = new JSG.graph.view.SelectionFeedbackView(8), d = b.getSelectionView();
    c.setBoundingBox(d.getBoundingBox());
    return c
};
JSG.graph.interaction.RotateInteraction.prototype.updateActionFeedback = function (a, b) {
    this.actionFeedback && (this._rotation && this.feedback.length) && this.actionFeedback._box.rotateAroundPoint(this._selectionpin, this._rotation)
};
JSG.graph.interaction.RotateInteraction.prototype.updateFeedback = function (a, b, c) {
    c = 0;
    c = a.type === JSG.ui.events.GestureEventType.ROTATE ? JSG.geometry.Utils.toRadians(a.gesture.rotation) : JSG.geometry.Utils.getAngleBetweenLines(this.startLocation, this.currentLocation, this._selectionpin);
    var d = c - this._lastRotationAngle;
    b.getGraphSettings().getSnapToGrid() && !a.event.altKey && (c = Math.floor(JSG.geometry.Utils.toDegrees(c)), c = Math.floor(c / this._ROTATION_STEP) * this._ROTATION_STEP, c = JSG.geometry.Utils.toRadians(c),
        d = c - this._lastRotationAngle);
    a = 0;
    for (b = this.feedback.length; a < b; a++)this.feedback[a].isRotatable() && d && (this.feedback[a].rotate(d, this._selectionpin), JSG.debug.log("item rotate: " + d));
    this._rotation = d;
    this._lastRotationAngle = c
};
JSG.graph.interaction.RotateInteraction.prototype.willFinish = function (a, b, c) {
    a = this._lastRotationAngle;
    if (c = this.getInteractionHandler()) {
        var d = b.getSelection(), e = b.getSelectionView(), f = e.isSingleSelection() ? void 0 : this._selectionpin, g = [], k = [], h;
        for (h = 0; h < d.length; h++)d[h].getModel().isRotatable() && (d[h]instanceof JSG.graph.controller.ConnectionController ? g.push(this._rotateConnectionCmd(d[h], a, f, b)) : k.push(d[h]));
        for (h = 0; h < k.length; h++)g.push(this._rotateItemCmd(k[h], a, f, b));
        b = this._createCommand(g);
        b._rotangle = e.getRotationAngle() + a;
        c.execute(b, this.executed)
    }
};
JSG.graph.interaction.RotateInteraction.prototype._rotateItemCmd = function (a, b, c, d) {
    a = a.getModel();
    c = this._translatePin(c, a);
    return new JSG.graph.command.RotateItemCommand(a, b, c)
};
JSG.graph.interaction.RotateInteraction.prototype._rotateConnectionCmd = function (a, b, c, d) {
    a = a.getModel();
    c = this._translatePin(c, a);
    return new JSG.graph.command.RotateItemCommand(a, b, c)
};
JSG.graph.interaction.RotateInteraction.prototype._translatePin = function (a, b) {
    a && (a = a.copy(), JSG.graph.Utils.traverseItemDown(b.getGraph(), b.getParent(), function (b) {
        b.translateFromParent(a)
    }));
    return a
};
JSG.graph.interaction.RotateInteraction.prototype.executed = function (a, b) {
    var c = b.getSelectionView();
    c.setRotationAngle(a._rotangle);
    c.setSelection(b.getSelection())
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.ReshapeInteraction = function (a) {
    JSG.graph.interaction.ReshapeInteraction._super.constructor.apply(this, arguments);
    this._activeHandle = a
};
JSG.extend(JSG.graph.interaction.ReshapeInteraction, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.ReshapeInteraction.prototype.deactivate = function (a) {
    var b = a.getSelectionView();
    b.refresh();
    b.setVisible(!0);
    this._activeHandle = void 0;
    JSG.graph.interaction.ReshapeInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.ReshapeInteraction.prototype.onMouseDown = function (a, b) {
    b.getSelectionView().setVisible(!1);
    JSG.graph.interaction.ReshapeInteraction._super.onMouseDown.call(this, a, b)
};
JSG.graph.interaction.ReshapeInteraction.prototype.createActionFeedback = function (a, b) {
    var c = this._activeHandle;
    if (c) {
        var d = new JSG.graph.view.SelectionFeedbackView(9), e = b.getSelectionView();
        d.setBoundingBox(e.getBoundingBox());
        c = c.getPointIndex();
        if (0 <= c) {
            b.getSelection()[0].getModel();
            var f = new JSG.geometry.Point(0, 0);
            e._selectionHandler._reshapeMarkers[c]._coordinate.toPoint(f);
            d.setPoint(f)
        }
        return d
    }
};
JSG.graph.interaction.ReshapeInteraction.prototype.updateActionFeedback = function (a, b) {
    if (this.actionFeedback) {
        var c = this._activeHandle.getPointIndex();
        if (0 <= c) {
            var d = b.getSelectionView(), e = b.getSelection()[0].getModel(), f = d._selectionHandler._reshapeMarkers[c]._coordinate, g = new JSG.graph.expr.Reference(this, JSG.graph.properties.GraphItemProperties.WIDTH, e), k = new JSG.graph.expr.Reference(this, JSG.graph.properties.GraphItemProperties.HEIGHT, e), h, m, l = new JSG.geometry.Point(0, 0);
            l.setTo(this.currentLocation);
            l.subtract(this.startLocation);
            e = this.getReshapeValues(l, e);
            l = JSG.graph.expr.Term;
            h = e.x;
            m = e.y;
            switch (f.getType()) {
                case JSG.graph.ReshapeType.XRELATIVETOWIDTH:
                    f = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(g.copy()), l.fromNumber(h)));
                    k = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(k.copy()), l.fromNumber(m)));
                    break;
                case JSG.graph.ReshapeType.XRELATIVETOWIDTHFROMRIGHT:
                    f = new l.Mul(l.fromReference(g.copy()), l.fromNumber(h));
                    f = new JSG.graph.expr.Expression(0, void 0,
                        new l.Sub(l.fromReference(g.copy()), f));
                    k = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(k.copy()), l.fromNumber(m)));
                    break;
                case JSG.graph.ReshapeType.XRELATIVETOHEIGHT:
                    f = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(k.copy()), l.fromNumber(h)));
                    k = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(k.copy()), l.fromNumber(m)));
                    break;
                case JSG.graph.ReshapeType.XRELATIVETOHEIGHTFROMRIGHT:
                    f = new l.Mul(l.fromReference(k.copy()), l.fromNumber(h));
                    f = new JSG.graph.expr.Expression(0,
                        void 0, new l.Sub(l.fromReference(g.copy()), f));
                    k = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(k.copy()), l.fromNumber(m)));
                    break;
                case JSG.graph.ReshapeType.YRELATIVETOHEIGHT:
                    f = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(g.copy()), l.fromNumber(h)));
                    k = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(k.copy()), l.fromNumber(m)));
                    break;
                case JSG.graph.ReshapeType.YRELATIVETOHEIGHTFROMBOTTOM:
                    f = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(g.copy()),
                        l.fromNumber(h)));
                    g = new l.Mul(l.fromReference(k.copy()), l.fromNumber(m));
                    k = new JSG.graph.expr.Expression(0, void 0, new l.Sub(l.fromReference(k.copy()), g));
                    break;
                case JSG.graph.ReshapeType.YRELATIVETOWIDTH:
                    f = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(g.copy()), l.fromNumber(h)));
                    k = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(g.copy()), l.fromNumber(m)));
                    break;
                case JSG.graph.ReshapeType.YRELATIVETOWIDTHFROMBOTTOM:
                    f = new JSG.graph.expr.Expression(0, void 0, new l.Mul(l.fromReference(g.copy()),
                        l.fromNumber(h)));
                    g = new l.Mul(l.fromReference(g.copy()), l.fromNumber(m));
                    k = new JSG.graph.expr.Expression(0, void 0, new l.Sub(l.fromReference(k.copy()), g));
                    break;
                default:
                    f = new JSG.graph.expr.NumberExpression(h), k = new JSG.graph.expr.NumberExpression(m)
            }
            d._selectionHandler._reshapeMarkers[c]._coordinate.set(f, k);
            d._selectionHandler._reshapeMarkers[c]._coordinate.toPoint(e);
            this.actionFeedback.setPoint(e)
        }
    }
};
JSG.graph.interaction.ReshapeInteraction.prototype.updateFeedback = function (a, b, c) {
    a = this._activeHandle.getPointIndex();
    0 <= a && (b = b.getSelection()[0].getModel(), c = b.getReshapeCoordinateAt(a), c.getX().getValue(), c.getY().getValue(), c = new JSG.geometry.Point(0, 0), c.setTo(this.currentLocation), c.subtract(this.startLocation), b = this.getReshapeValues(c, b), this.feedback[0] && this.feedback[0].updateReshapePoint(a, b))
};
JSG.graph.interaction.ReshapeInteraction.prototype.createCommand = function (a, b) {
    var c = b.getModel(), d = this.getReshapeValues(a, c), e = this._activeHandle;
    return 0 > e.getPointIndex() ? void 0 : new JSG.graph.command.ReshapeItemCommand(c, e.getPointIndex(), d)
};
JSG.graph.interaction.ReshapeInteraction.prototype.getReshapeValues = function (a, b) {
    var c = new JSG.geometry.Point(0, 0), d = this._activeHandle;
    if (0 > d.getPointIndex())return c.set(0, 0), c;
    var e = b.getBoundingBox(JSG.boxCache.get()), d = b.getReshapeCoordinateAt(d.getPointIndex());
    c.set(d.getX().getValue(), d.getY().getValue());
    d.getType() === JSG.graph.ReshapeType.XRELATIVETOWIDTH ? c.x += 0 !== e.getWidth() ? a.x / e.getWidth() : 0 : d.getType() === JSG.graph.ReshapeType.XRELATIVETOWIDTHFROMRIGHT ? c.x -= 0 !== e.getWidth() ? a.x / e.getWidth() :
        0 : d.getType() === JSG.graph.ReshapeType.XRELATIVETOHEIGHT ? c.x += 0 !== e.getHeight() ? a.x / e.getHeight() : 0 : d.getType() === JSG.graph.ReshapeType.XRELATIVETOHEIGHTFROMRIGHT ? c.x -= 0 !== e.getHeight() ? a.x / e.getHeight() : 0 : c.x += a.x;
    c.x = Math.min(d.getXMax(), c.x);
    c.x = Math.max(d.getXMin(), c.x);
    d.getType() === JSG.graph.ReshapeType.YRELATIVETOHEIGHT ? c.y += 0 !== e.getHeight() ? a.y / e.getHeight() : 0 : d.getType() === JSG.graph.ReshapeType.YRELATIVETOHEIGHTFROMBOTTOM ? c.y -= 0 !== e.getHeight() ? a.y / e.getHeight() : 0 : d.getType() === JSG.graph.ReshapeType.YRELATIVETOWIDTH ?
        c.y += 0 !== e.getWidth() ? a.y / e.getWidth() : 0 : d.getType() === JSG.graph.ReshapeType.YRELATIVETOWIDTHFROMBOTTOM ? c.y -= 0 !== e.getHeight() ? a.y / e.getHeight() : 0 : c.y += a.y;
    c.y = Math.min(d.getYMax(), c.y);
    c.y = Math.max(d.getYMin(), c.y);
    JSG.boxCache.release(e);
    return c
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.ResizeInteraction = function (a) {
    JSG.graph.interaction.ResizeInteraction._super.constructor.apply(this, arguments);
    this._activeHandle = a;
    this._selectionbox = this._fbStructures = void 0
};
JSG.extend(JSG.graph.interaction.ResizeInteraction, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.ResizeInteraction.prototype.deactivate = function (a) {
    a.getSelectionView().setVisible(!0);
    this._activeHandle = this._fbStructures = this._selectionbox = void 0;
    JSG.graph.interaction.ResizeInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.ResizeInteraction.prototype.onMouseDown = function (a, b) {
    this._fbStructures = new JSG.commons.Map;
    this._selectionbox = new JSG.geometry.BoundingBox(0, 0);
    b.getSelectionView().getBoundingBox(this._selectionbox);
    b.getSelectionView().setVisible(!1);
    JSG.graph.interaction.ResizeInteraction._super.onMouseDown.call(this, a, b)
};
JSG.graph.interaction.ResizeInteraction.prototype.createActionFeedback = function (a, b) {
    var c = this._activeHandle;
    if (c)return c = new JSG.graph.view.SelectionFeedbackView(c.getPointIndex()), c.setBoundingBox(this._selectionbox), c
};
JSG.graph.interaction.ResizeInteraction.prototype.updateActionFeedback = function (a, b) {
    this.actionFeedback && this._selectionbox && this.actionFeedback.setBoundingBox(this._selectionbox)
};
JSG.graph.interaction.ResizeInteraction.prototype._createSelectionFeedback = function (a, b) {
    var c = JSG.graph.interaction.ResizeInteraction._super._createSelectionFeedback.call(this, a, b);
    c.initResize(this._selectionbox);
    c.getFeedbackItem()instanceof JSG.graph.model.TextNode && c.getFeedbackItem().getItemAttributes().setSizeMode(JSG.graph.attr.TextNodeAttributes.SizeMode.WIDTH);
    var d = a.getView();
    this._fbStructures.put(d.getId(), new JSG.graph.interaction.ResizeInteraction.FeedbackStructure(c, this._selectionbox));
    return c
};
JSG.graph.interaction.ResizeInteraction.prototype.updateFeedback = function (a, b, c) {
    function d(c, d, f) {
        var m = new JSG.geometry.Point(0, 0), l = e.alignToGrid(e.currentLocation, b, a.event.altKey, new JSG.geometry.Point(0, 0));
        c.setTo(l);
        c.subtract(f.getTopLeft(m));
        f.rotateLocalPointInverse(c);
        m = f.getSize(m);
        l = f.getTopLeft(new JSG.geometry.Point(0, 0));
        switch (d) {
            case 0:
                l.add(c);
                f.rotatePoint(l);
                f.setTopLeftTo(l);
                c.multiply(-1);
                c.add(m);
                break;
            case 1:
                l.set(l.x, l.y + c.y);
                f.rotatePoint(l);
                f.setTopLeftTo(l);
                c.set(m.x,
                    m.y - c.y);
                break;
            case 2:
                l.set(l.x, l.y + c.y);
                f.rotatePoint(l);
                f.setTopLeftTo(l);
                c.set(c.x, m.y - c.y);
                break;
            case 3:
                c.y = m.y;
                break;
            case 5:
                c.x = m.x;
                break;
            case 6:
                l.set(l.x + c.x, l.y);
                f.rotatePoint(l);
                f.setTopLeftTo(l);
                c.set(m.x - c.x, c.y);
                break;
            case 7:
                l.set(l.x + c.x, l.y), f.rotatePoint(l), f.setTopLeftTo(l), c.set(m.x - c.x, m.y)
        }
        e._selectionbox.setSizeTo(c)
    }

    var e = this, f = this._activeHandle;
    0 <= f.getPointIndex() && (d(c, f.getPointIndex(), this._selectionbox), this._fbStructures.iterate(function (a, b) {
        b.update(e._selectionbox)
    }))
};
JSG.graph.interaction.ResizeInteraction.prototype.createCommand = function (a, b) {
    function c(a, b) {
        var c = a.getView(), d = a.getModel(), e = b.getPoints();
        e.forEach(function (a) {
            JSG.graph.Utils.traverseDown(c.getGraphView(), c.getParent(), function (b) {
                b.translateFromParent(a);
                return !0
            })
        });
        return new JSG.graph.command.SetLineShapePointsCommand(d, e)
    }

    var d = b.getView(), e = this._fbStructures.get(d.getId());
    if (e) {
        if (e.feedback instanceof JSG.graph.feedback.EdgeFeedback)return c(b, e.feedback);
        var e = e.feedback.getBoundingBox(JSG.boxCache.get()),
            f = d.getParent(), g = e.getTopLeft(), k = b.getViewer().rootController.getView();
        JSG.graph.Utils.traverseDown(k, f, function (a) {
            a.translateFromParent(g);
            return !0
        });
        e.setTopLeftTo(g);
        e.setAngle(d.getAngle());
        d = new JSG.graph.command.ResizeItemCommand(d._item, e);
        JSG.boxCache.release(e);
        return d
    }
};
JSG.graph.interaction.ResizeInteraction.FeedbackStructure = function (a, b) {
    function c(a) {
        a.subtract(f);
        b.rotateLocalPointInverse(a);
        a.set(a.x / e.x, a.y / e.y);
        return a
    }

    var d, e, f;
    this.feedback = a;
    d = a.getBoundingBox();
    e = b.getSize();
    f = b.getTopLeft();
    this._bbox = d.copy();
    this._topleftfactor = c(d.getTopLeft());
    this._bottomrightfactor = c(d.getBottomRight())
};
JSG.graph.interaction.ResizeInteraction.FeedbackStructure.prototype.update = function (a) {
    function b(b, d) {
        d.set(b.x * c.x, b.y * c.y);
        a.rotateLocalPoint(d);
        d.add(g);
        return d
    }

    var c, d, e, f, g;
    this.feedback.resize(a);
    c = a.getSize();
    g = a.getTopLeft();
    d = this.feedback.getFeedbackItem();
    e = b(this._topleftfactor, new JSG.geometry.Point(0, 0));
    f = b(this._bottomrightfactor, new JSG.geometry.Point(0, 0));
    this.feedback.getItemAttributes().getSizeable().getValue() && (this._bbox.setTopLeftTo(e), this._bbox.setBottomRightTo(f), d.setBoundingBoxTo(this._bbox),
        d.refresh())
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.ResizeEdgeInteraction = function (a) {
    JSG.graph.interaction.ResizeEdgeInteraction._super.constructor.apply(this, arguments);
    this._activeHandle = a;
    this._dragIndex = -1;
    this._dragMaskIndex = 0;
    this._target = this._portFeedback = void 0
};
JSG.extend(JSG.graph.interaction.ResizeEdgeInteraction, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.ResizeEdgeInteraction.prototype.deactivate = function (a) {
    this._activeHandle = void 0;
    this._dragIndex = -1;
    this._dragMaskIndex = 0;
    this._target = this._portFeedback = void 0;
    JSG.graph.interaction.ResizeEdgeInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.draggedSourceOrTarget = function () {
    return 1 === this._dragMaskIndex || 2 === this._dragMaskIndex
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.draggedSource = function () {
    return 1 === this._dragMaskIndex
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.draggedTarget = function () {
    return 2 === this._dragMaskIndex
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.createActionFeedback = function (a, b) {
    var c = new JSG.graph.view.PositionFeedbackView, d = a.location.copy();
    b.translateFromParent(d);
    c.setPosition(d);
    return c
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.updateActionFeedback = function (a, b) {
    if (this.actionFeedback) {
        var c = a.location.copy();
        b.translateFromParent(c);
        this.actionFeedback.setPosition(c)
    }
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype._createSelectionFeedback = function (a, b) {
    this._dragIndex = this._activeHandle.getPointIndex();
    var c = a.getModel().getPointsCount();
    this._dragMaskIndex = 0 === this._dragIndex ? 1 : this._dragIndex === c - 1 ? 2 : 0;
    return JSG.graph.interaction.ResizeEdgeInteraction._super._createSelectionFeedback.call(this, a, b)
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.updateFeedback = function (a, b, c) {
    c = this.alignToGrid(this.currentLocation, b, a.event.altKey);
    this.feedback[0].setPointAt(this._dragIndex, c);
    this.showPossiblePortAt(a, b)
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.showPossiblePortAt = function (a, b) {
    var c, d;
    this._portFeedback = void 0;
    this.draggedSourceOrTarget() && (b.clearLayer(JSG.graph.view.LayerId.PORTS), c = JSG.graph.interaction.InteractionUtils.getPortsController(a, b)) && (c = JSG.graph.interaction.InteractionUtils.getPortsFor(c, this, a.event.altKey), d = b.getLayer(JSG.graph.view.LayerId.PORTS), JSG.Arrays.addAll(d, c), 1 === c.length && (this._portFeedback = c[0]));
    return this._portFeedback
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.createCommand = function (a, b, c, d) {
    return void 0 !== this._portFeedback ? (this._target = {}, this._target.node = this._portFeedback._model, this._target.port = this._portFeedback._model.getPortAtLocation(this._portFeedback._location), this._target.location = this._portFeedback._location.copy(), this._target.port || (this._target.port = new JSG.graph.model.Port, this._target.isNew = !0), this.createAttachCommand(b, this._target.port, c)) : this.draggedSourceOrTarget() && (a = b.getModel(),
        a = this.draggedSource() ? a.getSourcePort() : a.getTargetPort(), void 0 !== a) ? this.createDetachCommand(b, a, c) : this.createResizeCommand(b, this.currentLocation, c)
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.createAttachCommand = function (a, b, c) {
    function d(a, b) {
        var c = a.getAngle().getValue();
        JSG.graph.Utils.traverseItemUp(a.getParent(), b, function (a) {
            c += a.getAngle().getValue()
        });
        return c - a.getAngle().getValue()
    }

    var e, f = a.getModel(), g = f.getGraph(), k = this.draggedSource() ? f.getSourcePort() : f.getTargetPort();
    if (this._target.isNew || !k || k.getId() !== b.getId())e = new JSG.graph.command.CompoundCommand, k && e.add(new JSG.graph.command.DetachCommand(f, k)), this._target &&
    this._target.isNew && e.add(new JSG.graph.command.AddPortCommand(this._target.port, this._target.location, this._target.node)), k = this._target.location.copy(), JSG.graph.Utils.translatePointUp(k, this._target.node, g), e.add(this.createResizeCommand(a, k, c)), a = (a = JSG.graph.Utils.findCommonParent(f.getParent(), this._target.node.getParent(), g)) || g, a !== f.getParent() && (e.add(new JSG.graph.command.ChangeParentCommand(f, a)), (g = d(f, a)) && e.add(new JSG.graph.command.RotateItemCommand(f, g))), e.add(new JSG.graph.command.AttachCommand(f,
        b, this.draggedSource()));
    return e
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.createDetachCommand = function (a, b, c) {
    var d = new JSG.graph.command.CompoundCommand;
    b = new JSG.graph.command.DetachCommand(a.getModel(), b);
    a = this.createResizeCommand(a, this.currentLocation, c);
    d.add(b);
    d.add(a);
    return d
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.createResizeCommand = function (a, b, c) {
    var d = a.getViewer(), e = a.getView().getParent(), f = d.rootController.getView(), g = this.alignToGrid(b, d, c.event.altKey);
    JSG.graph.Utils.traverseDown(f, e, function (a) {
        a.translateFromParent(g)
    });
    return new JSG.graph.command.SetLinePointAtCommand(a.getModel(), this._dragIndex, g)
};
JSG.graph.interaction.ResizeEdgeInteraction.prototype.didFinish = function (a, b) {
    b.clearLayer(JSG.graph.view.LayerId.PORTS);
    JSG.graph.interaction.ResizeEdgeInteraction._super.didFinish.call(this, a, b)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.ResizeLineNodeInteraction = function (a) {
    JSG.graph.interaction.ResizeLineNodeInteraction._super.constructor.apply(this, arguments);
    this._dragIndex = a._pointIndex
};
JSG.extend(JSG.graph.interaction.ResizeLineNodeInteraction, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.ResizeLineNodeInteraction.prototype.updateFeedback = function (a, b, c) {
    a = this.alignToGrid(this.currentLocation, b, a.event.altKey, JSG.ptCache.get());
    b = this.feedback[0].getFeedbackItem();
    b.translateFromParent(a);
    b.getShape().setCoordinateAtToPoint(this._dragIndex, a);
    JSG.ptCache.release(a)
};
JSG.graph.interaction.ResizeLineNodeInteraction.prototype.createCommand = function (a, b, c, d) {
    var e = [], f = this.feedback[0].getFeedbackItem(), g = f.getShape().getCoordinates();
    b = b.getModel();
    this.updateFeedback(c, d, a);
    a = 0;
    for (c = g.length; a < c; a++)d = g[a].toPoint(), f.translateToParent(d), JSG.graph.Utils.translatePointDown(d, b.getGraph(), b), e.push(d);
    return new JSG.graph.command.SetShapePointsCommand(b, e)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.ResizeOrthoEdgeInteraction = function (a) {
    JSG.graph.interaction.ResizeOrthoEdgeInteraction._super.constructor.apply(this, arguments);
    this._delegate = void 0
};
JSG.extend(JSG.graph.interaction.ResizeOrthoEdgeInteraction, JSG.graph.interaction.ResizeEdgeInteraction);
JSG.graph.interaction.ResizeOrthoEdgeInteraction.prototype._createSelectionFeedback = function (a, b) {
    var c = JSG.ptCache.get().setTo(this.currentLocation), d = this._activeHandle.getPointIndex(), e = JSG.graph.interaction.ResizeOrthoEdgeInteraction._super._createSelectionFeedback.call(this, a, b), d = this._activeHandle.getPointIndex();
    -1 < d ? (this._delegate = this.createResizeDelegate(), this._delegate.initWith(e, d, c)) : (this._delegate = this.createAddPointsDelegate(), this._delegate.initWith(e, this._activeHandle._segmentIndex,
        c));
    JSG.ptCache.release(c);
    return e
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.prototype.updateFeedback = function (a, b, c) {
    c = this.alignToGrid(this.currentLocation.copy(), b, a.event.altKey);
    this.showPossiblePortAt(a, b);
    this._delegate.update(this.feedback[0], c)
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.prototype.showPossiblePortAt = function (a, b) {
    var c = JSG.graph.interaction.ResizeOrthoEdgeInteraction._super.showPossiblePortAt.call(this, a, b);
    void 0 !== c ? (this._delegate.hidePortFeedback(this.feedback[0]), this._delegate.showedPortFeedback(c, this.feedback[0], this.currentLocation)) : this._delegate.hidePortFeedback(this.feedback[0]);
    return c
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.prototype.createResizeDelegate = function () {
    return new JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate(this)
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.prototype.createAddPointsDelegate = function () {
    return new JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate(this)
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.prototype.createResizeCommand = function (a, b, c) {
    c = this.alignToGrid(b.copy(), a.getViewer(), c.event.altKey);
    this._delegate.update(this.feedback[0], c);
    return this._delegate.createCommandFrom(this.feedback[0], a, b, this._portFeedback)
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.prototype.willFinish = function (a, b, c) {
    this._delegate && this._delegate.createCommand(this.feedback[0]) && JSG.graph.interaction.ResizeOrthoEdgeInteraction._super.willFinish.call(this, a, b, c)
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.prototype.didFinish = function (a, b) {
    JSG.graph.interaction.ResizeOrthoEdgeInteraction._super.didFinish.call(this, a, b);
    this._delegate && (this._delegate.deactivate(), this._delegate = void 0)
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate = function (a) {
    this.dragIndex = -1;
    this.snaplinepoints = [];
    this._interaction = a
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.SNAP_THRESHOLD = 250;
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype.initWith = function (a, b, c) {
    function d(a, b) {
        if (0 <= a && a <= f) {
            var c = e.getPointAt(a);
            c.index = a;
            b.push(c)
        }
    }

    var e = a.getFeedbackItem(), f = e.getPointsCount() - 1;
    this.dragIndex = b;
    this._draggedSource = 0 === b;
    this._draggedTarget = b === f;
    0 === b ? (d(b + 1, this.snaplinepoints), d(b + 2, this.snaplinepoints)) : b === f ? (d(b - 1, this.snaplinepoints), d(b - 2, this.snaplinepoints)) : (d(b, this.snaplinepoints), d(b - 1, this.snaplinepoints), d(b, this.snaplinepoints), d(b + 1, this.snaplinepoints),
    0 <= b - 2 && (d(b - 1, this.snaplinepoints), d(b - 2, this.snaplinepoints)), b + 2 <= f && (d(b + 1, this.snaplinepoints), d(b + 2, this.snaplinepoints)), e.getLayoutAttributes().setLineBehavior(JSG.graph.attr.consts.LineBehavior.MANUAL));
    a.detachFromSource = function () {
    };
    a.detachFromTarget = function () {
    }
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype.update = function (a, b) {
    var c = a.getFeedbackItem(), d = c.getPointsCount() - 1, e = this._draggedSource ? 0 : this._draggedTarget ? d : this.dragIndex, f, g;
    1 === d && (d = 1 === d ? 1 : 0, f = c.getShape().disableRefresh(), c.insertPointsAt(d, c.getPointAt(e)), d = c.getPointsCount() - 1, !0 === f && c.getShape().enableRefresh());
    if (0 === e && c.hasSourceAttached())c.refresh(); else if (e === d && c.hasTargetAttached())c.refresh(); else {
        a.setPointAt(e, b.copy());
        g = JSG.ptCache.get();
        c = 0;
        for (f = this.snaplinepoints.length - 1; c < f; c += 2) {
            var k = this.snaplinepoints[c], h = this.snaplinepoints[c + 1], m = e, l = !1, p = JSG.ptCache.get();
            p.setTo(b);
            g.setTo(b);
            p = JSG.geometry.Utils.getOrthogonalProjectionOfPoint(p, k, h);
            g.subtract(p);
            (0 === m || m === d) && g.length() < JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.SNAP_THRESHOLD ? (l = !0, g.setTo(p), a.setPointAt(m, g)) : (p.subtract(h), p.length() < JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.SNAP_THRESHOLD && (l = !0, g.add(h), a.setPointAt(m,
                g)));
            JSG.ptCache.release(p);
            l && b.setTo(g)
        }
        JSG.ptCache.release(g)
    }
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype.showedPortFeedback = function (a, b) {
    function c(c, d) {
        var e, m;
        f.hasSourceAttached() || (f._ptsCount = f.getPointsCount(), f.hasSourceAttached = function () {
            return !0
        }, f.getSourcePort = function () {
            return c
        }, e = f.translateFromParent(a._point.copy()), m = f.getShape().disableRefresh(), f.setStartCoordinateTo(b.createCoordinateProxyAt(e, f.getStartCoordinate())), f.getShape().layoutFrom(c), !0 === m && f.getShape().enableRefresh())
    }

    function d(c, d) {
        var e, m;
        f.hasTargetAttached() || (f._ptsCount = f.getPointsCount(), f.hasTargetAttached = function () {
            return !0
        }, f.getTargetPort = function () {
            return c
        }, e = f.translateFromParent(a._point.copy()), m = f.getShape().disableRefresh(), f.setEndCoordinateTo(b.createCoordinateProxyAt(e, f.getEndCoordinate())), f.getShape().layoutFrom(c), !0 === m && f.getShape().enableRefresh())
    }

    var e, f = b.getFeedbackItem();
    e = function (a, b) {
        var c = b.copy();
        JSG.graph.Utils.translatePointDown(c, a.getGraph(), a);
        return {
            getParent: function () {
                return a
            }, getConnectionPoint: function (a,
                                             d) {
                return a ? c : b
            }
        }
    }(a._model, a._point);
    this._interaction.draggedSource() ? c(e, this) : d(e, this)
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype.hidePortFeedback = function (a) {
    a = a.getFeedbackItem();
    if (void 0 === a._ptsCount || null === a._ptsCount)a._ptsCount = a.getPointsCount();
    this._interaction.draggedSource() ? this.detachFromSourcePort(a) : this._interaction.draggedTarget() && this.detachFromTargetPort(a)
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype.detachFromSourcePort = function (a) {
    if (a.hasSourceAttached()) {
        a.hasSourceAttached = function () {
            return !1
        };
        a.getSourcePort = function () {
        };
        var b = this._getCoordinate(a.getStartCoordinate());
        a.setStartCoordinateTo(b);
        this._removeAddedPointsAt(1, a)
    }
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype.detachFromTargetPort = function (a) {
    a.hasTargetAttached() && (a.hasTargetAttached = function () {
        return !1
    }, a.getTargetPort = function () {
    }, a.setEndCoordinateTo(this._getCoordinate(a.getEndCoordinate())), this._removeAddedPointsAt(a._ptsCount - 1, a))
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype._getCoordinate = function (a) {
    return a.getCoordinate ? a.getCoordinate() : a
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype._removeAddedPointsAt = function (a, b) {
    var c = b.getShape(), d = b._ptsCount, e;
    0 < d && (e = b.getPointsCount(), d !== e && c.removeCoordinatesAt(a, e - d), b._ptsCount = 0)
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype.createCommand = function (a) {
    return !0
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype.createCommandFrom = function (a, b, c, d) {
    c = new JSG.graph.command.CompoundCommand;
    var e;
    !1 === this._draggedSource && !1 === this._draggedTarget && this._addDisableAutoLayoutCommand(c, b.getModel());
    e = b.getModel();
    a = a.getFeedbackItem().getPoints();
    (function (a) {
        var b, c = a.length - 1;
        for (b = c; 0 < b; b--) {
            var d;
            d = b - 1;
            var e = b + 1, l = void 0, p = void 0, n = void 0, q = void 0;
            0 <= d && e <= c ? (l = a[d], p = a[b], n = a[b], q = a[e], d = JSG.geometry.Utils.areLinesParallel(l, p, n, q)) :
                d = !1;
            d && a.splice(b, 1)
        }
    })(a);
    (function (a) {
        JSG.graph.Utils.traverseItemDown(e.getGraph(), e.getParent(), function (b) {
            var c;
            for (c = 0; c < a.length; c++)b.translateFromParent(a[c])
        })
    })(a);
    c.add(new JSG.graph.command.SetLineShapePointsCommand(e, a));
    return c
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype._addDisableAutoLayoutCommand = function (a, b) {
    var c = JSG.graph.attr.consts.LineBehavior, d = b.getLayoutAttributes().getLineBehavior();
    d.getValue() === c.AUTO && a.add(new JSG.graph.command.SetLayoutAttributeCommand(b, "setLineBehavior", d, c.MANUAL))
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.prototype.deactivate = function () {
    this._interaction = this.snaplinepoints = void 0
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate = function (a) {
    JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate._super.constructor.apply(this, arguments);
    this.lineSegmentEnd = new JSG.geometry.Point(0, 0);
    this.lineSegmentStart = new JSG.geometry.Point(0, 0)
};
JSG.extend(JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate, JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate);
JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate.prototype.initWith = function (a, b, c) {
    var d = JSG.graph.model.shapes.OrthoLineShapeLayouter.MIN_DIST_TO_PORT, e = [], f;
    JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate._super.initWith.call(this, a, b, c);
    f = a.getFeedbackItem();
    f.getLayoutAttributes().setLineBehavior(JSG.graph.attr.consts.LineBehavior.MANUAL);
    f.getPointsCount() !== a.getOriginalItem().getPointsCount() ? (JSG.debug.log("wrong points count! feedback(" + f.getPointsCount() +
    ")/original(" + a.getOriginalItem().getPointsCount() + ") \x3d\x3e cancel add..."), a._cancelAdd = !0) : (this.dragIndex = b + 1, this._draggedTarget = this._draggedSource = !1, this.lineSegmentStart = f.getPointAt(b, this.lineSegmentStart), this.lineSegmentEnd = f.getPointAt(b + 1, this.lineSegmentEnd), this.lineSegmentStart && this.lineSegmentEnd && (a = JSG.geometry.Utils.getOrthogonalProjectionOfPoint(c.copy(), this.lineSegmentStart, this.lineSegmentEnd), 0 === b ? !0 === f.hasSourceAttached() ? (c = a.copy().subtract(this.lineSegmentStart),
        c.setLength(Math.max(c.length() / 2, d)), c.add(this.lineSegmentStart), this.lineSegmentStart.setTo(c), d = c, d.index = this.dragIndex, e.push(d), d = c = JSG.geometry.Utils.getOrthogonalPointTo(this.lineSegmentStart, c).add(c), d.index = this.dragIndex + 1, e.push(d), this.dragIndex += 2) : (d = JSG.geometry.Utils.getOrthogonalPointTo(this.lineSegmentStart, a), d.add(this.lineSegmentStart), d.index = this.dragIndex, e.push(d), this.dragIndex += 1) : b === f.getPointsCount() - 2 && !0 === f.hasTargetAttached() && (c = a.copy().subtract(this.lineSegmentEnd),
        c.setLength(Math.max(c.length() / 2, d)), c.add(this.lineSegmentEnd), c = c.copy().subtract(this.lineSegmentEnd), c.setLength(d).add(this.lineSegmentEnd), this.lineSegmentEnd.setTo(c)), d = a.copy(), d.index = this.dragIndex, e.push(d), a = a.copy(), a.index = this.dragIndex + 1, e.push(a), f.insertPointsAt(b + 1, e)))
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate.prototype.update = function (a, b) {
    if (!a._cancelAdd) {
        var c = b.copy(), d = JSG.ptCache.get(), e, f, g = c = JSG.geometry.Utils.getOrthogonalProjectionOfPoint(c, this.lineSegmentStart, this.lineSegmentEnd);
        f = this.lineSegmentStart;
        e = this.lineSegmentEnd;
        e = JSG.ptCache.get().setTo(f).subtract(e);
        f = JSG.ptCache.get().setTo(f).subtract(g);
        g = 0 < -e.x * f.x - e.y * f.y;
        JSG.ptCache.release(e, f);
        e = d.setTo(c).subtract(this.lineSegmentStart).length();
        f = d.setTo(this.lineSegmentEnd).subtract(this.lineSegmentStart).length();
        e > f && !g ? (c.subtract(this.lineSegmentEnd), b.subtract(c)) : (e = d.setTo(c).subtract(this.lineSegmentEnd).length(), f = d.setTo(this.lineSegmentStart).subtract(this.lineSegmentEnd).length() - JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.SNAP_THRESHOLD + 10, e > f && (d.setTo(this.lineSegmentEnd).subtract(this.lineSegmentStart).setLength(JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.SNAP_THRESHOLD + 10), d.add(this.lineSegmentStart), b.subtract(c).add(d)));
        JSG.ptCache.release(d);
        JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate._super.update.call(this,
            a, b)
    }
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate.prototype.createCommand = function (a) {
    var b;
    if (a._cancelAdd)return !1;
    a = a.getFeedbackItem();
    b = (b = a.getPointAt(this.dragIndex + 1)) ? b.subtract(a.getPointAt(this.dragIndex)) : void 0;
    JSG.debug.log("dragIndex " + this.dragIndex + "+1 is out of range " + a.getPointsCount(), !b);
    return b && b.length() >= JSG.graph.interaction.ResizeOrthoEdgeInteraction.ResizeDelegate.SNAP_THRESHOLD
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate.prototype.createCommandFrom = function (a, b, c) {
    if (!a._cancelAdd) {
        var d = new JSG.graph.command.CompoundCommand;
        this._addDisableAutoLayoutCommand(d, b.getModel());
        d.add(JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate._super.createCommandFrom.call(this, a, b, c));
        return d
    }
};
JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate.prototype.deactivate = function () {
    JSG.graph.interaction.ResizeOrthoEdgeInteraction.AddPointsDelegate._super.deactivate.call(this);
    this.lineSegmentStart = this.lineSegmentEnd = void 0
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.EditTextInteraction = function () {
    JSG.graph.interaction.EditTextInteraction._super.constructor.apply(this, arguments);
    this.div = void 0;
    this._appliedText = !1;
    this._controller = void 0;
    this._notifyFlag = !0;
    this._savedSelection = this._compStyle = this._toolBar = void 0;
    this._formatInfo = {
        formatMap: new JSG.commons.Map, protect: !1, reset: function (a) {
            if (a || !this.protect)this.protect = !1, this.formatMap.clear()
        }
    }
};
JSG.extend(JSG.graph.interaction.EditTextInteraction, JSG.graph.interaction.AbstractInteraction);
JSG.graph.interaction.EditTextInteraction.sizes = "8 10 12 14 18 24 30".split(" ");
JSG.graph.interaction.EditTextInteraction.namesS = "Arial CourierNew Georgia Lucida LucidaSans Palatino Tahoma TimesNewRoman TrebuchetMS Verdana".split(" ");
JSG.graph.interaction.EditTextInteraction.namesN = "Arial;Courier New;Georgia;Lucida;Lucida Sans;Palatino;Tahoma;Times New Roman;Trebuchet MS;Verdana".split(";");
JSG.graph.interaction.EditTextInteraction.prototype.activate = function (a) {
    a = JSG.graph.notifications.NotificationCenter.getInstance();
    a.register(this, JSG.ui.ScrollPanel.SCROLL_NOTIFICATION);
    a.register(this, JSG.ui.GraphEditor.ZOOM_NOTIFICATION);
    a.register(this, JSG.ui.GraphEditor.DISPLAY_MODE_NOTIFICATION)
};
JSG.graph.interaction.EditTextInteraction.prototype.deactivate = function (a) {
    var b;
    if (void 0 === this.div || !0 !== this.div._rm)void 0 !== this.div && (this._item.setItemAttribute(JSG.graph.attr.ItemAttributes.VISIBLE, !0), this.div._rm = !0, b = a.getCanvas(), b.focus(), b.parentNode.removeChild(this.div), this.div = void 0), this._controller = void 0, void 0 !== this._toolBar && (this._toolBar.remove(), this._toolBar = void 0), b = JSG.graph.notifications.NotificationCenter.getInstance(), b.unregister(this, JSG.ui.ScrollPanel.SCROLL_NOTIFICATION),
        b.unregister(this, JSG.ui.GraphEditor.ZOOM_NOTIFICATION), b.unregister(this, JSG.ui.GraphEditor.DISPLAY_MODE_NOTIFICATION), JSG.graph.interaction.EditTextInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.EditTextInteraction.prototype.onNotification = function (a) {
    var b = !1;
    switch (a.name) {
        case JSG.ui.GraphEditor.ZOOM_NOTIFICATION:
        case JSG.ui.GraphEditor.DISPLAY_MODE_NOTIFICATION:
            b = !0;
            break;
        case JSG.ui.ScrollPanel.SCROLL_NOTIFICATION:
            b = this._notifyFlag
    }
    !0 === b && this.finishInteraction(void 0, this.getViewer())
};
JSG.graph.interaction.EditTextInteraction.prototype.onMouseMove = function (a, b) {
    this.isInside(this._controller, a.location) || this.setCursor(JSG.ui.Cursor.Style.AUTO)
};
JSG.graph.interaction.EditTextInteraction.prototype.onMouseDrag = function (a, b) {
    this.lastLocation.setTo(this.currentLocation)
};
JSG.graph.interaction.EditTextInteraction.prototype.onMouseDown = function (a, b) {
    this.isInside(this._controller, a.location) ? (this.startEdit(this._controller, a, b), a.event.doPreventDefault = !0) : this.finishInteraction(a, b)
};
JSG.graph.interaction.EditTextInteraction.prototype.onMouseUp = function (a, b) {
    this.isInside(this._controller, a.location) || this.finishInteraction(a, b)
};
JSG.graph.interaction.EditTextInteraction.prototype.isInside = function (a, b) {
    var c;
    return void 0 !== a ? (c = a.getModel(), c = c.getTranslatedBoundingBox(c.getGraph()).getBoundingRectangle(), c.containsPoint(this.getViewer().translateFromParent(b.copy()))) : !1
};
JSG.graph.interaction.EditTextInteraction.prototype.setController = function (a) {
    this._controller = a
};
JSG.graph.interaction.EditTextInteraction.prototype.startEdit = function (a, b, c) {
    function d(a) {
        q.scrollToCursor();
        q._formatInfo.reset()
    }

    function e(a) {
    }

    function f(a) {
        setTimeout(function () {
            q.updateToolbar(c)
        }, 100)
    }

    function g(a) {
        q.updateToolbar(c);
        return q.handleKeyUp(a)
    }

    function k(a) {
        return q.handleKeyDown(a)
    }

    function h(a) {
        return q.handleKeyPress(a)
    }

    function m(a) {
        return q.handleChange(a)
    }

    function l(a) {
        return q.handleBlur(a)
    }

    function p(a) {
        return q.handlePaste(a)
    }

    function n(a) {
        a.preventDefault();
        return !1
    }

    var q = this;
    if (void 0 !== a && void 0 === this.div) {
        b && (b.isConsumed = !0);
        b = c.getCanvas();
        this._controller = a;
        this._item = a.getModel();
        this._item.setItemAttribute(JSG.graph.attr.ItemAttributes.VISIBLE, !1);
        this._cancel = !1;
        c.getSelectionView().setVisible(!1);
        a.getView();
        var r = c.getCoordinateSystem(), t = this._item.getTextFormat();
        this.storeUndoText(this._item);
        a = document.createElement("div");
        a.contentEditable = "true";
        a.style.resize = "none";
        a.id = "jsgTextEdit";
        a.tabIndex = "5";
        a.zIndex = 100;
        a.style.position = "absolute";
        a.style.border = "1px dashed black";
        a.style.minHeight = "11px";
        a.style.minWidth = "30px";
        a.style.overflow = "visible";
        a.style.cssFloat = "none";
        this.doWrapText() ? (a.style.wordWrap = "break-word", a.style.display = "inline-block") : a.style.display = "inline-table";
        a.style.background = this._item.getFormat().getFillStyle().getValue() === JSG.graph.attr.FormatAttributes.FillStyle.NONE ? "none" : this._item.getFormat().getFillColor().getValue();
        a.style.fontSize = t.getFontSize().getValue() + "pt";
        a.style.fontFamily = t.getFontName().getValue();
        a.style.fontWeight = t.getFontStyle().getValue() & JSG.graph.attr.TextFormatAttributes.FontStyle.BOLD ? "bold" : "normal";
        a.style.fontStyle = t.getFontStyle().getValue() & JSG.graph.attr.TextFormatAttributes.FontStyle.ITALIC ? "italic" : "normal";
        a.style.textDecoration = t.getFontStyle().getValue() & JSG.graph.attr.TextFormatAttributes.FontStyle.UNDERLINE ? "underline" : "none";
        a.style.lineHeight = this._item._lineHeight;
        var u = t.getFontColor().getValue();
        "#FFFFFF" !== u && (a.style.color = u);
        a.style.textAlign = this._item.getTextAlign();
        u = this._item.getItemAttributes();
        a.style.paddingLeft = r.logToDeviceXNoZoom(u.getLeftMargin().getValue()) + "px";
        a.style.paddingTop = r.logToDeviceYNoZoom(u.getTopMargin().getValue()) + "px";
        a.style.paddingRight = r.logToDeviceXNoZoom(u.getRightMargin().getValue()) + "px";
        a.style.paddingBottom = r.logToDeviceYNoZoom(u.getBottomMargin().getValue()) + "px";
        a.autofocus = !0;
        this.div = a;
        this._richText = t.getRichText().getValue();
        document.execCommand("defaultParagraphSeparator", null, "p");
        b.parentNode.appendChild(a);
        r = this.getEditText(this._item);
        a.innerHTML = r;
        !0 === this._richText && this.addToolbar(c);
        this.updateTextArea(c, !1);
        this.assureVisibility(b.width, b.height, c);
        window.getSelection && (r = window.getSelection(), b = document.createRange(), b.selectNodeContents(a), r.removeAllRanges(), r.addRange(b));
        a.focus();
        a.addEventListener("keyup", g, !1);
        a.addEventListener("keydown", k, !1);
        a.addEventListener("keypress", h, !1);
        a.addEventListener("input", m, !1);
        a.addEventListener("onchange", m, !1);
        a.addEventListener("mousedown", e, !1);
        a.addEventListener("mouseup",
            f, !1);
        a.addEventListener("blur", l, !1);
        a.addEventListener("select", d, !1);
        a.addEventListener("selectstart", d, !1);
        a.addEventListener("selectionchange", d, !1);
        a.addEventListener("dragenter", n, !1);
        a.addEventListener("dragover", n, !1);
        a.addEventListener("dragleave", n, !1);
        a.addEventListener("dragexit", n, !1);
        a.addEventListener("drop", n, !1);
        a.addEventListener("paste", p, !1);
        !0 === this._richText && this.updateToolbar(c)
    }
};
JSG.graph.interaction.EditTextInteraction.prototype.handlePaste = function (a) {
    var b = this;
    this._savedSelection = this.saveSelection();
    setTimeout(function () {
        b.clean(b.div);
        b.restoreSelection(b._savedSelection)
    }, 20);
    return !0
};
JSG.graph.interaction.EditTextInteraction.prototype.handleKeyPress = function (a) {
    if (!this._formatInfo.formatMap.isEmpty()) {
        var b = window.getSelection();
        if (void 0 !== b && b.isCollapsed) {
            var c = b.getRangeAt(0);
            this._formatInfo.protect = !0;
            var d = document.createElement("span");
            this._formatInfo.formatMap.iterate(function (a, b) {
                switch (a) {
                    case "bold":
                        d.style.fontWeight = b ? "bold" : "normal";
                        break;
                    case "italic":
                        d.style.fontStyle = b ? "italic" : "normal";
                        break;
                    case "underline":
                        d.style.textDecoration = b ? "underline" : "normal";
                        break;
                    case "fontsize":
                        d.style.fontSize = b + "pt";
                        break;
                    case "fontname":
                        d.style.fontFamily = b;
                        break;
                    case "fontcolor":
                        d.style.color = b
                }
            });
            d.textContent = String.fromCharCode(a.which || a.keyCode);
            c.insertNode(d);
            c = document.createRange();
            c.selectNodeContents(d);
            b.removeAllRanges();
            b.addRange(c);
            b.collapseToEnd();
            this._formatInfo.reset(!0);
            a.preventDefault()
        }
    }
};
JSG.graph.interaction.EditTextInteraction.prototype.handleKeyUp = function (a) {
    this._formatInfo.reset();
    if (18 === a.keyCode || a.altKey)return a.preventDefault(), !1;
    this.updateTextArea(this.getViewer(), !0);
    this.updateToolbar(this.getViewer());
    this.scrollToCursor()
};
JSG.graph.interaction.EditTextInteraction.prototype.handleKeyDown = function (a) {
    var b, c;
    switch (a.keyCode) {
        case 9:
            a.preventDefault();
            break;
        case 32:
            if (a.altKey)return a.preventDefault(), a.stopPropagation(), !1;
            break;
        case 27:
            b = this.getViewer(), c = b.getGraphicSystem().getCanvas(), a = JSG.ui.events.KeyEvent.fromEvent(c, a, JSG.ui.events.KeyEventType.DOWN), this.cancelInteraction(a, b)
    }
};
JSG.graph.interaction.EditTextInteraction.prototype.handleChange = function (a) {
    this.updateTextArea(this.getViewer(), !0)
};
JSG.graph.interaction.EditTextInteraction.prototype.handleBlur = function (a) {
    var b = this.getViewer(), c = this;
    setTimeout(function () {
        void 0 !== c._toolBar && a.relatedTarget && (a.relatedTarget !== c._toolBar._div && "select" !== a.relatedTarget.tagName.toLowerCase()) && c.finishInteraction(void 0, b)
    }, 1)
};
JSG.graph.interaction.EditTextInteraction.prototype.storeUndoText = function (a) {
    this._undoText = a.getText().copy()
};
JSG.graph.interaction.EditTextInteraction.prototype.getEditText = function (a) {
    return a.repair(a.getText().getValue())
};
JSG.graph.interaction.EditTextInteraction.prototype.updateTextArea = function (a, b) {
    if (this.div) {
        var c = this._item, d = c.getAngle().getValue(), e = a.getCoordinateSystem(), f = a.getCanvas(), g = this._item.getPinPoint(), k = 0, h = 0, m = c.getSizeAsPoint();
        JSG.graph.Utils.traverseUp(this._controller.getView().getParent(), a.getRootView(), function (a) {
            if (a instanceof JSG.graph.view.GraphView) {
                var b = a.getItem().getSettings().getPage();
                h = b.getLeftMargin() + Math.floor(g.x / b.getUsableWidth()) * (b.getLeftMargin() + b.getRightMargin() +
                b.getHorizontalGap());
                k = b.getTopMargin() + Math.floor(g.y / b.getUsableHeight()) * (b.getTopMargin() + b.getBottomMargin() + b.getVerticalGap());
                g.x += h;
                g.y += k
            }
            a instanceof JSG.graph.view.GraphItemView && (d += a.getItem().getAngle().getValue());
            a.translateToParent(g);
            a instanceof JSG.graph.view.GraphView && (g.x -= h, g.y -= k);
            return !0
        });
        if (this.doWrapText()) {
            c.getItemAttributes();
            var l = Math.ceil(e.logToDeviceXNoZoom(c.getSize().getWidth().getValue())) + 2;
            this.div.style.width = l + "px";
            this.div.style.maxWidth = l + "px"
        }
        l = "";
        switch (c.getTextFormat().getHorizontalPosition().getValue()) {
            case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.TOLEFT:
                l = "right";
                this.div.style.left = (e.logToDeviceX(g.x) + e.logToDeviceX(m.x / 2) + f.offsetLeft - this.div.offsetWidth).toFixed() + "px";
                break;
            case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.LEFT:
                l = "left";
                this.div.style.left = (e.logToDeviceX(g.x) - e.logToDeviceX(m.x / 2) + f.offsetLeft).toFixed() + "px";
                break;
            case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.CUSTOM:
            case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.CENTER:
                l =
                    "center";
                this.div.style.left = (e.logToDeviceX(g.x) + f.offsetLeft - this.div.offsetWidth / 2).toFixed() + "px";
                break;
            case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.RIGHT:
                l = "right";
                this.div.style.left = (e.logToDeviceX(g.x) + e.logToDeviceX(m.x / 2) + f.offsetLeft - this.div.offsetWidth).toFixed() + "px";
                break;
            case JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.TORIGHT:
                l = "left", this.div.style.left = (e.logToDeviceX(g.x) - e.logToDeviceX(m.x / 2) + f.offsetLeft).toFixed() + "px"
        }
        switch (c.getTextFormat().getVerticalPosition().getValue()) {
            case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.ONTOP:
                l +=
                    " bottom";
                this.div.style.top = (e.logToDeviceY(g.y) + e.logToDeviceY(m.y / 2) + f.offsetTop - this.div.offsetHeight).toFixed() + "px";
                break;
            case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.TOP:
                l += " top";
                this.div.style.top = (e.logToDeviceY(g.y) - e.logToDeviceY(m.y / 2) + f.offsetTop).toFixed() + "px";
                break;
            case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.CUSTOM:
            case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.CENTER:
                l += " center";
                this.div.style.top = (e.logToDeviceY(g.y) + f.offsetTop -
                this.div.offsetHeight / 2).toFixed() + "px";
                break;
            case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.BOTTOM:
                l += " bottom";
                this.div.style.top = (e.logToDeviceY(g.y) + e.logToDeviceY(m.y / 2) + f.offsetTop - this.div.offsetHeight).toFixed() + "px";
                break;
            case JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.BELOWBOTTOM:
                l += " top", this.div.style.top = (e.logToDeviceY(g.y) - e.logToDeviceY(m.y / 2) + f.offsetTop).toFixed() + "px"
        }
        this.div.style.transform = "rotate(" + JSG.geometry.Utils.toDegrees(d, !0) + "deg) scale(" +
        e.getZoom() + "," + e.getZoom() + ")";
        this.div.style.transformOrigin = l;
        void 0 !== b && !0 !== b || this.scrollToCursor();
        void 0 !== this._toolBar && this._toolBar.place(this.div.getBoundingClientRect())
    }
};
JSG.graph.interaction.EditTextInteraction.prototype.onResizeCanvas = function (a, b, c) {
    this.assureVisibility(a, b, c);
    return !0
};
JSG.graph.interaction.EditTextInteraction.prototype.assureVisibility = function (a, b, c) {
    a = this.div.getBoundingClientRect();
    this.showRect(a)
};
JSG.graph.interaction.EditTextInteraction.prototype.scrollToCursor = function () {
    var a = this.getViewer();
    a.getCanvas();
    a.getCoordinateSystem();
    a = window.getSelection();
    if (void 0 !== a) {
        var b;
        var c;
        0 === a.rangeCount ? b = void 0 : (c = a.getRangeAt(0).cloneRange(), c.getClientRects && (c.collapse(!0), 0 < c.getClientRects().length && (b = c.getClientRects()[0])), void 0 === b && (a = document.createElement("span"), a.getClientRects && (a.appendChild(document.createTextNode("\u200b")), c.insertNode(a), b = a.getClientRects()[0], c = a.parentNode,
            c.removeChild(a), c.normalize())));
        void 0 !== b && this.showRect(b)
    }
};
JSG.graph.interaction.EditTextInteraction.prototype.showRect = function (a) {
    var b = this.getViewer();
    b.getCanvas();
    var c = b.getCoordinateSystem(), d = !1, e = b.getScrollPanel(), f = e.getScrollPosition(JSG.ptCache.get()), g = c.logToDeviceXNoZoom(750), k = c.logToDeviceXNoZoom(450), h = e.getViewPort(), m = h.getHorizontalRangeModel(), h = h.getVerticalRangeModel(), l = b.getCanvas().getBoundingClientRect();
    a.left - l.left < g ? (f.x = c.deviceToLogX(a.left - l.left + 1) + m._value - 750 / c.getZoom(), d = !0) : a.right + k >= l.right && (f.x = c.deviceToLogX(a.right -
    l.right) + m._value + 450 / c.getZoom(), d = !0);
    a.top - l.top < g ? (f.y = c.deviceToLogX(a.top - l.top + 1) + h._value - 750 / c.getZoom(), d = !0) : a.bottom + k >= l.bottom && (f.y = c.deviceToLogX(a.bottom - l.bottom) + h._value + 450 / c.getZoom(), d = !0);
    d && (this._notifyFlag = !1, e.setScrollPositionTo(f), this.getInteractionHandler().repaint(), this.updateTextArea(b, !1), this._notifyFlag = !0);
    JSG.ptCache.release(f)
};
JSG.graph.interaction.EditTextInteraction.prototype.doWrapText = function () {
    return this._item ? this._item.getItemAttributes().getSizeMode().getValue() === JSG.graph.attr.TextNodeAttributes.SizeMode.WIDTH : !1
};
JSG.graph.interaction.EditTextInteraction.prototype.updateFeedback = function (a, b, c) {
};
JSG.graph.interaction.EditTextInteraction.prototype.createCommand = function (a, b, c, d) {
};
JSG.graph.interaction.EditTextInteraction.prototype.onMouseExit = function (a, b) {
    return !1
};
JSG.graph.interaction.EditTextInteraction.prototype._getNewText = function () {
    var a, b = this.div.querySelectorAll("p:empty");
    for (a = b.length - 1; -1 < a; a--)b[a].parentNode.removeChild(b[a]);
    return this.div.innerHTML
};
JSG.graph.interaction.EditTextInteraction.prototype.createSetTextCommand = function (a) {
    var b = this._getNewText();
    return a instanceof JSG.graph.model.AttributedTextNode ? (a = a.getAttributeExpression(), new JSG.graph.command.ChangeAttributeCommand(a.getAttributeOwner(), a.getAttribute().getPath(), b, this._undoText)) : new JSG.graph.command.SetTextCommand(a, this._undoText, b)
};
JSG.graph.interaction.EditTextInteraction.prototype.willFinish = function (a, b) {
    this._applyText(b) || this.cancelInteraction(a, b)
};
JSG.graph.interaction.EditTextInteraction.prototype._applyText = function (a) {
    a = this.createSetTextCommand(this._item);
    var b = this.getInteractionHandler();
    return void 0 !== b && void 0 !== a ? (a.delayExecution || (this._appliedText = !0, b.execute(a)), !0) : !1
};
JSG.graph.interaction.EditTextInteraction.prototype.didFinish = function (a, b) {
    JSG.graph.interaction.EditTextInteraction._super.didFinish.call(this, a, b);
    b.clearLayer(JSG.graph.view.LayerId.TOOLBAR);
    b.getSelectionView().setVisible(!0);
    this._item.setItemAttribute(JSG.graph.attr.ItemAttributes.VISIBLE, !0);
    this.getInteractionHandler().repaint()
};
JSG.graph.interaction.EditTextInteraction.prototype.cancelInteraction = function (a, b) {
    this._resetText();
    JSG.graph.interaction.EditTextInteraction._super.cancelInteraction.call(this, a, b)
};
JSG.graph.interaction.EditTextInteraction.prototype._resetText = function () {
    this._item.setText(this._undoText)
};
JSG.graph.interaction.EditTextInteraction.prototype.clean = function (a) {
    function b(a) {
        var b = a.cloneNode(!0);
        b.removeAttribute && b.removeAttribute("class");
        b.removeAttribute && b.removeAttribute("style");
        b.style && g._richText && (b.style.fontStyle = a.style.fontStyle, b.style.fontSize = a.style.fontSize, b.style.fontFamily = a.style.fontFamily, b.style.fontWeight = a.style.fontWeight, b.style.textDecoration = a.style.textDecoration, b.style.color = a.style.color);
        return b
    }

    function c(a, d, e) {
        var p, n;
        for (p = 0; p < a.childNodes.length; p++)switch (n =
            a.childNodes.item(p), n.nodeName.toLowerCase()) {
            case "p":
                n.hasChildNodes() && n.innerText.length && ("li" === e ? (f = document.createElement("br"), void 0 === d ? k.push(f) : d.appendChild(f), p = -1, a = n) : void 0 === d ? k.push(b(n)) : d.appendChild(b(n)));
                break;
            case "span":
                f = document.createElement("span");
                var q = n, r = f;
                q.style && (r.style && g._richText) && (r.style.fontStyle = q.style.fontStyle, r.style.fontSize = q.style.fontSize, r.style.fontFamily = q.style.fontFamily, r.style.fontWeight = q.style.fontWeight, r.style.textDecoration = q.style.textDecoration,
                    r.style.color = q.style.color);
                d.appendChild(f);
                c(n, f, n.nodeName.toLowerCase());
                break;
            case "br":
                d.appendChild(b(n));
                break;
            case "font":
            case "u":
            case "i":
            case "b":
            case "em":
            case "strong":
                d.appendChild(b(n));
                break;
            case "a":
                c(n, d, e);
                break;
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
                "li" === e ? c(n, d, e) : (f = document.createElement("p"), void 0 === d ? k.push(f) : d.appendChild(f), c(n, f, e));
                break;
            case "#text":
                "li" === e ? d.appendChild(b(n)) : void 0 === d ? k.push(b(n)) : d.appendChild(b(n));
                break;
            case "li":
                f = document.createElement("li");
                f.style.textAlign = n.style.textAlign;
                void 0 !== d && d.appendChild(f);
                c(n, f, n.nodeName.toLowerCase());
                break;
            case "div":
                c(n, d, e);
                break;
            case "ul":
            case "ol":
                c(n, d, e)
        }
    }

    var d, e, f, g = this, k = [];
    for (d = 0; d < a.childNodes.length; d++)switch (e = a.childNodes.item(d), e.nodeName.toLowerCase()) {
        case "p":
            e.hasChildNodes() && e.innerText.length && k.push(b(e));
            break;
        case "h1":
        case "h2":
        case "h3":
        case "h4":
        case "h5":
        case "h6":
            f = document.createElement("p");
            k.push(f);
            c(e, f);
            break;
        case "#text":
            f = document.createElement("p");
            f.textContent =
                e.nodeValue;
            k.push(f);
            break;
        case "div":
            c(e, void 0);
            break;
        case "ul":
        case "ol":
            e.hasChildNodes() && (f = document.createElement(e.nodeName.toLowerCase()), k.push(f), c(e, f))
    }
    a.innerHTML = "";
    for (d = 0; d < k.length; d++)a.appendChild(k[d])
};
JSG.graph.interaction.EditTextInteraction.prototype.saveSelection = function () {
    function a(g, k) {
        if (3 === g.nodeType) {
            e || g !== k.startContainer || (c = b + k.startOffset, e = !0);
            if (e && g === k.endContainer)throw d = b + k.endOffset, f;
            b += g.length
        } else {
            var l, p;
            l = 0;
            for (p = g.childNodes.length; l < p; ++l)a(g.childNodes[l], k)
        }
    }

    var b = 0, c = 0, d = 0, e = !1, f = {}, g = window.getSelection();
    if (g.rangeCount)try {
        a(this.div, g.getRangeAt(0))
    } catch (k) {
        if (k !== f)throw k;
    }
    return {start: c, end: d}
};
JSG.graph.interaction.EditTextInteraction.prototype.restoreSelection = function (a) {
    function b(g) {
        if (3 === g.nodeType) {
            var k = c + g.length;
            !e && (a.start >= c && a.start <= k) && (d.setStart(g, a.start - c), e = !0);
            if (e && a.end >= c && a.end <= k)throw d.setEnd(g, a.end - c), f;
            c = k
        } else {
            var l, k = 0;
            for (l = g.childNodes.length; k < l; ++k)b(g.childNodes[k])
        }
    }

    var c = 0, d, e = !1, f = {};
    d = document.createRange();
    d.setStart(this.div, 0);
    d.setEnd(this.div, 0);
    try {
        b(this.div)
    } catch (g) {
        if (g === f) {
            var k = window.getSelection();
            k.removeAllRanges();
            k.addRange(d)
        } else throw g;
    }
};
JSG.graph.interaction.EditTextInteraction.prototype.canApplyAttributes = function (a, b, c) {
    return !0
};
JSG.graph.interaction.EditTextInteraction.prototype.onApplyAttributes = function (a, b, c) {
    function d(a, b) {
        return a.tagName.toLowerCase() === b
    }

    function e(a) {
        if (a) {
            do {
                if (a.tagName && (d(a, "li") || d(a, "p")))return a;
                a = a.parentNode
            } while (a)
        }
    }

    function f(a, b, c, e) {
        a = a.firstChild;
        do {
            1 === a.nodeType && (d(a, "li") || d(a, "p")) && (void 0 === e || e(a)) && c.push(a);
            if (a.hasChildNodes() && !f(a, b, c, e) || a === b)return !1;
            a = a.nextSibling
        } while (a);
        return !0
    }

    function g(a, b, c, e, g) {
        for (; a;) {
            a.tagName && (d(a, "li") || d(a, "p")) && (void 0 === g || g(a)) &&
            e.push(a);
            if (a.hasChildNodes() && !f(a, b, e, g))break;
            if (a === b)return !1;
            a = a.nextElementSibling
        }
        return !0
    }

    function k(a, b) {
        var c = [], d, f;
        d = 3 === a.startContainer.nodeType ? e(a.startContainer) : a.startContainer;
        f = 3 === a.endContainer.nodeType ? e(a.endContainer) : a.endContainer;
        if (void 0 === d || void 0 === f)return c;
        for (; d && g(d, f, a, c, b);)if (d = d.parentNode)d = d.nextElementSibling;
        return c
    }

    function h(a) {
        var b;
        b = window.getSelection();
        var c;
        if (void 0 !== b && (b = b.getRangeAt(0), void 0 !== b))for (b = k(b), c = 0; c < b.length; c++)b[c].style.textAlign =
            a
    }

    function m(a) {
        var b, c = window.getSelection(), f, g, h, l;
        if (void 0 !== c) {
            p._savedSelection = p.saveSelection();
            b = c.getRangeAt(0);
            if (c.isCollapsed)c = e(c.anchorNode), void 0 !== c && (g = l = c); else {
                if (void 0 === b)return;
                c = e(b.startContainer);
                void 0 !== c && (g = c);
                c = e(b.endContainer);
                void 0 !== c && (l = c)
            }
            if (void 0 !== g && void 0 !== l) {
                if (d(g, "li"))for (g = g.parentNode; g.previousElementSibling && !d(g, "p");)g = g.previousElementSibling; else for (; g.previousElementSibling && !d(g.previousElementSibling, "p");)g = g.previousElementSibling;
                h = g;
                if (d(l, "li"))for (l = l.parentNode; l.nextElementSibling && !d(l, "p");)l = l.nextElementSibling; else for (; l.nextElementSibling && !d(l.nextElementSibling, "p");)l = l.nextElementSibling;
                if (null !== g && null !== l) {
                    h = k(b);
                    b = document.createRange();
                    b.setStart(g, 0);
                    b.setEnd(l, 0);
                    c = k(b);
                    for (b = 0; b < c.length; b++) {
                        for (f = 0; f < h.length && h[f] !== c[b]; f++);
                        f === h.length ? "p" === c[b].tagName.toLowerCase() ? c[b].__type = "p" : "li" === c[b].tagName.toLowerCase() && (c[b].__type = c[b].parentNode.tagName.toLowerCase()) : c[b].__type = a
                    }
                    h = l.nextElementSibling;
                    for (b = 0; b < c.length; b++)a = c[b], a.parentNode.removeChild(a);
                    l = g.tagName.toLowerCase();
                    f = g;
                    for (b = 0; b < c.length; b++) {
                        a = c[b];
                        switch (a.__type) {
                            case "p":
                                d(a, a.__type) ? p.div.insertBefore(a, h) : (g = document.createElement("p"), void 0 !== a.className && 0 !== a.className.length && (g.className = a.className), g.innerHTML = a.innerHTML, p.div.insertBefore(g, h));
                                l = "p";
                                f = void 0;
                                break;
                            case "ul":
                            case "ol":
                                l !== a.__type && (f = document.createElement(a.__type), p.div.insertBefore(f, h), l = a.__type), g = document.createElement("li"), void 0 !==
                                a.className && 0 !== a.className.length && (g.className = a.className), g.innerHTML = a.innerHTML, f.appendChild(g)
                        }
                        a.__type = void 0
                    }
                    p.clean(p.div);
                    p.restoreSelection(p._savedSelection)
                }
            }
        }
    }

    function l(a, b) {
        var c = window.getSelection(), d, e;
        if (void 0 !== c) {
            if (c.isCollapsed) {
                if (!p._compStyle)return;
                switch (a) {
                    case "bold":
                        d = "bold" === p._compStyle.fontWeight || "700" === p._compStyle.fontWeight ? !0 : !1;
                        c = p._toolBar.getItemById("bold");
                        e = c.isSelected() ? !0 : !1;
                        break;
                    case "italic":
                        d = "italic" === p._compStyle.fontStyle ? !0 : !1;
                        c = p._toolBar.getItemById("italic");
                        e = c.isSelected() ? !0 : !1;
                        break;
                    case "underline":
                        d = "underline" === p._compStyle.textDecoration ? !0 : !1;
                        c = p._toolBar.getItemById("underline");
                        e = c.isSelected() ? !0 : !1;
                        break;
                    case "fontsize":
                        d = String(Math.round(72 * parseInt(p._compStyle.fontSize, 10) / JSG.dpi.y));
                        c = p._toolBar.getItemById("fontsize");
                        e = c.getValue();
                        break;
                    case "fontname":
                        d = p._compStyle.fontName;
                        c = p._toolBar.getItemById("fontname");
                        e = c.getValue();
                        break;
                    case "fontcolor":
                        d = p._compStyle.fontName, p._toolBar.getItemById("fontcolor"), e = b
                }
                e === d || "fontname" ===
                a || "fontsize" === a || "fontcolor" === a ? p._formatInfo.formatMap.put(a, b) : p._formatInfo.formatMap.remove(a)
            } else switch (a) {
                case "bold":
                    document.execCommand("bold", !1, b);
                    break;
                case "italic":
                    document.execCommand("italic", !1, b);
                    break;
                case "underline":
                    document.execCommand("underline", !1, b);
                    break;
                case "fontsize":
                    document.execCommand("fontsize", !1, 2);
                    d = p.div.getElementsByTagName("font");
                    var f, g;
                    c.removeAllRanges();
                    for (e = d.length - 1; 0 <= e; e--) {
                        var h = d[e];
                        "2" === h.size && (f = document.createElement("span"), f.style.fontSize =
                            b + "pt", f.style.fontFamily = h.face, f.innerHTML = h.innerHTML, h.parentNode.replaceChild(f, h), void 0 === g && (g = f))
                    }
                    void 0 !== f && void 0 !== g && (d = document.createRange(), d.setStartBefore(f), d.setEndAfter(g), c.addRange(d));
                    break;
                case "fontname":
                    document.execCommand("fontname", !1, b);
                    break;
                case "fontcolor":
                    document.execCommand("foreColor", !1, b)
            }
            p.div.focus()
        }
    }

    var p = this, n;
    switch (c) {
        case "textformat":
            b.iterate(function (a, b) {
                switch (a) {
                    case "bullets":
                        n = p._toolBar.getItemById("bullets");
                        n.isSelected() ? m("p") : m("ul");
                        break;
                    case "numbered":
                        n = p._toolBar.getItemById("numbered");
                        n.isSelected() ? m("p") : m("ol");
                        break;
                    case "bulletsoff":
                        m("p");
                        break;
                    case JSG.graph.attr.TextFormatAttributes.FONTNAME:
                        l("fontname", b);
                        break;
                    case JSG.graph.attr.TextFormatAttributes.FONTSIZE:
                        l("fontsize", b);
                        break;
                    case JSG.graph.attr.TextFormatAttributes.FONTCOLOR:
                        l("fontcolor", b);
                        break;
                    case JSG.graph.attr.TextFormatAttributes.FONTSTYLE:
                        switch (b) {
                            case JSG.graph.attr.TextFormatAttributes.FontStyle.BOLD:
                                n = p._toolBar.getItemById("bold");
                                l("bold",
                                    n.isSelected() ? !1 : !0);
                                break;
                            case JSG.graph.attr.TextFormatAttributes.FontStyle.ITALIC:
                                n = p._toolBar.getItemById("italic");
                                l("italic", n.isSelected() ? !1 : !0);
                                break;
                            case JSG.graph.attr.TextFormatAttributes.FontStyle.UNDERLINE:
                                n = p._toolBar.getItemById("underline"), l("underline", n.isSelected() ? !1 : !0)
                        }
                        break;
                    case JSG.graph.attr.TextFormatAttributes.HORIZONTALALIGN:
                        switch (b) {
                            case JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT:
                                h("left");
                                break;
                            case JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER:
                                h("center");
                                break;
                            case JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT:
                                h("right")
                        }
                }
            })
    }
    this.updateTextArea(a, !0);
    this.updateToolbar(a);
    return !1
};
JSG.graph.interaction.EditTextInteraction.prototype.addToolbar = function (a) {
    var b = this, c = new JSG.geometry.Point(this.div.style.left, this.div.style.top - 30);
    this._toolBar = new JSG.graph.view.FloatingToolbar("jsgTextToolbar", c);
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolList("fontname", function (c) {
            var e = new JSG.commons.Map;
            e.put(JSG.graph.attr.TextFormatAttributes.FONTNAME, c);
            b.onApplyAttributes(a, e, "textformat")
        }, JSG.graph.interaction.EditTextInteraction.namesN, JSG.graph.interaction.EditTextInteraction.namesS,
        120, "Arial"));
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolList("fontsize", function (c) {
        var e = new JSG.commons.Map;
        e.put(JSG.graph.attr.TextFormatAttributes.FONTSIZE, c);
        b.onApplyAttributes(a, e, "textformat")
    }, JSG.graph.interaction.EditTextInteraction.sizes, JSG.graph.interaction.EditTextInteraction.sizes, 50, "10"));
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolSeparator);
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolColor("fontcolor", function (c) {
        var e = new JSG.commons.Map;
        e.put(JSG.graph.attr.TextFormatAttributes.FONTCOLOR, c);
        b.onApplyAttributes(a, e, "textformat")
    }, JSG.commons.ImagePool.IMG_FONTCOLOR, "#000000"));
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolBreak);
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolButton("bold", function () {
        var c = new JSG.commons.Map;
        c.put(JSG.graph.attr.TextFormatAttributes.FONTSTYLE, JSG.graph.attr.TextFormatAttributes.FontStyle.BOLD);
        b.onApplyAttributes(a, c, "textformat")
    }, JSG.commons.ImagePool.IMG_BOLD));
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolButton("italic",
        function () {
            var c = new JSG.commons.Map;
            c.put(JSG.graph.attr.TextFormatAttributes.FONTSTYLE, JSG.graph.attr.TextFormatAttributes.FontStyle.ITALIC);
            b.onApplyAttributes(a, c, "textformat")
        }, JSG.commons.ImagePool.IMG_ITALIC));
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolButton("underline", function () {
        var c = new JSG.commons.Map;
        c.put(JSG.graph.attr.TextFormatAttributes.FONTSTYLE, JSG.graph.attr.TextFormatAttributes.FontStyle.UNDERLINE);
        b.onApplyAttributes(a, c, "textformat")
    }, JSG.commons.ImagePool.IMG_UNDERLINE));
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolSeparator);
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolButton("left", function () {
        var c = new JSG.commons.Map;
        c.put(JSG.graph.attr.TextFormatAttributes.HORIZONTALALIGN, JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT);
        b.onApplyAttributes(a, c, "textformat")
    }, JSG.commons.ImagePool.IMG_LEFT_ALIGN));
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolButton("center", function () {
        var c = new JSG.commons.Map;
        c.put(JSG.graph.attr.TextFormatAttributes.HORIZONTALALIGN,
            JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER);
        b.onApplyAttributes(a, c, "textformat")
    }, JSG.commons.ImagePool.IMG_CENTER_ALIGN));
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolButton("right", function () {
        var c = new JSG.commons.Map;
        c.put(JSG.graph.attr.TextFormatAttributes.HORIZONTALALIGN, JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT);
        b.onApplyAttributes(a, c, "textformat")
    }, JSG.commons.ImagePool.IMG_RIGHT_ALIGN));
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolSeparator);
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolButton("bullets", function () {
        var c = new JSG.commons.Map;
        c.put("bullets", "");
        b.onApplyAttributes(a, c, "textformat")
    }, JSG.commons.ImagePool.IMG_BULLETS));
    this._toolBar.addTool(new JSG.graph.view.FloatingToolbar.ToolButton("numbered", function () {
        var c = new JSG.commons.Map;
        c.put("numbered", "");
        b.onApplyAttributes(a, c, "textformat")
    }, JSG.commons.ImagePool.IMG_NUMBERED))
};
JSG.graph.interaction.EditTextInteraction.prototype.updateToolbar = function (a) {
    if (void 0 !== this._toolBar && (a = window.getSelection(), void 0 !== a)) {
        var b = a.focusNode, c = a.focusNode;
        for (a = "p"; b && b.parentNode && 3 === b.nodeType;)b = b.parentNode;
        if (b) {
            for (; c && c.parentNode;) {
                if (1 === c.nodeType) {
                    var d = c.tagName.toLowerCase();
                    if ("ol" === d || "ul" === d) {
                        a = d;
                        break
                    }
                    if ("div" === d)break
                }
                c = c.parentNode
            }
            b = window.getComputedStyle(b, null);
            c = JSG.graph.view.FloatingToolbar.ToolButton.State;
            if (b) {
                d = this._toolBar.getItemById("fontname");
                this._formatInfo.formatMap.contains("fontname") ? d.setValue(this._formatInfo.formatMap.get("fontname")) : d.setValue(b.fontFamily);
                d = this._toolBar.getItemById("fontsize");
                this._formatInfo.formatMap.contains("fontsize") ? d.setValue(this._formatInfo.formatMap.get("fontsize")) : d.setValue(Math.round(72 * parseInt(b.fontSize, 10) / JSG.dpi.y));
                d = this._toolBar.getItemById("bold");
                this._formatInfo.formatMap.contains("bold") ? d.setState(!0 === this._formatInfo.formatMap.get("bold") ? c.SELECTED : c.NORMAL) : d.setState("bold" ===
                b.fontWeight || "700" === b.fontWeight ? c.SELECTED : c.NORMAL);
                d = this._toolBar.getItemById("italic");
                this._formatInfo.formatMap.contains("italic") ? d.setState(!0 === this._formatInfo.formatMap.get("italic") ? c.SELECTED : c.NORMAL) : d.setState("italic" === b.fontStyle ? c.SELECTED : c.NORMAL);
                d = this._toolBar.getItemById("underline");
                this._formatInfo.formatMap.contains("underline") ? d.setState(!0 === this._formatInfo.formatMap.get("underline") ? c.SELECTED : c.NORMAL) : d.setState("underline" === b.textDecoration ? c.SELECTED : c.NORMAL);
                if (void 0 !== b) {
                    var d = this._toolBar.getItemById("left"), e = this._toolBar.getItemById("center"), f = this._toolBar.getItemById("right");
                    switch (b.textAlign) {
                        case "left":
                            d.setState(c.SELECTED);
                            e.setState(c.NORMAL);
                            f.setState(c.NORMAL);
                            break;
                        case "center":
                            d.setState(c.NORMAL);
                            e.setState(c.SELECTED);
                            f.setState(c.NORMAL);
                            break;
                        case "right":
                            d.setState(c.NORMAL), e.setState(c.NORMAL), f.setState(c.SELECTED)
                    }
                }
                d = this._toolBar.getItemById("bullets");
                d.setState("ul" === a ? c.SELECTED : c.NORMAL);
                d = this._toolBar.getItemById("numbered");
                d.setState("ol" === a ? c.SELECTED : c.NORMAL);
                this._compStyle = b;
                this.getInteractionHandler().repaint()
            }
        }
    }
};
JSG.createTextStyles = function () {
    function a(a) {
        var c = document.createElement("style");
        c.type = "text/css";
        c.innerHTML = a;
        document.getElementsByTagName("head")[0].appendChild(c)
    }

    a("#jsgTextEdit ul, ol {-webkit-padding-start : 1.5em; padding-left : 1.5em;}");
    a("#jsgTextEdit ul, ol, p {margin-top : 0.5em; margin-bottom : 0.5em;}");
    a("#jsgTextToolbar div:hover{background-color:#00ff00};")
};
JSG.createTextStyles();
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.PinchInteraction = function () {
    JSG.graph.interaction.PinchInteraction._super.constructor.apply(this, arguments);
    this._startZoom = void 0
};
JSG.extend(JSG.graph.interaction.PinchInteraction, JSG.graph.interaction.Interaction);
JSG.graph.interaction.PinchInteraction.prototype.activate = function (a) {
    this._startZoom = void 0
};
JSG.graph.interaction.PinchInteraction.prototype.onPinchStart = function (a, b) {
    this._startZoom = b.getZoom()
};
JSG.graph.interaction.PinchInteraction.prototype.onPinch = function (a, b) {
    this._startZoom && b.setZoom(this._startZoom * a.gesture.scale)
};
JSG.graph.interaction.PinchInteraction.prototype.onPinchEnd = function (a, b) {
    this._startZoom = void 0
};
JSG.graph.interaction.PinchInteraction.Activator = function () {
    JSG.graph.interaction.PinchInteraction.Activator._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.PinchInteraction.Activator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.PinchInteraction.Activator.KEY = "pinch.activator";
JSG.graph.interaction.PinchInteraction.Activator.prototype.getKey = function () {
    return JSG.graph.interaction.PinchInteraction.Activator.KEY
};
JSG.graph.interaction.PinchInteraction.Activator.prototype.onPinchStart = function (a, b, c) {
    !1 === this.isDisposed && (this.activateInteraction(new JSG.graph.interaction.PinchInteraction, c).onPinchStart(a, b), a.hasActivated = !0)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.PanInteraction = function () {
    JSG.graph.interaction.PanInteraction._super.constructor.apply(this, arguments);
    this._startScroll = void 0
};
JSG.extend(JSG.graph.interaction.PanInteraction, JSG.graph.interaction.Interaction);
JSG.graph.interaction.PanInteraction.prototype.activate = function (a) {
    this._startScroll = void 0
};
JSG.graph.interaction.PanInteraction.prototype.onPanStart = function (a, b) {
    this._startScroll = b.getScrollPanel().getScrollPosition()
};
JSG.graph.interaction.PanInteraction.prototype.onPan = function (a, b) {
    if (this._startScroll) {
        var c = b.getScrollPanel(), d = b.getCoordinateSystem();
        c.setScrollPosition(-this._startScroll.x - d.deviceToLogX(a.gesture.deltaX), -this._startScroll.y - d.deviceToLogY(a.gesture.deltaY))
    }
};
JSG.graph.interaction.PanInteraction.prototype.onPanEnd = function (a, b) {
    this._startScroll = void 0
};
JSG.graph.interaction.PanInteraction.Activator = function () {
    JSG.graph.interaction.PanInteraction.Activator._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.PanInteraction.Activator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.PanInteraction.Activator.KEY = "pan.activator";
JSG.graph.interaction.PanInteraction.Activator.prototype.getKey = function () {
    return JSG.graph.interaction.PanInteraction.Activator.KEY
};
JSG.graph.interaction.PanInteraction.Activator.prototype.onPanStart = function (a, b, c) {
    !1 === this.isDisposed && (this.activateInteraction(new JSG.graph.interaction.PanInteraction, c).onPanStart(a, b), a.hasActivated = !0)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.DefaultKeyHandler = function () {
    JSG.graph.interaction.DefaultKeyHandler._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.DefaultKeyHandler, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.DefaultKeyHandler.prototype.onKeyUp = function (a, b, c) {
};
JSG.graph.interaction.DefaultKeyHandler.prototype.onKeyDown = function (a, b, c) {
    var d, e;
    switch (a.event.keyCode) {
        case 9:
            if ("jsgTextEdit" === a.event.target.id)return;
            d = b.getRootController().getContent();
            if (b.hasSelection()) {
                var f, g = !1, k = !1;
                e = b.getSelection();
                f = e[e.length - 1];
                d.traverse(function (a) {
                    if (k)return !1;
                    if (g) {
                        if (!a.getModel().isAnyParentCollapsed() && a.isSelectable())return b.clearSelection(!1), b.select(a), k = !0, !1
                    } else a && a !== d && a === f && (g = !0);
                    return a.getModel().isAnyParentCollapsed() ? !1 : !0
                });
                k || b.clearSelection()
            } else d.children.length &&
            b.select(d.children[0]);
            a.doRepaint = !0;
            a.consume();
            return;
        case 107:
            a.event.ctrlKey && (b.setZoom(b.getZoom() + 0.1), a.doRepaint = !0, a.consume());
            return;
        case 109:
            a.event.ctrlKey && (b.setZoom(b.getZoom() - 0.1), a.doRepaint = !0, a.consume());
            return;
        case 90:
            a.event.ctrlKey && (c.getInteractionHandler().undo(), a.consume());
            return;
        case 89:
            a.event.ctrlKey && (c.getInteractionHandler().redo(), a.consume());
            return;
        case 86:
            a.event.ctrlKey && (a.event.shiftKey ? c.getInteractionHandler().pasteFormat() : c.getInteractionHandler().paste(),
                a.consume());
            return;
        case 65:
            a.event.ctrlKey && (b.clearSelection(), d = b.getRootController().getContent(), b.setSelection(d.children), a.doRepaint = !0, a.consume());
            return
    }
    if (b.hasSelection())switch (e = b.getSelection(), a.event.keyCode) {
        case 27:
            b.clearSelection();
            a.doRepaint = !0;
            a.consume();
            break;
        case 46:
            c.getInteractionHandler().deleteSelection();
            a.consume();
            break;
        case 68:
            a.event.ctrlKey && (e = JSG.copyItems(b.getSelection()), e = new JSG.graph.command.PasteItemsCommand(e, b), c.getInteractionHandler().execute(e),
                a.consume());
            break;
        case 81:
            if (a.event.ctrlKey) {
                var h;
                c = 0;
                for (h = e.length; c < h; c++)e[c].getModel()instanceof JSG.graph.model.Node && e[c].getModel().clearPorts();
                a.consume()
            }
            break;
        case 88:
            a.event.ctrlKey && (c.getInteractionHandler().cutSelection(), a.consume());
            break;
        case 67:
            a.event.ctrlKey && (a.event.shiftKey ? c.getInteractionHandler().copySelectionFormat() : c.getInteractionHandler().copySelection(), a.consume())
    } else switch (c = b.getScrollPanel(), a.event.keyCode) {
        case 37:
            c.scroll(-500);
            a.doRepaint = !0;
            a.consume();
            break;
        case 38:
            c.scroll(0, -500);
            a.doRepaint = !0;
            a.consume();
            break;
        case 39:
            c.scroll(500);
            a.doRepaint = !0;
            a.consume();
            break;
        case 40:
            c.scroll(0, 500), a.doRepaint = !0, a.consume()
    }
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.CreateEdgeActivator = function () {
    JSG.graph.interaction.CreateEdgeActivator._super.constructor.apply(this, arguments);
    this._viewer = void 0
};
JSG.extend(JSG.graph.interaction.CreateEdgeActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.CreateEdgeActivator.KEY = "edge.activator";
JSG.graph.interaction.CreateEdgeActivator.prototype.getKey = function () {
    return JSG.graph.interaction.CreateEdgeActivator.KEY
};
JSG.graph.interaction.CreateEdgeActivator.prototype.init = function (a) {
    JSG.graph.interaction.CreateEdgeActivator._super.init.call(this, a);
    this._viewer = a;
    JSG.graph.notifications.NotificationCenter.getInstance().register(this, JSG.graph.view.SelectionProvider.SELECTION_CHANGED_NOTIFICATION)
};
JSG.graph.interaction.CreateEdgeActivator.prototype.dispose = function (a) {
    JSG.graph.interaction.CreateEdgeActivator._super.dispose.call(this, a);
    this._viewer = void 0;
    a && this._removePortsHighlights(a);
    JSG.graph.notifications.NotificationCenter.getInstance().unregister(this, JSG.graph.view.SelectionProvider.SELECTION_CHANGED_NOTIFICATION)
};
JSG.graph.interaction.CreateEdgeActivator.prototype.onNotification = function (a) {
    a = a.object;
    this._viewer && a.hasSingleSelection() && this._removePortsHighlights(this._viewer)
};
JSG.graph.interaction.CreateEdgeActivator.prototype._removePortsHighlights = function (a) {
    return (a = a.clearLayer(JSG.graph.view.LayerId.PORTS)) && 0 < a.length
};
JSG.graph.interaction.CreateEdgeActivator.prototype.onMouseDown = function (a, b, c) {
    if (!1 === this.isDisposed) {
        var d = c.getActiveHandle();
        if (!d || d.getType() === JSG.graph.view.selection.SelectionHandle.TYPE.MOVE)if (d = this._getActiveHighlight(b))b.clearLayer(JSG.graph.view.LayerId.PORTS), c = this.activateInteraction(this._createEdgeInteraction(), c), c._portFeedback = d, c.onMouseDown(a, b), a.hasActivated = !0;
        this._removePortsHighlights(b)
    }
};
JSG.graph.interaction.CreateEdgeActivator.prototype._getActiveHighlight = function (a) {
    if (a.hasLayer(JSG.graph.view.LayerId.PORTS) && (a = a.getLayer(JSG.graph.view.LayerId.PORTS), 1 === a.length && !0 === a[0]._active))return a[0]
};
JSG.graph.interaction.CreateEdgeActivator.prototype._createEdgeInteraction = function () {
    var a;
    a = JSG.graphItemFactory.createItemFromString(JSG.defaultEdgeType);
    a.getShape().getType() === JSG.graph.model.shapes.OrthoLineShape.TYPE ? (a = new JSG.graph.interaction.CreateOrthoEdgeInteraction(a), a.useCreationMode(JSG.graph.interaction.CreateOrthoEdgeInteraction.CREATION_MODE.CLICK)) : a = new JSG.graph.interaction.CreateEdgeInteraction(a);
    return a
};
JSG.graph.interaction.CreateEdgeActivator.prototype.onMouseMove = function (a, b, c) {
    if (!1 === this.isDisposed) {
        var d = this._removePortsHighlights(b);
        if (a.isConsumed)a.doRepaint = d || a.doRepaint; else {
            var e = this._getPortsToHighlight(c, a, b);
            e.length ? (d = b.getLayer(JSG.graph.view.LayerId.PORTS), JSG.Arrays.addAll(d, e), a.doRepaint = !0) : a.doRepaint = d || a.doRepaint
        }
    }
    this._getActiveHighlight(b) ? c.setCursor(JSG.ui.Cursor.Style.CROSS) : -1 < c.getCursor().indexOf("crosshair") && c.setCursor(JSG.ui.Cursor.Style.AUTO)
};
JSG.graph.interaction.CreateEdgeActivator.prototype._getPortsToHighlight = function (a, b, c) {
    return (c = JSG.graph.interaction.InteractionUtils.getPortsController(b, c)) && !c.isSelected() ? JSG.graph.interaction.InteractionUtils.getPortsFor(c, a, b.event.altKey) : []
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.CreateFriendActivator = function () {
    JSG.graph.interaction.CreateFriendActivator._super.constructor.apply(this, arguments);
    this._viewer = void 0;
    this._pendingAdd = !1
};
JSG.extend(JSG.graph.interaction.CreateFriendActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.CreateFriendActivator.FRIEND_UNIT = 200;
JSG.graph.interaction.CreateFriendActivator.KEY = "friend.activator";
JSG.graph.interaction.CreateFriendActivator.prototype.getKey = function () {
    return JSG.graph.interaction.CreateFriendActivator.KEY
};
JSG.graph.interaction.CreateFriendActivator.prototype.init = function (a) {
    JSG.graph.interaction.CreateFriendActivator._super.init.call(this, a);
    this._viewer = a;
    this._pendingAdd = !1;
    a = JSG.graph.notifications.NotificationCenter.getInstance();
    a.register(this, JSG.ui.GraphEditor.ZOOM_NOTIFICATION);
    a.register(this, JSG.graph.view.SelectionProvider.SELECTION_CHANGED_NOTIFICATION)
};
JSG.graph.interaction.CreateFriendActivator.prototype.dispose = function (a) {
    JSG.graph.interaction.CreateFriendActivator._super.dispose.call(this, a);
    this._viewer = void 0;
    a && this._removeFriendViews(a);
    a = JSG.graph.notifications.NotificationCenter.getInstance();
    a.unregister(this, JSG.ui.GraphEditor.ZOOM_NOTIFICATION);
    a.unregister(this, JSG.graph.view.SelectionProvider.SELECTION_CHANGED_NOTIFICATION)
};
JSG.graph.interaction.CreateFriendActivator.prototype.onNotification = function (a) {
    this._viewer && this._viewer.hasLayer(JSG.graph.view.LayerId.FRIENDS) && this._updateFriendViews(this._viewer)
};
JSG.graph.interaction.CreateFriendActivator.prototype._updateFriendViews = function (a, b) {
    var c = a.getSelectionProvider(), d = this._removeFriendViews(a);
    c.hasSingleSelection() && !this._pendingAdd && (d = this._addFriendViews(c.getFirstSelection().getModel(), a));
    return d
};
JSG.graph.interaction.CreateFriendActivator.prototype._removeFriendViews = function (a) {
    return (a = a.clearLayer(JSG.graph.view.LayerId.FRIENDS)) && 0 < a.length
};
JSG.graph.interaction.CreateFriendActivator.prototype.onKeyDown = function (a, b, c) {
    a.doRepaint = this._removeFriendViews(b) || a.doRepaint
};
JSG.graph.interaction.CreateFriendActivator.prototype.onMouseDown = function (a, b, c) {
    if (!1 === this.isDisposed) {
        this._pendingAdd = !0;
        var d = this._getSelectedFriendAt(c.currentLocation, b);
        if (d) {
            var e = b.getSelection();
            0 < e.length && (e = e[0].getModel(), d = this._createFriendInteraction(d, e)) && (this.activateInteraction(d, c), d.onMouseDown(a, b), a.hasActivated = !0);
            this._removeFriendViews(b)
        }
    }
};
JSG.graph.interaction.CreateFriendActivator.prototype._getSelectedFriendAt = function (a, b) {
    var c, d = b.getLayer(JSG.graph.view.LayerId.FRIENDS);
    if (d)for (c = 0; c < d.length; c++)if (d[c].containsPoint(a))return d[c].namedImg
};
JSG.graph.interaction.CreateFriendActivator.prototype._createFriendInteraction = function (a, b) {
    var c = JSG.graphItemFactory.createShape(a.name);
    if (c && 0 < c.length)return new JSG.graph.interaction.CreateFriendInteraction(c, b)
};
JSG.graph.interaction.CreateFriendActivator.prototype.onMouseMove = function (a, b, c) {
    var d = b.getLayer(JSG.graph.view.LayerId.FRIENDS);
    if (d)for (b = 0; b < d.length; b++)d[b].containsPoint(c.currentLocation) ? (d[b]._bgColor = "#DDDDDD", c.setCursor(JSG.ui.Cursor.Style.AUTO), a.doRepaint = !0, a.isConsumed = !0) : d[b]._bgColor = "#F5F0F0"
};
JSG.graph.interaction.CreateFriendActivator.prototype.onMouseUp = function (a, b, c) {
    this._pendingAdd = !1
};
JSG.graph.interaction.CreateFriendActivator.prototype._addFriendViews = function (a, b) {
    var c, d, e = a.getFriends();
    if (e.length) {
        c = b.getCoordinateSystem().metricToLogXNoZoom(JSG.graph.interaction.CreateFriendActivator.FRIEND_UNIT);
        var f = 5 * c, g = 3.5 * c, k = b.getGraphView(), h = a.getBoundingBox().getBoundingRectangle(), m = new JSG.geometry.Point(h.getRight(), h.getBottom()), m = new JSG.geometry.Point(m.x - 0.25 * h.width, m.y + 200), l = b.getGraph().getPageRectForLocation(m);
        d = k.getPageOffset(m);
        k = m.x + c;
        l.x > k && (k = l.x);
        l.x + l.width <
        k + f * Math.min(e.length, 4) && (k = l.x + l.width - f * Math.min(e.length, 4));
        h = m.y + c;
        l.y > h && (h = l.y);
        l.y + l.height < h + g * Math.ceil(e.length / 4) && (h = m.y - c - g * Math.ceil(e.length / 4));
        var m = b.getScrollPanel().getScrollPosition(JSG.ptCache.get()), k = Math.max(m.x - d.x, k), h = Math.max(m.y - d.y, h), l = b.getScrollPanel().getViewPort().getBounds(JSG.rectCache.get()), k = Math.min(m.x + l.width - f * Math.min(e.length, 4) - d.x, k), h = Math.min(m.y + l.height - g * Math.ceil(e.length / 4) - c - d.y, h), p = b.getLayer(JSG.graph.view.LayerId.FRIENDS);
        c = 0;
        for (d = e.length; c <
        d; c++) {
            var n = new JSG.graph.view.MarqueeFeedbackView;
            n._bgColor = "#F5F0F0";
            n._fgColor = "#F5F0F0";
            n._image = e[c].image;
            n.namedImg = e[c];
            n.setBounds(k + f * (c % 4), h + g * Math.floor(c / 4), f + 10, g + 10);
            p.push(n)
        }
        JSG.ptCache.release(m);
        JSG.rectCache.release(l);
        return !0
    }
    return !1
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.ResizeActivator = function () {
    JSG.graph.interaction.ResizeActivator._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.ResizeActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.ResizeActivator.KEY = "resize.activator";
JSG.graph.interaction.ResizeActivator.prototype.getKey = function () {
    return JSG.graph.interaction.ResizeActivator.KEY
};
JSG.graph.interaction.ResizeActivator.prototype.onMouseDown = function (a, b, c) {
    if (!1 === this.isDisposed) {
        var d = c.getActiveHandle();
        if (!d || d.getType() === JSG.graph.view.selection.SelectionHandle.TYPE.RESIZE)if (d = this.createResizeInteraction(d, b, c))d = this.activateInteraction(d, c), d.onMouseDown(a, b), a.hasActivated = !0
    }
};
JSG.graph.interaction.ResizeActivator.prototype.createResizeInteraction = function (a, b, c) {
    b = b.getSelectionProvider();
    return b.hasSingleSelection() ? (b = b.getFirstSelection(), b instanceof JSG.graph.controller.ConnectionController ? this.createEdgeResizeInteraction(b, a, c) : this.createNodeResizeInteraction(b, a, c)) : a && b.hasSelection() ? new JSG.graph.interaction.ResizeInteraction(a) : void 0
};
JSG.graph.interaction.ResizeActivator.prototype.createNodeResizeInteraction = function (a, b, c) {
    if (b)return a.getModel()instanceof JSG.graph.model.LineNode ? new JSG.graph.interaction.ResizeLineNodeInteraction(b) : new JSG.graph.interaction.ResizeInteraction(b)
};
JSG.graph.interaction.ResizeActivator.prototype.createEdgeResizeInteraction = function (a, b, c) {
    a = a.getView();
    var d = a.getItem(), e = d.getFormat();
    c = JSG.ptCache.get().setTo(c.currentLocation);
    JSG.graph.Utils.translatePointDown(c, a.getGraphView(), a);
    e.getLineArrowEnd().getValue() !== JSG.graph.attr.FormatAttributes.ArrowStyle.NONE && a.hitsLineArrowEnd(c) ? b = this._createArrowHandle(d.getPointsCount() - 1) : e.getLineArrowStart().getValue() !== JSG.graph.attr.FormatAttributes.ArrowStyle.NONE && a.hitsLineArrowStart(c) &&
    (b = this._createArrowHandle(0));
    JSG.ptCache.release(c);
    return b ? this._newEdgeResizeInteraction(d, b) : void 0
};
JSG.graph.interaction.ResizeActivator.prototype._createArrowHandle = function (a) {
    var b = new JSG.graph.view.selection.SelectionHandle;
    b.setType(JSG.graph.view.selection.SelectionHandle.TYPE.RESIZE);
    b.setCursor(JSG.ui.Cursor.Style.AUTO);
    b.setPointIndex(a);
    return b
};
JSG.graph.interaction.ResizeActivator.prototype._newEdgeResizeInteraction = function (a, b) {
    return new (a.getShape().getType() === JSG.graph.model.shapes.OrthoLineShape.TYPE ? JSG.graph.interaction.ResizeOrthoEdgeInteraction : JSG.graph.interaction.ResizeEdgeInteraction)(b)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.CommandButtonActivator = function () {
    JSG.graph.interaction.CommandButtonActivator._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.CommandButtonActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.CommandButtonActivator.KEY = "commandbutton.activator";
JSG.graph.interaction.CommandButtonActivator.prototype.getKey = function () {
    return JSG.graph.interaction.CommandButtonActivator.KEY
};
JSG.graph.interaction.CommandButtonActivator.prototype.onMouseDoubleClick = function (a, b, c) {
    a.isConsumed || (b = (b = c.getActiveHandle()) ? b.getType() : void 0, a.isConsumed = b === JSG.graph.view.selection.SelectionHandle.TYPE.COMMAND)
};
JSG.graph.interaction.CommandButtonActivator.prototype.onMouseDown = function (a, b, c) {
    if (!1 === this.isDisposed && (c = c.getActiveHandle(), (c ? c.getType() : void 0) === JSG.graph.view.selection.SelectionHandle.TYPE.COMMAND)) {
        var d = b.getSelectionProvider();
        d.hasSelection() && d.hasSingleSelection() && (b.getSelectionView(), a.isConsumed = !0, a.hasActivated = !0, this._command = c.cmdBtn)
    }
};
JSG.graph.interaction.CommandButtonActivator.prototype.onMouseUp = function (a, b, c) {
    if (this._command) {
        a.isConsumed = !0;
        a.hasActivated = !0;
        var d = b.getSelectionProvider().getFirstSelection().getModel();
        a = d.getParent();
        var e, f, g, k;
        switch (this._command._type) {
            case JSG.graph.view.selection.CommandButton.Type.ADDCHILD:
                b = new JSG.graph.command.CompoundCommand;
                if (e = JSG.graphItemFactory.createShape(this._command._command)[0])b.add(new JSG.graph.command.AddItemCommand(e, a)), g = new JSG.graph.model.Port, k = new JSG.graph.model.Port,
                    b.add(new JSG.graph.command.AddPortCommand(g, new JSG.geometry.Point(0.5, 1), d, !0)), b.add(new JSG.graph.command.AddPortCommand(k, new JSG.geometry.Point(0.5, 0), e, !0)), f = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape), f.getFormat().setLineCorner(100), f.getFormat().setFillColor("#AAAAAA"), b.add(new JSG.graph.command.AttachCommand(f, g, !0)), b.add(new JSG.graph.command.AttachCommand(f, k, !1)), b.add(new JSG.graph.command.AddItemCommand(f, a)), c.getInteractionHandler().execute(b);
                break;
            case JSG.graph.view.selection.CommandButton.Type.ADDSIBLINGBEFORE:
            case JSG.graph.view.selection.CommandButton.Type.ADDSIBLINGAFTER:
                g =
                    d.getAttachedEdges();
                b = new JSG.graph.command.CompoundCommand;
                for (e = 0; e < g.length; e++)if (g[e].getTargetPort().getParent() === d) {
                    f = g[e].getSourcePort().getParent();
                    break
                }
                if (e = JSG.graphItemFactory.createShape(this._command._command)[0])d = d.getIndex(), this._command._type === JSG.graph.view.selection.CommandButton.Type.ADDSIBLINGBEFORE ? b.add(new JSG.graph.command.AddItemCommand(e, a, d)) : b.add(new JSG.graph.command.AddItemCommand(e, a, d + 1));
                f && (g = new JSG.graph.model.Port, k = new JSG.graph.model.Port, b.add(new JSG.graph.command.AddPortCommand(g,
                    new JSG.geometry.Point(0.5, 1), f, !0)), b.add(new JSG.graph.command.AddPortCommand(k, new JSG.geometry.Point(0.5, 0), e, !0)), f = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape), f.getFormat().setLineCorner(100), f.getFormat().setFillColor("#AAAAAA"), b.add(new JSG.graph.command.AttachCommand(f, g, !0)), b.add(new JSG.graph.command.AttachCommand(f, k, !1)), b.add(new JSG.graph.command.AddItemCommand(f, a)));
                c.getInteractionHandler().execute(b);
                break;
            case JSG.graph.view.selection.CommandButton.Type.ADDPARENT:
                b =
                    new JSG.graph.command.CompoundCommand;
                if (e = JSG.graphItemFactory.createShape(this._command._command)[0])b.add(new JSG.graph.command.AddItemCommand(e, a)), g = new JSG.graph.model.Port, k = new JSG.graph.model.Port, b.add(new JSG.graph.command.AddPortCommand(g, new JSG.geometry.Point(0.5, 1), e, !0)), b.add(new JSG.graph.command.AddPortCommand(k, new JSG.geometry.Point(0.5, 0), d, !0)), f = new JSG.graph.model.Edge(new JSG.graph.model.shapes.OrthoLineShape), f.getFormat().setLineCorner(100), f.getFormat().setFillColor("#AAAAAA"),
                    b.add(new JSG.graph.command.AttachCommand(f, g, !0)), b.add(new JSG.graph.command.AttachCommand(f, k, !1)), b.add(new JSG.graph.command.AddItemCommand(f, a)), c.getInteractionHandler().execute(b);
                break;
            case JSG.graph.view.selection.CommandButton.Type.CALLBACK:
                this._command._command.call(this)
        }
        this._command = void 0
    }
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.ReshapeActivator = function () {
    JSG.graph.interaction.ReshapeActivator._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.ReshapeActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.ReshapeActivator.KEY = "reshape.activator";
JSG.graph.interaction.ReshapeActivator.prototype.getKey = function () {
    return JSG.graph.interaction.ReshapeActivator.KEY
};
JSG.graph.interaction.ReshapeActivator.prototype.onMouseDown = function (a, b, c) {
    if (!1 === this.isDisposed) {
        var d = c.getActiveHandle();
        d && d.getType() === JSG.graph.view.selection.SelectionHandle.TYPE.RESHAPE && (this.activateInteraction(new JSG.graph.interaction.ReshapeInteraction(d), c).onMouseDown(a, b), a.hasActivated = !0)
    }
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.RotateActivator = function () {
    JSG.graph.interaction.RotateActivator._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.RotateActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.RotateActivator.KEY = "rotate.activator";
JSG.graph.interaction.RotateActivator.prototype.getKey = function () {
    return JSG.graph.interaction.RotateActivator.KEY
};
JSG.graph.interaction.RotateActivator.prototype.onMouseDown = function (a, b, c) {
    if (!1 === this.isDisposed) {
        var d = c.getActiveHandle();
        d && d.getType() === JSG.graph.view.selection.SelectionHandle.TYPE.ROTATE && this._activate(a, b, c)
    }
};
JSG.graph.interaction.RotateActivator.prototype.onRotateStart = function (a, b, c) {
    !1 === this.isDisposed && this._activate(a, b, c)
};
JSG.graph.interaction.RotateActivator.prototype._activate = function (a, b, c) {
    this.activateInteraction(new JSG.graph.interaction.RotateInteraction, c).onRotateStart(a, b);
    a.hasActivated = !0
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.MoveActivator = function () {
    JSG.graph.interaction.MoveActivator._super.constructor.apply(this, arguments);
    this._possibleDragMove = !1
};
JSG.extend(JSG.graph.interaction.MoveActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.MoveActivator.KEY = "move.activator";
JSG.graph.interaction.MoveActivator.prototype.getKey = function () {
    return JSG.graph.interaction.MoveActivator.KEY
};
JSG.graph.interaction.MoveActivator.prototype.dispose = function (a) {
    JSG.graph.interaction.MoveActivator._super.dispose.call(this, a);
    this._possibleDragMove = !1
};
JSG.graph.interaction.MoveActivator.prototype.onKeyDown = function (a, b, c) {
    switch (a.event.keyCode) {
        case 37:
        case 38:
        case 39:
        case 40:
            if (!b.hasSelection())break;
            this.activateInteraction(new JSG.graph.interaction.MoveInteraction, c).onKeyDown(a, b);
            a.hasActivated = !0;
            a.doRepaint = !0
    }
};
JSG.graph.interaction.MoveActivator.prototype.onMouseDown = function (a, b, c) {
    if (!1 === this.isDisposed) {
        var d = c.getActiveHandle();
        d && d.getType() === JSG.graph.view.selection.SelectionHandle.TYPE.MOVE ? (this.activateInteraction(new JSG.graph.interaction.MoveInteraction, c).onMouseDown(a, b), a.hasActivated = !0) : !(a = c.getControllerAt(a.location)) || a instanceof JSG.graph.controller.GraphController || (this._possibleDragMove = a.getModel().isMoveable())
    }
};
JSG.graph.interaction.MoveActivator.prototype.onMouseDrag = function (a, b, c) {
    !1 === this.isDisposed && !0 === this._possibleDragMove && (c = this.activateInteraction(new JSG.graph.interaction.MoveInteraction, c), c.onMouseDown(a, b), c.onMouseDrag(a, b), a.hasActivated = !0)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.MarqueeActivator = function () {
    JSG.graph.interaction.MarqueeActivator._super.constructor.apply(this, arguments);
    this._newSelected = !1
};
JSG.extend(JSG.graph.interaction.MarqueeActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.MarqueeActivator.KEY = "marquee.activator";
JSG.graph.interaction.MarqueeActivator.prototype.getKey = function () {
    return JSG.graph.interaction.MarqueeActivator.KEY
};
JSG.graph.interaction.MarqueeActivator.prototype.dispose = function (a) {
    JSG.graph.interaction.MarqueeActivator._super.dispose.call(this, a);
    this._newSelected = !1
};
JSG.graph.interaction.MarqueeActivator.prototype.onMouseDown = function (a, b, c) {
    var d;
    d = c.getActiveHandle();
    !1 !== this.isDisposed || d || (d = this.getController(a, b, c), this._newSelected = this._isNewSelection(d, a, b), d instanceof JSG.graph.controller.GraphController ? (b.clearSelection(), c = this.activateInteraction(new JSG.graph.interaction.MarqueeInteraction, c), c.onMouseDown(a, b), a.hasActivated = !0) : d && this._newSelected && this._setSelection(d, a, b))
};
JSG.graph.interaction.MarqueeActivator.prototype._isNewSelection = function (a, b, c) {
    a = c.getSelectionProvider();
    return a.hasSingleSelection() ? (a = a.getFirstSelection(), b = JSG.ptCache.get().setTo(b.location), c.translateFromParent(b), JSG.graph.Utils.translatePointDown(b, a.model.getGraph(), a.model.getParent()), c = a.containsPoint(b), JSG.ptCache.release(b), !c) : !0
};
JSG.graph.interaction.MarqueeActivator.prototype._setSelection = function (a, b, c) {
    c.getSelectionProvider().hasSelection() ? (b = !b.isPressed(JSG.ui.events.KeyType.CTRL) && !b.isPressed(JSG.ui.events.KeyType.SHIFT)) || !c.hasSelection() ? this._setSingleSelection(a, c) : this._setMultiSelection(a, c) : this._setSingleSelection(a, c)
};
JSG.graph.interaction.MarqueeActivator.prototype.onMouseDrag = function (a, b, c) {
    var d = JSG.ptCache.get().setTo(c.currentLocation).subtract(c.startLocation);
    10 < d.length() && (b.clearSelection(), this.activateInteraction(new JSG.graph.interaction.MarqueeInteraction, c).onMouseDrag(a, b), a.hasActivated = !0);
    JSG.ptCache.release(d)
};
JSG.graph.interaction.MarqueeActivator.prototype._setSingleSelection = function (a, b) {
    a = this._checkSelectedController(a, b);
    if (!a.isSelected()) {
        b.clearSelection(!1);
        var c = 0, d = a.getModel(), e = b.getSelectionView();
        JSG.graph.Utils.traverseItemUp(d, d.getGraph(), function (a) {
            c += a.getAngle().getValue()
        });
        e.setRotationAngle(c);
        b.select(a)
    }
};
JSG.graph.interaction.MarqueeActivator.prototype._checkSelectedController = function (a, b) {
    var c, d, e;
    e = a.getModel();
    var f = e.getParent();
    e instanceof JSG.graph.model.TextNode && (f.isSelectable() && !(f instanceof JSG.graph.model.Graph)) && (c = a.getParent(), d = f.getBoundingBox(JSG.boxCache.get()), e = e.getTranslatedBoundingBox(f.getParent(), JSG.boxCache.get()), d.doesIntersectWith(e) && !c.isSelected() && (a = c), JSG.boxCache.release(d, e));
    return a
};
JSG.graph.interaction.MarqueeActivator.prototype._setMultiSelection = function (a, b) {
    var c, d, e, f;
    a = this._checkSelectedController(a, b);
    if (!this._hasSelectedParent(a)) {
        c = b.getSelectionProvider();
        d = [];
        e = c.getSelection();
        for (f = 0; f < e.length; f++)this._hasSelectedParent(e[f], a) || d.push(e[f]);
        d.push(a);
        c.setSelection(d)
    }
};
JSG.graph.interaction.MarqueeActivator.prototype._hasSelectedParent = function (a, b) {
    var c = a.getParent();
    return c ? c.isSelected() || c === b ? !0 : this._hasSelectedParent(c) : !1
};
JSG.graph.interaction.MarqueeActivator.prototype.onMouseUp = function (a, b, c) {
    var d, e;
    !1 === this.isDisposed && a.isInCanvas() && (d = c.getControllerAt(a.location), e = b.getSelectionProvider(), e.hasSingleSelection() && (d = this.getController(a, b, c)), !d || (d.isSelected() || d instanceof JSG.graph.controller.GraphController) || this._setSelection(d, a, b))
};
JSG.graph.interaction.MarqueeActivator.prototype.getController = function (a, b, c) {
    if (a instanceof JSG.ui.events.MouseEvent) {
        if (a.type === JSG.ui.events.MouseEventType.DOWN)return a = c.getControllerAt(a.location, JSG.graph.controller.FindFlags.AREA, this._condition), this._checkParent(a);
        if (a.type === JSG.ui.events.MouseEventType.UP)return this.findController(c.currentLocation.copy(), a, b)
    }
    return c.getControllerAt(a.location)
};
JSG.graph.interaction.MarqueeActivator.prototype._condition = function (a, b) {
    return a.isSelectable() && a.containsPoint(b, JSG.graph.controller.FindFlags.AUTOMATIC)
};
JSG.graph.interaction.MarqueeActivator.prototype._checkParent = function (a) {
    var b, c;
    return !a || a instanceof JSG.graph.controller.GraphController || (b = a.getParent(), c = b.getModel().getType().getValue(), b.isSelected() || "bpmnpool" !== c && "bpmnlane" !== c) ? a : b
};
JSG.graph.interaction.MarqueeActivator.prototype.findController = function (a, b, c) {
    function d(a) {
        if (a instanceof JSG.graph.controller.GraphController || !b.event.altKey && !a.isSelectable())return !1;
        if (a === k)return !!e;
        e = a;
        return !1
    }

    var e, f = c.getSelection(), g = c.getSelectionView(), k = f && 1 === f.length ? f[0] : void 0;
    return !1 === this._newSelected && k && g.containsPoint(a) ? (c.findControllerAt(b.location, JSG.graph.controller.FindFlags.AUTOMATIC, d), e || k) : k
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.EditTextActivator = function () {
    JSG.graph.interaction.EditTextActivator._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.EditTextActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.EditTextActivator.KEY = "edittext.activator";
JSG.graph.interaction.EditTextActivator.prototype.getKey = function () {
    return JSG.graph.interaction.EditTextActivator.KEY
};
JSG.graph.interaction.EditTextActivator.prototype.onResizeCanvas = function (a, b, c, d) {
    return !1
};
JSG.graph.interaction.EditTextActivator.prototype.onMouseDown = function (a, b, c) {
    if (!1 === this.isDisposed) {
        var d = c.getActiveHandle();
        (void 0 !== d ? d.getType() : void 0) === JSG.graph.interaction.ActionHandle.TYPE.EDIT && this._startEditTextInteraction(a, b, c, d.getController())
    }
};
JSG.graph.interaction.EditTextActivator.prototype.onMouseDoubleClick = function (a, b, c) {
    if (!1 === this.isDisposed && !a.isConsumed) {
        var d = c.getControllerAt(a.location, void 0, this._dblclickCondition), d = this._getTextNodeController(c, d, c.currentLocation);
        void 0 !== d && (b.clearSelection(!1), b.select(d.getParent()), this._startEditTextInteraction(a, b, c, d))
    }
};
JSG.graph.interaction.EditTextActivator.prototype._dblclickCondition = function (a) {
    return a instanceof JSG.graph.controller.GraphController ? !1 : a.isSelectable()
};
JSG.graph.interaction.EditTextActivator.prototype.onKeyDown = function (a, b, c) {
    var d;
    113 === a.event.keyCode && (d = b.getSelection(), void 0 !== d && 1 === d.length && (d = this._getTextNodeController(c, d[0]), void 0 !== d && this._startEditTextInteraction(a, b, c, d)))
};
JSG.graph.interaction.EditTextActivator.prototype._getTextNodeController = function (a, b, c) {
    var d, e;
    void 0 !== b && (d = b.getModel(), d instanceof JSG.graph.model.TextNode || (e = (e = c ? JSG.ptCache.get().setTo(c) : void 0) ? JSG.graph.Utils.translatePointDown(e, d.getGraph(), d) : void 0, c = d.getTextSubItem(e), void 0 === c && d.isAddLabelAllowed() && (this._addLabel(a, d), c = d.getTextSubItem()), b = void 0 !== c ? b.getModelController(c) : void 0, JSG.ptCache.release(e)));
    return b
};
JSG.graph.interaction.EditTextActivator.prototype._addLabel = function (a, b) {
    a.getInteractionHandler().execute(new JSG.graph.command.AddLabelCommand(b, "Label"))
};
JSG.graph.interaction.EditTextActivator.prototype._startEditTextInteraction = function (a, b, c, d) {
    this._isEditable(d) && (c = this.activateInteraction(new JSG.graph.interaction.EditTextInteraction, c), c.setController(d), c.startEdit(d, a, b), a.hasActivated = !0)
};
JSG.graph.interaction.EditTextActivator.prototype._isEditable = function (a) {
    a = void 0 !== a ? a.getModel().getItemAttributes() : void 0;
    return void 0 !== a ? !a.hasEditMask(JSG.graph.attr.consts.EditMask.LABEL) : !1
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.DragDropActivator = function () {
    JSG.graph.interaction.DragDropActivator._super.constructor.apply(this, arguments);
    this._controller = void 0
};
JSG.extend(JSG.graph.interaction.DragDropActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.DragDropActivator.prototype.getTargetEditor = function () {
};
JSG.graph.interaction.DragDropActivator.prototype.dispose = function (a) {
    JSG.graph.interaction.DragDropActivator._super.dispose.call(this, a);
    JSG.keepFocus = !1;
    this._controller = void 0
};
JSG.graph.interaction.DragDropActivator.prototype.onMouseDown = function (a, b, c) {
    !1 === this.isDisposed && (JSG.keepFocus = !0, !(a = c.getControllerAt(a.location)) || a instanceof JSG.graph.controller.GraphController || ((c = this.getTargetEditor()) && (c = c.getGraphViewer()) && c.clearSelection(), b.clearSelection(), this._controller = a))
};
JSG.graph.interaction.DragDropActivator.prototype.onMouseUp = function (a, b, c) {
    !1 === this.isDisposed && (JSG.keepFocus = !1)
};
JSG.graph.interaction.DragDropActivator.prototype.onMouseDrag = function (a, b, c) {
    if (!1 === this.isDisposed) {
        var d = this._controller ? this._controller.getModel() : void 0, e = this.getTargetEditor();
        if (d && e) {
            var f = e.getGraphViewer();
            c = this.activateInteraction(this.createInteraction(b, f), c);
            c.setDraggedItem(d);
            c.registerTargetEditor(e);
            c.onMouseDown(a, b)
        }
    }
};
JSG.graph.interaction.DragDropActivator.prototype.createInteraction = function (a, b) {
    return new JSG.graph.interaction.DragDropInteraction(a, b)
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.LinkActivator = function () {
    this._link = void 0;
    JSG.graph.interaction.LinkActivator._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.LinkActivator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.LinkActivator.KEY = "link.activator";
JSG.graph.interaction.LinkActivator.prototype.getKey = function () {
    return JSG.graph.interaction.LinkActivator.KEY
};
JSG.graph.interaction.LinkActivator.prototype.dispose = function (a) {
    JSG.graph.interaction.LinkActivator._super.dispose.call(this, a)
};
JSG.graph.interaction.LinkActivator.prototype.onKeyDown = function (a, b, c) {
    this.onMouseMove(a, b, c)
};
JSG.graph.interaction.LinkActivator.prototype.onMouseMove = function (a, b, c) {
    this._reference = this._link = void 0;
    this.isExecuteEvent(a) && (b = this._getControllerAt(a.location, c)) && (b = b.getModel().getLink().getValue()) && b.length && (this._link = b, c.setCursor(JSG.ui.Cursor.Style.EXECUTE), a.isConsumed = !0, a.hasActivated = !0)
};
JSG.graph.interaction.LinkActivator.prototype._getControllerAt = function (a, b) {
    var c = b.getControllerAt(a);
    if (c && !(c instanceof JSG.graph.controller.GraphController))return c.getModel()instanceof JSG.graph.model.TextNode && (c = c.getParent()), c
};
JSG.graph.interaction.LinkActivator.prototype.onMouseUp = function (a, b, c) {
    this._link && (a.isConsumed = !0, a.hasActivated = !0, -1 !== this._link.search("file:") || -1 !== this._link.search("code:") ? (a = this._getControllerAt(a.location, c), c.getInteractionHandler().executeLink(a)) : -1 === this._link.search("http://") ? window.open("http://" + this._link, "_blank") : window.open(this._link, "_blank"))
};
JSG.graph.interaction.LinkActivator.prototype.isExecuteEvent = function (a) {
    return a && !a.isPressed(JSG.ui.events.KeyType.CTRL)
};
JSG.namespace("JSG.graph.layout");
JSG.graph.layout.LayoutManager = function () {
};
JSG.graph.layout.LayoutManager.prototype.createLayoutFromString = function (a) {
};
JSG.graph.layout.LayoutManager.prototype.createConstraintsForLayout = function (a) {
};
JSG.graph.layout.LayoutManager.prototype.getLayoutStrings = function () {
};
JSG.graph.layout.LayoutManager.prototype.getLayoutModel = function (a) {
};
JSG.graph.layout.LayoutManager.prototype.getLayoutIndex = function (a, b, c, d, e, f) {
};
JSG.graph.layout.LayoutManager.prototype.applyLayoutResult = function (a, b) {
};
JSG.graph.layout.LayoutManager.prototype.isLayoutDesired = function (a, b) {
    return !0
};
JSG.graph.layout.LayoutManager.prototype.isSortDesired = function (a, b) {
    return !0
};
JSG.touchDevice = !!("ontouchstart"in window) || !!("msmaxtouchpoints"in window.navigator);
JSG.isFF = "undefined" !== typeof InstallTrigger;
JSG.browserVersion = function () {
    var a = navigator.userAgent, b, c = a.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*([\d\.]+)/i) || [];
    if (/trident/i.test(c[1]))return b = /\brv[ :]+(\d+(\.\d+)?)/g.exec(a) || [], "IE " + (b[1] || "");
    c = c[2] ? [c[1], c[2]] : [navigator.appName, navigator.appVersion, "-?"];
    null !== (b = a.match(/version\/([\.\d]+)/i)) && (c[2] = b[1]);
    return c
}();
JSG.canvasSupported = !!window.HTMLCanvasElement;
JSG.bkColorHeader = "#F3F3F3";
JSG.bkColorScroll = "#F3F3F3";
JSG.bkColorGraph = "#DDDDDD";
JSG.bkColorButton = "#CCCCCC";
JSG.bkColorNavigator = "#F3F3F3";
JSG.bkColorShapeLibrary = "#FFFFFF";
JSG.fontColorShapeLibrary = "#000000";
JSG.bkColorShapeLibraryTitle = "#DDDDDD";
JSG.fontColorShapeLibraryTitle = "#000000";
JSG.findRadius = JSG.touchDevice ? 600 : 300;
JSG.portFindRadius = JSG.touchDevice ? 400 : 200;
JSG.createThreshhold = 300;
JSG.snapRadius = 300;
JSG.keepFocus = !1;
JSG.canvasCache = !0;
JSG.colors = "FFFFFF 000000 222222 444444 666666 888888 AAAAAA CCCCCC EEEEEE 660000 663300 996633 003300 003333 003399 000066 330066 660066 990000 993300 CC9900 006600 336666 0033FF 000099 660099 990066 CC0000 CC3300 FFCC00 009900 006666 0066FF 0000CC 663399 CC0099 FF0000 FF3300 FFFF00 00CC00 009999 0099FF 0000FF 9900CC FF0099 CC3333 FF6600 FFFF33 00FF00 00CCCC 00CCFF 3366FF 9933FF FF00FF FF6666 FF6633 FFFF66 66FF66 66CCCC 00FFFF 3399FF 9966FF FF66FF FF9999 FF9966 FFFF99 99FF99 66FFCC 99FFFF 66CCFF 9999FF FF99FF FFCCCC FFCC99 FFFFCC CCFFCC 99FFCC CCFFFF 99CCFF CCCCFF FFCCFF".split(" ");
JSG.MIN_WIDTH_HEIGHT = 50;
JSG.imagePool = new JSG.commons.ImagePool;
JSG.TemplateStore = new JSG.graph.attr.TemplateStore;
JSG.fontMetricsCache = new JSG.commons.Map;
JSG.clipXML = void 0;
JSG.clipOffset = new JSG.geometry.Point(200, 200);
JSG.clipFormat = void 0;
JSG.clipTextFormat = void 0;
JSG.connectionRestorer = void 0;
JSG.graphItemFactory = new JSG.graph.model.GraphItemFactory;
JSG.layoutFactory = new JSG.graph.layout.LayoutManager;
JSG.defaultEdgeType = "edge";
JSG.getDpi = function () {
    var a = document.createElement("div");
    a.setAttribute("id", "TestDiv");
    a.setAttribute("style", "height: 1in; left: -100%; position: absolute; top: -100%; width: 1in;");
    document.body.appendChild(a);
    var b = new JSG.geometry.Point(a.offsetWidth, a.offsetHeight);
    document.body.removeChild(a);
    return b
};
JSG.dpi = JSG.getDpi();
JSG.graphics = new JSG.ui.graphics.ScalableGraphics(document.createElement("canvas"), new JSG.ui.graphics.MetricCoordinateSystem);
JSG.drawingDisabled = !1;
JSG.propertyEventsDisabled = !1;
JSG.DRAW_DISABLED_NOTIFICATION = "jsg.draw.disabled.notification";
JSG.setDrawingDisabled = function (a) {
    a !== JSG.drawingDisabled && (JSG.drawingDisabled = a, JSG.graph.notifications.NotificationCenter.getInstance().send(new JSG.graph.notifications.Notification(JSG.DRAW_DISABLED_NOTIFICATION, this)))
};
JSG.setPropertyEventsDisabled = function (a) {
    JSG.propertyEventsDisabled = a
};
JSG.copyItems = function (a) {
    var b = new JSG.commons.XMLWriter("UTF-8", "1.0"), c, d;
    b.writeStartDocument();
    b.writeStartElement("clip");
    if (void 0 === a.length)a.getModel().resolveParentReferences(!0), a.getModel().saveXML(b, !0); else for (c = 0, d = a.length; c < d; c++)a[c].getModel().resolveParentReferences(!0), a[c].getModel().saveXML(b, !0);
    b.writeEndElement();
    b.writeEndDocument();
    this.debug.log(b.flush());
    return b.flush()
};
JSG.init = function (a) {
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_NOTAVAIL + ".png", JSG.commons.ImagePool.IMG_NOTAVAIL);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_EXPANDED + ".png", JSG.commons.ImagePool.IMG_EXPANDED);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_COLLAPSED + ".png", JSG.commons.ImagePool.IMG_COLLAPSED);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_BOLD + ".png", JSG.commons.ImagePool.IMG_BOLD);
    JSG.imagePool.add(a + "/res/images/" +
    JSG.commons.ImagePool.IMG_ITALIC + ".png", JSG.commons.ImagePool.IMG_ITALIC);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_UNDERLINE + ".png", JSG.commons.ImagePool.IMG_UNDERLINE);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_LEFT_ALIGN + ".png", JSG.commons.ImagePool.IMG_LEFT_ALIGN);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_CENTER_ALIGN + ".png", JSG.commons.ImagePool.IMG_CENTER_ALIGN);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_RIGHT_ALIGN + ".png",
        JSG.commons.ImagePool.IMG_RIGHT_ALIGN);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_FONTCOLOR + ".png", JSG.commons.ImagePool.IMG_FONTCOLOR);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_FONTSIZE_UP + ".png", JSG.commons.ImagePool.IMG_FONTSIZE_UP);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_FONTSIZE_DOWN + ".png", JSG.commons.ImagePool.IMG_FONTSIZE_DOWN);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_BULLETS + ".png", JSG.commons.ImagePool.IMG_BULLETS);
    JSG.imagePool.add(a + "/res/images/" + JSG.commons.ImagePool.IMG_NUMBERED + ".png", JSG.commons.ImagePool.IMG_NUMBERED);
    JSG.ui.Cursor.Style.CROSS = "url(" + a + "/res/cross.cur), crosshair";
    JSG.ui.Cursor.Style.ROTATE = "url(" + a + "/res/rotate.cur), move";
    JSG.ui.Cursor.Style.SHEET = "url(" + a + "/res/sheet.cur), move";
    JSG.ui.Cursor.Style.SHEETROW = "url(" + a + "/res/sheetrow.cur), move";
    JSG.ui.Cursor.Style.SHEETCOLUMN = "url(" + a + "/res/sheetcolumn.cur), move";
    JSG.ui.Cursor.Style.SHEETROWSIZE = "url(" + a + "/res/rowsize.cur), move";
    JSG.ui.Cursor.Style.SHEETCOLUMNSIZE = "url(" + a + "/res/columnsize.cur), move"
};
JSG.throwException = function (a, b) {
    throw{
        name: a, message: b, toString: function () {
            return this.name + ": " + this.message
        }
    };
};
JSG.debug = {};
JSG.debug._isActive = !1;
JSG.debug.SHOW_BBOX_POINTS = JSG.debug._isActive && !1;
JSG.debug.SHOW_LINE_BBOX = !1;
JSG.debug.SHOW_LINE_ORIGIN = !1;
JSG.debug.DUMP_ITEM_ID = !1;
JSG.debug.DRAW_ITEM_PORTS = JSG.debug._isActive && !1;
JSG.debug.DRAW_ITEM_CENTER = JSG.debug._isActive && !1;
JSG.debug.DUMP_LAYOUT_MODEL = JSG.debug._isActive && !1;
JSG.debug.DEBUG_ORTHO = !1;
JSG.debug.DUMP_CACHE_COUNTS = !1;
JSG.debug.DUMP_CACHE_SIZE = !1;
JSG.debug.USE_DOC_DISPATCHER = !0;
JSG.debug.SCROLLVIEW_TEST = !1;
JSG.ptCnt = 0;
JSG.rectCnt = 0;
JSG.bboxCnt = 0;
JSG.debug.log = function (a, b) {
    "undefined" != typeof console && (void 0 != b ? !0 === b && console.log(a) : JSG.debug._isActive && console.log(a))
};
JSG.debug.logError = function (a, b) {
    "undefined" !== typeof console && (a && console.log(a), b && console.log("Reason: " + b.toString()))
};
JSG.debug.info = function (a) {
    JSG.debug._isActive && "undefined" != typeof console && (console.info ? console.info(a) : console.log && console.log(a))
};
JSG.debug.logPoint = function (a, b, c) {
    a = JSG.ptCache.get(a.x, a.y);
    JSG.graph.Utils.translatePointUp(a, b, b.getGraph());
    JSG.debug.log((void 0 !== c ? c : "") + a.toString(), !0);
    JSG.ptCache.release(a)
};
JSG.debug.performance = function (a, b, c) {
    var d = (new Date).getTime(), e;
    for (e = 0; e < b; e++)a();
    a = (new Date).getTime() - d;
    void 0 !== c && JSG.debug.log(c + ": " + a + "ms");
    return a
};
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.Property = function (a, b, c) {
    this.id = a;
    this.getter = b;
    this.setter = c;
    this.value = "";
    this.numeration = void 0
};
JSG.graph.properties.Property.prototype.copy = function () {
    var a = new JSG.graph.properties.Property(this.id, this.getter, this.setter);
    a.value = this.value;
    return a
};
JSG.graph.properties.Property.prototype.getValue = function () {
    if (this.getter) {
        var a = Array.prototype.slice.call(arguments), b = a.shift();
        return this._callFunction(this.getter, a, b)
    }
    return this.value
};
JSG.graph.properties.Property.prototype.setValue = function (a, b) {
    this.setter ? (b = Array.prototype.slice.call(arguments), a = b.shift(), this._callFunction(this.setter, b, a)) : this.value = b
};
JSG.graph.properties.Property.prototype._callFunction = function (a, b, c) {
    if (void 0 !== a)return (JSG.Strings.isString(a) ? c[a] : a).apply(c, b)
};
JSG.graph.properties.Property.prototype.setCategory = function (a) {
    this.category = a
};
JSG.graph.properties.Property.prototype.getCategory = function () {
    return this.category
};
JSG.graph.properties.IndexProperty = function (a, b, c, d) {
    JSG.graph.properties.IndexProperty._super.constructor.call(this, a, b, c);
    this.index = d
};
JSG.extend(JSG.graph.properties.IndexProperty, JSG.graph.properties.Property);
JSG.graph.properties.IndexProperty.prototype.copy = function () {
    var a = new JSG.graph.properties.IndexProperty(this.id, this.getter, this.setter, this.index);
    a.value = this.value;
    return a
};
JSG.graph.properties.IndexProperty.prototype._callFunction = function (a, b, c) {
    b.unshift(this.index);
    return JSG.graph.properties.IndexProperty._super._callFunction.call(this, a, b, c)
};
JSG.graph.properties.AttributeProperty = function (a) {
    JSG.graph.properties.AttributeProperty._super.constructor.call(this, a);
    this.path = a
};
JSG.extend(JSG.graph.properties.AttributeProperty, JSG.graph.properties.Property);
JSG.graph.properties.AttributeProperty.copy = function () {
    var a = new JSG.graph.properties.AttributeProperty(this.path);
    a.value = this.value;
    return a
};
JSG.graph.properties.AttributeProperty.prototype.getValue = function () {
    var a = Array.prototype.slice.call(arguments).shift().getAttributeAtPath(this.path);
    return void 0 !== a ? a.getExpression() : this.value
};
JSG.graph.properties.AttributeProperty.prototype.setValue = function (a, b) {
    b = Array.prototype.slice.call(arguments);
    a = b.shift();
    var c = b.shift();
    a.setAttributeAtPath(this.path, c);
    this.value = c
};
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.Properties = function () {
    this._properties = new JSG.commons.Map
};
JSG.graph.properties.Properties.prototype.addProperty = function (a, b, c) {
    a = new JSG.graph.properties.Property(a, b, c);
    this._properties.put(a.id, a);
    return a
};
JSG.graph.properties.Properties.prototype.addIndexProperty = function (a, b, c, d) {
    a = new JSG.graph.properties.IndexProperty(a, b, c, d);
    this._properties.put(a.id, a);
    return a
};
JSG.graph.properties.Properties.prototype.getProperty = function (a) {
    return this._properties.get(a)
};
JSG.graph.properties.Properties.prototype.getPropertiesMap = function () {
    return this._properties
};
JSG.graph.properties.Properties.prototype.size = function () {
    return this._properties.size()
};
JSG.graph.properties.Properties.prototype.clear = function () {
    return this._properties.clear()
};
JSG.graph.properties.Properties.prototype.getAllProperties = function () {
    return this._properties.elements()
};
JSG.graph.properties.Properties.prototype.copy = function () {
    var a = new JSG.graph.properties.Properties;
    this._properties.iterate(function (b, c) {
        a._properties.put(b, c.copy())
    });
    return a
};
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.GraphItemProperties = function () {
    JSG.graph.properties.GraphItemProperties._super.constructor.apply(this, arguments);
    var a = JSG.graph.properties.GraphItemProperties;
    a.ID = this.addProperty("ID", "getId");
    a.LAYER = this.addProperty("LAYER", "getLayer", "setLayer");
    a.TYPE = this.addProperty("TYPE", "getType", "setType");
    a.LINK = this.addProperty("LINK", "getLink", "setLink");
    a.ANGLE = this.addProperty("ANGLE", "getAngle", "setAngle");
    a.WIDTH = this.addProperty("WIDTH", "getWidth", "setWidth");
    a.HEIGHT = this.addProperty("HEIGHT",
        "getHeight", "setHeight");
    a.ORIGIN_X = this.addProperty("ORIGIN_X", a.getOriginX, a.setOriginX);
    a.ORIGIN_Y = this.addProperty("ORIGIN_Y", a.getOriginY, a.setOriginY);
    a.PIN_X = this.addProperty("PIN_X", a.getPinX, a.setPinX);
    a.PIN_Y = this.addProperty("PIN_Y", a.getPinY, a.setPinY);
    a.LOCALPIN_X = this.addProperty("LOCALPIN_X", a.getLocalPinX, a.setLocalPinX);
    a.LOCALPIN_Y = this.addProperty("LOCALPIN_Y", a.getLocalPinY, a.setLocalPinY)
};
JSG.extend(JSG.graph.properties.GraphItemProperties, JSG.graph.properties.Properties);
JSG.graph.properties.GraphItemProperties.getPinX = function () {
    return this._pin.getX()
};
JSG.graph.properties.GraphItemProperties.setPinX = function (a) {
    this._pin.setX(a)
};
JSG.graph.properties.GraphItemProperties.getPinY = function () {
    return this._pin.getY()
};
JSG.graph.properties.GraphItemProperties.setPinY = function (a) {
    this._pin.setY(a)
};
JSG.graph.properties.GraphItemProperties.getLocalPinX = function () {
    return this._pin.getLocalX()
};
JSG.graph.properties.GraphItemProperties.setLocalPinX = function (a) {
    this._pin.setLocalX(a)
};
JSG.graph.properties.GraphItemProperties.getLocalPinY = function () {
    return this._pin.getLocalY()
};
JSG.graph.properties.GraphItemProperties.setLocalPinY = function (a) {
    this._pin.setLocalY(a)
};
JSG.graph.properties.GraphItemProperties.getOriginX = function () {
    return this.getOrigin().x
};
JSG.graph.properties.GraphItemProperties.setOriginX = function (a) {
    var b = this.getOrigin();
    b.x = a;
    this.setOriginTo(b)
};
JSG.graph.properties.GraphItemProperties.getOriginY = function () {
    return this.getOrigin().y
};
JSG.graph.properties.GraphItemProperties.setOriginY = function (a) {
    var b = this.getOrigin();
    b.y = a;
    this.setOriginTo(b)
};
JSG.graph.properties.GraphItemProperties.getReshapePointX = function (a) {
    a = void 0 !== a ? a : 0;
    if (a < this._reshapeCoordinates.length)return this._reshapeCoordinates[a].getX()
};
JSG.graph.properties.GraphItemProperties.setReshapePointX = function (a, b) {
    a = void 0 !== a ? a : 0;
    a < this._reshapeCoordinates.length && this.setReshapeCoordinateAt(a, b, void 0)
};
JSG.graph.properties.GraphItemProperties.getReshapePointY = function (a) {
    a = void 0 !== a ? a : 0;
    if (a < this._reshapeCoordinates.length)return this._reshapeCoordinates[a].getY()
};
JSG.graph.properties.GraphItemProperties.setReshapePointY = function (a, b) {
    a = void 0 !== a ? a : 0;
    a < this._reshapeCoordinates.length && this.setReshapeCoordinateAt(a, void 0, b)
};
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.ItemAttributesProperties = function () {
    JSG.graph.properties.ItemAttributesProperties._super.constructor.apply(this, arguments);
    var a = JSG.graph.attr.ItemAttributes, b = JSG.graph.properties.ItemAttributesProperties;
    b.CLIPCHILDREN = this.addProperty(a.CLIPCHILDREN);
    b.CLOSED = this.addProperty(a.CLOSED);
    b.COLLAPSABLE = this.addProperty(a.COLLAPSABLE);
    b.COLLAPSED = this.addProperty(a.COLLAPSED);
    b.COLLAPSEDBUTTON = this.addProperty(a.COLLAPSEDBUTTON);
    b.COMBINED = this.addProperty(a.COMBINED);
    b.CONTAINER =
        this.addProperty(a.CONTAINER);
    b.DELETEABLE = this.addProperty(a.DELETEABLE);
    b.MARGINLEFT = this.addProperty(a.MARGINLEFT);
    b.MARGINRIGHT = this.addProperty(a.MARGINRIGHT);
    b.MARGINTOP = this.addProperty(a.MARGINTOP);
    b.MARGINBOTTOM = this.addProperty(a.MARGINBOTTOM);
    b.MOVEABLE = this.addProperty(a.MOVEABLE);
    b.PORTMODE = this.addProperty(a.PORTMODE);
    b.ROTATABLE = this.addProperty(a.ROTATABLE);
    b.SELECTIONMODE = this.addProperty(a.SELECTIONMODE);
    b.SNAPTO = this.addProperty(a.SNAPTO);
    b.SIZEABLE = this.addProperty(a.SIZEABLE);
    b.VISIBLE = this.addProperty(a.VISIBLE)
};
JSG.extend(JSG.graph.properties.ItemAttributesProperties, JSG.graph.properties.Properties);
JSG.graph.properties.ItemAttributesProperties.prototype.addProperty = function (a) {
    a = new JSG.graph.properties.AttributeProperty(JSG.graph.attr.AttributeUtils.createPath(JSG.graph.attr.ItemAttributes.NAME, a));
    this._properties.put(a.id, a);
    return a
};
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.LayoutAttributeProperties = function () {
    JSG.graph.properties.LayoutAttributeProperties._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.properties.LayoutAttributeProperties, JSG.graph.properties.Properties);
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.FormatProperties = function () {
    JSG.graph.properties.FormatProperties._super.constructor.apply(this, arguments);
    var a = JSG.graph.properties.FormatProperties;
    a.FILLCOLOR = this.addProperty("FILLCOLOR", "getFillColor", "setFillColor");
    a.FILLSTYLE = this.addProperty("FILLSTYLE", "getFillStyle", "setFillStyle");
    a.TRANSPARENCY = this.addProperty("TRANSPARENCY", "getTransparency", "setTransparency");
    a.BRIGHTNESS = this.addProperty("BRIGHTNESS", "getBrightness", "setBrightness");
    a.GRADIENTCOLOR = this.addProperty("GRADIENTCOLOR",
        "getGradientColor", "setGradientColor");
    a.GRADIENTANGLE = this.addProperty("GRADIENTANGLE", "getGradientAngle", "setGradientAngle");
    a.GRADIENTTYPE = this.addProperty("GRADIENTTYPE", "getGradientType", "setGradientType");
    a.GRADIENTOFFSETX = this.addProperty("GRADIENTOFFSETX", "getGradientOffsetX", "setGradientOffsetX");
    a.GRADIENTOFFSETY = this.addProperty("GRADIENTOFFSETY", "getGradientOffsetY", "setGradientOffsetY");
    a.PATTERN = this.addProperty("PATTERN", "getPattern", "setPattern");
    a.PATTERNSTYLE = this.addProperty("PATTERNSTYLE",
        "getPatternStyle", "setPatternStyle");
    a.LINECOLOR = this.addProperty("LINECOLOR", "getLineColor", "setLineColor");
    a.LINEWIDTH = this.addProperty("LINEWIDTH", "getLineWidth", "setLineWidth");
    a.LINESTYLE = this.addProperty("LINESTYLE", "getLineStyle", "setLineStyle");
    a.LINECORNER = this.addProperty("LINECORNER", "getLineCorner", "setLineCorner");
    a.LINEARROWSTART = this.addProperty("LINEARROWSTART", "getLineArrowStart", "setLineArrowStart");
    a.LINEARROWEND = this.addProperty("LINEARROWEND", "getLineArrowEnd", "setLineArrowEnd");
    a.SHADOWCOLOR = this.addProperty("SHADOWCOLOR", "getShadowColor", "setShadowColor");
    a.SHADOWOFFSETX = this.addProperty("SHADOWOFFSETX", "getShadowOffsetX", "setShadowOffsetX");
    a.SHADOWOFFSETY = this.addProperty("SHADOWOFFSETY", "getShadowOffsetY", "setShadowOffsetY");
    a.SHADOWBLUR = this.addProperty("SHADOWBLUR", "getShadowBlur", "setShadowBlur");
    a.SHADOWDIRECTION = this.addProperty("SHADOWDIRECTION", "getShadowDirection", "setShadowDirection")
};
JSG.extend(JSG.graph.properties.FormatProperties, JSG.graph.properties.Properties);
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.TextFormatProperties = function () {
    JSG.graph.properties.TextFormatProperties._super.constructor.apply(this, arguments);
    var a = JSG.graph.properties.TextFormatProperties;
    a.FONTCOLOR = this.addProperty("FONTCOLOR", "getFontColor", "setFontColor");
    a.FONTNAME = this.addProperty("FONTNAME", "getFontName", "setFontName");
    a.FONTSIZE = this.addProperty("FONTSIZE", "getFontSize", "setFontSize");
    a.FONTSTYLE = this.addProperty("FONTSTYLE", "getFontStyle", "setFontStyle");
    a.HORIZONTALALIGNMENT = this.addProperty("HORIZONTALALIGNMENT",
        "getHorizontalAlignment", "setHorizontalAlignment");
    a.HORIZONTALPOSITION = this.addProperty("HORIZONTALPOSITION", "getHorizontalPosition", "setHorizontalPosition");
    a.VERTICALPOSITION = this.addProperty("VERTICALPOSITION", "getVerticalPosition", "setVerticalPosition")
};
JSG.extend(JSG.graph.properties.TextFormatProperties, JSG.graph.properties.Properties);
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.NodeProperties = function () {
    JSG.graph.properties.NodeProperties._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.properties.NodeProperties, JSG.graph.properties.GraphItemProperties);
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.EdgeProperties = function () {
    JSG.graph.properties.EdgeProperties._super.constructor.apply(this, arguments);
    var a = JSG.graph.properties.EdgeProperties;
    a.START_X = this.addProperty("START_X", a.getStartX, a.setStartX);
    a.START_Y = this.addProperty("START_Y", a.getStartY, a.setStartY);
    a.END_X = this.addProperty("END_X", a.getEndX, a.setEndX);
    a.END_Y = this.addProperty("END_Y", a.getEndY, a.setEndY);
    a.POINTCOUNT = this.addProperty("POINTCOUNT", "getPointsCount")
};
JSG.extend(JSG.graph.properties.EdgeProperties, JSG.graph.properties.GraphItemProperties);
JSG.graph.properties.EdgeProperties.getStartX = function () {
    return this.getStartPoint().x
};
JSG.graph.properties.EdgeProperties.setStartX = function (a) {
    var b = this.getStartPoint();
    b.x = a;
    this.setStartPointTo(b)
};
JSG.graph.properties.EdgeProperties.getStartY = function () {
    return this.getStartPoint().y
};
JSG.graph.properties.EdgeProperties.setStartY = function (a) {
    var b = this.getStartPoint();
    b.y = a;
    this.setStartPointTo(b)
};
JSG.graph.properties.EdgeProperties.getEndX = function () {
    return this.getEndPoint().x
};
JSG.graph.properties.EdgeProperties.setEndX = function (a) {
    var b = this.getEndPoint();
    b.x = a;
    this.setEndPointTo(b)
};
JSG.graph.properties.EdgeProperties.getEndY = function () {
    return this.getEndPoint().y
};
JSG.graph.properties.EdgeProperties.setEndY = function (a) {
    var b = this.getEndPoint();
    b.y = a;
    this.setEndPointTo(b)
};
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.GraphProperties = function () {
    JSG.graph.properties.GraphProperties._super.constructor.apply(this, arguments);
    var a = JSG.graph.attr.ItemAttributes, b = JSG.graph.properties.GraphProperties;
    b.GRAPHID = this.addProperty("GRAPHID", "getGraphId", "setGraphId");
    b.GRIDVISIBLE = this.addProperty("GRIDVISIBLE", b.getGridVisible, b.setGridVisible);
    b.PORTSVISIBLE = this.addProperty("PORTSVISIBLE", b.getPortsVisible, b.setPortsVisible);
    b.SCALE = this.addProperty("SCALE", b.getScaleVisible, b.setScaleVisible);
    b.SNAPTOGRID =
        this.addProperty("SNAPTOGRID", b.getSnapToGrid, b.setSnapToGrid);
    b.SNAPSTEP = this.addProperty("SNAPSTEP", b.getSnapStep, b.setSnapStep);
    b.PORTMODE = this.addItemAttributeProperty(a.PORTMODE);
    b.SNAPTOSHAPES = this.addProperty("SNAPTOSHAPES", b.getSnapToShapes, b.setSnapToShapes);
    b.PAGEFORMAT = this.addProperty("PAGEFORMAT", b.getFormat, b.setFormat);
    b.PAGEORIENTATION = this.addProperty("PAGEORIENTATION", b.getOrientation, b.setOrientation);
    b.PAGEWIDTH = this.addProperty("PAGEWIDTH", b.getWidth, b.setWidth);
    b.PAGEHEIGHT =
        this.addProperty("PAGEHEIGHT", b.getHeight, b.setHeight);
    b.MARGINLEFT = this.addItemAttributeProperty(a.MARGINLEFT);
    b.MARGINRIGHT = this.addItemAttributeProperty(a.MARGINRIGHT);
    b.MARGINTOP = this.addItemAttributeProperty(a.MARGINTOP);
    b.MARGINBOTTOM = this.addItemAttributeProperty(a.MARGINBOTTOM);
    b.HEADERMARGIN = this.addProperty("HEADERMARGIN", b.getHeaderMargin, b.setHeaderMargin);
    b.HEADERLEFT = this.addProperty("HEADERLEFT", b.getHeaderLeft, b.setHeaderLeft);
    b.HEADERCENTER = this.addProperty("HEADERCENTER", b.getHeaderCenter,
        b.setHeaderCenter);
    b.HEADERRIGHT = this.addProperty("HEADERRIGHT", b.getHeaderRight, b.setHeaderRight);
    b.FOOTERMARGIN = this.addProperty("FOOTERMARGIN", b.getFooterMargin, b.setFooterMargin);
    b.FOOTERLEFT = this.addProperty("FOOTERLEFT", b.getFooterLeft, b.setFooterLeft);
    b.FOOTERCENTER = this.addProperty("FOOTERCENTER", b.getFooterCenter, b.setFooterCenter);
    b.FOOTERRIGHT = this.addProperty("FOOTERRIGHT", b.getFooterRight, b.setFooterRight);
    b.SCALETOPAGETYPE = this.addProperty("SCALETOPAGETYPE", b.getScaleToPageType, b.setScaleToPageType);
    b.SCALETOPAGECOUNT = this.addProperty("SCALETOPAGECOUNT", b.getScaleToPageCount, b.setScaleToPageCount)
};
JSG.extend(JSG.graph.properties.GraphProperties, JSG.graph.properties.GraphItemProperties);
JSG.graph.properties.GraphProperties.prototype.addItemAttributeProperty = function (a) {
    a = new JSG.graph.properties.AttributeProperty(JSG.graph.attr.AttributeUtils.createPath(JSG.graph.attr.ItemAttributes.NAME, a));
    this._properties.put(a.id, a);
    return a
};
JSG.graph.properties.GraphProperties.getFormat = function () {
    return this._settings.getPage().getFormat()
};
JSG.graph.properties.GraphProperties.setFormat = function (a) {
    this._settings.getPage().setFormat(a)
};
JSG.graph.properties.GraphProperties.getOrientation = function () {
    return this._settings.getPage().getOrientation()
};
JSG.graph.properties.GraphProperties.setOrientation = function (a) {
    this._settings.getPage().setOrientation(a)
};
JSG.graph.properties.GraphProperties.getHeight = function () {
    return this._settings.getPage().getHeight()
};
JSG.graph.properties.GraphProperties.setHeight = function (a) {
    this._settings.getPage().setHeight(a)
};
JSG.graph.properties.GraphProperties.getWidth = function () {
    return this._settings.getPage().getWidth()
};
JSG.graph.properties.GraphProperties.setWidth = function (a) {
    this._settings.getPage().setWidth(a)
};
JSG.graph.properties.GraphProperties.getLeftMargin = function () {
    return this._settings.getPage().getLeftMargin()
};
JSG.graph.properties.GraphProperties.setLeftMargin = function (a) {
    this._settings.getPage().setLeftMargin(a)
};
JSG.graph.properties.GraphProperties.getRightMargin = function () {
    return this._settings.getPage().getRightMargin()
};
JSG.graph.properties.GraphProperties.setRightMargin = function (a) {
    this._settings.getPage().setRightMargin(a)
};
JSG.graph.properties.GraphProperties.getTopMargin = function () {
    return this._settings.getPage().getTopMargin()
};
JSG.graph.properties.GraphProperties.setTopMargin = function (a) {
    this._settings.getPage().setTopMargin(a)
};
JSG.graph.properties.GraphProperties.getBottomMargin = function () {
    return this._settings.getPage().getBottomMargin()
};
JSG.graph.properties.GraphProperties.setBottomMargin = function (a) {
    this._settings.getPage().setBottomMargin(a)
};
JSG.graph.properties.GraphProperties.getHeaderMargin = function () {
    return this._settings.getPage().getHeaderMargin()
};
JSG.graph.properties.GraphProperties.setHeaderMargin = function (a) {
    this._settings.getPage().setHeaderMargin(a)
};
JSG.graph.properties.GraphProperties.getHeaderLeft = function () {
    return this._settings.getPage().getHeaderLeft()
};
JSG.graph.properties.GraphProperties.setHeaderLeft = function (a) {
    this._settings.getPage().setHeaderLeft(a)
};
JSG.graph.properties.GraphProperties.getHeaderCenter = function () {
    return this._settings.getPage().getHeaderCenter()
};
JSG.graph.properties.GraphProperties.setHeaderCenter = function (a) {
    this._settings.getPage().setHeaderCenter(a)
};
JSG.graph.properties.GraphProperties.getHeaderRight = function () {
    return this._settings.getPage().getHeaderRight()
};
JSG.graph.properties.GraphProperties.setHeaderRight = function (a) {
    this._settings.getPage().setHeaderRight(a)
};
JSG.graph.properties.GraphProperties.getFooterMargin = function () {
    return this._settings.getPage().getFooterMargin()
};
JSG.graph.properties.GraphProperties.setFooterMargin = function (a) {
    this._settings.getPage().setFooterMargin(a)
};
JSG.graph.properties.GraphProperties.getFooterLeft = function () {
    return this._settings.getPage().getFooterLeft()
};
JSG.graph.properties.GraphProperties.setFooterLeft = function (a) {
    this._settings.getPage().setFooterLeft(a)
};
JSG.graph.properties.GraphProperties.getFooterCenter = function () {
    return this._settings.getPage().getFooterCenter()
};
JSG.graph.properties.GraphProperties.setFooterCenter = function (a) {
    this._settings.getPage().setFooterCenter(a)
};
JSG.graph.properties.GraphProperties.getFooterRight = function () {
    return this._settings.getPage().getFooterRight()
};
JSG.graph.properties.GraphProperties.setFooterRight = function (a) {
    this._settings.getPage().setFooterRight(a)
};
JSG.graph.properties.GraphProperties.getScaleToPageCount = function () {
    return this._settings.getPage().getScaleToPageCount()
};
JSG.graph.properties.GraphProperties.setScaleToPageCount = function (a) {
    this._settings.getPage().setScaleToPageCount(a)
};
JSG.graph.properties.GraphProperties.getScaleToPageType = function () {
    return this._settings.getPage().getScaleToPageType()
};
JSG.graph.properties.GraphProperties.setScaleToPageType = function (a) {
    this._settings.getPage().setScaleToPageType(a)
};
JSG.graph.properties.GraphProperties.getGridVisible = function () {
    return this._settings.getGridVisible()
};
JSG.graph.properties.GraphProperties.setGridVisible = function (a) {
    return this._settings.setGridVisible(a)
};
JSG.graph.properties.GraphProperties.getPortsVisible = function () {
    return this._settings.getPortsVisible()
};
JSG.graph.properties.GraphProperties.setPortsVisible = function (a) {
    return this._settings.setPortsVisible(a)
};
JSG.graph.properties.GraphProperties.getScaleVisible = function () {
    return this._settings.getScaleVisible()
};
JSG.graph.properties.GraphProperties.setScaleVisible = function (a) {
    return this._settings.setScaleVisible(a)
};
JSG.graph.properties.GraphProperties.getSnapToGrid = function () {
    return this._settings.getSnapToGrid()
};
JSG.graph.properties.GraphProperties.setSnapToGrid = function (a) {
    return this._settings.setSnapToGrid(a)
};
JSG.graph.properties.GraphProperties.getSnapStep = function () {
    return this._settings.getSnapStep()
};
JSG.graph.properties.GraphProperties.setSnapStep = function (a) {
    return this._settings.setSnapStep(a)
};
JSG.graph.properties.GraphProperties.getSnapToPort = function () {
    return this._settings.getSnapToPort()
};
JSG.graph.properties.GraphProperties.setSnapToPort = function (a) {
    return this._settings.setSnapToPort(a)
};
JSG.graph.properties.GraphProperties.getSnapToShapes = function () {
    return this._settings.getSnapToShapes()
};
JSG.graph.properties.GraphProperties.setSnapToShapes = function (a) {
    return this._settings.setSnapToShapes(a)
};
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.TextNodeProperties = function () {
    JSG.graph.properties.TextNodeProperties._super.constructor.apply(this, arguments);
    var a = JSG.graph.properties.TextNodeProperties;
    a.TEXT = this.addProperty("TEXT", "getText", a.setText)
};
JSG.extend(JSG.graph.properties.TextNodeProperties, JSG.graph.properties.NodeProperties);
JSG.graph.properties.TextNodeProperties.setText = function (a) {
    this.setText(a);
    this.getGraph().markDirty()
};
JSG.namespace("JSG.graph.properties");
JSG.graph.properties.PropertiesProvider = function () {
    function a(a) {
        if (a instanceof JSG.graph.model.TextNode)return d;
        if (a instanceof JSG.graph.model.Node)return c;
        if (a instanceof JSG.graph.model.Edge)return e;
        if (a instanceof JSG.graph.model.Graph)return f;
        if (a instanceof JSG.graph.model.GraphItem)return g
    }

    var b = JSG.graph.properties, c = new b.NodeProperties, d = new b.TextNodeProperties, e = new b.EdgeProperties, f = new b.GraphProperties, g = new b.GraphItemProperties, k = new b.FormatProperties, h = new b.TextFormatProperties,
        m = new b.ItemAttributesProperties, l = new b.LayoutAttributeProperties;
    return {
        getProperties: function (b) {
            return a(b)
        }, getFormatProperties: function () {
            return k
        }, getTextFormatProperties: function () {
            return h
        }, getItemAttributesProperties: function () {
            return m
        }, getLayoutAttributeProperties: function () {
            return l
        }, getReshapeProperties: function (a) {
            return a.getReshapeProperties()
        }, addProperty: function (b, c) {
            var d = a(b);
            void 0 !== d && d._addProperty(c)
        }
    }
}();
JSG.namespace("JSG.graph.notifications");
JSG.graph.notifications.Notification = function (a, b) {
    this.name = a;
    this.object = b;
    this.event = void 0
};
JSG.namespace("JSG.graph.notifications");
JSG.graph.notifications.NotificationCenter = function () {
    function a(a) {
        var b = d.get(a);
        b || (b = [], d.put(a, b));
        return b
    }

    function b() {
        return {
            register: function (b, c, d) {
                b && c && (c = a(c), JSG.Arrays.contains(c, b) || c.push({observer: b, func: d}))
            }, unregister: function (b, c) {
                if (b && c) {
                    var d = a(c), e;
                    e = a(c);
                    var f, p;
                    for (p = 0; p < e.length; p++)if (e[p].observer === b) {
                        f = e[p];
                        break
                    }
                    e = f;
                    void 0 !== e && JSG.Arrays.remove(d, e)
                }
            }, send: function (b) {
                if (f) {
                    var c = a(b.name), d, m, l;
                    for (d = 0; d < c.length; d++)m = c[d], l = m.func || e, m.observer[l].call(m.observer,
                        b)
                }
            }, enable: function (a) {
                f = a
            }
        }
    }

    var c, d = new JSG.commons.Map, e = "onNotification", f = !0;
    return {
        getInstance: function () {
            c || (c = b());
            return c
        }
    }
}();
JSG.namespace("JSG.graph.view");
JSG.graph.view.GraphItemView = function (a) {
    JSG.graph.view.GraphItemView._super.constructor.apply(this, arguments);
    this._item = a;
    this._collapseBtn = new CollapseButton(a);
    this._shapeRenderer = JSG.graph.view.shapes.ShapeRenderer.fromShape(a._shape)
};
JSG.extend(JSG.graph.view.GraphItemView, JSG.ui.View);
JSG.graph.view.GraphItemView.prototype.getId = function () {
    return this._item.getId()
};
JSG.graph.view.GraphItemView.prototype.getItem = function () {
    return this._item
};
JSG.graph.view.GraphItemView.prototype.getGraphView = function () {
    return void 0 !== this._parent ? this._parent.getGraphView() : void 0
};
JSG.graph.view.GraphItemView.prototype.getAngle = function () {
    return this._item.getAngle().getValue()
};
JSG.graph.view.GraphItemView.prototype.getPointList = function () {
    return this._item._shape.getPointList()
};
JSG.graph.view.GraphItemView.prototype.getBoundingBox = function (a) {
    return this._item.getBoundingBox(a)
};
JSG.graph.view.GraphItemView.prototype.getOrigin = function (a) {
    return this._item.getOrigin(a)
};
JSG.graph.view.GraphItemView.prototype.setOriginTo = function (a) {
    this._item.setOriginTo(a)
};
JSG.graph.view.GraphItemView.prototype.getPin = function (a) {
    return this._item.getPin()
};
JSG.graph.view.GraphItemView.prototype.containsPoint = function (a, b) {
    return this._item.containsPoint(a, b)
};
JSG.graph.view.GraphItemView.prototype.translateFromParent = function (a) {
    return this._item.translateFromParent(a)
};
JSG.graph.view.GraphItemView.prototype.translateToParent = function (a) {
    return this._item.translateToParent(a)
};
JSG.graph.view.GraphItemView.prototype.getTranslatedShapePoints = function (a, b) {
    return this._item.getTranslatedShapePoints(a.getItem(), b)
};
JSG.graph.view.GraphItemView.prototype.getTranslatedBoundingBox = function (a, b) {
    return this._item.getTranslatedBoundingBox(a.getItem(), b)
};
JSG.graph.view.GraphItemView.prototype.draw = function (a) {
    if (this._item.isVisible()) {
        this._item.updateLabelPositions();
        a.save();
        a.startGroup();
        var b = this._item.getFormat(), c = this._item.getSize().toRectangle(JSG.rectCache.get());
        this.translateGraphics(a);
        this.drawFill(a, b, c);
        this._item.isClipChildren() ? (this.hasSubviews() && this.drawSubViews(a), this.drawBorder(a, b, c)) : (this.drawBorder(a, b, c), this.hasSubviews() && this.drawSubViews(a));
        this.drawDecorations(a, c);
        a.endGroup();
        a.restore();
        JSG.rectCache.release(c)
    }
};
JSG.graph.view.GraphItemView.prototype.translateGraphics = function (a) {
    var b = JSG.ptCache.get(), c = this._item.getOrigin(b);
    a.translate(c.x, c.y);
    a.rotate(this._item.getAngle().getValue());
    JSG.ptCache.release(b)
};
JSG.graph.view.GraphItemView.prototype.drawFill = function (a, b, c) {
    b.hasFill() && (b.applyFillToGraphics(a, c), b.applyShadowToGraphics(a, c), this._shapeRenderer.drawShapeFill(this._item._shape, this._item.isClosed(), a), b.removeShadowFromGraphics(a))
};
JSG.graph.view.GraphItemView.prototype.drawSubViews = function (a) {
    this._item.isClipChildren() && (a.save(), this._shapeRenderer.setClipArea(this._item._shape, a));
    var b, c, d;
    if (this._item.isCollapsed()) {
        var e = this._item.getTitle ? this._item.getTitle() : void 0;
        if (e)for (b = 0, c = this._subviews.length; b < c; b++)d = this._subviews[b], d.getItem() === e && d.draw(a)
    } else for (b = 0, c = this._subviews.length; b < c; b++)d = this._subviews[b], !0 === d.isVisible() && d.draw(a);
    this._item.isClipChildren() && a.restore()
};
JSG.graph.view.GraphItemView.prototype.drawBorder = function (a, b, c) {
    b.hasBorder() && (b.applyLineToGraphics(a), b.getLineArrowStart().getValue() === JSG.graph.attr.FormatAttributes.ArrowStyle.NONE && b.getLineArrowEnd().getValue() === JSG.graph.attr.FormatAttributes.ArrowStyle.NONE || b.applyFillToGraphics(a, c), this._shapeRenderer.drawShapeBorder(this._item._shape, this._item.isClosed(), a), b.removeLineFromGraphics(a))
};
JSG.graph.view.GraphItemView.prototype.drawDecorations = function (a, b) {
    this._collapseBtn.draw(a);
    var c = this._item.getGraph();
    c && c.getSettings().getNamesVisible() && (a.setFillColor("#AAAAAA"), a.setTextBaseline("top"), a.setTextAlign(JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT), a.setFontName("Arial"), a.setFontSize(8 / a.getCoordinateSystem().getZoom()), a.setFont(), a.fillText(this._item.getName().getValue(), 0, b.getBottom()))
};
JSG.graph.view.GraphItemView.prototype.doHandleEventAt = function (a, b) {
    return this.hitCollapseButton(a)
};
JSG.graph.view.GraphItemView.prototype.onMouseDown = function (a, b, c) {
    c = this._item;
    return c.isCollapsable() && this.hitCollapseButton(a) && (a = this._getInteractionHandler(b)) ? a.collapse(c) : !1
};
JSG.graph.view.GraphItemView.prototype._getInteractionHandler = function (a) {
    return (a = a.getDefaultInteraction()) ? a.getInteractionHandler() : void 0
};
JSG.graph.view.GraphItemView.prototype.hitCollapseButton = function (a) {
    return this._collapseBtn.containsPoint(a)
};
JSG.graph.view.GraphItemView.prototype.getShape = function () {
    return this._item._shape
};
JSG.graph.view.GraphItemView.prototype.getItemAttributes = function () {
    return this._item.getItemAttributes()
};
JSG.graph.view.GraphItemView.prototype.setShapeRenderer = function (a) {
    a && (this._shapeRenderer = a)
};
JSG.graph.view.GraphItemView.prototype.setBoundingBoxTo = function (a) {
    this._item.setBoundingBoxTo(a)
};
JSG.graph.view.GraphItemView.prototype.getPreferredBounds = function (a, b) {
};
function CollapseButton(a) {
    CollapseButton._super.constructor.apply(this, arguments);
    this._item = a;
    this._bounds = new JSG.geometry.Rectangle(0, 0, 300, 300);
    this._imgExpanded = JSG.imagePool.get(JSG.commons.ImagePool.IMG_EXPANDED);
    this._imgCollapsed = JSG.imagePool.get(JSG.commons.ImagePool.IMG_COLLAPSED)
}
JSG.extend(CollapseButton, JSG.ui.View);
CollapseButton.prototype.containsPoint = function (a) {
    return this._item.isCollapsable() ? this._bounds.containsPoint(a) : !1
};
CollapseButton.prototype.draw = function (a) {
    if (this._item.isCollapsable()) {
        var b = this._item.isCollapsed() ? this._imgExpanded : this._imgCollapsed;
        this._updateBounds(a.getCoordinateSystem().deviceToLogXNoZoom(16));
        a.drawImage(b, this._bounds.x, this._bounds.y, this._bounds.width, this._bounds.height)
    }
};
CollapseButton.prototype._updateBounds = function (a) {
    this._bounds.setSize(a, a);
    a = this._item.getSize().getWidth().getValue();
    var b = this._item.getSize().getHeight().getValue();
    switch (this._item.getItemAttributes().getCollapsedButton().getValue()) {
        case JSG.graph.attr.consts.ButtonPosition.TOPLEFT:
            this._bounds.x = 0;
            this._bounds.y = 0;
            break;
        case JSG.graph.attr.consts.ButtonPosition.TOPRIGHT:
            this._bounds.x = a - this._bounds.width;
            this._bounds.y = 0;
            break;
        case JSG.graph.attr.consts.ButtonPosition.TOPCENTER:
            this._bounds.x =
                (a - this._bounds.width) / 2;
            this._bounds.y = 0;
            break;
        case JSG.graph.attr.consts.ButtonPosition.BOTTOMCENTER:
            this._bounds.x = (a - this._bounds.width) / 2, this._bounds.y = b - this._bounds.height
    }
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.EdgeView = function (a) {
    JSG.graph.view.EdgeView._super.constructor.apply(this, arguments);
    this._arrowEndBox = new JSG.geometry.BoundingBox;
    this._arrowStartBox = new JSG.geometry.BoundingBox
};
JSG.extend(JSG.graph.view.EdgeView, JSG.graph.view.GraphItemView);
JSG.graph.view.EdgeView.prototype.containsPoint = function (a, b, c) {
    return this._item.containsPoint(a, b, c)
};
JSG.graph.view.EdgeView.prototype.getLineSegmentAtPoint = function (a, b) {
    return this._item.getLineSegmentAtPoint(a, b)
};
JSG.graph.view.EdgeView.prototype.hitsLineArrowEnd = function (a, b) {
    return this._hitsLineArrow(a, b, this._arrowEndBox)
};
JSG.graph.view.EdgeView.prototype.hitsLineArrowStart = function (a, b) {
    return this._hitsLineArrow(a, b, this._arrowStartBox)
};
JSG.graph.view.EdgeView.prototype._hitsLineArrow = function (a, b, c) {
    return void 0 !== c ? (c.expandBy(void 0 !== b ? b : 250), c.containsPoint(a)) : !1
};
JSG.graph.view.EdgeView.prototype.drawFill = function (a, b, c) {
    JSG.graph.view.EdgeView._super.drawBorder.call(this, a, b, c)
};
JSG.graph.view.EdgeView.prototype.drawBorder = function (a, b, c) {
};
JSG.graph.view.EdgeView.prototype.drawDecorations = function (a) {
    var b = this._shapeRenderer.getContext();
    this._setArrowBox(this._arrowEndBox, void 0 !== b ? b.endArrow : void 0);
    this._setArrowBox(this._arrowStartBox, void 0 !== b ? b.startArrow : void 0);
    if (JSG.debug.SHOW_LINE_BBOX) {
        a.save();
        var c = this._item.getBoundingBox(JSG.boxCache.get());
        a.rotate(-c.getAngle());
        var b = this._item.getOrigin(JSG.ptCache.get()), d = JSG.ptCache.get();
        c.setTopLeftTo(c.getTopLeft(d).subtract(b));
        a.setLineColor("#FF0000");
        a.drawPolyline(c.getPointsUnrotated(),
            !0);
        a.setLineColor("#00FF00");
        a.drawPolyline(c.getPoints(), !0);
        a.restore();
        JSG.boxCache.release(c);
        JSG.ptCache.release(b, d)
    }
    JSG.debug.SHOW_LINE_ORIGIN && (b = this._item.getOrigin(JSG.ptCache.get()), d = this._item, c = b, a.setLineColor("#ff0000"), d = d.getPinPoint(JSG.ptCache.get()), d = void 0 !== c ? d.subtract(c) : d, c = JSG.rectCache.get(), c.x = d.x - 200, c.y = d.y - 200, c.width = 400, c.height = 400, a.drawEllipse(c), JSG.ptCache.release(d), JSG.rectCache.release(c), JSG.ptCache.release(b))
};
JSG.graph.view.EdgeView.prototype._setArrowBox = function (a, b) {
    void 0 !== b ? a.setTo(b) : a.setSize(-1, -1)
};
JSG.graph.view.EdgeView.prototype.evaluate = function () {
    this._item.evaluate()
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.NodeView = function (a) {
    JSG.graph.view.NodeView._super.constructor.apply(this, arguments);
    this._portViews = []
};
JSG.extend(JSG.graph.view.NodeView, JSG.graph.view.GraphItemView);
JSG.graph.view.NodeView.prototype.addPortView = function (a) {
    this._portViews.push(a);
    a._parent = this
};
JSG.graph.view.NodeView.prototype.removePortView = function (a) {
    var b = JSG.Arrays.remove(this._portViews, a);
    b && (a._parent = void 0);
    return b
};
JSG.graph.view.NodeView.prototype.drawDecorations = function (a, b) {
    JSG.graph.view.NodeView._super.drawDecorations.call(this, a, b);
    var c = this._item.getGraph();
    if (c && (c = c.getSettings(), c.getPortsVisible() && this._portViews.forEach(function (b) {
            b.draw(a)
        }), c.getAvailablePortsVisible() && (c = this._item.getShape().getValidPortLocations(this._item.isClosed(), !1)))) {
        var d = JSG.rectCache.get();
        a.setLineColor("#00FF00");
        a.setLineWidth(5);
        var e = a.getCoordinateSystem().metricToLogXNoZoom(400);
        c.forEach(function (b) {
            d.set(b.x -
            e / 2, b.y - e / 2, e, e);
            a.drawRect(d)
        });
        JSG.rectCache.release(d)
    }
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.GraphView = function (a) {
    JSG.graph.view.GraphView._super.constructor.apply(this, arguments);
    this._feedbackViews = [];
    this._layerViews = new JSG.commons.StableMap;
    this._layerOrder = [JSG.graph.view.LayerId.PORTS, JSG.graph.view.LayerId.SELECTION, JSG.graph.view.LayerId.FRIENDS];
    this._canvasCache = [];
    this._item.getFormat().setFillColor("#FFFFFF");
    this._item.getFormat().setLineColor("#777777")
};
JSG.extend(JSG.graph.view.GraphView, JSG.graph.view.GraphItemView);
JSG.graph.view.GraphView.prototype.getGraphView = function () {
    return this
};
JSG.graph.view.GraphView.prototype.getSettings = function () {
    return this._item.getSettings()
};
JSG.graph.view.GraphView.prototype.layout = function () {
    JSG.graph.view.GraphView._super.layout.call(this)
};
JSG.graph.view.GraphView.prototype.clearCache = function () {
    var a, b;
    a = 0;
    for (b = this._canvasCache.length; a < b; a++)void 0 !== this._canvasCache[a] && (this._canvasCache[a].redraw = !0)
};
JSG.graph.view.GraphView.prototype.draw = function (a) {
    this._item.refresh();
    a.save();
    this.drawClientArea(a);
    a.restore()
};
JSG.graph.view.GraphView.prototype.drawClientArea = function (a) {
    function b(a, b) {
        !0 === n.getGridVisible() && e._drawGrid(a, b);
        0 < e._subviews.length && e.drawSubViews(a, b)
    }

    function c(a) {
        var b = JSG.rectCache.get(), c = e._getLogScreenRect(b);
        a = void 0 !== c ? c.intersect(a) : !0;
        JSG.rectCache.release(b);
        return a
    }

    function d(a, b, c) {
        var d = JSG.ptCache.get(), f = JSG.rectCache.get(), g = e.getScreenRect(b, JSG.rectCache.get()), h = b.intersection(g);
        if (h) {
            Math.ceil(b.width / p);
            var k = Math.ceil(b.height / p), l = Math.floor((h.x - b.x) / p), m = Math.floor((h.y -
            b.y) / p), n = Math.ceil((h.getRight() - b.x) / p), h = Math.ceil((h.getBottom() - b.y) / p), q, r;
            for (q = l; q < n; q++)for (r = m; r < h; r++)if (e._canvasCache[q * k + r].canvas) {
                c || (a.save(), a.setClip(b), a.drawImage(e._canvasCache[q * k + r].canvas, q * p + b.x, r * p + b.y), a.restore());
                var u = a._cs.logToDeviceX(q * p + b.x), s = a._cs.logToDeviceY(q * p + b.y), t = a.transformPoint(u, s, d);
                t.x -= 0.5;
                t.y -= 0.5;
                a.m[4] = t.x - u;
                a.m[5] = t.y - s;
                a.save();
                var u = q * p + b.x, s = r * p + b.y, v = t = p;
                q === l && (u -= 5E4, t += 5E4);
                r === m && (s -= 5E4, v += 5E4);
                q === n - 1 && (t += 5E4);
                r === h - 1 && (v += 5E4);
                f.set(u,
                    s, t, v);
                a.setImageClip(f);
                e._drawFeedback(a);
                e._drawLayers(a);
                e._drawOverlay(a);
                a.restore()
            }
        }
        JSG.ptCache.release(d);
        JSG.rectCache.release(g, f)
    }

    var e = this, f = JSG.boxCache.get(), g = this._item.getBoundingBox(f).toRectangle(JSG.rectCache.get()), k = this._item.getFormat(), h = a.getCoordinateSystem(), m = Math.ceil(h.logToDeviceX(Math.max(g.width, g.height))), l = 0.1 > h.getZoom() ? 256 : Math.min(m, JSG.touchDevice ? 1E3 : 1500), p = h.deviceToLogX(l), m = this.getItem(), n = m.getSettings(), q = n.getPage(), r = n.getDisplayMode();
    JSG.boxCache.release(f);
    a._context2D.imageSmoothingEnabled = !1;
    m.setZoom(h.getZoom());
    if (JSG.canvasCache) {
        for (var f = 0, t = JSG.rectCache.get().set(g.x, g.y, p, p), u; t.x < g.getRight();) {
            for (; t.y < g.getBottom();)c(t) && (void 0 === this._canvasCache[f] && (u = document.createElement("canvas"), this._canvasCache[f] = new JSG.graph.view.GraphView.Cache(u)), this._canvasCache[f].redraw && (u = this._canvasCache[f].canvas, u.width = l, u.height = l, u = new JSG.ui.graphics.ScalableGraphics(u, h), u.translate(-t.x, -t.y), b(u, t), this._canvasCache[f].redraw = !1)), t.y +=
                p, f++;
            t.y = g.y;
            t.x += p
        }
        JSG.rectCache.release(t)
    }
    if (r === JSG.ui.graphics.DisplayMode.ENDLESS)k.applyFillToGraphics(a, g), k.applyLineToGraphics(a), a.fillRect(g), this._canvasCache && JSG.canvasCache ? d(a, g, !1) : (a.save(), a.setClip(g), b(a, g), a.restore(), this._drawFeedback(a), this._drawLayers(a), this._drawOverlay(a)); else {
        t = JSG.rectCache.get();
        u = JSG.rectCache.get();
        for (var w = g.x / q.getUsableWidth() * (q.getHorizontalGap() + q.getLeftMargin() + q.getRightMargin()), v = g.y / q.getUsableHeight() * (q.getVerticalGap() + q.getTopMargin() +
            q.getBottomMargin()), h = -1, l = m.getHorizontalPages() + 1; h < l; h++)for (r = -1, f = m.getVerticalPages() + 1; r < f; r++)if (u.set(q.getUsableWidth() * h + g.x, q.getUsableHeight() * r + g.y, q.getUsableWidth(), q.getUsableHeight()), c(u)) {
            a.save();
            t.set((q.getWidth() + q.getHorizontalGap()) * h + g.x + w, (q.getHeight() + q.getVerticalGap()) * r + g.y + v, q.getWidth(), q.getHeight());
            var y = 0 > h || 0 > r || h === l - 1 || r === f - 1;
            y ? (a.setFillColor("#E0E0E0"), a.fillRect(t), a.setLineColor("#CCCCCC"), a.drawRect(t)) : (k.applyLineToGraphics(a), k.applyFillToGraphics(a,
                t), a.fillRect(t), a.drawRect(t), this.drawHeaderAndFooter(a, t, q, h * (f - 1) + r));
            t.set((q.getWidth() + q.getHorizontalGap()) * h + q.getLeftMargin() + g.x + w, (q.getHeight() + q.getVerticalGap()) * r + q.getTopMargin() + g.y + v, q.getUsableWidth(), q.getUsableHeight());
            y && a.drawRect(t);
            a.setClip(t);
            a.translate((q.getHorizontalGap() + q.getLeftMargin() + q.getRightMargin()) * h + q.getLeftMargin() + w, (q.getVerticalGap() + q.getTopMargin() + q.getBottomMargin()) * r + q.getTopMargin() + v);
            this._canvasCache && JSG.canvasCache ? d(a, g, y) : (y || b(a, u),
                this._drawFeedback(a), this._drawLayers(a), this._drawOverlay(a));
            a.restore()
        }
        JSG.rectCache.release(t, u)
    }
    JSG.rectCache.release(g);
    void 0 !== this._toolView && this._toolView.draw(a)
};
JSG.graph.view.GraphView.prototype.getScreenRect = function (a, b) {
    var c = this._getLogScreenRect(b);
    if (void 0 !== c)return c;
    b = b || new JSG.geometry.Rectangle;
    b.setTo(a);
    return b
};
JSG.graph.view.GraphView.prototype.getVisibleGraphRect = function (a) {
    a = a || new JSG.geometry.Rectangle;
    return this._getLogScreenRect(a)
};
JSG.graph.view.GraphView.prototype._getLogScreenRect = function (a) {
    var b = this, c;
    for (a = a || new JSG.geometry.Rectangle; b && !b._hScrollbar;)b = b.getParent(), b instanceof JSG.ui.ScrollPanel && (c = a.setTo(b._bounds));
    if (b && c)return a = this.getItem().getSettings().getDisplayMode(), b = b.getScrollPosition(JSG.ptCache.get()), a !== JSG.ui.graphics.DisplayMode.ENDLESS && (a = this.getPageOffset(b), b.subtract(a)), c.translate(b.x, b.y), JSG.ptCache.release(b), c
};
JSG.graph.view.GraphView.prototype.drawHeaderAndFooter = function (a, b, c, d) {
    function e(a, b) {
        return a = a.replace("[#p]", b)
    }

    d++;
    a.setFontName("Arial");
    a.setFontSize(8);
    a.setFillColor("#000000");
    a.setTextBaseline("top");
    var f = c.getHeaderLeft();
    f && f.length && (f = e(f, d), a.setTextAlign(JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT), a.setFont(), a.fillText(f, b.x + c.getLeftMargin(), b.y + c.getHeaderMargin()));
    (f = c.getHeaderCenter()) && f.length && (f = e(f, d), a.setTextAlign(JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER),
        a.setFont(), a.fillText(f, b.x + b.width / 2, b.y + c.getHeaderMargin()));
    (f = c.getHeaderRight()) && f.length && (f = e(f, d), a.setTextAlign(JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT), a.setFont(), a.fillText(f, b.x + b.width - c.getRightMargin(), b.y + c.getHeaderMargin()));
    a.setTextBaseline("bottom");
    (f = c.getFooterLeft()) && f.length && (f = e(f, d), a.setTextAlign(JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT), a.setFont(), a.fillText(f, b.x + c.getLeftMargin(), b.y + b.height - c.getFooterMargin()));
    (f = c.getFooterCenter()) &&
    f.length && (f = e(f, d), a.setTextAlign(JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER), a.setFont(), a.fillText(f, b.x + b.width / 2, b.y + b.height - c.getFooterMargin()));
    (f = c.getFooterRight()) && f.length && (f = e(f, d), a.setTextAlign(JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT), a.setFont(), a.fillText(f, b.x + b.width - c.getRightMargin(), b.y + b.height - c.getFooterMargin()))
};
JSG.graph.view.GraphView.prototype.drawSubViews = function (a, b) {
    this._item.isClipChildren() && (a.save(), this._shapeRenderer.setClipArea(this._item._shape, a));
    var c = JSG.boxCache.get(), d, e, f, g, k;
    d = 0;
    for (e = this._subviews.length; d < e; d++)f = this._subviews[d], !0 === f.isVisible() && (g = f.getItem(), k = g.getBoundingBox(c).getBoundingRectangle(), g = g.getTotalBoundingRect(), k.union(g), (void 0 === b || b.intersect(k)) && f.draw(a));
    JSG.boxCache.release(c);
    this._item.isClipChildren() && a.restore()
};
JSG.graph.view.GraphView.prototype._drawTitles = function (a) {
};
JSG.graph.view.GraphView.prototype._drawOverlay = function (a) {
    this._overlayView && this._overlayView.draw(a)
};
JSG.graph.view.GraphView.prototype._drawGrid = function (a, b) {
    var c = this._item.getBoundingBox(JSG.boxCache.get()), d = c.toRectangle(JSG.rectCache.get()), e = a.getCoordinateSystem().getMajorUnit(), f = a.getCoordinateSystem().getMinorUnit();
    a.setLineWidth(JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE);
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    a.setLineColor("#CCCCCC");
    var g, k = Math.floor(b.x / e) * e;
    for (a.beginPath(); k < b.getRight();) {
        a.moveTo(k, b.y);
        a.lineTo(k, b.getBottom());
        for (g = 0; g <
        e;)g += f, a.moveTo(k + g, b.y), a.lineTo(k + g, b.getBottom());
        k += e
    }
    for (k = Math.floor(b.y / e) * e; k < b.getBottom();) {
        a.moveTo(b.x, k);
        a.lineTo(b.getRight(), k);
        for (g = 0; g < e;)g += f, a.moveTo(b.x, k + g), a.lineTo(b.getRight(), k + g);
        k += e
    }
    a.stroke();
    JSG.boxCache.release(c);
    JSG.rectCache.release(d)
};
JSG.graph.view.GraphView.prototype._drawFeedback = function (a) {
    var b, c;
    b = 0;
    for (c = this._feedbackViews.length; b < c; b++)this._feedbackViews[b].draw(a)
};
JSG.graph.view.GraphView.prototype._drawLayers = function (a) {
    this._layerViews.iterate(function (b, c) {
        var d;
        for (d = 0; d < c.length; d++)c[d].draw(a)
    })
};
JSG.graph.view.GraphView.prototype.translateFromParent = function (a) {
    if (this.getSettings().getDisplayMode() === JSG.ui.graphics.DisplayMode.PAGE) {
        var b = this.getPageOffset(a, JSG.ptCache.get());
        a.subtract(b);
        JSG.ptCache.release(b)
    }
    return a
};
JSG.graph.view.GraphView.prototype.translateToParent = function (a) {
    if (this.getSettings().getDisplayMode() === JSG.ui.graphics.DisplayMode.PAGE) {
        var b = this.getPageOffset(a, JSG.ptCache.get());
        a.add(b);
        JSG.ptCache.release(b)
    }
    return a
};
JSG.graph.view.GraphView.prototype.getPageOffset = function (a, b) {
    var c = this.getItem().getSettings().getPage(), d = Math.floor((a.x + c.getHorizontalGap() / 2) / (c.getWidth() + c.getHorizontalGap())), e = Math.floor((a.y + c.getVerticalGap() / 2) / (c.getHeight() + c.getVerticalGap())), f = d * (c.getLeftMargin() + c.getRightMargin() + c.getHorizontalGap()) + c.getLeftMargin(), g = d * (c.getWidth() + c.getHorizontalGap()) + c.getLeftMargin();
    a.x < g ? f -= g - a.x : (d = d * (c.getWidth() + c.getHorizontalGap()) + c.getWidth() - c.getRightMargin(), a.x > d && (f -=
        d - a.x - 1));
    d = e * (c.getTopMargin() + c.getBottomMargin() + c.getVerticalGap()) + c.getTopMargin();
    g = e * (c.getHeight() + c.getVerticalGap()) + c.getTopMargin();
    a.y < g ? d -= g - a.y : (c = e * (c.getHeight() + c.getVerticalGap()) + c.getHeight() - c.getBottomMargin(), a.y > c && (d -= c - a.y - 1));
    c = b || new JSG.geometry.Point(0, 0);
    c.set(f, d);
    return c
};
JSG.graph.view.GraphView.prototype.setLayerOrder = function (a) {
    this._layerOrder = a
};
JSG.graph.view.GraphView.prototype.getLayer = function (a) {
    function b(a, b) {
        var d = c._layerOrder.indexOf(a), k = c._layerOrder.indexOf(b);
        return d - k
    }

    var c = this, d = this._layerViews.get(a);
    d || (d = [], this._layerViews.put(a, d), void 0 !== this._layerOrder && this._layerViews.sort(b));
    return d
};
JSG.graph.view.GraphView.prototype.hasLayer = function (a) {
    a = this._layerViews.get(a);
    return void 0 !== a && 0 < a.length
};
JSG.graph.view.GraphView.prototype.clearLayer = function (a) {
    return this._layerViews.remove(a)
};
JSG.graph.view.GraphView.prototype.clearAllLayer = function () {
    this._layerViews.clear()
};
JSG.graph.view.GraphView.prototype.addFeedback = function (a) {
    this._feedbackViews.push(a)
};
JSG.graph.view.GraphView.prototype.hasFeedback = function () {
    return 0 !== this._feedbackViews.length
};
JSG.graph.view.GraphView.prototype.removeFeedback = function (a) {
    JSG.Arrays.remove(this._feedbackViews, a)
};
JSG.graph.view.GraphView.prototype.clearFeedback = function () {
    this._feedbackViews = []
};
JSG.graph.view.GraphView.prototype.getSelectionView = function () {
    return this.getLayer(JSG.graph.view.LayerId.SELECTION)[0]
};
JSG.graph.view.GraphView.prototype.setSelectionView = function (a) {
    this.getLayer(JSG.graph.view.LayerId.SELECTION)[0] = a
};
JSG.graph.view.GraphView.prototype.removeSelectionView = function () {
    this.clearLayer(JSG.graph.view.LayerId.SELECTION)
};
JSG.graph.view.GraphView.prototype.setOverlayView = function (a) {
    this.clearFeedback();
    this.removeSelectionView();
    this._overlayView = a
};
JSG.graph.view.GraphView.prototype.removeOverlayView = function () {
    this._overlayView = void 0
};
JSG.graph.view.GraphView.prototype.setToolView = function (a) {
    this._toolView = a
};
JSG.graph.view.GraphView.prototype.removeToolView = function () {
    this._toolView = void 0
};
JSG.graph.view.GraphView.prototype.getPreferredBounds = function (a, b) {
    return this.getItem().getTotalBoundingRect(void 0, b)
};
JSG.graph.view.GraphView.Cache = function (a) {
    this.canvas = a;
    this.redraw = !0
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.TextView = function (a) {
    JSG.graph.view.TextView._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.view.TextView, JSG.graph.view.NodeView);
JSG.graph.view.TextView.prototype.drawFill = function (a, b, c) {
    JSG.graph.view.TextView._super.drawFill.call(this, a, b, c);
    this.drawText(a, b, c)
};
JSG.graph.view.TextView.prototype.drawText = function (a, b, c) {
    var d = this._item, e = d._paras || [], f = d.getTextFormat(), g = d.getItemAttributes(), k, h, m, l, p, n, q, r, t, u, w;
    f.applyToGraphics(a);
    a.setFont();
    a.setLineColor(f.getFontColor().getValue());
    a.setLineWidth(JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE);
    var v = d._getLogEm(a, f), d = g.getTopMargin().getValue() + v / 2;
    this.setLinkTextFormat(a, b);
    n = 0;
    var y, C = 1;
    for (k = 0; k < e.length; k++) {
        b = e[k];
        p = b.getLines();
        q = b.getAlignment();
        r = b.getType();
        r !== h && (C = 1);
        for (h = 0; h <
        p.length; h++) {
            l = p[h];
            d += l.getBaseline();
            n = b.getPadding();
            switch (q) {
                case JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT:
                    m = n + g.getLeftMargin().getValue();
                    break;
                case JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER:
                    m = n + (c.width - n) / 2 - l.getWidth() / 2;
                    break;
                case JSG.graph.attr.TextFormatAttributes.TextAlignment.RIGHT:
                    m = c.width - g.getRightMargin().getValue() - l.getWidth()
            }
            t = l.getSections();
            for (w = y = 0; w < t.length; w++) {
                u = t[w];
                n = u.getText();
                n = n.replace(/&nbsp;/g, " ");
                if (0 === h && 0 === w)switch (r) {
                    case JSG.graph.model.TextNode.Paragraph.Type.LIST_UL:
                        a.beginPath();
                        a.circle(g.getLeftMargin().getValue() + v / 3, d - u.getBaseline() / 3, v / 6);
                        a.fill();
                        break;
                    case JSG.graph.model.TextNode.Paragraph.Type.LIST_OL:
                        f.applyToGraphics(a), a.setTextAlignment(JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT), a.setFont(), a.fillText(C + ".", g.getLeftMargin().getValue(), d)
                }
                void 0 !== u._fontStyle && a.setFontStyle(u._fontStyle);
                void 0 !== u._fontSize && a.setFontSize(u._fontSize);
                void 0 !== u._fontName && a.setFontName(u._fontName);
                void 0 !== u._fontColor && (a.setFillColor(u._fontColor), a.setLineColor(u._fontColor));
                a.setFont();
                a.setTextAlignment(JSG.graph.attr.TextFormatAttributes.TextAlignment.LEFT);
                a.fillText(n, m + y, d);
                y += u._width
            }
            d += l.getHeight() - l.getBaseline()
        }
        C++;
        h = r;
        if (r === JSG.graph.model.TextNode.Paragraph.Type.PARAGRAPH || k < e.length - 1 && e[k + 1].getType() !== r)d += v / 2
    }
    f.removeFromGraphics(a)
};
JSG.graph.view.TextView.prototype.setLinkTextFormat = function (a, b) {
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.SelectionFeedbackView = function (a) {
    JSG.graph.view.SelectionFeedbackView._super.constructor.apply(this, arguments);
    this._box = new JSG.geometry.BoundingBox(0, 0);
    this._point = new JSG.geometry.Point(0, 0);
    this._activeMarker = a;
    this.feedbackInfoVisible = !0
};
JSG.extend(JSG.graph.view.SelectionFeedbackView, JSG.ui.View);
JSG.graph.view.SelectionFeedbackView.prototype.setBoundingBox = function (a) {
    this._box.setTo(a)
};
JSG.graph.view.SelectionFeedbackView.prototype.setPoint = function (a) {
    this._point.setTo(a)
};
JSG.graph.view.SelectionFeedbackView.prototype.draw = function (a) {
    var b = JSG.boxCache.get().setTo(this._box), c = b.getTopLeft(JSG.ptCache.get()), d = a.getCoordinateSystem();
    a.save();
    a.translate(c.x, c.y);
    a.rotate(b.getAngle());
    b.translate(-c.x, -c.y);
    var e = b.getPointsUnrotated(), f = JSG.rectCache.get();
    f.set(0, 0, d.metricToLogXNoZoom(JSG.graph.view.selection.SelectionView.MARKER_SIZE), d.metricToLogYNoZoom(JSG.graph.view.selection.SelectionView.MARKER_SIZE));
    JSG.boxCache.release(b);
    12 !== this._activeMarker && (a.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID),
        a.setFillColor("#FFFFFF"), a.setTransparency(80), a.fillPolyline(e));
    a.setTransparency(100);
    a.setFillColor(JSG.graph.view.selection.SelectionView.MARKER_FILL_COLOR);
    a.setLineColor(JSG.graph.view.selection.SelectionView.MARKER_BORDER_COLOR);
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    switch (this._activeMarker) {
        case 9:
            a.setFillColor(JSG.graph.view.selection.NodeSelectionHandler.RESHAPEMARKER_FILL_COLOR);
            f.x = this._point.x - f.width / 2;
            f.y = this._point.y - f.height / 2;
            a.drawMarker(f, !0);
            break;
        case 8:
            var b = JSG.ptCache.get(), g = JSG.ptCache.get();
            g.set((e[1].x + e[0].x) / 2, (e[1].y + e[0].y) / 2 - d.metricToLogXNoZoom(JSG.graph.view.selection.SelectionView.ROTATE_MARKER_DISTANCE));
            b.set((e[2].x + e[0].x) / 2, (e[2].y + e[0].y) / 2);
            a.setLineColor(JSG.graph.view.selection.SelectionView.LINE_COLOR);
            a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.DASH);
            a.drawLine(g, b);
            JSG.ptCache.release(b, g);
            a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
            f.x = (e[1].x + e[0].x) / 2 - f.width / 2;
            f.y = (e[1].y + e[0].y) /
            2 - f.height / 2 - d.metricToLogXNoZoom(JSG.graph.view.selection.SelectionView.ROTATE_MARKER_DISTANCE);
            a.drawMarker(f, !0);
            f.x = (e[2].x + e[0].x) / 2 - f.width / 2;
            f.y = (e[2].y + e[0].y) / 2 - f.height / 2;
            a.drawMarker(f, !1);
            break;
        case 10:
        case 11:
        case 12:
            break;
        default:
            switch (this._activeMarker) {
                case 0:
                    f.x = e[0].x - f.width / 2;
                    f.y = e[0].y - f.height / 2;
                    break;
                case 1:
                    f.x = (e[1].x + e[0].x) / 2 - f.width / 2;
                    f.y = (e[1].y + e[0].y) / 2 - f.height / 2;
                    break;
                case 2:
                    f.x = e[1].x - f.width / 2;
                    f.y = e[1].y - f.height / 2;
                    break;
                case 3:
                    f.x = (e[2].x + e[1].x) / 2 - f.width / 2;
                    f.y =
                        (e[2].y + e[1].y) / 2 - f.height / 2;
                    break;
                case 4:
                    f.x = e[2].x - f.width / 2;
                    f.y = e[2].y - f.height / 2;
                    break;
                case 5:
                    f.x = (e[3].x + e[2].x) / 2 - f.width / 2;
                    f.y = (e[3].y + e[2].y) / 2 - f.height / 2;
                    break;
                case 6:
                    f.x = e[3].x - f.width / 2;
                    f.y = e[3].y - f.height / 2;
                    break;
                case 7:
                    f.x = (e[3].x + e[0].x) / 2 - f.width / 2, f.y = (e[3].y + e[0].y) / 2 - f.height / 2
            }
            a.drawMarker(f, !0)
    }
    12 !== this._activeMarker && (a.setLineWidth(JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE), a.setLineColor(JSG.graph.view.selection.SelectionView.LINE_COLOR), a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.DASH),
        a.drawPolyline(e, !0));
    a.restore();
    var k;
    switch (this._activeMarker) {
        case 9:
            break;
        case 12:
            k = "Position: " + JSG.Numbers.format(Number(this._point.x / 100), 2, ".", ",", "") + " x " + JSG.Numbers.format(Number(this._point.y / 100), 2, ".", ",", "") + " mm";
            break;
        case 10:
            k = "Position: " + JSG.Numbers.format(Number(this._box.getTopLeft(c).x / 100), 2, ".", ",", "") + " x " + JSG.Numbers.format(Number(this._box.getTopLeft(c).y / 100), 2, ".", ",", "") + " mm";
            break;
        case 8:
            k = "Angle: " + JSG.Numbers.format(Number(180 * this._box.getAngle() / Math.PI),
                2, ".", ",", "") + " degrees";
            break;
        default:
            k = "Size: " + JSG.Numbers.format(Number(this._box.getWidth() / 100), 2, ".", ",", "") + " x " + JSG.Numbers.format(Number(this._box.getHeight() / 100), 2, ".", ",", "") + " mm"
    }
    k && this.feedbackInfoVisible && (a.setLineWidth(JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE), a.setLineColor("#FFFFFF"), a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID), a.setFillColor(JSG.bkColorButton), a.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID), a.setLineCorner(100),
        e = 600 / d.getZoom(), f = this._box.getBoundingRectangle(f), f.height = e, f.y = f.y - e - 100, a.setFontSize(8 / d.getZoom()), a.setTextAlign(JSG.graph.attr.TextFormatAttributes.TextAlignment.CENTER), a.setFont(), a.setTextBaseline("middle"), d = d.deviceToLogX(a.measureText(k).width) + 200, f.x = f.getCenterX() - d / 2, f.width = d, d = f.getPoints(), a.fillPolyline(d), a.drawPolyline(d, !0), a.setFillColor("#FFFFFF"), a.fillText(k, f.getCenterX(), f.getCenterY()));
    JSG.rectCache.release(f);
    JSG.ptCache.release(c)
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.PositionFeedbackView = function () {
    JSG.graph.view.PositionFeedbackView._super.constructor.apply(this, arguments);
    this._point = new JSG.geometry.Point(0, 0);
    this._fillColor = JSG.graph.view.selection.SelectionView.MARKER_FILL_COLOR;
    this._lineColor = JSG.graph.view.selection.SelectionView.MARKER_BORDER_COLOR;
    this._active = !0
};
JSG.extend(JSG.graph.view.PositionFeedbackView, JSG.ui.View);
JSG.graph.view.PositionFeedbackView.prototype.setPosition = function (a) {
    this._point.setTo(a)
};
JSG.graph.view.PositionFeedbackView.prototype.getPosition = function (a) {
    return (a || new JSG.geometry.Point).setTo(this._point)
};
JSG.graph.view.PositionFeedbackView.prototype.setFillColor = function (a) {
    this._fillColor = a
};
JSG.graph.view.PositionFeedbackView.prototype.setActive = function (a) {
    this._active = a
};
JSG.graph.view.PositionFeedbackView.prototype.draw = function (a) {
    var b = JSG.rectCache.get();
    b.set(0, 0, a.getCoordinateSystem().metricToLogXNoZoom(JSG.graph.view.selection.SelectionView.MARKER_SIZE), a.getCoordinateSystem().metricToLogYNoZoom(JSG.graph.view.selection.SelectionView.MARKER_SIZE));
    b.x = this._point.x - b.width / 2;
    b.y = this._point.y - b.height / 2;
    a.setFillColor(this._fillColor);
    a.setLineColor(this._lineColor);
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    a.drawMarker(b, this._active);
    JSG.rectCache.release(b)
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.MarqueeFeedbackView = function () {
    JSG.graph.view.MarqueeFeedbackView._super.constructor.apply(this, arguments);
    this._bgColor = "rgba(0,0,0,0.2)";
    this._fgColor = "#000000";
    this._image = void 0;
    this._lineWidth = JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE;
    this._bounds = new JSG.geometry.Rectangle(0, 0, 0, 0)
};
JSG.extend(JSG.graph.view.MarqueeFeedbackView, JSG.ui.View);
JSG.graph.view.MarqueeFeedbackView.prototype.containsPoint = function (a) {
    return this._bounds.containsPoint(a)
};
JSG.graph.view.MarqueeFeedbackView.prototype.getBounds = function (a) {
    a = a || new JSG.geometry.Rectangle(0, 0, 0, 0);
    a.setTo(this._bounds);
    return a
};
JSG.graph.view.MarqueeFeedbackView.prototype.setBounds = function (a, b, c, d) {
    this._bounds.set(a, b, c, d)
};
JSG.graph.view.MarqueeFeedbackView.prototype.getOrigin = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.set(this._bounds.x, this._bounds.y);
    return a
};
JSG.graph.view.MarqueeFeedbackView.prototype.getCenter = function (a) {
    return this._bounds.getCenter(a)
};
JSG.graph.view.MarqueeFeedbackView.prototype.draw = function (a) {
    a.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID);
    a.setFillColor(this._bgColor);
    a.setLineColor(this._fgColor);
    a.setLineWidth(this._lineWidth);
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    this._image && a.setShadow("#AAAAAA", a.getCoordinateSystem().metricToDeviceX(100), a.getCoordinateSystem().metricToDeviceY(100), 5);
    a.fillRect(this._bounds);
    if (this._image) {
        a.setShadow("#AAAAAA", 0, 0, 0);
        var b = JSG.imagePool.add(this._image);
        b && a.drawImage(b, this._bounds.x + this._bounds.height / 6, this._bounds.y + this._bounds.height / 6, this._bounds.width - this._bounds.height / 3, this._bounds.height - this._bounds.height / 3)
    }
    a.drawRect(this._bounds)
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.SnapFeedbackView = function () {
    JSG.graph.view.SnapFeedbackView._super.constructor.apply(this, arguments);
    this._lineColor = "rgba(255,0,0,0.5)";
    this._lineWidth = JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE;
    this._origin = new JSG.geometry.Point(0, 0);
    this._target = new JSG.geometry.Point(0, 0)
};
JSG.extend(JSG.graph.view.SnapFeedbackView, JSG.ui.View);
JSG.graph.view.SnapFeedbackView.prototype.setOriginTo = function (a) {
    this.setOrigin(a.x, a.y)
};
JSG.graph.view.SnapFeedbackView.prototype.setOrigin = function (a, b) {
    this._origin.set(a, b)
};
JSG.graph.view.SnapFeedbackView.prototype.getOrigin = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.setTo(this._origin);
    return a
};
JSG.graph.view.SnapFeedbackView.prototype.setTargetTo = function (a) {
    this.setTarget(a.x, a.y)
};
JSG.graph.view.SnapFeedbackView.prototype.setTarget = function (a, b) {
    this._target.set(a, b)
};
JSG.graph.view.SnapFeedbackView.prototype.draw = function (a) {
    a.setLineColor(this._lineColor);
    a.setLineWidth(this._lineWidth);
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.DASH);
    a.drawLine(this._origin, this._target)
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.LayerId = {
    PORTS: "layer.ports",
    FRIENDS: "layer.friends",
    SELECTION: "layer.selection",
    SNAPLINES: "layer.snaplines",
    LAYOUTMARKER: "layer.layoutmarker",
    TARGETCONTAINER: "layer.targetcontainer",
    TOOLBAR: "layer.toolbar"
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.SelectionHandle = function (a, b, c) {
    JSG.graph.view.selection.SelectionHandle._super.constructor.apply(this, arguments);
    this._pointIndex = void 0 !== c ? c : -1
};
JSG.extend(JSG.graph.view.selection.SelectionHandle, JSG.graph.interaction.ActionHandle);
JSG.graph.view.selection.SelectionHandle.TYPE = {
    MOVE: "move",
    EXECUTE: "execute",
    COMMAND: "command",
    RESIZE: "resize",
    RESHAPE: "reshape",
    ROTATE: "rotate",
    EDITTEXT: "edittext"
};
JSG.graph.view.selection.SelectionHandle.INDEX = {NW: 0, N: 1, NE: 2, E: 3, SE: 4, S: 5, SW: 6, W: 7};
JSG.graph.view.selection.SelectionHandle.prototype.reset = function () {
    JSG.graph.view.selection.SelectionHandle._super.reset.call(this);
    this._pointIndex = -1
};
JSG.graph.view.selection.SelectionHandle.prototype.getPointIndex = function () {
    return this._pointIndex
};
JSG.graph.view.selection.SelectionHandle.prototype.setPointIndex = function (a) {
    this._pointIndex = a
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.CommandButton = function (a, b, c, d) {
    this._type = a;
    this._bounds = new JSG.geometry.Rectangle(0, 0, JSG.graph.view.selection.CommandButton.BUTTON_SIZE, JSG.graph.view.selection.CommandButton.BUTTON_SIZE);
    this._position = b;
    this._image = c;
    this._command = d
};
JSG.graph.view.selection.CommandButton.BUTTON_SIZE = 800;
JSG.graph.view.selection.CommandButton.Type = {
    ADD: 0,
    CALLBACK: 1,
    ADDPARENT: 2,
    ADDCHILD: 3,
    ADDSIBLINGBEFORE: 4,
    ADDSIBLINGAFTER: 5
};
JSG.graph.view.selection.CommandButton.Position = {LEFT: 1, CENTER: 2, RIGHT: 4, TOP: 8, MIDDLE: 16, BOTTOM: 32};
JSG.graph.view.selection.CommandButton.prototype.getType = function () {
    return this._type
};
JSG.graph.view.selection.CommandButton.prototype.getPosition = function () {
    return this._position
};
JSG.graph.view.selection.CommandButton.prototype.getImage = function () {
    return this._iamge
};
JSG.graph.view.selection.CommandButton.prototype.getBounds = function () {
    return this._bounds
};
JSG.graph.view.selection.CommandButton.prototype.setSize = function (a) {
    this._bounds.width = this._bounds.height = a
};
JSG.graph.view.selection.CommandButton.prototype.draw = function (a) {
    a.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.PATTERN);
    a.setPattern(this._bounds, this._image, JSG.graph.attr.FormatAttributes.PatternStyle.CENTER);
    var b = this._bounds.getPoints();
    a.fillPolyline(b);
    a.drawPolyline(b, !0)
};
JSG.graph.view.selection.CommandButton.prototype.containsPoint = function (a) {
    return this._bounds.containsPoint(a)
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.Marker = function (a, b, c) {
    this._index = a;
    this._bounds = new JSG.geometry.Rectangle(0, 0, 0, 0);
    this._coordinate = b || JSG.graph.Coordinate.fromXY(0, 0);
    this._cursor = JSG.ui.Cursor.Style.AUTO;
    this._disabled = c;
    this._tolerance = JSG.findRadius;
    this._active = !1
};
JSG.graph.view.selection.Marker.prototype.setSize = function (a) {
    this._bounds.width = this._bounds.height = a
};
JSG.graph.view.selection.Marker.prototype.draw = function (a, b) {
    var c = JSG.ptCache.get(), d = this._bounds.width / 2;
    this._tolerance = a.getCoordinateSystem().metricToLogXNoZoom(JSG.findRadius);
    this._coordinate.toPoint(c);
    this._bounds.x = c.x - d;
    this._bounds.y = c.y - d;
    this.drawMarker(a, this._bounds, this._active);
    JSG.ptCache.release(c)
};
JSG.graph.view.selection.Marker.prototype.drawMarker = function (a, b, c) {
    a.drawMarker(b, c)
};
JSG.graph.view.selection.Marker.prototype.containsPoint = function (a) {
    var b = this._bounds.getCenter(JSG.ptCache.get());
    a = a.x >= b.x - this._tolerance && a.x <= b.x + this._tolerance && a.y >= b.y - this._tolerance && a.y <= b.y + this._tolerance;
    JSG.ptCache.release(b);
    return a
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.RotationMarker = function (a, b) {
    JSG.graph.view.selection.RotationMarker._super.constructor.apply(this, arguments);
    this._pinbounds = new JSG.geometry.Rectangle(0, 0, 0, 0)
};
JSG.extend(JSG.graph.view.selection.RotationMarker, JSG.graph.view.selection.Marker);
JSG.graph.view.selection.RotationMarker.prototype.setSize = function (a) {
    JSG.graph.view.selection.RotationMarker._super.setSize.call(this, a);
    this._pinbounds.width = this._pinbounds.height = a
};
JSG.graph.view.selection.RotationMarker.prototype.getPinLocation = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    return this._pinbounds.getCenter(a)
};
JSG.graph.view.selection.RotationMarker.prototype.setPinLocation = function (a) {
    this._pinbounds.x = a.x;
    this._pinbounds.y = a.y;
    this._coordinate.setX(a.x)
};
JSG.graph.view.selection.RotationMarker.prototype.draw = function (a, b) {
    if (b.isRotateMarkerVisible) {
        var c = JSG.ptCache.get(), d = JSG.ptCache.get(), e = JSG.ptCache.get(), f = this._bounds.width / 2;
        this._tolerance = a.getCoordinateSystem().metricToLogXNoZoom(JSG.findRadius);
        this._coordinate.setY(-a.getCoordinateSystem().metricToLogXNoZoom(b.rotateMarkerDistance));
        this._coordinate.toPoint(e);
        this._bounds.x = e.x;
        this._bounds.y = e.y;
        d.set(this._bounds.x, this._bounds.y);
        c.set(this._pinbounds.x, 0);
        a.setLineColor(b.lineColor);
        a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.DASH);
        a.drawLine(d, c);
        JSG.ptCache.release(c, d, e);
        this._bounds.x -= f;
        this._bounds.y -= f;
        this._pinbounds.x -= f;
        this._pinbounds.y -= f;
        a.setLineColor(b.lineColor);
        a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
        this.drawMarker(a, this._bounds)
    }
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.SelectionHandler = function (a) {
    this._views = a;
    this._selectionView = void 0
};
JSG.graph.view.selection.SelectionHandler.prototype.register = function (a) {
    this._selectionView = a
};
JSG.graph.view.selection.SelectionHandler.prototype.getSelectionStyle = function () {
    return this._selectionView.getStyle()
};
JSG.graph.view.selection.SelectionHandler.prototype.containsPoint = function (a) {
    return !1
};
JSG.graph.view.selection.SelectionHandler.prototype.getBoundingBox = function (a) {
    return a || new JSG.geometry.BoundingBox
};
JSG.graph.view.selection.SelectionHandler.prototype.getPinPoint = function (a) {
    return a || new JSG.geometry.Point
};
JSG.graph.view.selection.SelectionHandler.prototype.getRotationMarker = function () {
};
JSG.graph.view.selection.SelectionHandler.prototype.getHandleAt = function (a, b, c) {
    return c
};
JSG.graph.view.selection.SelectionHandler.prototype.drawSelection = function (a) {
};
JSG.graph.view.selection.SelectionHandler.prototype.refresh = function () {
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.BBoxSelectionHandler = function (a) {
    JSG.graph.view.selection.BBoxSelectionHandler._super.constructor.call(this, a);
    this._markers = [];
    this._bbox = new JSG.geometry.BoundingBox(0, 0);
    this._tolerance = JSG.findRadius;
    this._views = Array.isArray(a) ? a : [a];
    this._sizeable = (a = 1 === this._views.length ? this._views[0].getItem() : void 0) ? a.isSizeable() : !0;
    this._rotatable = a ? a.isRotatable() : !0;
    this._moveable = a ? a.isMoveable() : !0;
    a = new JSG.graph.expr.Reference(this, JSG.graph.properties.GraphItemProperties.WIDTH,
        this);
    var b = new JSG.graph.expr.Reference(this, JSG.graph.properties.GraphItemProperties.HEIGHT, this);
    this._markers.push(new JSG.graph.view.selection.Marker(0, this.coordinate(), !this._sizeable));
    this._markers.push(new JSG.graph.view.selection.Marker(1, this.coordinate(this.mulTerm(a, 0.5)), !this._sizeable));
    this._markers.push(new JSG.graph.view.selection.Marker(2, this.coordinate(this.mulTerm(a, 1)), !this._sizeable));
    this._markers.push(new JSG.graph.view.selection.Marker(3, this.coordinate(this.mulTerm(a,
        1), this.mulTerm(b, 0.5)), !this._sizeable));
    this._markers.push(new JSG.graph.view.selection.Marker(4, this.coordinate(this.mulTerm(a, 1), this.mulTerm(b, 1)), !this._sizeable));
    this._markers.push(new JSG.graph.view.selection.Marker(5, this.coordinate(this.mulTerm(a, 0.5), this.mulTerm(b, 1)), !this._sizeable));
    this._markers.push(new JSG.graph.view.selection.Marker(6, this.coordinate(void 0, this.mulTerm(b, 1)), !this._sizeable));
    this._markers.push(new JSG.graph.view.selection.Marker(7, this.coordinate(void 0, this.mulTerm(b,
        0.5)), !this._sizeable));
    this._markers.push(new JSG.graph.view.selection.RotationMarker(8, this.coordinate(), !this._rotatable))
};
JSG.extend(JSG.graph.view.selection.BBoxSelectionHandler, JSG.graph.view.selection.SelectionHandler);
JSG.graph.view.selection.BBoxSelectionHandler.prototype.mulTerm = function (a, b) {
    return new JSG.graph.expr.Term.Mul(JSG.graph.expr.Term.fromReference(a.copy()), JSG.graph.expr.Term.fromNumber(b))
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.coordinate = function (a, b) {
    var c = new JSG.graph.expr.NumberExpression(0, void 0, a), d = new JSG.graph.expr.NumberExpression(0, void 0, b);
    return new JSG.graph.Coordinate(c, d)
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.getPropertyValue = function () {
    var a = Array.prototype.shift.call(arguments);
    if (a.getter)return (JSG.Strings.isString(a.getter) ? this[a.getter] : a.getter).apply(this, arguments)
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.getWidth = function () {
    return this._bbox.getWidth()
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.getHeight = function () {
    return this._bbox.getHeight()
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.getBoundingBox = function (a) {
    a = a || new JSG.geometry.BoundingBox(0, 0);
    a.setTo(this._bbox);
    return a
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.setBoundingBox = function (a) {
    this._bbox.setTo(a)
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.containsPoint = function (a) {
    return this._bbox.containsPoint(a)
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.getPinPoint = function (a) {
    a = this._markers[8].getPinLocation(a);
    this._bbox.rotateLocalPoint(a);
    var b = this._bbox.getTopLeft(JSG.ptCache.get());
    a.add(b);
    JSG.ptCache.release(b);
    return a
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.getRotationMarker = function () {
    return this._markers[8]
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.refresh = function () {
    var a, b = JSG.ptCache.get(), c = this._views[0].getGraphView();
    a = this._selectionView.getRotationAngle();
    this._views[0].getTranslatedBoundingBox(c, this._bbox);
    if (1 < this._views.length) {
        var d = this._bbox, c = c.getItem();
        d.setSize(0, 0);
        d.setAngle(a);
        for (a = 0; a < this._views.length; a++) {
            var e = this._views[a].getItem().getTranslatedShapePoints(c);
            d.enclosePoints(e)
        }
        b.set(d.getWidth() / 2, d.getHeight() / 2)
    } else this._views[0].getPin().getLocalPoint(b);
    this._markers[8].setPinLocation(b);
    JSG.ptCache.release(b)
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.drawSelection = function (a) {
    var b = this.getSelectionStyle(), c = JSG.boxCache.get().setTo(this._bbox), d = c.getTopLeft(JSG.ptCache.get()), e = a.getCoordinateSystem().metricToLogXNoZoom(b.markerSize);
    this._tolerance = a.getCoordinateSystem().metricToLogXNoZoom(JSG.findRadius);
    b.areMarkersVisible || c.expandBy(e);
    a.save();
    a.setLineWidth(b.lineWidth);
    a.setLineColor(b.lineColor);
    a.setLineStyle(b.lineStyle);
    a.drawPolyline(c.getPoints(), !0);
    b.areMarkersVisible &&
    (a.translate(d.x, d.y), a.rotate(c.getAngle()), a.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID), a.setFillColor(b.markerFillColor), a.setLineColor(b.markerBorderColor), a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID), this._markers.forEach(function (c) {
        c.setSize(e);
        c._disabled ? a.setFillColor(b.markerFillColorDisabled) : a.setFillColor(b.markerFillColor);
        c.draw(a, b)
    }), this._drawAdditionalMarkers(a));
    a.restore();
    JSG.ptCache.release(d);
    JSG.boxCache.release(c)
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype._drawAdditionalMarkers = function (a) {
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype.getHandleAt = function (a, b, c) {
    c = c || new JSG.graph.view.selection.SelectionHandle;
    var d = JSG.boxCache.get().setTo(this._bbox), e = JSG.ptCache.get().setTo(a);
    b = b.cs.metricToLogXNoZoom(JSG.findRadius);
    c.reset();
    this._bbox.transformPoint(e);
    d.expandBy(b);
    if (d.containsPoint(a)) {
        if (this._moveable && (this._bbox.getHeight() < 3 * this._tolerance || this._bbox.getWidth() < 3 * this._tolerance) && this._bbox.containsPoint(a))return c.setType(JSG.graph.view.selection.SelectionHandle.TYPE.MOVE),
            c.setCursor(JSG.ui.Cursor.Style.MOVE), JSG.ptCache.release(e), JSG.boxCache.release(d), c;
        if (this._sizeable) {
            var f = this._getMarkerAt(e);
            if (f && !f._disabled)return this._fillHandle(c, f), JSG.ptCache.release(e), JSG.boxCache.release(d), c
        }
    }
    d.reduceBy(b);
    if (d.containsPoint(a) && this._moveable)return c.setType(JSG.graph.view.selection.SelectionHandle.TYPE.MOVE), c.setCursor(JSG.ui.Cursor.Style.MOVE), JSG.ptCache.release(e), JSG.boxCache.release(d), c;
    this._rotatable && (!this._markers[8]._disabled && this._markers[8].containsPoint(e) ?
        (c.setType(JSG.graph.view.selection.SelectionHandle.TYPE.ROTATE), c.setCursor(JSG.ui.Cursor.Style.ROTATE)) : c = void 0);
    JSG.ptCache.release(e);
    JSG.boxCache.release(d);
    return c
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype._getMarkerAt = function (a) {
    var b, c = this._markers;
    for (b = 0; b < c.length; b++)if (c[b].containsPoint(a))return c[b]
};
JSG.graph.view.selection.BBoxSelectionHandler.prototype._fillHandle = function (a, b) {
    a.setType(JSG.graph.view.selection.SelectionHandle.TYPE.RESIZE);
    a.setCursor(function (a) {
        switch (a) {
            case 0:
                return JSG.ui.Cursor.Style.RESIZE_NW;
            case 1:
                return JSG.ui.Cursor.Style.RESIZE_N;
            case 2:
                return JSG.ui.Cursor.Style.RESIZE_NE;
            case 3:
                return JSG.ui.Cursor.Style.RESIZE_E;
            case 4:
                return JSG.ui.Cursor.Style.RESIZE_SE;
            case 5:
                return JSG.ui.Cursor.Style.RESIZE_S;
            case 6:
                return JSG.ui.Cursor.Style.RESIZE_SW;
            case 7:
                return JSG.ui.Cursor.Style.RESIZE_W
        }
    }(b._index));
    a.setPointIndex(b._index)
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.NodeSelectionHandler = function (a) {
    JSG.graph.view.selection.NodeSelectionHandler._super.constructor.apply(this, arguments);
    this._reshapeMarkers = void 0;
    this._addReshapeMarkers(a)
};
JSG.extend(JSG.graph.view.selection.NodeSelectionHandler, JSG.graph.view.selection.BBoxSelectionHandler);
JSG.graph.view.selection.NodeSelectionHandler.RESHAPEMARKER_FILL_COLOR = "#00C00D";
JSG.graph.view.selection.NodeSelectionHandler.prototype._addReshapeMarkers = function (a) {
    this._reshapeMarkers = [];
    var b, c = a.getItem().getReshapeCoordinates(), d = new JSG.graph.expr.Reference(this, JSG.graph.properties.GraphItemProperties.WIDTH, this), e = new JSG.graph.expr.Reference(this, JSG.graph.properties.GraphItemProperties.HEIGHT, this), f, g, k = JSG.graph.expr.Term;
    a = 0;
    for (b = c.length; a < b; a++) {
        var h = c[a];
        f = h.getX().getValue();
        g = h.getY().getValue();
        switch (h.getType()) {
            case JSG.graph.ReshapeType.XRELATIVETOWIDTH:
                f =
                    new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(d.copy()), k.fromNumber(f)));
                g = new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(e.copy()), k.fromNumber(g)));
                break;
            case JSG.graph.ReshapeType.XRELATIVETOWIDTHFROMRIGHT:
                f = new k.Mul(k.fromReference(d.copy()), k.fromNumber(f));
                f = new JSG.graph.expr.Expression(0, void 0, new k.Sub(k.fromReference(d.copy()), f));
                g = new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(e.copy()), k.fromNumber(g)));
                break;
            case JSG.graph.ReshapeType.XRELATIVETOHEIGHT:
                f =
                    new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(e.copy()), k.fromNumber(f)));
                g = new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(e.copy()), k.fromNumber(g)));
                break;
            case JSG.graph.ReshapeType.XRELATIVETOHEIGHTFROMRIGHT:
                f = new k.Mul(k.fromReference(e.copy()), k.fromNumber(f));
                f = new JSG.graph.expr.Expression(0, void 0, new k.Sub(k.fromReference(d.copy()), f));
                g = new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(e.copy()), k.fromNumber(g)));
                break;
            case JSG.graph.ReshapeType.YRELATIVETOHEIGHT:
                f =
                    new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(d.copy()), k.fromNumber(f)));
                g = new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(e.copy()), k.fromNumber(g)));
                break;
            case JSG.graph.ReshapeType.YRELATIVETOHEIGHTFROMBOTTOM:
                f = new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(d.copy()), k.fromNumber(f)));
                g = new k.Mul(k.fromReference(e.copy()), k.fromNumber(g));
                g = new JSG.graph.expr.Expression(0, void 0, new k.Sub(k.fromReference(e.copy()), g));
                break;
            case JSG.graph.ReshapeType.YRELATIVETOWIDTH:
                f =
                    new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(d.copy()), k.fromNumber(f)));
                g = new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(d.copy()), k.fromNumber(g)));
                break;
            case JSG.graph.ReshapeType.YRELATIVETOWIDTHFROMBOTTOM:
                f = new JSG.graph.expr.Expression(0, void 0, new k.Mul(k.fromReference(d.copy()), k.fromNumber(f)));
                g = new k.Mul(k.fromReference(d.copy()), k.fromNumber(g));
                g = new JSG.graph.expr.Expression(0, void 0, new k.Sub(k.fromReference(e.copy()), g));
                break;
            default:
                f = new JSG.graph.expr.NumberExpression(f),
                    g = new JSG.graph.expr.NumberExpression(g)
        }
        h = new JSG.graph.ReshapeCoordinate(f, g, h._xMin, h._xMax, h._yMin, h._yMax, h._name, h._type, h._vertical);
        h = new JSG.graph.view.selection.Marker(a, h, !1);
        h._type = JSG.graph.view.selection.SelectionHandle.TYPE.RESHAPE;
        this._reshapeMarkers.push(h)
    }
};
JSG.graph.view.selection.NodeSelectionHandler.prototype._drawAdditionalMarkers = function (a) {
    var b = this.getSelectionStyle(), c = a.getCoordinateSystem().metricToLogXNoZoom(b.markerSize);
    a.setFillColor(JSG.graph.view.selection.NodeSelectionHandler.RESHAPEMARKER_FILL_COLOR);
    this._reshapeMarkers.forEach(function (d) {
        d.setSize(c);
        d.draw(a, b)
    })
};
JSG.graph.view.selection.NodeSelectionHandler.prototype._getMarkerAt = function (a) {
    var b, c = this._reshapeMarkers;
    for (b = 0; b < c.length; b++)if (c[b].containsPoint(a))return c[b];
    return JSG.graph.view.selection.NodeSelectionHandler._super._getMarkerAt.call(this, a)
};
JSG.graph.view.selection.NodeSelectionHandler.prototype._fillHandle = function (a, b) {
    b._type ? (a.setType(b._type), a.setCursor(JSG.ui.Cursor.Style.CROSS), a.setPointIndex(b._index)) : JSG.graph.view.selection.NodeSelectionHandler._super._fillHandle.call(this, a, b)
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.LineNodeSelectionHandler = function (a) {
    JSG.graph.view.selection.LineNodeSelectionHandler._super.constructor.call(this, a);
    this._lineview = a;
    this._bbox = new JSG.geometry.BoundingBox(0, 0);
    this._linepoints = [];
    this._linemarkers = [];
    this._markerFactory = function () {
        return new JSG.graph.view.selection.Marker(0, JSG.graph.Coordinate.fromXY(0, 0))
    }
};
JSG.extend(JSG.graph.view.selection.LineNodeSelectionHandler, JSG.graph.view.selection.SelectionHandler);
JSG.graph.view.selection.LineNodeSelectionHandler.prototype.getBoundingBox = function (a) {
    a = a || new JSG.geometry.BoundingBox(0, 0);
    a.setTo(this._bbox);
    return a
};
JSG.graph.view.selection.LineNodeSelectionHandler.prototype.containsPoint = function (a) {
    var b = this._lineview.getItem(), c = b.getGraph();
    a = JSG.graph.Utils.translatePointDown(a, c, b.getParent());
    c = JSG.findRadius / c.getZoom();
    return b.containsPoint(a, 0, c)
};
JSG.graph.view.selection.LineNodeSelectionHandler.prototype.getPinPoint = function (a) {
    return a || new JSG.geometry.Point(0, 0)
};
JSG.graph.view.selection.LineNodeSelectionHandler.prototype.getRotationMarker = function () {
};
JSG.graph.view.selection.LineNodeSelectionHandler.prototype.refresh = function () {
    this._lineview.getTranslatedBoundingBox(this._lineview.getGraphView(), this._bbox)
};
JSG.graph.view.selection.LineNodeSelectionHandler.prototype.drawSelection = function (a) {
    var b = this._lineview.getItem(), c = this.getSelectionStyle();
    a.save();
    c.areMarkersVisible ? (a.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID), a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID), a.setLineColor(c.markerBorderColor), b.isSizeable() ? a.setFillColor(c.markerFillColor) : a.setFillColor(c.markerFillColorDisabled), this._drawMarkersFor(b, a)) : (a.setLineWidth(c.lineWidth), a.setLineColor(c.lineColor),
        a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.DASH), this._drawLine(b, a));
    a.restore()
};
JSG.graph.view.selection.LineNodeSelectionHandler.prototype._drawLine = function (a, b) {
    var c, d, e = a.getShape().getCoordinates(), f = [];
    c = 0;
    for (d = e.length; c < d; c++)f.push(a.translateToParent(e[c].toPoint()));
    b.drawPolyline(f, !1)
};
JSG.graph.view.selection.LineNodeSelectionHandler.prototype._drawMarkersFor = function (a, b) {
    var c, d, e, f = JSG.ptCache.get(), g = a.getShape().getCoordinates();
    c = this.getSelectionStyle();
    e = b.getCoordinateSystem().metricToLogXNoZoom(c.markerSize);
    JSG.Arrays.keep(this._linemarkers, g.length, this._markerFactory);
    c = 0;
    for (d = g.length; c < d; c++)g[c].toPoint(f), a.translateToParent(f), this._drawMarkerAt(c, f, this._linemarkers[c], e, b);
    JSG.ptCache.release(f)
};
JSG.graph.view.selection.LineNodeSelectionHandler.prototype._drawMarkerAt = function (a, b, c, d, e) {
    a = this._lineview.getItem().getParent();
    var f = a.getGraph();
    b = JSG.ptCache.get().setTo(b);
    var g = this.getSelectionStyle();
    JSG.graph.Utils.translatePointUp(b, a, f);
    c._coordinate.set(b.x, b.y);
    c.setSize(d);
    c.draw(e, g);
    JSG.ptCache.release(b)
};
JSG.graph.view.selection.LineNodeSelectionHandler.prototype.getHandleAt = function (a, b, c) {
    var d, e, f;
    f = !1;
    b = this._lineview._item;
    var g = JSG.ptCache.get(), k = b.getGraph();
    c = c || new JSG.graph.view.selection.SelectionHandle;
    c.reset();
    g.setTo(a);
    d = 0;
    for (e = b.getItemCount(); d < e; d++)if (b.getItemAt(d).getTranslatedBoundingBox(k).containsPoint(g)) {
        f = !0;
        break
    }
    f || (g.setTo(a), (f = this._getMarkerAt(g)) ? b.isSizeable() && (c.setType(JSG.graph.view.selection.SelectionHandle.TYPE.RESIZE), c.setCursor(f._cursor), c.setPointIndex(f._index)) :
    b.isMoveable() && (f = JSG.findRadius / k.getZoom(), g.setTo(a), JSG.graph.Utils.translatePointDown(g, k, b.getParent()), b.containsPoint(g, 0, f) && (c.setType(JSG.graph.view.selection.SelectionHandle.TYPE.MOVE), c.setCursor(JSG.ui.Cursor.Style.MOVE))));
    JSG.ptCache.release(g);
    return c
};
JSG.graph.view.selection.LineNodeSelectionHandler.prototype._getMarkerAt = function (a) {
    var b, c;
    for (b = 0; b < this._linemarkers.length; b++)if (this._linemarkers[b].containsPoint(a)) {
        this._linemarkers[b]._index = b;
        this._linemarkers[b]._isCenter = !1;
        a = this._linemarkers[b];
        c = void 0;
        c = 0 === b ? JSG.ui.Cursor.Style.RESIZE_NW : b === this._linemarkers.length - 1 ? JSG.ui.Cursor.Style.RESIZE_SE : JSG.ui.Cursor.Style.RESIZE_NE;
        a._cursor = c;
        c = this._linemarkers[b];
        break
    }
    return c
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.TextSelectionHandler = function (a) {
    this._view = a;
    JSG.graph.view.selection.TextSelectionHandler._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.view.selection.TextSelectionHandler, JSG.graph.view.selection.BBoxSelectionHandler);
JSG.graph.view.selection.TextSelectionHandler.prototype.getHandleAt = function (a, b, c) {
    c = c || new JSG.graph.view.selection.SelectionHandle;
    var d = JSG.boxCache.get().setTo(this._bbox), e = b.cs.metricToLogXNoZoom(JSG.findRadius);
    c.reset();
    d.reduceBy(e);
    d.containsPoint(a) && ("" !== this._view.getItem().getLink().getValue() && b.event.ctrlKey) && (c.setCursor(JSG.ui.Cursor.Style.EXECUTE), c.setType(JSG.graph.view.selection.SelectionHandle.TYPE.EXECUTE));
    JSG.boxCache.release(d);
    return void 0 !== c.getType() ? c : JSG.graph.view.selection.TextSelectionHandler._super.getHandleAt.call(this,
        a, b, c)
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.LineSelectionHandler = function (a) {
    JSG.graph.view.selection.LineSelectionHandler._super.constructor.call(this, a);
    this._lineview = a;
    this._bbox = new JSG.geometry.BoundingBox(0, 0);
    this._linepoints = [];
    this._linemarkers = [];
    this._markerFactory = function () {
        return new JSG.graph.view.selection.Marker(0, JSG.graph.Coordinate.fromXY(0, 0))
    }
};
JSG.extend(JSG.graph.view.selection.LineSelectionHandler, JSG.graph.view.selection.SelectionHandler);
JSG.graph.view.selection.LineSelectionHandler.prototype.getBoundingBox = function (a) {
    a = a || new JSG.geometry.BoundingBox(0, 0);
    a.setTo(this._bbox);
    return a
};
JSG.graph.view.selection.LineSelectionHandler.prototype.containsPoint = function (a) {
    var b = this._lineview.getItem(), c = b.getGraph(), d = JSG.findRadius / c.getZoom();
    JSG.graph.Utils.translatePointDown(a, c, b.getParent());
    return b.containsPoint(a, 0, d)
};
JSG.graph.view.selection.LineSelectionHandler.prototype.getPinPoint = function (a) {
    return a || new JSG.geometry.Point(0, 0)
};
JSG.graph.view.selection.LineSelectionHandler.prototype.getRotationMarker = function () {
};
JSG.graph.view.selection.LineSelectionHandler.prototype.refresh = function () {
    this._lineview.getTranslatedBoundingBox(this._lineview.getGraphView(), this._bbox)
};
JSG.graph.view.selection.LineSelectionHandler.prototype.drawSelection = function (a) {
    var b = this._lineview.getItem(), c = this.getSelectionStyle(), d = b.getPoints(this._linepoints);
    JSG.Arrays.keep(this._linemarkers, d.length, this._markerFactory);
    a.save();
    a.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID);
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    a.setLineColor(c.markerBorderColor);
    if (JSG.debug.SHOW_LINE_ORIGIN) {
        a.setFillColor("#FF0000");
        var e = b.getPinPoint(), f = this._linemarkers[0];
        f._coordinate.set(e.x, e.y);
        f.setSize(a.getCoordinateSystem().metricToLogXNoZoom(c.markerSize));
        f.draw(a, c)
    }
    c.areMarkersVisible ? (b.isSizeable() ? a.setFillColor(c.markerFillColor) : a.setFillColor(c.markerFillColorDisabled), this._drawMarkerPoints(d, a)) : (a.setLineWidth(c.lineWidth), a.setLineColor(c.lineColor), a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.DASH), this._drawPolyline(d, a));
    a.restore()
};
JSG.graph.view.selection.LineSelectionHandler.prototype._drawPolyline = function (a, b) {
    var c = this._lineview.getItem().getParent(), d = c.getGraph(), e, f;
    e = 0;
    for (f = a.length; e < f; e++)JSG.graph.Utils.translatePointUp(a[e], c, d);
    b.drawPolyline(a, !1)
};
JSG.graph.view.selection.LineSelectionHandler.prototype._drawMarkerPoints = function (a, b) {
    var c, d, e = this.getSelectionStyle(), f = b.getCoordinateSystem().metricToLogXNoZoom(e.markerSize);
    for (c = 0; c < a.length; c++)d = this._linemarkers[c], d.setSize(f), this._drawMarkerAt(c, a[c], d, e, b)
};
JSG.graph.view.selection.LineSelectionHandler.prototype._drawMarkerAt = function (a, b, c, d, e) {
    a = this._lineview.getItem().getParent();
    var f = a.getGraph();
    b = JSG.ptCache.get().setTo(b);
    JSG.graph.Utils.translatePointUp(b, a, f);
    c._coordinate.set(b.x, b.y);
    c.draw(e, d);
    JSG.ptCache.release(b)
};
JSG.graph.view.selection.LineSelectionHandler.prototype.getHandleAt = function (a, b, c) {
    var d, e;
    b = !1;
    var f = this._lineview._item;
    a = JSG.ptCache.get().setTo(a);
    var g = f.getGraph();
    c = c || new JSG.graph.view.selection.SelectionHandle;
    c.reset();
    d = 0;
    for (e = f.getItemCount(); d < e; d++)if (f.getItemAt(d).getTranslatedBoundingBox(g).containsPoint(a)) {
        b = !0;
        break
    }
    b || ((b = this._getMarkerAt(a)) ? this._lineview._item.isSizeable() && (c.setType(JSG.graph.view.selection.SelectionHandle.TYPE.RESIZE), c.setCursor(b._cursor), c.setPointIndex(b._index)) :
    this._lineview._item.isMoveable() && (a = JSG.graph.Utils.translatePointDown(a, g, this._lineview.getParent().getItem()), b = JSG.findRadius / g.getZoom(), this._lineview.containsPoint(a, 0, b) && (c.setType(JSG.graph.view.selection.SelectionHandle.TYPE.MOVE), c.setCursor(JSG.ui.Cursor.Style.MOVE))));
    JSG.ptCache.release(a);
    return c
};
JSG.graph.view.selection.LineSelectionHandler.prototype._getMarkerAt = function (a) {
    var b, c;
    for (b = 0; b < this._linemarkers.length; b++)if (this._linemarkers[b].containsPoint(a)) {
        this._linemarkers[b]._index = b;
        this._linemarkers[b]._isCenter = !1;
        a = this._linemarkers[b];
        c = void 0;
        c = 0 === b ? JSG.ui.Cursor.Style.RESIZE_NW : b === this._linemarkers.length - 1 ? JSG.ui.Cursor.Style.RESIZE_SE : JSG.ui.Cursor.Style.RESIZE_NE;
        a._cursor = c;
        c = this._linemarkers[b];
        break
    }
    return c
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.OrthoLineSelectionHandler = function (a) {
    JSG.graph.view.selection.OrthoLineSelectionHandler._super.constructor.call(this, a);
    this._centermarkers = [];
    this._centerMarkerFactory = function () {
        return new JSG.graph.view.selection.Marker(0, JSG.graph.Coordinate.fromXY(0, 0))
    }
};
JSG.extend(JSG.graph.view.selection.OrthoLineSelectionHandler, JSG.graph.view.selection.LineSelectionHandler);
JSG.graph.view.selection.OrthoLineSelectionHandler.prototype.drawSelection = function (a) {
    var b = this.getSelectionStyle(), b = a.getCoordinateSystem().metricToLogXNoZoom(b.markerSize);
    this._drawinfo = {};
    this._drawinfo.center = new JSG.geometry.Point(0, 0);
    this._drawinfo.prevPoint = new JSG.geometry.Point(0, 0);
    this._drawinfo.centersize = 3 * b / 4;
    JSG.graph.view.selection.OrthoLineSelectionHandler._super.drawSelection.call(this, a);
    delete this._drawinfo
};
JSG.graph.view.selection.OrthoLineSelectionHandler.prototype._drawMarkerPoints = function (a, b) {
    JSG.Arrays.keep(this._centermarkers, a.length - 1, this._centerMarkerFactory);
    this._drawinfo.lastpoint = a.length - 1;
    this._drawinfo.prevPoint.setTo(a[0]);
    JSG.graph.view.selection.OrthoLineSelectionHandler._super._drawMarkerPoints.call(this, a, b)
};
JSG.graph.view.selection.OrthoLineSelectionHandler.prototype._drawMarkerAt = function (a, b, c, d, e) {
    var f;
    if (0 < a) {
        f = this._centermarkers[a - 1];
        f.setSize(this._drawinfo.centersize);
        var g = this._drawinfo, k;
        k = this._drawinfo.prevPoint;
        var h = this._drawinfo.center || new JSG.geometry.Point(0, 0);
        h.x = (b.x - k.x) / 2;
        h.y = (b.y - k.y) / 2;
        k = h.add(k);
        g.center = k;
        this._drawinfo.prevPoint.setTo(b);
        JSG.graph.view.selection.OrthoLineSelectionHandler._super._drawMarkerAt.call(this, a, this._drawinfo.center, f, d, e)
    }
    JSG.graph.view.selection.OrthoLineSelectionHandler._super._drawMarkerAt.call(this,
        a, b, c, d, e)
};
JSG.graph.view.selection.OrthoLineSelectionHandler.prototype.getHandleAt = function (a, b, c) {
    var d, e = this._lineview._item, f = c || new JSG.graph.view.selection.SelectionHandle, g = !1;
    b = b.cs.metricToLogXNoZoom(JSG.findRadius);
    a = JSG.ptCache.get().setTo(a);
    f = c || new JSG.graph.view.selection.SelectionHandle;
    f.reset();
    c = 0;
    for (d = e.getItemCount(); c < d; c++)if (e.getItemAt(c).getTranslatedBoundingBox(e.getGraph()).containsPoint(a)) {
        g = !0;
        break
    }
    g || ((g = this._getMarkerAt(a)) ? g._isCenter ? this._lineview._item.isMoveable() && (f.setType(JSG.graph.view.selection.SelectionHandle.TYPE.MOVE),
        f.setCursor(g._cursor), f.setPointIndex(g._index)) : this._lineview._item.isSizeable() && (f.setType(JSG.graph.view.selection.SelectionHandle.TYPE.RESIZE), f.setCursor(g._cursor), f.setPointIndex(g._index)) : this._lineview._item.isSizeable() && (a = JSG.graph.Utils.translatePointDown(a, e.getGraph(), e.getParent()), e = this._lineview.getLineSegmentAtPoint(a, b / 2), -1 !== e && (f.setType(JSG.graph.view.selection.SelectionHandle.TYPE.RESIZE), f.setCursor(JSG.ui.Cursor.Style.CROSS), f._segmentIndex = e)));
    JSG.ptCache.release(a);
    return f
};
JSG.graph.view.selection.OrthoLineSelectionHandler.prototype._getMarkerAt = function (a) {
    var b, c = JSG.graph.view.selection.OrthoLineSelectionHandler._super._getMarkerAt.call(this, a);
    if (!c && this._lineview._item.isMoveable())for (b = 0; b < this._centermarkers.length; b++)if (this._centermarkers[b].containsPoint(a)) {
        this._centermarkers[b]._index = b;
        this._centermarkers[b]._isCenter = !0;
        this._centermarkers[b]._cursor = JSG.ui.Cursor.Style.MOVE;
        c = this._centermarkers[b];
        break
    }
    return c
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.CommandButtonHandler = function (a, b) {
    JSG.graph.view.selection.CommandButtonHandler._super.constructor.call(this);
    this._handler = a;
    this._cmdButtons = b
};
JSG.extend(JSG.graph.view.selection.CommandButtonHandler, JSG.graph.view.selection.SelectionHandler);
JSG.graph.view.selection.CommandButtonHandler.prototype.register = function (a) {
    this._handler.register(a)
};
JSG.graph.view.selection.CommandButtonHandler.prototype.getSelectionStyle = function () {
    return this._handler.getSelectionStyle()
};
JSG.graph.view.selection.CommandButtonHandler.prototype.containsPoint = function (a) {
    return this._handler.containsPoint(a)
};
JSG.graph.view.selection.CommandButtonHandler.prototype.getBoundingBox = function (a) {
    return this._handler.getBoundingBox(a)
};
JSG.graph.view.selection.CommandButtonHandler.prototype.getPinPoint = function (a) {
    return this._handler.getPinPoint(a)
};
JSG.graph.view.selection.CommandButtonHandler.prototype.getRotationMarker = function () {
    return this._handler.getRotationMarker()
};
JSG.graph.view.selection.CommandButtonHandler.prototype.getHandleAt = function (a, b, c) {
    b = this._handler.getHandleAt(a, b, c);
    if (!b) {
        var d;
        for (c = 0; c < this._cmdButtons.length; c++)if (d = this._cmdButtons[c], d._image && d._bounds.containsPoint(a)) {
            b = new JSG.graph.view.selection.SelectionHandle;
            b.setCursor(JSG.ui.Cursor.Style.EXECUTE);
            b.cmdBtn = d;
            b.setType(JSG.graph.view.selection.SelectionHandle.TYPE.COMMAND);
            break
        }
    }
    return b
};
JSG.graph.view.selection.CommandButtonHandler.prototype.refresh = function () {
    this._handler.refresh()
};
JSG.graph.view.selection.CommandButtonHandler.prototype.drawSelection = function (a) {
    this._handler.drawSelection(a);
    if (this.getSelectionStyle().areMarkersVisible && this._cmdButtons && this._cmdButtons.length) {
        var b = this._handler.getBoundingBox(JSG.boxCache.get()), c = b.getBoundingRectangle(JSG.rectCache.get()), d, e, f, g, k = a.getCoordinateSystem().deviceToLogXNoZoom(16);
        a.setLineColor("#FFFFFF");
        a.setLineWidth(10);
        for (d = 0; d < this._cmdButtons.length; d++)g = this._cmdButtons[d], f = e = 0, g.getPosition() & JSG.graph.view.selection.CommandButton.Position.LEFT ?
            e = c.x - k - 500 : g.getPosition() & JSG.graph.view.selection.CommandButton.Position.CENTER ? e = c.getCenterX() - k / 2 : g.getPosition() & JSG.graph.view.selection.CommandButton.Position.RIGHT && (e = c.getRight() + 500), g.getPosition() & JSG.graph.view.selection.CommandButton.Position.TOP ? f = c.y - k - 1E3 : g.getPosition() & JSG.graph.view.selection.CommandButton.Position.MIDDLE ? f = c.getCenterY() - k / 2 : g.getPosition() & JSG.graph.view.selection.CommandButton.Position.BOTTOM && (f = c.getBottom() + 500), g._bounds.set(e, f, k, k), g.draw(a);
        JSG.boxCache.release(b);
        JSG.rectCache.release(c)
    }
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.SelectionStyle = function () {
    this.lineStyle = this.lineWidth = this.lineColor = void 0;
    this.areMarkersVisible = !0;
    this.rotateMarkerDistance = this.markerSize = this.markerBorderColor = this.markerFillColorDisabled = this.markerFillColor = void 0;
    this.isRotateMarkerVisible = !0;
    this.reset()
};
JSG.graph.view.selection.SelectionStyle.prototype = {
    reset: function () {
        var a = JSG.graph.view.selection.SelectionView;
        this.markerFillColor = a.MARKER_FILL_COLOR;
        this.markerFillColorDisabled = a.MARKER_FILL_COLOR_DISABLED;
        this.markerBorderColor = a.MARKER_BORDER_COLOR;
        this.markerSize = a.MARKER_SIZE;
        this.rotateMarkerDistance = a.ROTATE_MARKER_DISTANCE;
        this.lineColor = a.LINE_COLOR;
        this.lineWidth = JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE;
        this.lineStyle = JSG.graph.attr.FormatAttributes.LineStyle.DASH;
        this.isRotateMarkerVisible =
            this.areMarkersVisible = !0
    }
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.SelectionHandlerFactory = function () {
};
JSG.graph.view.selection.SelectionHandlerFactory.prototype.createSelectionHandler = function (a) {
    var b;
    b = a.getViews();
    switch (b.length) {
        case 0:
            b = void 0;
            break;
        case 1:
            b = this.createSingleSelectionHandler(b[0]);
            break;
        default:
            b = this.createMultipleSelectionHandler(b)
    }
    b && b.register(a);
    return b
};
JSG.graph.view.selection.SelectionHandlerFactory.prototype.createSingleSelectionHandler = function (a) {
    var b = a.getItem();
    a = b instanceof JSG.graph.model.LineConnection ? b._shape instanceof JSG.graph.model.shapes.OrthoLineShape ? new JSG.graph.view.selection.OrthoLineSelectionHandler(a) : new JSG.graph.view.selection.LineSelectionHandler(a) : b instanceof JSG.graph.model.LineNode ? new JSG.graph.view.selection.LineNodeSelectionHandler(a) : b instanceof JSG.graph.model.TextNode ? new JSG.graph.view.selection.TextSelectionHandler(a) :
        new JSG.graph.view.selection.NodeSelectionHandler(a);
    (b = JSG.graphItemFactory.getCommandButtons(b)) && 0 < b.length && (a = new JSG.graph.view.selection.CommandButtonHandler(a, b));
    return a
};
JSG.graph.view.selection.SelectionHandlerFactory.prototype.createMultipleSelectionHandler = function (a) {
    return new JSG.graph.view.selection.BBoxSelectionHandler(a)
};
JSG.namespace("JSG.graph.view.selection");
JSG.graph.view.selection.SelectionView = function () {
    JSG.graph.view.selection.SelectionView._super.constructor.apply(this, arguments);
    this._views = [];
    this._commandButtons = void 0;
    this._rotationAngle = 0;
    this._selectionHandler = void 0;
    this._selectionHandle = new JSG.graph.view.selection.SelectionHandle;
    this._handlerFactory = new JSG.graph.view.selection.SelectionHandlerFactory;
    this._selectionStyle = new JSG.graph.view.selection.SelectionStyle
};
JSG.extend(JSG.graph.view.selection.SelectionView, JSG.ui.View);
JSG.graph.view.selection.SelectionView.LINE_COLOR = "#777777";
JSG.graph.view.selection.SelectionView.MARKER_FILL_COLOR = "#90B5EE";
JSG.graph.view.selection.SelectionView.MARKER_FILL_COLOR_DISABLED = "#CCCCCC";
JSG.graph.view.selection.SelectionView.MARKER_BORDER_COLOR = "#AAAAAA";
JSG.graph.view.selection.SelectionView.MARKER_SIZE = JSG.touchDevice ? 450 : 200;
JSG.graph.view.selection.SelectionView.ROTATE_MARKER_DISTANCE = JSG.touchDevice ? 1200 : 800;
JSG.graph.view.selection.SelectionView.FRIEND_UNIT = 200;
JSG.graph.view.selection.SelectionView.prototype.addView = function (a) {
    this._views.push(a)
};
JSG.graph.view.selection.SelectionView.prototype.removeAllViews = function () {
    this.clearSelection()
};
JSG.graph.view.selection.SelectionView.prototype.clearSelection = function () {
    this._views = [];
    this._selectionHandler = void 0
};
JSG.graph.view.selection.SelectionView.prototype.setSelection = function (a) {
    var b, c, d;
    this.clearSelection();
    if (0 < arguments.length)for (d = arguments, Array.isArray(d[0]) && (d = d[0]), b = 0, c = d.length; b < c; b++)d[b] && this._views.push(d[b].getView());
    this._updateSelectionHandler()
};
JSG.graph.view.selection.SelectionView.prototype.getHandlerFactory = function () {
    return this._handlerFactory
};
JSG.graph.view.selection.SelectionView.prototype.setHandlerFactory = function (a) {
    this._handlerFactory = a || this._handlerFactory
};
JSG.graph.view.selection.SelectionView.prototype.getViews = function () {
    return this._views
};
JSG.graph.view.selection.SelectionView.prototype.getStyle = function () {
    return this._selectionStyle
};
JSG.graph.view.selection.SelectionView.prototype.setStyle = function (a) {
    this._selectionStyle = a
};
JSG.graph.view.selection.SelectionView.prototype._updateSelectionHandler = function () {
    this._selectionHandler = (this._selectionHandler = this._handlerFactory ? this._handlerFactory.createSelectionHandler(this) : void 0) || new JSG.graph.view.selection.SelectionHandler
};
JSG.graph.view.selection.SelectionView.prototype.refresh = function () {
    this._selectionHandler && this._selectionHandler.refresh(this._rotationAngle)
};
JSG.graph.view.selection.SelectionView.prototype.isVisible = function () {
    return 0 !== this._views.length && this._isVisible
};
JSG.graph.view.selection.SelectionView.prototype.isSingleSelection = function () {
    return 1 === this._views.length
};
JSG.graph.view.selection.SelectionView.prototype.getRotationAngle = function () {
    return this._rotationAngle
};
JSG.graph.view.selection.SelectionView.prototype.setRotationAngle = function (a) {
    this._rotationAngle = a
};
JSG.graph.view.selection.SelectionView.prototype.getBoundingBox = function (a) {
    a = a || new JSG.geometry.BoundingBox(0, 0);
    a.reset();
    return this._selectionHandler ? this._selectionHandler.getBoundingBox(a) : a
};
JSG.graph.view.selection.SelectionView.prototype.containsPoint = function (a) {
    return this._selectionHandler ? this._selectionHandler.containsPoint(a) : !1
};
JSG.graph.view.selection.SelectionView.prototype.getPinPoint = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.set(0, 0);
    return this._selectionHandler ? this._selectionHandler.getPinPoint(a) : a
};
JSG.graph.view.selection.SelectionView.prototype.getRotationMarker = function () {
    return this._selectionHandler ? this._selectionHandler.getRotationMarker() : void 0
};
JSG.graph.view.selection.SelectionView.prototype.getHandleAt = function (a, b) {
    var c;
    if (this._selectionHandler) {
        var d = JSG.graph.view.selection.SelectionHandle.TYPE;
        c = this._selectionHandler.getHandleAt(a, b, this._selectionHandle);
        if ((!c || c._type === d.MOVE || c._type === d.RESIZE) && 1 === this._views.length) {
            var d = this._views[0], e = d.getItem(), f = JSG.ptCache.get().setTo(a);
            JSG.graph.Utils.translatePointDown(f, e.getGraph(), e);
            d.hitCollapseButton(f) && (c = new JSG.graph.view.selection.SelectionHandle, c.setCursor(JSG.ui.Cursor.Style.AUTO));
            JSG.ptCache.release(f)
        }
    }
    return c
};
JSG.graph.view.selection.SelectionView.prototype.draw = function (a) {
    this.isVisible() && this._selectionHandler && (this._selectionHandler.refresh(), this._selectionHandler.drawSelection(a))
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.SelectionProvider = function () {
    this.listeners = [];
    this._selection = new JSG.commons.StableMap;
    this._selcontext = void 0
};
JSG.graph.view.SelectionProvider.SELECTION_CHANGED_NOTIFICATION = "selectionprovider.selection.changed.notification";
JSG.graph.view.SelectionProvider.prototype.addSelectionChangedListener = function (a) {
    this.listeners.push(a)
};
JSG.graph.view.SelectionProvider.prototype.removeSelectionChangedListener = function (a) {
    JSG.Arrays.remove(this.listeners, a)
};
JSG.graph.view.SelectionProvider.prototype._notifySelectionChanged = function () {
    this.listeners.forEach(function (a, b, c) {
        a.onSelectionChanged()
    });
    JSG.graph.notifications.NotificationCenter.getInstance().send(new JSG.graph.notifications.Notification(JSG.graph.view.SelectionProvider.SELECTION_CHANGED_NOTIFICATION, this))
};
JSG.graph.view.SelectionProvider.prototype.getSelectionContext = function () {
    return this._selcontext
};
JSG.graph.view.SelectionProvider.prototype.select = function (a, b) {
    this._selcontext = b;
    this._doSelect(a) && (JSG.debug.log("SELECT: " + a.getModel().getId(), JSG.debug.DUMP_ITEM_ID), this._notifySelectionChanged())
};
JSG.graph.view.SelectionProvider.prototype._doSelect = function (a) {
    var b = a.getModel().getId();
    return this._selection.contains(b) ? !1 : (this._selection.put(b, a), a.setSelected(!0, !0), !0)
};
JSG.graph.view.SelectionProvider.prototype.selectAll = function (a, b) {
    var c = !1, d, e;
    JSG.setDrawingDisabled(!0);
    this._selcontext = b;
    d = 0;
    for (e = a.length; d < e; d++) {
        var f = a[d];
        !f.isSelected() && this._doSelect(f) && (c = !0)
    }
    JSG.setDrawingDisabled(!1);
    !0 === c && this._notifySelectionChanged()
};
JSG.graph.view.SelectionProvider.prototype.setSelection = function (a, b) {
    this._deselectAll(this._selection.elements());
    this._selection.clear();
    this.selectAll(a, b)
};
JSG.graph.view.SelectionProvider.prototype.deselect = function (a) {
    var b = a.getModel().getId();
    this._selection.remove(b) && (a.setSelected(!1), this._notifySelectionChanged())
};
JSG.graph.view.SelectionProvider.prototype._deselectAll = function (a) {
    var b;
    for (b = a.length - 1; 0 <= b; b--)a[b].setSelected(!1, !0)
};
JSG.graph.view.SelectionProvider.prototype.hasSelection = function () {
    return !this._selection.isEmpty()
};
JSG.graph.view.SelectionProvider.prototype.hasSingleSelection = function () {
    return 1 === this._selection.size()
};
JSG.graph.view.SelectionProvider.prototype.isSelected = function (a) {
    return this._selection.contains(a.getId())
};
JSG.graph.view.SelectionProvider.prototype.getSelection = function () {
    return this._selection.elements()
};
JSG.graph.view.SelectionProvider.prototype.getFirstSelection = function () {
    return this._selection.getFirst()
};
JSG.graph.view.SelectionProvider.prototype.clearSelection = function (a) {
    this._selcontext = void 0;
    this._selection.isEmpty() || (this._deselectAll(this._selection.elements()), this._selection.clear(), void 0 !== a && !0 !== a || this._notifySelectionChanged())
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.PortView = function (a) {
    JSG.graph.view.PortView._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.view.PortView, JSG.graph.view.GraphItemView);
JSG.graph.view.PortView.prototype.drawFill = function (a, b, c) {
};
JSG.graph.view.PortView.prototype.drawBorder = function (a, b, c) {
    a.setLineColor("#0000FF");
    a.setLineWidth(JSG.graph.attr.FormatAttributes.LineStyle.HAIRLINE);
    this._shapeRenderer.drawShapeBorder(this._item._shape, this._item.isClosed(), a)
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.EditShapeView = function (a) {
    JSG.graph.view.EditShapeView._super.constructor.apply(this, arguments);
    this._markers = void 0;
    this._isClosed = !0;
    this._origin = new JSG.geometry.Point(0, 0);
    this._rotmatrix = new JSG.geometry.Matrix;
    this._markersize = a.metricToLogXNoZoom(JSG.graph.view.EditShapeView.MARKER_SIZE)
};
JSG.extend(JSG.graph.view.EditShapeView, JSG.ui.View);
JSG.graph.view.EditShapeView.MARKER_SIZE = JSG.graph.view.selection.SelectionView.MARKER_SIZE;
JSG.graph.view.EditShapeView.prototype._tmpmarker = void 0;
JSG.graph.view.EditShapeView.prototype._getTmpMarker = function () {
    this._tmpmarker || (this._tmpmarker = new JSG.graph.view.EditShapeView.Marker(-1, new JSG.geometry.Point(0, 0), this._markersize), this._tmpmarker.isTemporary = !0);
    return this._tmpmarker
};
JSG.graph.view.EditShapeView.prototype.setPointList = function (a, b, c) {
    var d = this, e = this._markersize / 2;
    this._origin.setTo(b);
    this._rotmatrix.setAngle(c);
    this._markers = [];
    a.forEach(function (a, b) {
        var c = a.copy();
        c.x -= e;
        c.y -= e;
        d._markers.push(new JSG.graph.view.EditShapeView.Marker(b, c, d._markersize))
    })
};
JSG.graph.view.EditShapeView.prototype.setIsClosed = function (a) {
    this._isClosed = a
};
JSG.graph.view.EditShapeView.prototype.translatePoint = function (a) {
    a.subtract(this._origin);
    this._rotmatrix.rotatePointInverse(a);
    return a
};
JSG.graph.view.EditShapeView.prototype.draw = function (a) {
    function b(b, c) {
        a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
        a.drawLine(b, c)
    }

    a.save();
    a.translate(this._origin.x, this._origin.y);
    a.rotate(this._rotmatrix.getAngle());
    a.setLineColor("#000000");
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    var c, d;
    this._markers.forEach(function (a) {
        d || (d = a.center);
        c && b(c, a.center);
        c = a.center
    });
    this._isClosed && b(c, d);
    this._markers.forEach(function (b) {
        b.draw(a)
    });
    a.restore()
};
JSG.graph.view.EditShapeView.prototype.getMarker = function (a) {
    return this._markers[a]
};
JSG.graph.view.EditShapeView.prototype.insertMarker = function (a) {
    -1 === a.index && (a = new JSG.graph.view.EditShapeView.Marker(a._insertIndex, new JSG.geometry.Point(0, 0), this._markersize), this._markers.insert(a, a.index));
    return a
};
JSG.graph.view.EditShapeView.prototype.deleteMarker = function (a) {
    JSG.Arrays.remove(this._markers, a)
};
JSG.graph.view.EditShapeView.prototype.getMarkerPoints = function () {
    var a = [];
    this._markers.forEach(function (b) {
        b = b.center.copy();
        a.push(b)
    });
    return a
};
JSG.graph.view.EditShapeView.prototype.getMarkerCount = function () {
    return this._markers.length
};
JSG.graph.view.EditShapeView.prototype.getMarkerAt = function (a, b) {
    function c(b, c, d) {
        var g = Math.min(b.x, c.x) - f, k = Math.max(b.x, c.x) + f, q = Math.min(b.y, c.y) - f, r = Math.max(b.y, c.y) + f;
        if (g < a.x && a.x < k && q < a.y && a.y < r)return JSG.geometry.Utils.getLinePointDistance(b, c, a) <= d ? e : void 0
    }

    var d, e = this._getTmpMarker(), f = this._markersize / 2;
    JSG.Arrays.every(this._markers, function (c) {
        return c.contains(a, b) ? (d = c, !1) : !0
    });
    if (!d) {
        var g = this._markers.length - 1, k;
        for (k = 0; k < g; k++)if (d = c(this._markers[k].center, this._markers[k +
            1].center, b)) {
            d._insertIndex = k + 1;
            break
        }
        !d && this._isClosed && (d = c(this._markers[0].center, this._markers[g].center, b)) && (d._insertIndex = g + 1)
    }
    return d
};
JSG.graph.view.EditShapeView.Marker = function (a, b, c) {
    this.index = a;
    this._origin = b;
    this._insertIndex = -1;
    this._bounds = new JSG.geometry.Rectangle(b.x, b.y, c, c);
    this.center = new JSG.geometry.Point(0, 0);
    this._bounds.getCenter(this.center);
    this.isTemporary = !1
};
JSG.graph.view.EditShapeView.Marker.prototype.draw = function (a) {
    a.setFillColor(JSG.graph.view.selection.SelectionView.MARKER_FILL_COLOR);
    a.drawMarker(this._bounds, !1)
};
JSG.graph.view.EditShapeView.Marker.prototype.contains = function (a, b) {
    var c = this._bounds.getCenter(JSG.ptCache.get()), d = a.x >= c.x - b && a.x <= c.x + b && a.y >= c.y - b && a.y <= c.y + b;
    JSG.ptCache.release(c);
    return d
};
JSG.graph.view.EditShapeView.Marker.prototype.getLocation = function (a) {
    a = void 0 !== a ? a : new JSG.geometry.Point(0, 0);
    a.set(this._bounds.x, this._bounds.y);
    return a
};
JSG.graph.view.EditShapeView.Marker.prototype.getCenter = function (a) {
    a = void 0 !== a ? a : new JSG.geometry.Point(0, 0);
    a.set(this.center.x, this.center.y);
    return a
};
JSG.graph.view.EditShapeView.Marker.prototype.setCenter = function (a, b) {
    this.setLocation(a - this._bounds.width / 2, b - this._bounds.height / 2)
};
JSG.graph.view.EditShapeView.Marker.prototype.setCenterTo = function (a) {
    this.setCenter(a.x, a.y)
};
JSG.graph.view.EditShapeView.Marker.prototype.setLocationTo = function (a) {
    a && this.setLocation(a.x, a.y)
};
JSG.graph.view.EditShapeView.Marker.prototype.setLocation = function (a, b) {
    this._bounds.x = a;
    this._bounds.y = b;
    this._bounds.getCenter(this.center)
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.EditLineShapeView = function (a) {
    JSG.graph.view.EditLineShapeView._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.view.EditLineShapeView, JSG.graph.view.EditShapeView);
JSG.graph.view.EditLineShapeView.prototype.setPointList = function (a, b, c) {
    JSG.graph.view.EditLineShapeView._super.setPointList.call(this, a, b, c)
};
JSG.graph.view.EditLineShapeView.prototype.getMarkerPoints = function () {
    var a = [], b = this;
    this._markers.forEach(function (c) {
        c = c.center.copy();
        b._rotmatrix.rotatePoint(c);
        c.add(b._origin);
        a.push(c)
    });
    return a
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.EditBezierShapeView = function (a) {
    JSG.graph.view.EditBezierShapeView._super.constructor.apply(this, arguments);
    this._cpMarkersize = a.metricToLogXNoZoom(JSG.graph.view.EditBezierShapeView.MARKER_SIZE)
};
JSG.extend(JSG.graph.view.EditBezierShapeView, JSG.graph.view.EditShapeView);
JSG.graph.view.EditBezierShapeView.MARKER_SIZE = 100;
JSG.graph.view.EditBezierShapeView.prototype.setCpToPointList = function (a, b, c) {
    var d = this, e = this._cpMarkersize / 2;
    this._origin.setTo(b);
    this._rotmatrix.setAngle(c);
    this._cpToMarkers = [];
    a.forEach(function (a, b) {
        var c = a.copy();
        c.x -= e;
        c.y -= e;
        d._cpToMarkers.push(new JSG.graph.view.EditBezierShapeView.Marker(b, c, d._cpMarkersize))
    })
};
JSG.graph.view.EditBezierShapeView.prototype.setCpFromPointList = function (a, b, c) {
    var d = this, e = this._cpMarkersize / 2;
    this._origin.setTo(b);
    this._rotmatrix.setAngle(c);
    this._cpFromMarkers = [];
    a.forEach(function (a, b) {
        var c = a.copy();
        c.x -= e;
        c.y -= e;
        d._cpFromMarkers.push(new JSG.graph.view.EditBezierShapeView.Marker(b, c, d._cpMarkersize))
    })
};
JSG.graph.view.EditBezierShapeView.prototype.draw = function (a) {
    a.save();
    a.translate(this._origin.x, this._origin.y);
    a.rotate(this._rotmatrix.getAngle());
    a.setLineColor("#000000");
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    a.beginPath();
    a.moveTo(this._markers[0].center.x, this._markers[0].center.y);
    var b, c;
    b = 1;
    for (c = this._markers.length; b < c; b++)a.bezierCurveTo(this._cpToMarkers[b - 1].center.x, this._cpToMarkers[b - 1].center.y, this._cpFromMarkers[b].center.x, this._cpFromMarkers[b].center.y,
        this._markers[b].center.x, this._markers[b].center.y);
    this._isClosed && (a.bezierCurveTo(this._cpToMarkers[this._markers.length - 1].center.x, this._cpToMarkers[this._markers.length - 1].center.y, this._cpFromMarkers[0].center.x, this._cpFromMarkers[0].center.y, this._markers[0].center.x, this._markers[0].center.y), a.closePath());
    a.stroke();
    this._markers.forEach(function (b) {
        b.draw(a)
    });
    a.setLineColor("#AAAAAA");
    a.setFillColor("#FFFFFF");
    b = 0;
    for (c = this._markers.length; b < c; b++)(b < c - 1 || this._isClosed) && a.drawLine(this._markers[b].center,
        this._cpToMarkers[b].center), (b || this._isClosed) && a.drawLine(this._markers[b].center, this._cpFromMarkers[b].center);
    a.setLineColor("#000000");
    b = this._isClosed ? 0 : 1;
    b;
    for (c = this._cpFromMarkers.length; b < c; b++)this._cpFromMarkers[b].draw(a);
    c = this._isClosed ? this._cpToMarkers.length : this._cpToMarkers.length - 1;
    for (b = 0; b < c; b++)this._cpToMarkers[b].draw(a);
    a.restore()
};
JSG.graph.view.EditBezierShapeView.prototype.insertMarker = function (a) {
    if (-1 === a.index) {
        var b = new JSG.graph.view.EditShapeView.Marker(a._insertIndex, new JSG.geometry.Point(0, 0), this._markersize);
        this._markers.insert(b, b.index);
        var c = new JSG.graph.view.EditBezierShapeView.Marker(a._insertIndex, new JSG.geometry.Point(0, 0), this._cpMarkersize);
        this._cpFromMarkers.insert(c, b.index);
        a = new JSG.graph.view.EditBezierShapeView.Marker(a._insertIndex, new JSG.geometry.Point(0, 0), this._cpMarkersize);
        this._cpToMarkers.insert(a,
            b.index);
        return b
    }
    return a
};
JSG.graph.view.EditBezierShapeView.prototype.deleteMarker = function (a) {
    JSG.Arrays.remove(this._markers, a)
};
JSG.graph.view.EditBezierShapeView.prototype.deleteCpToMarker = function (a) {
    JSG.Arrays.remove(this._cpToMarkers, a)
};
JSG.graph.view.EditBezierShapeView.prototype.deleteCpFromMarker = function (a) {
    JSG.Arrays.remove(this._cpFromMarkers, a)
};
JSG.graph.view.EditBezierShapeView.prototype.getMarkerPoints = function (a) {
    return this._getMarkerPoints(a, this._markers)
};
JSG.graph.view.EditBezierShapeView.prototype.getCpFromMarkerPoints = function (a) {
    return this._getMarkerPoints(a, this._cpFromMarkers)
};
JSG.graph.view.EditBezierShapeView.prototype.getCpToMarkerPoints = function (a) {
    return this._getMarkerPoints(a, this._cpToMarkers)
};
JSG.graph.view.EditBezierShapeView.prototype._getMarkerPoints = function (a, b) {
    var c = [], d = this;
    b.forEach(function (b) {
        b = b.center.copy();
        !0 === a && (d._rotmatrix.rotatePoint(b), b.add(d._origin));
        c.push(b)
    });
    return c
};
JSG.graph.view.EditShapeView.prototype.getCpFromMarker = function (a) {
    return this._cpFromMarkers[a]
};
JSG.graph.view.EditShapeView.prototype.getCpToMarker = function (a) {
    return this._cpToMarkers[a]
};
JSG.graph.view.EditBezierShapeView.prototype.getMarkerCount = function () {
    return this._markers.length
};
JSG.graph.view.EditBezierShapeView.prototype.getMarkerAt = function (a, b) {
    function c(a, b, c, d, e) {
        var f = 1 - a;
        return f * f * f * b + 3 * f * f * a * c + 3 * f * a * a * d + a * a * a * e
    }

    function d(b, d, e, g, k) {
        var q = new JSG.geometry.PointList, r, t, u;
        for (r = 0; 1 > r; r += 0.1)t = c(r, b.x, e.x, g.x, d.x), u = c(r, b.y, e.y, g.y, d.y), q.addPoint(new JSG.geometry.Point(t, u));
        return q.distance(a) < k ? f : void 0
    }

    var e = this._getMarkerAt(a, this._markers, b), f = this._getTmpMarker();
    if (!e) {
        var g = this._markers.length - 1, k;
        for (k = 0; k < g; k++)if (e = d(this._markers[k].center, this._markers[k +
            1].center, this._cpToMarkers[k].center, this._cpFromMarkers[k + 1].center, b)) {
            e._insertIndex = k + 1;
            break
        }
        !e && this._isClosed && (e = d(this._markers[g].center, this._markers[0].center, this._cpToMarkers[g].center, this._cpFromMarkers[0].center, b)) && (e._insertIndex = g + 1)
    }
    return e
};
JSG.graph.view.EditBezierShapeView.prototype.getCpFromMarkerAt = function (a, b) {
    var c = this._getMarkerAt(a, this._cpFromMarkers, b);
    return c && !this._isClosed & 0 === c.index ? void 0 : c
};
JSG.graph.view.EditBezierShapeView.prototype.getCpToMarkerAt = function (a, b) {
    var c = this._getMarkerAt(a, this._cpToMarkers, b);
    return c && !this._isClosed & c.index === this.getMarkerCount() - 1 ? void 0 : c
};
JSG.graph.view.EditBezierShapeView.prototype._getMarkerAt = function (a, b, c) {
    var d;
    JSG.Arrays.every(b, function (b) {
        return b.contains(a, c) ? (d = b, !1) : !0
    });
    return d
};
JSG.graph.view.EditBezierShapeView.Marker = function (a, b, c, d) {
    JSG.graph.view.EditBezierShapeView.Marker._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.view.EditBezierShapeView.Marker, JSG.graph.view.EditShapeView.Marker);
JSG.graph.view.EditBezierShapeView.Marker.prototype.draw = function (a) {
    a.setFillColor(JSG.graph.view.selection.SelectionView.MARKER_FILL_COLOR);
    a.drawMarker(this._bounds, !1)
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.BBoxView = function () {
    JSG.graph.view.BBoxView._super.constructor.apply(this, arguments);
    this._bbox = new JSG.geometry.BoundingBox(0, 0);
    this._format = new JSG.graph.attr.FormatAttributes
};
JSG.extend(JSG.graph.view.BBoxView, JSG.ui.View);
JSG.graph.view.BBoxView.prototype.getPoints = function () {
    return this._bbox.getPoints()
};
JSG.graph.view.BBoxView.prototype.containsPoint = function (a) {
    return this._bbox.containsPoint(a)
};
JSG.graph.view.BBoxView.prototype.getAngle = function () {
    return this._bbox.getAngle()
};
JSG.graph.view.BBoxView.prototype.getBoundingBox = function () {
    return this._bbox
};
JSG.graph.view.BBoxView.prototype.getLocation = function () {
    return this._bbox.getTopLeft()
};
JSG.graph.view.BBoxView.prototype.getFormat = function () {
    return this._format
};
JSG.graph.view.BBoxView.prototype.getSize = function () {
    return new JSG.geometry.Point(this._bbox.getWidth(), this._bbox.getHeight())
};
JSG.graph.view.BBoxView.prototype.setAngle = function (a) {
    this._bbox.setAngle(a)
};
JSG.graph.view.BBoxView.prototype.setSize = function (a, b) {
    this._bbox.setWidth(a);
    this._bbox.setHeight(b)
};
JSG.graph.view.BBoxView.prototype.setLocation = function (a, b) {
    this._bbox.setTopLeft(a, b)
};
JSG.graph.view.BBoxView.prototype.draw = function (a) {
    a.save();
    this.translateGraphics(a);
    this.drawBackground(a);
    this.drawSubViews(a);
    this.drawBorder(a);
    this.drawDecorations(a);
    a.restore()
};
JSG.graph.view.BBoxView.prototype.translateGraphics = function (a) {
};
JSG.graph.view.BBoxView.prototype.drawBackground = function (a) {
    if (this._format.hasFill()) {
        var b = this._bbox.toRectangle(JSG.rectCache.get());
        b.setLocation(0, 0);
        this._format.applyFillToGraphics(a, b);
        this._format.applyShadowToGraphics(a, b);
        a.fillPolyline(this.getPoints());
        this._format.removeShadowFromGraphics(a);
        JSG.rectCache.release(b)
    }
};
JSG.graph.view.BBoxView.prototype.drawSubViews = function (a) {
    a.save();
    var b = this._bbox.getTopLeft(JSG.ptCache.get());
    a.translate(b.x, b.y);
    JSG.ptCache.release(b);
    var c, b = 0;
    for (c = this._subviews.length; b < c; b++)this._subviews[b].draw(a);
    a.restore()
};
JSG.graph.view.BBoxView.prototype.drawBorder = function (a) {
    this._format.hasBorder() && (this._format.applyLineToGraphics(a), a.drawPolyline(this.getPoints(), !0), this._format.removeLineFromGraphics(a))
};
JSG.graph.view.BBoxView.prototype.drawDecorations = function (a) {
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.FloatingToolbar = function (a, b) {
    this._div = document.createElement("div");
    this._div.id = a;
    this._div.tabIndex = -1;
    this._div.style.resize = "none";
    this._div.style.position = "absolute";
    this._div.style.zIndex = 101;
    this._div.style.border = "1px solid #CCCCCC";
    this._div.style.background = "#F5F0F0";
    this._div.style.left = b.x;
    this._div.style.padding = "2px";
    this._div.style.top = b.y;
    this._div.style.minHeight = "10px";
    this._div.style.minWidth = "10px";
    this._div.style.overflow = "";
    this._div.style.boxShadow = "3px 3px 3px #BFBFBF";
    this._div.style.borderRadius = "3px";
    this._div.addEventListener("mousedown", function (a) {
        "select" !== a.target.tagName.toLowerCase() && a.preventDefault()
    }, !1);
    document.body.appendChild(this._div);
    this._break = !1
};
JSG.graph.view.FloatingToolbar.prototype.remove = function () {
    void 0 !== this._div && (document.body.removeChild(this._div), this._div = void 0)
};
JSG.graph.view.FloatingToolbar.prototype.addTool = function (a) {
    this._break && (a._element.style.clear = "left", this._break = !1);
    a instanceof JSG.graph.view.FloatingToolbar.ToolBreak && (this._break = !0);
    this._div.appendChild(a._element)
};
JSG.graph.view.FloatingToolbar.prototype.getItemById = function (a) {
    var b, c, d;
    if (this._div && this._div.hasChildNodes())for (b = 0, c = this._div.childNodes.length; b < c; b++)if (d = this._div.childNodes.item(b), d.id === a)return d.__tool
};
JSG.graph.view.FloatingToolbar.prototype.place = function (a) {
    this._div.style.left = a.left + "px";
    this._div.style.top = a.top - this._div.clientHeight - 10 + "px"
};
JSG.graph.view.FloatingToolbar.Tool = function (a, b) {
    this._id = a;
    this._callback = b
};
JSG.graph.view.FloatingToolbar.Tool.prototype.execute = function () {
    this._callback.call(this)
};
JSG.graph.view.FloatingToolbar.ToolButton = function (a, b, c) {
    JSG.graph.view.FloatingToolbar.ToolButton._super.constructor.apply(this, arguments);
    var d = this, e = document.createElement("div");
    e.id = a;
    e.tabIndex = -1;
    e.style.resize = "none";
    e.style.border = "none";
    e.style.border = "1px solid #F5F0F0";
    e.style.backgroundColor = "#F5F0F0";
    e.style.backgroundImage = "url(" + JSG.imagePool.getURL(c) + ")";
    e.style.backgroundPosition = "center";
    e.style.backgroundRepeat = "no-repeat";
    e.style.minHeight = "24px";
    e.style.minWidth = "24px";
    e.style.overflow =
        "";
    e.style.float = "left";
    e.style.cursor = "pointer";
    e.addEventListener("mousedown", function (a) {
        a.preventDefault()
    }, !1);
    e.addEventListener("mouseover", function (a) {
        this.style.border = "1px solid #CCCCCC"
    }, !1);
    e.addEventListener("mouseout", function (a) {
        this.style.border = "1px solid #F5F0F0"
    }, !1);
    e.addEventListener("mouseup", function (a) {
        d._callback.call(d)
    }, !1);
    e.__tool = this;
    this._element = e;
    this._state = JSG.graph.view.FloatingToolbar.ToolButton.State.NORMAL
};
JSG.extend(JSG.graph.view.FloatingToolbar.ToolButton, JSG.graph.view.FloatingToolbar.Tool);
JSG.graph.view.FloatingToolbar.ToolButton.State = {NORMAL: 0, SELECTED: 1, INDETERMINATE: 2};
JSG.graph.view.FloatingToolbar.ToolButton.prototype.getState = function () {
    return this._state
};
JSG.graph.view.FloatingToolbar.ToolButton.prototype.isSelected = function () {
    return this._state & JSG.graph.view.FloatingToolbar.ToolButton.State.SELECTED
};
JSG.graph.view.FloatingToolbar.ToolButton.prototype.setState = function (a) {
    this._state = a;
    this._element.style.backgroundColor = this._state & JSG.graph.view.FloatingToolbar.ToolButton.State.SELECTED ? "#CECECE" : "#F5F0F0"
};
JSG.graph.view.FloatingToolbar.ToolSeparator = function () {
    JSG.graph.view.FloatingToolbar.ToolSeparator._super.constructor.apply(this, arguments);
    var a = document.createElement("div");
    a.tabIndex = -1;
    a.style.border = "none";
    a.style.backgroundColor = "none";
    a.style.float = "left";
    a.style.height = "24px";
    a.style.margin = "0px 5px 0px 5px";
    a.addEventListener("mousedown", function (a) {
        a.preventDefault()
    }, !1);
    a.__tool = this;
    this._element = a
};
JSG.extend(JSG.graph.view.FloatingToolbar.ToolSeparator, JSG.graph.view.FloatingToolbar.Tool);
JSG.graph.view.FloatingToolbar.ToolBreak = function () {
    JSG.graph.view.FloatingToolbar.ToolBreak._super.constructor.apply(this, arguments);
    var a = document.createElement("span");
    a.tabIndex = -1;
    a.style.border = "none";
    a.style.backgroundColor = "none";
    a.style.margin = "5px 0px 0px 0px";
    a.style.float = "left";
    a.style.clear = "left";
    a.addEventListener("mousedown", function (a) {
        a.preventDefault()
    }, !1);
    a.__tool = this;
    this._element = a
};
JSG.extend(JSG.graph.view.FloatingToolbar.ToolBreak, JSG.graph.view.FloatingToolbar.Tool);
JSG.graph.view.FloatingToolbar.ToolList = function (a, b, c, d, e, f) {
    JSG.graph.view.FloatingToolbar.ToolList._super.constructor.apply(this, arguments);
    var g = document.createElement("select"), k;
    g.id = a;
    g.style.minWidth = e + "px";
    g.style.overflow = "";
    g.style.float = "left";
    g.style.fontSize = "8pt";
    g.style.minHeight = "24px";
    g.__tool = this;
    for (k = 0; k < c.length; k++) {
        var h = document.createElement("option");
        h.value = d[k];
        h.text = c[k];
        g.appendChild(h)
    }
    g.addEventListener("change", function (a) {
        this.__tool._callback.call(this.__tool,
            a.srcElement.value);
        return !1
    }, !1);
    this._element = g
};
JSG.extend(JSG.graph.view.FloatingToolbar.ToolList, JSG.graph.view.FloatingToolbar.Tool);
JSG.graph.view.FloatingToolbar.ToolList.prototype.setValue = function (a) {
    this._element.value = a
};
JSG.graph.view.FloatingToolbar.ToolList.prototype.getValue = function () {
    return this._element.value
};
JSG.graph.view.FloatingToolbar.ToolColor = function (a, b, c, d) {
    JSG.graph.view.FloatingToolbar.ToolColor._super.constructor.apply(this, arguments);
    var e = this, f = document.createElement("div");
    f.id = a;
    f.tabIndex = -1;
    f.style.resize = "none";
    f.style.border = "1px solid #F5F0F0";
    f.style.backgroundColor = "#F5F0F0";
    f.style.backgroundImage = "url(" + JSG.imagePool.getURL(c) + ")";
    f.style.backgroundPosition = "center";
    f.style.backgroundRepeat = "no-repeat";
    f.style.minHeight = "24px";
    f.style.minWidth = "24px";
    f.style.overflow = "";
    f.style.float =
        "left";
    f.style.cursor = "pointer";
    f.addEventListener("mousedown", function (a) {
        void 0 === e._colorElement ? e.showColors() : e.hideColors();
        a.preventDefault();
        a.stopPropagation()
    }, !1);
    f.addEventListener("mouseover", function (a) {
        this.style.border = "1px solid #CCCCCC"
    }, !1);
    f.addEventListener("mouseout", function (a) {
        this.style.border = "1px solid #F5F0F0"
    }, !1);
    f.addEventListener("mouseup", function (a) {
    }, !1);
    f.__tool = this;
    this._element = f;
    this._colorElement = void 0
};
JSG.extend(JSG.graph.view.FloatingToolbar.ToolColor, JSG.graph.view.FloatingToolbar.Tool);
JSG.graph.view.FloatingToolbar.ToolColor.prototype.showColors = function () {
    function a(a) {
        a.preventDefault();
        a.stopPropagation()
    }

    function b(a) {
        var b = this.style.backgroundColor;
        e.hideColors();
        e._callback.call(e, b);
        a.preventDefault();
        a.stopPropagation()
    }

    function c(a) {
        this.style.border = "1px solid #AAAAAA"
    }

    function d(a) {
        this.style.border = "1px solid " + this.style.backgroundColor
    }

    var e = this, f = this._element.getBoundingClientRect(), g = document.createElement("table");
    g.tabIndex = -1;
    g.style.resize = "none";
    g.style.position =
        "absolute";
    g.style.border = "1px solid #CCCCCC";
    g.style.background = "#F5F0F0";
    g.style.left = f.left + "px";
    g.style.top = f.bottom + "px";
    g.style.padding = "2px";
    g.style.minHeight = "100px";
    g.style.minWidth = "100px";
    g.style.overflow = "";
    g.style.boxShadow = "3px 3px 3px #BFBFBF";
    g.style.borderRadius = "3px";
    this.onMouseDown = function (a) {
        e.hideColors();
        a.preventDefault();
        a.stopPropagation()
    };
    for (var k, h, f = 0; f < JSG.colors.length; f++)0 === f % 9 && (k = g.insertRow(), k.style.height = "18px"), h = k.insertCell(), h.style.width = "18px", h.style.height =
        "18px", h.style.cursor = "pointer", h.addEventListener("mousedown", a, !1), h.addEventListener("mouseup", b, !1), h.addEventListener("mouseover", c, !1), h.addEventListener("mouseout", d, !1), h.style.backgroundColor = "#" + JSG.colors[f], h.style.border = "1px solid #" + JSG.colors[f];
    document.addEventListener("mousedown", this.onMouseDown, !1);
    document.body.appendChild(g);
    this._colorElement = g
};
JSG.graph.view.FloatingToolbar.ToolColor.prototype.hideColors = function () {
    void 0 !== this._colorElement && (document.body.removeChild(this._colorElement), document.removeEventListener("mousedown", this.onMouseDown, !1), this._colorElement = void 0)
};
JSG.graph.view.FloatingToolbar.ToolColor.prototype.setValue = function (a) {
    this._element.value = a
};
JSG.graph.view.FloatingToolbar.ToolColor.prototype.getValue = function () {
    return this._element.value
};
JSG.namespace("JSG.graph.view.shapes");
JSG.graph.view.shapes.DefaultShapeRenderer = function () {
};
JSG.graph.view.shapes.DefaultShapeRenderer.prototype.drawShapeFill = function (a, b, c) {
    c.fillPolyline(a.getPoints())
};
JSG.graph.view.shapes.DefaultShapeRenderer.prototype.drawShapeBorder = function (a, b, c) {
    c.drawPolyline(a.getPoints(), !0)
};
JSG.graph.view.shapes.DefaultShapeRenderer.prototype.setClipArea = function (a, b) {
    b.setClipArea(void 0, a.getPoints(), void 0)
};
JSG.namespace("JSG.graph.view.shapes");
JSG.graph.view.shapes.BezierShapeRenderer = function () {
    JSG.graph.view.shapes.BezierShapeRenderer._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.view.shapes.BezierShapeRenderer, JSG.graph.view.shapes.DefaultShapeRenderer);
JSG.graph.view.shapes.BezierShapeRenderer.prototype.drawShapeFill = function (a, b, c) {
    b && (b = a.getPoints(), 2 > b.length || c.fillBezier(a.getCpToPoints(b), b, a.getCpFromPoints(b)))
};
JSG.graph.view.shapes.BezierShapeRenderer.prototype.drawShapeBorder = function (a, b, c) {
    var d = a.getPoints();
    2 > d.length || c.drawBezier(a.getCpToPoints(d), d, a.getCpFromPoints(d), b)
};
JSG.graph.view.shapes.BezierShapeRenderer.prototype.setClipArea = function (a, b) {
    var c = a.getPoints();
    b.setClipArea(a.getCpToPoints(c), c, a.getCpFromPoints(c))
};
JSG.namespace("JSG.graph.view.shapes");
JSG.graph.view.shapes.EllipseShapeRenderer = function () {
    JSG.graph.view.shapes.EllipseShapeRenderer._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.view.shapes.EllipseShapeRenderer, JSG.graph.view.shapes.BezierShapeRenderer);
JSG.graph.view.shapes.BezierShapeRenderer.prototype.drawShapeBorder = function (a, b, c) {
    var d = a.getPoints();
    2 > d.length || (c.antialias = !0, c.drawBezier(a.getCpToPoints(d), d, a.getCpFromPoints(d), b), c.antialias = !1)
};
JSG.namespace("JSG.graph.view.shapes");
JSG.graph.view.shapes.LineShapeRenderer = function () {
    JSG.graph.view.shapes.LineShapeRenderer._super.constructor.apply(this, arguments);
    this._context = {}
};
JSG.extend(JSG.graph.view.shapes.LineShapeRenderer, JSG.graph.view.shapes.DefaultShapeRenderer);
JSG.graph.view.shapes.LineShapeRenderer.prototype.drawShapeFill = function (a, b, c) {
};
JSG.graph.view.shapes.LineShapeRenderer.prototype.drawShapeBorder = function (a, b, c) {
    this._context.endArrow = void 0;
    this._context.startArrow = void 0;
    c.drawPolyline(a.getVisiblePoints(), !1, this._context)
};
JSG.graph.view.shapes.LineShapeRenderer.prototype.getContext = function () {
    return this._context
};
JSG.namespace("JSG.graph.view.shapes");
JSG.graph.view.shapes.PolygonShapeRenderer = function () {
    JSG.graph.view.shapes.PolygonShapeRenderer._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.view.shapes.PolygonShapeRenderer, JSG.graph.view.shapes.DefaultShapeRenderer);
JSG.graph.view.shapes.PolygonShapeRenderer.prototype.drawShapeFill = function (a, b, c) {
    b && c.fillPolyline(a.getPoints())
};
JSG.graph.view.shapes.PolygonShapeRenderer.prototype.drawShapeBorder = function (a, b, c) {
    c.drawPolyline(a.getPoints(), b)
};
JSG.namespace("JSG.graph.view.shapes");
JSG.graph.view.shapes.RectangleShapeRenderer = function () {
    JSG.graph.view.shapes.RectangleShapeRenderer._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.view.shapes.RectangleShapeRenderer, JSG.graph.view.shapes.DefaultShapeRenderer);
JSG.namespace("JSG.graph.view.shapes");
JSG.graph.view.shapes.ShapeRenderer = function () {
    var a = new JSG.commons.Map;
    a.put(JSG.graph.model.shapes.BezierShape.TYPE, new JSG.graph.view.shapes.BezierShapeRenderer);
    a.put(JSG.graph.model.shapes.EllipseShape.TYPE, new JSG.graph.view.shapes.EllipseShapeRenderer);
    a.put(JSG.graph.model.shapes.LineShape.TYPE, new JSG.graph.view.shapes.LineShapeRenderer);
    a.put(JSG.graph.model.shapes.OrthoLineShape.TYPE, new JSG.graph.view.shapes.LineShapeRenderer);
    a.put(JSG.graph.model.shapes.PolygonShape.TYPE, new JSG.graph.view.shapes.PolygonShapeRenderer);
    a.put(JSG.graph.model.shapes.RectangleShape.TYPE, new JSG.graph.view.shapes.RectangleShapeRenderer);
    return {
        fromShape: function (b) {
            (b = a.get(b.getType())) || (b = new JSG.graph.view.shapes.DefaultShapeRenderer);
            return b
        }
    }
}();
JSG.namespace("JSG.ui.viewer");
JSG.ui.viewer.ControllerViewer = function () {
    this.controllerFactory = this.rootController = void 0;
    this.setRootController(new JSG.graph.controller.RootController);
    this._defaultController = this._defaultInteraction = void 0
};
JSG.ui.viewer.ControllerViewer.prototype.destroy = function () {
    this._defaultInteraction = this.controllerFactory = this.rootController = void 0
};
JSG.ui.viewer.ControllerViewer.prototype.setControllerFactory = function (a) {
    this.controllerFactory = a
};
JSG.ui.viewer.ControllerViewer.prototype.getControllerFactory = function () {
    var a = this.controllerFactory;
    a && a.registerViewer && a.registerViewer(this);
    return a
};
JSG.ui.viewer.ControllerViewer.prototype.getGraph = function () {
    var a = this.rootController.getContent();
    return a ? a.getModel() : void 0
};
JSG.ui.viewer.ControllerViewer.prototype.setGraph = function (a) {
    a = this.controllerFactory.createController(a);
    this.setContent(a);
    this.getRootView().invalidate()
};
JSG.ui.viewer.ControllerViewer.prototype.getDefaultController = function () {
    return this._defaultController
};
JSG.ui.viewer.ControllerViewer.prototype.setDefaultController = function (a) {
    this._defaultController = a
};
JSG.ui.viewer.ControllerViewer.prototype.getDefaultInteraction = function () {
    return this._defaultInteraction
};
JSG.ui.viewer.ControllerViewer.prototype.setDefaultInteraction = function (a) {
    this._defaultInteraction && this._defaultInteraction.disposeAsDefault && this._defaultInteraction.disposeAsDefault(this);
    (this._defaultInteraction = a) && this._defaultInteraction.initAsDefault && this._defaultInteraction.initAsDefault(this)
};
JSG.ui.viewer.ControllerViewer.prototype.getContent = function () {
    return this.rootController.getContent()
};
JSG.ui.viewer.ControllerViewer.prototype.setContent = function (a) {
    a && this.rootController.setContent(a)
};
JSG.ui.viewer.ControllerViewer.prototype.setRootController = function (a) {
    this._deactivate(a);
    this._activate(a)
};
JSG.ui.viewer.ControllerViewer.prototype._deactivate = function (a) {
    a && (a.isActive && a.deactivate(), a.setView(void 0))
};
JSG.ui.viewer.ControllerViewer.prototype._activate = function (a) {
    this.rootController = a;
    this.rootController.setViewer(this);
    this.rootController.activate()
};
JSG.ui.viewer.ControllerViewer.prototype.getRootController = function () {
    return this.rootController
};
JSG.ui.viewer.ControllerViewer.prototype.getRootView = function () {
    return this.rootController.getView()
};
JSG.ui.viewer.ControllerViewer.prototype.findControllerAt = function (a, b, c) {
    return this.rootController.getControllerAt(a, b, c)
};
JSG.ui.viewer.ControllerViewer.prototype.findControllerByConditionAndLocation = function (a, b) {
    return this.rootController.findControllerByConditionAndLocation(a, b)
};
JSG.ui.viewer.ControllerViewer.prototype.findControllerByConditionAndBox = function (a, b) {
    return this.rootController.findControllerByConditionAndBox(a, b)
};
JSG.ui.viewer.ControllerViewer.prototype.setCursor = function (a) {
    this.rootController.hasContent() && this.rootController.getContent().setCursor(a)
};
JSG.ui.viewer.ControllerViewer.prototype.addInteractionFeedback = function (a) {
    this.rootController.hasContent() && this.rootController.getContent().addFeedback(a)
};
JSG.ui.viewer.ControllerViewer.prototype.removeInteractionFeedback = function (a) {
    this.rootController.hasContent() && this.rootController.getContent().removeFeedback(a)
};
JSG.ui.viewer.ControllerViewer.prototype.clearInteractionFeedback = function () {
    this.rootController.hasContent() && this.rootController.getContent().clearFeedback()
};
JSG.ui.viewer.ControllerViewer.prototype.getLayer = function (a) {
    return this.rootController.hasContent() ? this.rootController.getContent().getLayer(a) : void 0
};
JSG.ui.viewer.ControllerViewer.prototype.hasLayer = function (a) {
    return this.rootController.hasContent() ? this.rootController.getContent().hasLayer(a) : !1
};
JSG.ui.viewer.ControllerViewer.prototype.clearLayer = function (a) {
    return this.rootController.hasContent() ? this.rootController.getContent().clearLayer(a) : void 0
};
JSG.ui.viewer.ControllerViewer.prototype.clearAllLayer = function () {
    this.rootController.hasContent() && this.rootController.getContent().clearAllLayer()
};
JSG.ui.viewer.ControllerViewer.prototype.translateFromParent = function (a) {
    return this.rootController.getView().translateFromParent(a)
};
JSG.ui.viewer.ControllerViewer.prototype.translateToParent = function (a) {
    return this.rootController.getView().translateToParent(a)
};
JSG.ui.viewer.ControllerViewer.prototype.translateToRoot = function (a, b) {
    for (var c = this.rootController.getView(); b._parent && b._parent !== c;)b._parent.translateToParent(a), b = b._parent;
    return a
};
JSG.ui.viewer.ControllerViewer.prototype.translateFromRoot = function (a, b) {
    var c = this.rootController.getView();
    JSG.graph.Utils.traverseDown(c, b, function (b) {
        b.translateFromParent(a)
    });
    return a
};
JSG.namespace("JSG.ui.viewer");
JSG.ui.viewer.GraphViewer = function (a) {
    JSG.ui.viewer.GraphViewer._super.constructor.apply(this, arguments);
    this._selectionView = this._rootView = void 0;
    this._graphicSystem = a;
    this.setSelectionProvider(new JSG.graph.view.SelectionProvider);
    this.setDefaultInteraction(new JSG.graph.interaction.GraphInteraction)
};
JSG.extend(JSG.ui.viewer.GraphViewer, JSG.ui.viewer.ControllerViewer);
JSG.ui.viewer.GraphViewer.prototype.destroy = function () {
    this._rootView && this._rootView.clearLayer(JSG.graph.view.LayerId.SELECTION);
    this._selectionProvider = this._graphicSystem = this._selectionView = this._rootView = void 0;
    JSG.ui.viewer.GraphViewer._super.destroy.call(this)
};
JSG.ui.viewer.GraphViewer.prototype.setContent = function (a) {
    JSG.ui.viewer.GraphViewer._super.setContent.call(this, a);
    this._rootView = a ? a.getView() : void 0;
    this.setSelectionView(this.getSelectionView())
};
JSG.ui.viewer.GraphViewer.prototype.getGraphicSystem = function () {
    return this._graphicSystem
};
JSG.ui.viewer.GraphViewer.prototype.getCanvas = function () {
    return this.getGraphicSystem().getCanvas()
};
JSG.ui.viewer.GraphViewer.prototype.getCoordinateSystem = function () {
    return this._graphicSystem.getGraphics().getCoordinateSystem()
};
JSG.ui.viewer.GraphViewer.prototype.getGraphView = function () {
    return this.rootController.getView()
};
JSG.ui.viewer.GraphViewer.prototype.getGraphController = function () {
    return this.rootController.getContent()
};
JSG.ui.viewer.GraphViewer.prototype.getGraphSettings = function () {
    var a = this.getGraph();
    return void 0 !== a ? a.getSettings() : void 0
};
JSG.ui.viewer.GraphViewer.prototype.getHandleAt = function (a, b) {
    return this.getSelectionView().getHandleAt(a, b)
};
JSG.ui.viewer.GraphViewer.prototype.getSelectionView = function () {
    this._selectionView || this.setSelectionView(new JSG.graph.view.selection.SelectionView);
    return this._selectionView
};
JSG.ui.viewer.GraphViewer.prototype.setSelectionView = function (a) {
    a && (this._selectionView = a, this._registerSelectionView(a))
};
JSG.ui.viewer.GraphViewer.prototype.getSelectionProvider = function () {
    return this._selectionProvider
};
JSG.ui.viewer.GraphViewer.prototype.setSelectionProvider = function (a) {
    this._selectionProvider && this._selectionProvider.removeSelectionChangedListener(this);
    (this._selectionProvider = a) && this._selectionProvider.addSelectionChangedListener(this)
};
JSG.ui.viewer.GraphViewer.prototype.onSelectionChanged = function () {
    var a = this.getSelectionView(), b = this._selectionProvider.getSelection();
    a.setSelection(b);
    this._registerSelectionView(a)
};
JSG.ui.viewer.GraphViewer.prototype._registerSelectionView = function (a) {
    this._rootView && (this._rootView.getLayer(JSG.graph.view.LayerId.SELECTION)[0] = a)
};
JSG.ui.viewer.GraphViewer.prototype.clearSelection = function (a) {
    this._selectionProvider.clearSelection(a);
    this.getSelectionView().setRotationAngle(0)
};
JSG.ui.viewer.GraphViewer.prototype.select = function (a, b) {
    this._selectionProvider.select(a, b)
};
JSG.ui.viewer.GraphViewer.prototype.deselect = function (a) {
    this._selectionProvider.deselect(a)
};
JSG.ui.viewer.GraphViewer.prototype.hasSelection = function () {
    return this._selectionProvider.hasSelection()
};
JSG.ui.viewer.GraphViewer.prototype.isSelected = function (a) {
    return this._selectionProvider.isSelected(a)
};
JSG.ui.viewer.GraphViewer.prototype.getSelection = function () {
    return this._selectionProvider.getSelection()
};
JSG.ui.viewer.GraphViewer.prototype.setSelection = function (a, b) {
    this._selectionProvider.selectAll(a, b)
};
JSG.ui.viewer.GraphViewer.prototype.setOverlayView = function (a) {
    this._rootView instanceof JSG.graph.view.GraphView && this._rootView.setOverlayView(a)
};
JSG.ui.viewer.GraphViewer.prototype.removeOverlayView = function () {
    this._rootView instanceof JSG.graph.view.GraphView && this._rootView.removeOverlayView()
};
JSG.ui.viewer.GraphViewer.prototype.findControllerForItem = function (a) {
    return this.rootController.content.findModelController(a)
};
JSG.namespace("JSG.ui.viewer");
JSG.ui.viewer.ScrollableViewer = function (a, b) {
    JSG.ui.viewer.ScrollableViewer._super.constructor.apply(this, arguments);
    this._scrollPanel = b || new JSG.ui.ScrollPanel(this);
    this._scrollPanel.setViewPanel(new JSG.ui.GraphViewPanel(this));
    this._decorator = new JSG.ui.viewer.ScrollableViewerInteractionDecorator(this._scrollPanel);
    this._decorator.decorateInteraction(this.getDefaultInteraction())
};
JSG.extend(JSG.ui.viewer.ScrollableViewer, JSG.ui.viewer.GraphViewer);
JSG.ui.viewer.ScrollableViewer.prototype.destroy = function () {
    this._decorator.destroy();
    this._scrollPanel = this._decorator = void 0;
    JSG.ui.viewer.ScrollableViewer._super.destroy.call(this)
};
JSG.ui.viewer.ScrollableViewer.prototype.setDefaultInteraction = function (a) {
    this._decorator && this._decorator.decorateInteraction(a);
    JSG.ui.viewer.ScrollableViewer._super.setDefaultInteraction.call(this, a)
};
JSG.ui.viewer.ScrollableViewer.prototype.layout = function (a, b) {
    this._scrollPanel.setBounds(0, 0, a, b);
    this._scrollPanel.layout()
};
JSG.ui.viewer.ScrollableViewer.prototype.setContent = function (a) {
    JSG.ui.viewer.ScrollableViewer._super.setContent.call(this, a);
    a = this._scrollPanel.getViewPanel();
    a.setView(JSG.ui.viewer.ScrollableViewer._super.getRootView.call(this));
    a = a.getBounds(JSG.rectCache.get());
    this._scrollPanel.setScrollPosition(a.x, a.y);
    JSG.rectCache.release(a)
};
JSG.ui.viewer.ScrollableViewer.prototype.getRootView = function () {
    return this._scrollPanel
};
JSG.ui.viewer.ScrollableViewer.prototype.getScrollPanel = function () {
    return this._scrollPanel
};
JSG.ui.viewer.ScrollableViewer.prototype.isScrollBarEvent = function (a) {
    return this._scrollPanel.isScrollBarEvent(a)
};
JSG.ui.viewer.ScrollableViewer.prototype.findControllerAt = function (a, b, c) {
    a = JSG.ptCache.get(a.x, a.y);
    this.translateFromParent(a);
    b = JSG.ui.viewer.ScrollableViewer._super.findControllerAt.call(this, a, b, c);
    JSG.ptCache.release(a);
    return b
};
JSG.ui.viewer.ScrollableViewer.prototype.findControllerByConditionAndLocation = function (a, b) {
    var c = JSG.ptCache.get(a.x, a.y);
    this.translateFromParent(c);
    var d = JSG.ui.viewer.ScrollableViewer._super.findControllerByConditionAndLocation.call(this, c, b);
    JSG.ptCache.release(c);
    return d
};
JSG.ui.viewer.ScrollableViewer.prototype.findControllerByConditionAndBox = function (a, b) {
    return JSG.ui.viewer.ScrollableViewer._super.findControllerByConditionAndBox.call(this, a, b)
};
JSG.ui.viewer.ScrollableViewer.prototype.translateFromParent = function (a) {
    this._scrollPanel.translateFromViewPort(a);
    return this.rootController.getView().translateFromParent(a)
};
JSG.ui.viewer.ScrollableViewer.prototype.translateToParent = function (a) {
    this.rootController.getView().translateToParent(a);
    return this._scrollPanel.translateToViewPort(a)
};
JSG.ui.viewer.ScrollableViewer.prototype.setZoom = function (a) {
    function b(a) {
        var b = c._scrollPanel.getBounds(JSG.rectCache.get());
        b.width = f.logToDeviceX(b.width);
        b.height = f.logToDeviceY(b.height);
        a = Math.min(a, 8);
        a = Math.max(a, 0.2);
        f.setZoom(a);
        c.layout(f.deviceToLogX(b.width), f.deviceToLogY(b.height));
        JSG.rectCache.release(b)
    }

    var c = this, d = this.getGraph(), e = d.getSettings(), f = this.getCoordinateSystem();
    if (0 > a) {
        var g = e.getPage(), k = d.getTotalBoundingRect(), h = JSG.ptCache.get(k.x, k.y), k = JSG.ptCache.get(k.getRight(),
            k.getBottom());
        e.getDisplayMode() === JSG.ui.graphics.DisplayMode.PAGE && (h.x = Math.floor(h.x / g.getUsableWidth()) * (g.getLeftMargin() + g.getRightMargin() + g.getHorizontalGap()) + g.getLeftMargin() + h.x, h.y = Math.floor(h.y / g.getUsableHeight()) * (g.getTopMargin() + g.getBottomMargin() + g.getVerticalGap()) + g.getTopMargin() + h.y, k.x = Math.floor(k.x / g.getUsableWidth()) * (g.getLeftMargin() + g.getRightMargin() + g.getHorizontalGap()) + g.getLeftMargin() + k.x, k.y = Math.floor(k.y / g.getUsableHeight()) * (g.getTopMargin() + g.getBottomMargin() +
        g.getVerticalGap()) + g.getTopMargin() + k.y);
        h.translate(-1E3, -1E3);
        k.translate(1E3, 1E3);
        e = (f.deviceToLogXNoZoom(this._graphicSystem.getCanvas().width) - 1250) / (k.x - h.x);
        g = (f.deviceToLogYNoZoom(this._graphicSystem.getCanvas().height) - 1250) / (k.y - h.y);
        switch (a) {
            case JSG.ui.GraphEditor.ZOOM_FIT:
                b(Math.min(e, g));
                break;
            case JSG.ui.GraphEditor.ZOOM_FITVERT:
                b(g);
                break;
            case JSG.ui.GraphEditor.ZOOM_FITHORZ:
                b(e)
        }
        this._scrollPanel.setScrollPosition(h.x, h.y);
        JSG.ptCache.release(h, k)
    } else b(a);
    d.markDirty();
    d.setChanged(!0);
    JSG.graph.notifications.NotificationCenter.getInstance().send(new JSG.graph.notifications.Notification(JSG.ui.viewer.ScrollableViewer.ZOOM_NOTIFICATION, this))
};
JSG.ui.viewer.ScrollableViewer.prototype.getZoom = function () {
    return this.getCoordinateSystem().getZoom()
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator = function (a) {
    this._isSbEvent = !1;
    this._interaction = void 0;
    this._scrollPanel = a
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype.destroy = function () {
    this._undecorateInteraction(this._interaction);
    this._interaction = this._scrollPanel = void 0
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._undecorateInteraction = function (a) {
    if (a) {
        var b = Object.getPrototypeOf(a);
        a.onMouseDown = b.onMouseDown;
        a.onMouseDoubleClick = b.onMouseDoubleClick;
        a.onMouseMove = b.onMouseMove;
        a.onMouseDrag = b.onMouseDrag;
        a.onMouseUp = b.onMouseUp;
        a.onMouseExit = b.onMouseExit;
        a.onMouseWheel = b.onMouseWheel;
        a.didFinish = b.didFinish;
        a.isScrollBarEvent = b.isScrollBarEvent
    }
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype.decorateInteraction = function (a) {
    this._undecorateInteraction(this._interaction);
    if (this._interaction = a)a.onMouseDown = this._decorate(a.onMouseDown, this._onMouseClick), a.onMouseDoubleClick = this._decorate(a.onMouseDoubleClick, this._onMouseClick), a.onMouseMove = this._decorate(a.onMouseMove, this._onMouseMove), a.onMouseDrag = this._decorate(a.onMouseDrag, this._onMouseDrag), a.onMouseUp = this._decorate(a.onMouseUp, this._onMouseUp), a.onMouseExit = this._decorate(a.onMouseExit,
        this._onMouseExit), a.onMouseWheel = this._decorate(a.onMouseWheel, this._onMouseWheel), a.didFinish = this._decorate(a.didFinish, this._didFinish), a.isScrollBarEvent = this._decorate(a.isScrollBarEvent, this._isScrollBarEvent)
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._decorate = function (a, b) {
    var c = this;
    return function () {
        return b.apply(c, arguments) || a.apply(this, arguments)
    }
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._onMouseClick = function (a, b) {
    this._setIsScrollBarEvent(b.isScrollBarEvent(a));
    this._isSbEvent && this._handleScrollBarEvent(a, b);
    return this._isSbEvent
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._onMouseMove = function (a, b) {
    this._setIsScrollBarEvent(b.isScrollBarEvent(a));
    this._isSbEvent && b.getGraphicSystem().setCursor(JSG.ui.Cursor.Style.AUTO);
    return this._isSbEvent
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._onMouseDrag = function (a, b) {
    this._isSbEvent && this._handleScrollBarEvent(a, b);
    return this._isSbEvent
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._onMouseUp = function (a, b) {
    var c = this._isSbEvent;
    c && this._handleScrollBarEvent(a, b);
    this._setIsScrollBarEvent(!1);
    return c
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._onMouseExit = function (a, b) {
    this._setIsScrollBarEvent(!1);
    this._handleScrollBarEvent(a, b);
    return !1
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._onMouseWheel = function (a, b) {
    this._handleScrollBarEvent(a, b);
    return !0
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._didFinish = function (a, b) {
    return this._isSbEvent
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._isScrollBarEvent = function () {
    return this._isSbEvent
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._handleScrollBarEvent = function (a, b) {
    a.isConsumed || this._scrollPanel.handleMouseEvent(a)
};
JSG.ui.viewer.ScrollableViewerInteractionDecorator.prototype._setIsScrollBarEvent = function (a) {
    this._isSbEvent = a;
    JSG.keepFocus = this._isSbEvent
};
JSG.namespace("JSG.ui");
JSG.ui.GraphEditor = function (a) {
    var b = new JSG.ui.graphics.MetricCoordinateSystem, c;
    c = JSG.Strings.isString(a) ? document.getElementById(a) : a;
    this._canvasId = c.id;
    c._jsgEditor = this;
    this._settingsListener = new JSG.ui.GraphEditor.SettingsListener(this);
    this._graphicSystem = new JSG.ui.graphics.GraphicSystem(a, b);
    this._graphViewer = this.createViewer(this._graphicSystem);
    this._interactionHandler = new JSG.graph.interaction.InteractionHandler(this._graphViewer);
    this._graphicSystem.setContent(this._graphViewer.getRootView());
    this._graphicSystem.setInteractionHandler(this._interactionHandler);
    JSG.imagePool.registerEditor(this);
    this._viewmodes = {};
    this._viewmodes[JSG.graph.model.settings.ViewMode.DEFAULT] = new JSG.graph.interaction.GraphInteraction;
    this._viewmodes[JSG.graph.model.settings.ViewMode.READ_ONLY] = new JSG.graph.interaction.ReadOnlyInteraction;
    this.activateViewMode(JSG.graph.model.settings.ViewMode.DEFAULT)
};
JSG.ui.GraphEditor.DISPLAY_MODE_NOTIFICATION = "grapheditor.dplmode.notification";
JSG.ui.GraphEditor.ZOOM_NOTIFICATION = "grapheditor.zoom.notification";
JSG.ui.GraphEditor.ZOOM_FIT = -1;
JSG.ui.GraphEditor.ZOOM_FITHORZ = -2;
JSG.ui.GraphEditor.ZOOM_FITVERT = -3;
JSG.ui.GraphEditor.prototype.createViewer = function (a) {
    a = new JSG.ui.viewer.ScrollableViewer(a);
    a.setControllerFactory(JSG.graph.controller.GraphControllerFactory.getInstance());
    return a
};
JSG.ui.GraphEditor.prototype.saveXML = function () {
    var a = new JSG.commons.XMLWriter("UTF-8", "1.0");
    a.writeStartDocument();
    a.writeStartElement("document");
    a.writeAttributeString("version", "1.0.0");
    a.writeAttributeNumber("zoom", this.getZoom(), 3);
    a.writeEndElement();
    this.getGraph().saveXML(a);
    a.writeEndDocument();
    return a.flush()
};
JSG.ui.GraphEditor.prototype.readXML = function (a, b) {
    function c(b) {
        var c = a.getElementsByTagName("graphitem")[0];
        void 0 === c && (c = a.getElementsByTagName("gi")[0]);
        void 0 !== c && c.hasChildNodes() && "graph" === c.getAttribute("type") && b.readXML(c)
    }

    if (b && a && a.getElementsByTagName("document")[0]) {
        var d, e = Date.now();
        for (d = 0; 25 > d; d++)c(new JSG.graph.model.Graph);
        d = Date.now();
        JSG.debug.log("25-times loading graph took: " + (d - e) + "ms", b);
        JSG.debug.log("\t \x3d\x3e " + ((d - e) / 25).toFixed(1) + "ms per graph", b)
    }
    JSG.setDrawingDisabled(!0);
    e = this.getGraph();
    if (void 0 !== a) {
        this.clear();
        this.jsgShape && this.setDisplayMode(JSG.ui.graphics.DisplayMode.ENDLESS);
        if (d = a.getElementsByTagName("document")[0])d = d.getAttribute("zoom"), null !== d && this.setZoom(Number(d));
        c(e);
        e._restoreConnections(e)
    }
    e.evaluate();
    e.refresh();
    this.layout();
    this.activateViewMode(e.getSettings().getViewMode());
    JSG.setDrawingDisabled(!1)
};
JSG.ui.GraphEditor.prototype.saveSVGPage = function (a, b, c) {
    var d = this._graphViewer.getGraphView(), e = new JSG.commons.XMLWriter("UTF-8", "1.0"), f = new JSG.ui.graphics.MetricCoordinateSystem, g = void 0 === c ? !1 : !0;
    c = JSG.rectCache.get();
    var k = new JSG.ui.graphics.SVGraphics(e, f), h = this.getGraphSettings().getPage(), m = this.getGraph(), l = m.getPrintZoom();
    g && h.getScaleToPageType() !== JSG.graph.model.settings.ScaleToPageType.NONE ? (c = m.getUsedRect(c), c.expandBy(500)) : (g = d._item.getBoundingBox(JSG.boxCache.get()), c = g.toRectangle(c),
        JSG.boxCache.release(g));
    var g = JSG.rectCache.get().set(c.x + h.getUsableWidth() * a / l, c.y + h.getUsableHeight() * b / l, h.getUsableWidth() / l, h.getUsableHeight() / l), p = -c.x * l, n = -c.y * l, p = p - h.getUsableWidth() * a, n = n - h.getUsableHeight() * b, p = p + h.getLeftMargin(), n = n + h.getTopMargin();
    e.writeStartDocument(!1);
    e.writeStartElement("svg");
    e.writeAttributeString("width", h.getWidth() / 100 + "mm");
    e.writeAttributeString("height", h.getHeight() / 100 + "mm");
    e.writeAttributeString("viewBox", "0 0 " + f.toSVGUnit(h.getWidth()) + " " + f.toSVGUnit(h.getHeight()));
    e.writeAttributeString("xmlns", "http://www.w3.org/2000/svg");
    e.writeAttributeString("xmlns:xlink", "http://www.w3.org/1999/xlink");
    e.writeEndElement();
    e.writeStartElement("defs");
    e.writeStartElement("clipPath");
    e.writeAttributeString("id", "clipRect");
    e.writeStartElement("rect");
    e.writeAttributeString("id", "rect");
    e.writeAttributeString("x", f.toSVGUnit(h.getLeftMargin()));
    e.writeAttributeString("y", f.toSVGUnit(h.getTopMargin()));
    e.writeAttributeString("width", f.toSVGUnit(h.getUsableWidth()));
    e.writeAttributeString("height",
        f.toSVGUnit(h.getUsableHeight()));
    e.writeEndElement();
    e.writeEndElement();
    e.writeEndElement();
    var q = JSG.rectCache.get().set(0, 0, h.getWidth(), h.getHeight());
    d.drawHeaderAndFooter(k, q, h, a * m.getVerticalPrintPages() + b);
    e.writeStartElement("g");
    e.writeAttributeString("clip-path", "url(#clipRect)");
    k.startGroup();
    k.translate(p, n);
    f.setZoom(l);
    d.drawSubViews(k, g);
    k.endGroup();
    e.writeEndElement();
    e.writeEndDocument();
    JSG.rectCache.release(c, g, q);
    return e.flush()
};
JSG.ui.GraphEditor.prototype.saveSVG = function (a) {
    var b = this._graphViewer.getGraphView(), c = new JSG.commons.XMLWriter("UTF-8", "1.0"), d = new JSG.ui.graphics.MetricCoordinateSystem, e = new JSG.ui.graphics.SVGraphics(c, d);
    c.writeStartDocument(!1);
    c.writeStartElement("svg");
    c.writeAttributeString("width", a.width / 100 + "mm");
    c.writeAttributeString("height", a.height / 100 + "mm");
    c.writeAttributeString("viewBox", d.toSVGUnit(a.x) + " " + d.toSVGUnit(a.y) + " " + d.toSVGUnit(a.width) + " " + d.toSVGUnit(a.height));
    c.writeAttributeString("xmlns",
        "http://www.w3.org/2000/svg");
    c.writeAttributeString("xmlns:xlink", "http://www.w3.org/1999/xlink");
    c.writeEndElement();
    c.writeStartElement("defs");
    c.writeStartElement("clipPath");
    c.writeAttributeString("id", "clipRect");
    c.writeStartElement("rect");
    c.writeAttributeString("id", "rect");
    c.writeAttributeString("x", d.toSVGUnit(a.x));
    c.writeAttributeString("y", d.toSVGUnit(a.y));
    c.writeAttributeString("width", d.toSVGUnit(a.width));
    c.writeAttributeString("height", d.toSVGUnit(a.height));
    c.writeEndElement();
    c.writeEndElement();
    c.writeEndElement();
    c.writeStartElement("g");
    c.writeAttributeString("clip-path", "url(#clipRect)");
    e.startGroup();
    b.drawSubViews(e, a);
    e.endGroup();
    c.writeEndElement();
    c.writeEndDocument();
    return c.flush()
};
JSG.ui.GraphEditor.prototype.clear = function () {
    var a = this.getGraph(), b;
    for (b = a._subItems.length - 1; 0 <= b; b--)a.removeItem(a._subItems[b]);
    this._graphicSystem.paint()
};
JSG.ui.GraphEditor.prototype.getCanvasId = function () {
    return this._canvasId
};
JSG.ui.GraphEditor.prototype.getGraphicSystem = function () {
    return this._graphicSystem
};
JSG.ui.GraphEditor.prototype.getDefaultInteraction = function () {
    return this._graphViewer.getDefaultInteraction()
};
JSG.ui.GraphEditor.prototype.setDefaultInteraction = function (a) {
    var b = JSG.graph.model.settings.ViewMode.DEFAULT;
    this._viewmodes[b] = a;
    this.activateViewMode(b)
};
JSG.ui.GraphEditor.prototype.activateViewMode = function (a) {
    var b = this.getInteractionForMode(a);
    b && (this._graphViewer.setDefaultInteraction(b), this._interactionHandler.setActiveInteraction(b), (b = this.getGraphSettings()) && b.setViewMode(a))
};
JSG.ui.GraphEditor.prototype.getInteractionForMode = function (a) {
    return (a = (a = this._viewmodes[a]) || this._viewmodes[JSG.graph.model.settings.ViewMode.DEFAULT]) || new JSG.graph.interaction.GraphInteraction
};
JSG.ui.GraphEditor.prototype.registerInteractionForMode = function (a, b) {
    this._viewmodes[a] = b
};
JSG.ui.GraphEditor.prototype.isInViewMode = function (a) {
    var b = this.getGraphSettings();
    return b ? b.getViewMode() === a : !1
};
JSG.ui.GraphEditor.prototype.getInteractionHandler = function () {
    return this._interactionHandler
};
JSG.ui.GraphEditor.prototype.setInteractionHandler = function (a) {
    a && (this._interactionHandler = a, this._interactionHandler.viewer || (this._interactionHandler.viewer = this._graphViewer), this._interactionHandler.setActiveInteraction(this._graphViewer.getDefaultInteraction()), this._graphicSystem.setInteractionHandler(this._interactionHandler))
};
JSG.ui.GraphEditor.prototype.resizeContent = function (a, b) {
    var c = this._graphViewer.getCoordinateSystem();
    this._graphViewer.layout(c.deviceToLogX(a), c.deviceToLogX(b));
    this._graphicSystem.resize(a, b)
};
JSG.ui.GraphEditor.prototype.getGraphView = function () {
    return this._graphViewer.getGraphView()
};
JSG.ui.GraphEditor.prototype.getGraph = function () {
    return this._graphViewer.getGraph()
};
JSG.ui.GraphEditor.prototype.setGraph = function (a) {
    this._deregisterSettingsListener();
    this._graphViewer.setGraph(a);
    this._registerSettingsListener();
    this._graphicSystem.setCoordinateSystem(this._graphViewer.getCoordinateSystem())
};
JSG.ui.GraphEditor.prototype._deregisterSettingsListener = function () {
    var a = this.getGraph();
    a && a.removeEventListener(JSG.graph.model.events.Event.GRAPHSETTINGS, this._settingsListener)
};
JSG.ui.GraphEditor.prototype._registerSettingsListener = function () {
    var a = this.getGraph();
    a && a.addEventListener(JSG.graph.model.events.Event.GRAPHSETTINGS, this._settingsListener)
};
JSG.ui.GraphEditor.prototype.getGraphViewer = function () {
    return this._graphViewer
};
JSG.ui.GraphEditor.prototype.getCoordinateSystem = function () {
    return this._graphViewer.getCoordinateSystem()
};
JSG.ui.GraphEditor.prototype.setCoordinateSystem = function (a) {
    this._graphicSystem.setCoordinateSystem(a);
    this.invalidate()
};
JSG.ui.GraphEditor.prototype.setScrollPosition = function (a, b) {
    this.getGraphViewer().getScrollPanel().setScrollPosition(a, b);
    this._graphicSystem.paint()
};
JSG.ui.GraphEditor.prototype.showScale = function (a) {
    this.getGraphViewer().getScrollPanel().showScale(a)
};
JSG.ui.GraphEditor.prototype.setViewMode = function (a) {
    this.setDisplayMode(a)
};
JSG.ui.GraphEditor.prototype.setDisplayMode = function (a) {
    var b = this.getGraphSettings();
    b && b.getDisplayMode() !== a && (b.setDisplayMode(a), this.layout(), JSG.graph.notifications.NotificationCenter.getInstance().send(new JSG.graph.notifications.Notification(JSG.ui.GraphEditor.DISPLAY_MODE_NOTIFICATION, this)))
};
JSG.ui.GraphEditor.prototype.layout = function () {
    this.getGraphViewer().getScrollPanel().getViewPanel().layout();
    this._graphicSystem.paint()
};
JSG.ui.GraphEditor.prototype.invalidate = function () {
    this.getGraph().markDirty();
    this._updateLayout();
    this._graphicSystem.paint()
};
JSG.ui.GraphEditor.prototype._updateLayout = function () {
    var a = this._graphViewer.getCoordinateSystem();
    this.getGraphViewer().layout(a.deviceToLogX(this._graphicSystem.getCanvas().width), a.deviceToLogY(this._graphicSystem.getCanvas().height))
};
JSG.ui.GraphEditor.prototype.repaint = function () {
    this._graphicSystem.paint()
};
JSG.ui.GraphEditor.prototype.getVisibleGraphRect = function (a) {
    return this.getGraphViewer().getScrollPanel().getVisibleGraphRect(a)
};
JSG.ui.GraphEditor.prototype.getGraphSettings = function () {
    var a = this.getGraphViewer().getGraph();
    return a ? a.getSettings() : void 0
};
JSG.ui.GraphEditor.prototype.getSelectionProvider = function () {
    return this.getGraphViewer().getSelectionProvider()
};
JSG.ui.GraphEditor.prototype.setZoom = function (a) {
    this.getGraphViewer().setZoom(a);
    this.invalidate()
};
JSG.ui.GraphEditor.prototype.getZoom = function () {
    return this.getGraphViewer().getZoom()
};
JSG.ui.GraphEditor.prototype.destroy = function () {
    this._deregisterSettingsListener();
    this._settingsListener._editor = void 0;
    this._interactionHandler.dispose();
    this._graphicSystem.canvas._jsgEditor = void 0;
    this._graphicSystem.destroy();
    this._graphViewer.destroy();
    JSG.imagePool.unregisterEditor(this);
    this._interactionHandler = this._settingsListener = this._graphicSystem = this._graphViewer = this._viewmodes = void 0
};
JSG.ui.GraphEditor.SettingsListener = function (a) {
    JSG.ui.GraphEditor.SettingsListener._super.constructor.call(this);
    this._editor = a
};
JSG.extend(JSG.ui.GraphEditor.SettingsListener, JSG.graph.model.events.EventListener);
JSG.ui.GraphEditor.SettingsListener.prototype.handlePostEvent = function (a) {
    var b = JSG.graph.model.settings.SettingID;
    switch (a.detailId) {
        case b.SCALEVISIBLE:
            this._editor.showScale(a.value)
    }
};
JSG.namespace("JSG.ui");
JSG.ui.Widget = function () {
    JSG.ui.Widget._super.constructor.apply(this, arguments);
    this._format = new JSG.graph.attr.FormatAttributes;
    this._format.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    this._bounds = new JSG.geometry.Rectangle(0, 0, 0, 0)
};
JSG.extend(JSG.ui.Widget, JSG.ui.View);
JSG.ui.Widget.prototype.add = function (a) {
    return JSG.ui.Widget._super.addView.call(this, a)
};
JSG.ui.Widget.prototype.remove = function (a) {
    JSG.ui.Widget._super.removeView.call(this, a)
};
JSG.ui.Widget.prototype.getBounds = function (a) {
    a = a || new JSG.geometry.Rectangle(0, 0, 0, 0);
    a.setTo(this._bounds);
    return a
};
JSG.ui.Widget.prototype.getClientArea = function (a) {
    a = this.getBounds(a);
    a.set(0, 0, a.width, a.height);
    return a
};
JSG.ui.Widget.prototype.getLocation = function (a) {
    a = a || new JSG.geometry.Point(0, 0);
    a.set(this._bounds.x, this._bounds.y);
    return a
};
JSG.ui.Widget.prototype.getSize = function (a) {
    return (a || new JSG.geometry.Point(0, 0)).set(this._bounds.width, this._bounds.height)
};
JSG.ui.Widget.prototype.getFormat = function () {
    return this._format
};
JSG.ui.Widget.prototype.setBounds = function (a, b, c, d) {
    this._setLocation(a, b);
    this._setSize(c, d)
};
JSG.ui.Widget.prototype.setBoundsTo = function (a) {
    this.setBounds(a.x, a.y, a.width, a.height)
};
JSG.ui.Widget.prototype.setLocation = function (a, b) {
    this._setLocation(a, b)
};
JSG.ui.Widget.prototype.setLocationTo = function (a) {
    this._setLocation(a.x, a.y)
};
JSG.ui.Widget.prototype._setLocation = function (a, b) {
    this._bounds.x = a;
    this._bounds.y = b
};
JSG.ui.Widget.prototype.setSize = function (a, b) {
    this._setSize(a, b)
};
JSG.ui.Widget.prototype.setSizeTo = function (a) {
    this._setSize(a.x, a.y)
};
JSG.ui.Widget.prototype._setSize = function (a, b) {
    this._bounds.width = a;
    this._bounds.height = b;
    this._fireOnResize()
};
JSG.ui.Widget.prototype.translateFromParent = function (a) {
    a.translate(-this._bounds.x, -this._bounds.y);
    return a
};
JSG.ui.Widget.prototype.translateToParent = function (a) {
    a.translate(this._bounds.x, this._bounds.y);
    return a
};
JSG.ui.Widget.prototype.draw = function (a) {
    this.isVisible() && (this._format.applyFillToGraphics(a, this._bounds), this._format.applyShadowToGraphics(a, this._bounds), this.drawBackground(a), this._format.removeShadowFromGraphics(a), a.save(), a.startGroup(), this.drawClientArea(a), a.endGroup(), a.restore(), this._format.applyLineToGraphics(a), this.drawBorder(a), this._format.removeLineFromGraphics(a))
};
JSG.ui.Widget.prototype.drawBackground = function (a) {
    this._format.hasFill() && a.fillRect(this._bounds)
};
JSG.ui.Widget.prototype.drawClientArea = function (a) {
    this.hasSubviews() && (a.startGroup(), a.translate(this._bounds.x, this._bounds.y), this.drawSubViews(a), a.endGroup())
};
JSG.ui.Widget.prototype.drawBorder = function (a) {
    this._format.hasBorder() && a.drawRect(this._bounds)
};
JSG.namespace("JSG.ui");
JSG.ui.Scale = function (a, b) {
    JSG.ui.Scale._super.constructor.apply(this, arguments);
    this._size = 750;
    this._scrollpos = 0;
    this._isVertical = a;
    this._viewer = b;
    this._drawctxt = {};
    this.setVisible(!0);
    this.getFormat().setFillColor(JSG.bkColorHeader);
    this.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE)
};
JSG.extend(JSG.ui.Scale, JSG.ui.Widget);
JSG.ui.Scale.prototype.isVisible = function () {
    var a = this._viewer.getGraphSettings();
    return a ? a.getScaleVisible() : this._isVisible
};
JSG.ui.Scale.prototype.setVisible = function (a) {
    this._isVisible = a;
    var b = this._viewer.getGraphSettings();
    b && b.setScaleVisible(a)
};
JSG.ui.Scale.prototype.getHeight = function () {
    return this._viewer.getCoordinateSystem().metricToLogYNoZoom(this._size)
};
JSG.ui.Scale.prototype.getWidth = function () {
    return this._viewer.getCoordinateSystem().metricToLogXNoZoom(this._size)
};
JSG.ui.Scale.prototype.onRangeChange = function (a, b) {
    b === JSG.ui.scrollview.RangeModel.CHANGED_VALUE && (this._scrollpos = -a.getValue())
};
JSG.ui.Scale.prototype.drawBackground = function (a) {
    var b = this._viewer.getCoordinateSystem(), c = this._viewer.getGraph(), d = this._drawctxt, e = c ? c.getSettings() : void 0;
    e && (d.cs = b, d.graph = c, d.bounds = JSG.rectCache.get().setTo(this._bounds), d.scaleBounds = JSG.rectCache.get().setTo(this._bounds), d.topleft = c.getOrigin(JSG.ptCache.get()), d.page = e.getPage(), d.isPageMode = e.getDisplayMode() === JSG.ui.graphics.DisplayMode.PAGE, d.zoom = b.getZoom(), d.majorStep = b.getMajorUnit(), d.minorStep = b.getMinorUnit(), a.save(), a.setClip(d.bounds),
        a.fillRect(d.bounds), this._isVertical ? this.drawVertical(a, d) : this.drawHorizontal(a, d), a.restore(), JSG.ptCache.release(d.topleft), JSG.rectCache.release(d.bounds, d.scaleBounds))
};
JSG.ui.Scale.prototype.drawHorizontal = function (a, b) {
    var c = b.page.getUsableWidth(), d = b.graph.getHorizontalPages(), e = b.isPageMode ? b.page.getHorizontalGap() : 0, f = b.isPageMode ? b.page.getLeftMargin() : 0, g = b.isPageMode ? b.page.getRightMargin() : 0, e = f + c + g + e, d = d * e, g = 0, k = Math.floor(b.topleft.x / c) * e;
    a.translate(b.bounds.x + k + this._scrollpos + f, 0);
    a.setFillColor("#FFFFFF");
    b.scaleBounds.set(0, b.bounds.height / 4, c, b.bounds.height / 2);
    for (g = 0; g < d; g += e)b.scaleBounds.x = g, a.fillRect(b.scaleBounds);
    var f = this.getHeight() /
        2, h = 3 * b.bounds.height / 8 - 1, m = 5 * b.bounds.height / 8, k = k + Math.abs(k) % c, l = Math.abs(k) % b.majorStep, p = l - b.minorStep, p = 0 > p ? p + b.majorStep : p;
    a.beginPath();
    a.setLineColor("#555555");
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    a.setFillColor("#777777");
    a.getContext().textBaseline = "middle";
    a.getContext().textAlign = "center";
    for (g = 0; g < d; g)0.4 < b.zoom && p < c && (a.moveTo(g + p, h), a.lineTo(g + p, m)), 0 < l && l < c && a.fillText(b.cs.getMajorUnitString(k + l), g + l, f), p <= c && (p += b.majorStep), l <= c && (l += 0.5 < b.zoom ? b.majorStep :
        0.3 < b.zoom ? 2 * b.majorStep : 5 * b.majorStep), p > c && l > c && (g += e, k += c, l -= c, p -= c);
    a.stroke()
};
JSG.ui.Scale.prototype.drawVertical = function (a, b) {
    var c = b.page.getUsableHeight(), d = b.graph.getVerticalPages(), e = b.isPageMode ? b.page.getVerticalGap() : 0, f = b.isPageMode ? b.page.getTopMargin() : 0, g = b.isPageMode ? b.page.getBottomMargin() : 0, e = f + c + g + e, d = d * e, g = 0, k = Math.floor(b.topleft.y / c) * e;
    a.translate(0, b.bounds.y + k + this._scrollpos + f);
    a.setFillColor("#FFFFFF");
    b.scaleBounds.set(b.bounds.width / 4, 0, b.bounds.width / 2, c);
    for (g = 0; g < d; g += e)b.scaleBounds.y = g, a.fillRect(b.scaleBounds);
    var f = this.getWidth() / 2, h = 3 * b.bounds.width /
        8, m = 5 * b.bounds.width / 8, k = k + Math.abs(k) % c, l = Math.abs(k) % b.majorStep, p = l - b.minorStep, p = 0 > p ? p + b.majorStep : p;
    a.beginPath();
    a.setLineColor("#555555");
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    a.setFillColor("#777777");
    a.getContext().textBaseline = "middle";
    a.getContext().textAlign = "center";
    for (g = 0; g < d; g)0.4 < b.zoom && p < c && (a.moveTo(h, g + p), a.lineTo(m, g + p)), 0 < l && l < c && (a.translate(f, g + l), a.rotate(-Math.PI_2), a.fillText(b.cs.getMajorUnitString(k + l), 0, 0), a.rotate(Math.PI_2), a.translate(-f,
        -(g + l))), p <= c && (p += b.majorStep), l <= c && (l += 0.5 < b.zoom ? b.majorStep : 0.3 < b.zoom ? 2 * b.majorStep : 5 * b.majorStep), p > c && l > c && (g += e, k += c, l -= c, p -= c);
    a.stroke()
};
JSG.namespace("JSG.ui.scrollview");
JSG.ui.scrollview.ViewPanel = function () {
    JSG.ui.scrollview.ViewPanel._super.constructor.apply(this, arguments);
    this._view = void 0;
    this.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    this.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.NONE)
};
JSG.extend(JSG.ui.scrollview.ViewPanel, JSG.ui.Widget);
JSG.ui.scrollview.ViewPanel.prototype.getView = function () {
    return this._view
};
JSG.ui.scrollview.ViewPanel.prototype.setView = function (a) {
    this._view && (this._view.removeResizeListener(this), this.removeView(this._view));
    if (this._view = a)this.addView(a), a.addResizeListener(this);
    this.layout()
};
JSG.ui.scrollview.ViewPanel.prototype.invalidate = function () {
    this.setValid(!1)
};
JSG.ui.scrollview.ViewPanel.prototype.getPreferredBounds = function (a, b) {
    var c = b || new JSG.geometry.Rectangle(0, 0, 0, 0), d = this.getView();
    return d ? d.getPreferredBounds(void 0, c) : c.reset()
};
JSG.ui.scrollview.ViewPanel.prototype.translateToParent = function (a) {
    return a
};
JSG.ui.scrollview.ViewPanel.prototype.layout = function (a) {
    if (this._view) {
        this._view.layout();
        a = this._view.getBoundingBox(JSG.boxCache.get());
        var b = a.toRectangle(JSG.rectCache.get());
        this.setBoundsTo(b);
        JSG.boxCache.release(a);
        JSG.rectCache.release(b)
    }
};
JSG.ui.scrollview.ViewPanel.prototype.drawClientArea = function (a) {
    this.drawSubViews(a)
};
JSG.ui.scrollview.ViewPanel.prototype._setSize = function (a, b) {
    JSG.Numbers.areEqual(this._bounds.width, a, 1) && JSG.Numbers.areEqual(this._bounds.height, b, 1) || (this._bounds.width = a, this._bounds.height = b, this._view && this._view.layout(), this._fireOnResize())
};
JSG.ui.scrollview.ViewPanel.prototype.onResize = function (a) {
    this.layout()
};
JSG.ui.scrollview.ViewPanel.prototype.handleMouseEvent = function (a) {
    return !1
};
JSG.ui.scrollview.ViewPanel.prototype.handleDragEvent = function (a) {
    return !1
};
JSG.ui.scrollview.ViewPanel.prototype.handleKeyEvent = function (a) {
    return !1
};
JSG.namespace("JSG.ui.scrollview");
JSG.ui.scrollview.ViewPort = function () {
    JSG.ui.scrollview.ViewPort._super.constructor.apply(this, arguments);
    this._vpOffset = new JSG.geometry.Point(0, 0);
    this._viewpanel = new JSG.ui.scrollview.ViewPanel;
    this.getFormat().setFillColor(JSG.bkColorGraph);
    this._hrangemodel = this._vrangemodel = void 0;
    this.setVerticalRangeModel(new JSG.ui.scrollview.RangeModel);
    this.setHorizontalRangeModel(new JSG.ui.scrollview.RangeModel)
};
JSG.extend(JSG.ui.scrollview.ViewPort, JSG.ui.Widget);
JSG.ui.scrollview.ViewPort.BOUNDS_CHANGED_NOTIFICATION = "viewport.bounds.changed.notification";
JSG.ui.scrollview.ViewPort.prototype.getViewPanel = function () {
    return this._viewpanel
};
JSG.ui.scrollview.ViewPort.prototype.setViewPanel = function (a) {
    this._viewpanel && (this._viewpanel.removeResizeListener(this), this.remove(this._viewpanel));
    this._viewpanel = a;
    this._viewpanel.addResizeListener(this);
    this.add(this._viewpanel)
};
JSG.ui.scrollview.ViewPort.prototype.layout = function (a) {
    this.relayout()
};
JSG.ui.scrollview.ViewPort.prototype.relayout = function () {
    var a = this.getClientArea(), b = this.getViewPanelBounds(a);
    this._viewpanel.setBoundsTo(b);
    this.setRange(this._hrangemodel, b.x, b.getRight(), a.width);
    this.setRange(this._vrangemodel, b.y, b.getBottom(), a.height)
};
JSG.ui.scrollview.ViewPort.prototype.setRange = function (a, b, c, d) {
    var e = a.getValue();
    b > a.getMin() && e < b && (b = e);
    c < a.getMax() && e + a.getExtent() > c && (c = e + a.getExtent());
    a.setAll(b, c, d)
};
JSG.ui.scrollview.ViewPort.prototype.getViewPanelBounds = function (a) {
    return this._viewpanel.getPreferredBounds()
};
JSG.ui.scrollview.ViewPort.prototype.getPreferredBounds = function (a, b) {
    var c = this._viewpanel.getPreferredBounds(void 0, b);
    c.x += this._vpOffset.x;
    c.y += this._vpOffset.y;
    a && c.union(a);
    return c
};
JSG.ui.scrollview.ViewPort.prototype.invalidate = function () {
    this.setValid(!1)
};
JSG.ui.scrollview.ViewPort.prototype.getViewPanelOffset = function () {
    return this._vpOffset
};
JSG.ui.scrollview.ViewPort.prototype.getVisibleViewRect = function (a) {
    a = this.getClientArea(a);
    a.x = -this._vpOffset.x;
    a.y = -this._vpOffset.y;
    return a
};
JSG.ui.scrollview.ViewPort.prototype.getContentView = function () {
    return this._viewpanel.getView()
};
JSG.ui.scrollview.ViewPort.prototype.setContentView = function (a) {
    this._viewpanel.setView(a)
};
JSG.ui.scrollview.ViewPort.prototype.onResize = function (a) {
    this.relayout()
};
JSG.ui.scrollview.ViewPort.prototype.setBounds = function (a, b, c, d) {
    JSG.ui.scrollview.ViewPort._super.setBounds.call(this, a, b, c, d);
    JSG.graph.notifications.NotificationCenter.getInstance().send(new JSG.graph.notifications.Notification(JSG.ui.scrollview.ViewPort.BOUNDS_CHANGED_NOTIFICATION, this))
};
JSG.ui.scrollview.ViewPort.prototype.drawClientArea = function (a) {
    if (this._viewpanel) {
        var b = this.getBounds();
        a.setClip(b);
        a.startGroup();
        a.translate(b.x + this._vpOffset.x, b.y + this._vpOffset.y);
        this.drawSubViews(a);
        a.endGroup()
    }
};
JSG.ui.scrollview.ViewPort.prototype.handleMouseEvent = function (a) {
    this._viewpanel && (this.translateFromParent(a.location), this._viewpanel.handleMouseEvent(a))
};
JSG.ui.scrollview.ViewPort.prototype.handleDragEvent = function (a) {
    return this._viewpanel ? (this.translateFromParent(a.location), this._viewpanel.handleDragEvent(a)) : !1
};
JSG.ui.scrollview.ViewPort.prototype.handleKeyEvent = function (a) {
    this._viewpanel && this._viewpanel.handleKeyEvent(a)
};
JSG.ui.scrollview.ViewPort.prototype.translateFromParent = function (a) {
    JSG.ui.scrollview.ViewPort._super.translateFromParent.call(this, a);
    a.translate(-this._vpOffset.x, -this._vpOffset.y);
    return a
};
JSG.ui.scrollview.ViewPort.prototype.translateToParent = function (a) {
    JSG.ui.scrollview.ViewPort._super.translateToParent.call(this, a);
    a.translate(this._vpOffset.x, this._vpOffset.y);
    return a
};
JSG.ui.scrollview.ViewPort.prototype.getVerticalRangeModel = function () {
    return this._vrangemodel
};
JSG.ui.scrollview.ViewPort.prototype.getHorizontalRangeModel = function () {
    return this._hrangemodel
};
JSG.ui.scrollview.ViewPort.prototype.setVerticalRangeModel = function (a) {
    this._vrangemodel = this._setRangeModel(this._vrangemodel, a)
};
JSG.ui.scrollview.ViewPort.prototype.setHorizontalRangeModel = function (a) {
    this._hrangemodel = this._setRangeModel(this._hrangemodel, a)
};
JSG.ui.scrollview.ViewPort.prototype._setRangeModel = function (a, b) {
    b = b || a;
    a && a.removeObserver(this);
    b.addObserver(this);
    return b
};
JSG.ui.scrollview.ViewPort.prototype.onRangeChange = function (a, b) {
    if (b === JSG.ui.scrollview.RangeModel.CHANGED_VALUE) {
        this._vpOffset.set(-this._hrangemodel.getValue(), -this._vrangemodel.getValue());
        var c = this.getContentView();
        c && c.getItem().setPinPointTo(this._vpOffset)
    }
};
JSG.namespace("JSG.ui.scrollview");
JSG.ui.scrollview.Arrow = function (a, b) {
    JSG.ui.scrollview.Arrow._super.constructor.apply(this, arguments);
    this._pts = [new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0), new JSG.geometry.Point(0, 0)];
    this._observer = b;
    this._direction = a
};
JSG.extend(JSG.ui.scrollview.Arrow, JSG.ui.Widget);
JSG.ui.scrollview.Arrow.NORTH = 0;
JSG.ui.scrollview.Arrow.EAST = 1;
JSG.ui.scrollview.Arrow.SOUTH = 2;
JSG.ui.scrollview.Arrow.WEST = 4;
JSG.ui.scrollview.Arrow.prototype.getDirection = function () {
    return this._direction
};
JSG.ui.scrollview.Arrow.prototype.handleMouseEvent = function (a) {
    if (this.isVisible)switch (a.type) {
        case JSG.ui.events.MouseEventType.DOWN:
            if (this._bounds.contains(a.location.x, a.location.y) && (a.isConsumed = !0, this._observer))this._observer.onMouseDown(this, a);
            break;
        case JSG.ui.events.MouseEventType.UP:
            if (this._bounds.contains(a.location.x, a.location.y) && (a.isConsumed = !0, this._observer))this._observer.onMouseUp(this, a)
    }
};
JSG.ui.scrollview.Arrow.prototype.drawBackground = function (a) {
    var b = this._pts, c = this._bounds, d = c.width / 3, e = JSG.ui.scrollview.Arrow;
    switch (this._direction) {
        case e.NORTH:
            b[0].set(c.x + d, c.y + c.height - d);
            b[1].set(c.x + c.width - d, c.y + c.height - d);
            b[2].set(c.x + c.width / 2, c.y + d);
            break;
        case e.SOUTH:
            b[0].set(c.x + d, c.y + d);
            b[1].set(c.x + c.width - d, c.y + d);
            b[2].set(c.x + c.width / 2, c.y + c.height - d);
            break;
        case e.WEST:
            b[0].set(c.x + c.width - d, c.y + d);
            b[1].set(c.x + c.width - d, c.y + c.height - d);
            b[2].set(c.x + d, c.y + c.height / 2);
            break;
        case e.EAST:
            b[0].set(c.x + d, c.y + d), b[1].set(c.x + d, c.y + c.height - d), b[2].set(c.x + c.width - d, c.y + c.height / 2)
    }
    a.setFillColor("#777777");
    a.fillPolyline(b)
};
JSG.namespace("JSG.ui.scrollview");
JSG.ui.scrollview.Range = function (a, b) {
    JSG.ui.scrollview.Range._super.constructor.apply(this, arguments);
    this._isVertical = a;
    this._thumb = this.add(new JSG.ui.scrollview.Thumb);
    this._observer = b
};
JSG.extend(JSG.ui.scrollview.Range, JSG.ui.Widget);
JSG.ui.scrollview.Range.prototype.isDragThumbFinished = function () {
    return !1 === this._thumb._isSelected
};
JSG.ui.scrollview.Range.prototype.isThumbSelected = function () {
    return this._thumb._isSelected
};
JSG.ui.scrollview.Range.prototype.getThumb = function () {
    return this._thumb
};
JSG.ui.scrollview.Range.prototype.handleMouseEvent = function (a) {
    if (!0 === this._isVisible)if (a.type === JSG.ui.events.MouseEventType.WHEEL)this._handleMouseWheel(a); else {
        var b = a.location.copy();
        this.translateFromParent(a.location);
        this._thumb.handleMouseEvent(a);
        !1 === a.isConsumed && this._bounds.containsPoint(b) && (a.isConsumed = !0, a.type === JSG.ui.events.MouseEventType.DOWN && this._handlePageInDecrement(a.location));
        a.location = b
    }
};
JSG.ui.scrollview.Range.prototype._handlePageInDecrement = function (a) {
    if (!0 === this._thumb._isVisible) {
        a = a.copy();
        var b = this._thumb._bounds.copy();
        this._isVertical || (a.swap(), b.swap());
        a = a.y < b.y ? !0 : a.y > b.getBottom() ? !1 : void 0;
        if (void 0 !== a)if (!0 === a)this._observer.onPageUp(this); else this._observer.onPageDown(this)
    }
};
JSG.ui.scrollview.Range.prototype._handleMouseWheel = function (a) {
    var b = a.event;
    this._isOurWheelEvent(b) && (a.isConsumed = !0, a = b.wheelDelta ? b.wheelDelta / 120 : -b.detail, a = 100 * -a, a = this._isVertical ? new JSG.geometry.Point(0, a) : new JSG.geometry.Point(a, 0), this._observer.onThumbDrag(this, a))
};
JSG.ui.scrollview.Range.prototype._isOurWheelEvent = function (a) {
    a = a.wheelDeltaX ? "x" : a.axis && a.axis === a.HORIZONTAL_AXIS ? "x" : "y";
    return this._isVertical ? "y" === a : "x" === a
};
JSG.ui.scrollview.Range.prototype.layout = function (a) {
    var b = this.getClientArea(JSG.rectCache.get()), c = a.getRangeModel();
    !0 === a.isVisible() && (!0 === a._isVertical ? this._placeThumbVertical(c, b) : this._placeThumbHorizontal(c, b));
    JSG.rectCache.release(b)
};
JSG.ui.scrollview.Range.prototype._placeThumbVertical = function (a, b) {
    var c = this._thumb, d = a.getMax() - a.getMin(), e = d - a.getExtent(), f = b.width / 5;
    0 !== d && 0 !== e ? (d = Math.max(c.getMinimumSize(), b.height * a.getExtent() / d), e = (b.height - d) * (a.getValue() - a.getMin()) / e, c._bounds.x = f, c._bounds.y = e, c.setSize(b.width - 2 * f, d), c._isVisible = b.height > d, a._thumb = d) : c._isVisible = !1
};
JSG.ui.scrollview.Range.prototype._placeThumbHorizontal = function (a, b) {
    var c = this._thumb, d = a.getMax() - a.getMin(), e = d - a.getExtent(), f = b.height / 5;
    0 !== d && 0 !== e ? (d = Math.max(c.getMinimumSize(), b.width * a.getExtent() / d), e = (b.width - d) * (a.getValue() - a.getMin()) / e, c._bounds.x = e, c._bounds.y = f, c.setSize(d, b.height - 2 * f), c._isVisible = b.width > d, a._thumb = d) : c._isVisible = !1
};
JSG.ui.scrollview.Range.prototype.onThumbDrag = function (a) {
    this._observer.onThumbDrag(this, a)
};
JSG.namespace("JSG.ui.scrollview");
JSG.ui.scrollview.RangeModel = function () {
    this._value = this._thumb = this._extent = this._max = this._min = 0;
    this._observers = []
};
JSG.ui.scrollview.RangeModel.CHANGED_MIN = 1;
JSG.ui.scrollview.RangeModel.CHANGED_MAX = 2;
JSG.ui.scrollview.RangeModel.CHANGED_RANGE = 4;
JSG.ui.scrollview.RangeModel.CHANGED_EXTENT = 8;
JSG.ui.scrollview.RangeModel.CHANGED_VALUE = 16;
JSG.ui.scrollview.RangeModel.prototype.addObserver = function (a) {
    JSG.Arrays.contains(this._observers, a) || this._observers.push(a)
};
JSG.ui.scrollview.RangeModel.prototype.removeObserver = function (a) {
    JSG.Arrays.remove(this._observers, a)
};
JSG.ui.scrollview.RangeModel.prototype._notifyRangeChange = function (a) {
    var b, c;
    b = 0;
    for (c = this._observers.length; b < c; b++)this._observers[b].onRangeChange(this, a)
};
JSG.ui.scrollview.RangeModel.prototype.setAll = function (a, b, c, d) {
    JSG.Numbers.areEqual(this._min, a) && JSG.Numbers.areEqual(this._max, b) && JSG.Numbers.areEqual(this._extent, c) || (this._min = a, this._max = b, this._extent = c, this._notifyRangeChange(JSG.ui.scrollview.RangeModel.CHANGED_RANGE));
    (d || 0 === d) && this.setValue(d)
};
JSG.ui.scrollview.RangeModel.prototype.setRange = function (a, b) {
    JSG.Numbers.areEqual(this._min, a) && JSG.Numbers.areEqual(this._max, b) || (this._min = a, this._max = b, this._notifyRangeChange(JSG.ui.scrollview.RangeModel.CHANGED_RANGE), this.setValue(this._value))
};
JSG.ui.scrollview.RangeModel.prototype.getMin = function () {
    return this._min
};
JSG.ui.scrollview.RangeModel.prototype.setMin = function (a) {
    JSG.Numbers.areEqual(this._min, a) || (this._min = a, this._notifyRangeChange(JSG.ui.scrollview.RangeModel.CHANGED_MIN), this.setValue(this._value))
};
JSG.ui.scrollview.RangeModel.prototype.getMax = function () {
    return this._max
};
JSG.ui.scrollview.RangeModel.prototype.setMax = function (a) {
    this._max = a;
    JSG.Numbers.areEqual(this._max, a) || (this._max = a, this._notifyRangeChange(JSG.ui.scrollview.RangeModel.CHANGED_MAX), this.setValue(this._value))
};
JSG.ui.scrollview.RangeModel.prototype.getExtent = function () {
    return this._extent
};
JSG.ui.scrollview.RangeModel.prototype.setExtent = function (a) {
    JSG.Numbers.areEqual(this._extent, a) || (this._extent = a, this._notifyRangeChange(JSG.ui.scrollview.RangeModel.CHANGED_EXTENT), this.setValue(this._value))
};
JSG.ui.scrollview.RangeModel.prototype.getValue = function () {
    return this._value
};
JSG.ui.scrollview.RangeModel.prototype.setValue = function (a) {
    a = Math.max(Math.min(a, this._max - this._extent), this._min);
    JSG.Numbers.areEqual(this._value, a) || (this._value = a, this._notifyRangeChange(JSG.ui.scrollview.RangeModel.CHANGED_VALUE))
};
JSG.ui.scrollview.RangeModel.prototype.toString = function () {
    return "min:" + this._min + ", max:" + this._max + ", extent:" + this._extent + ", value:" + this._value
};
JSG.namespace("JSG.ui.scrollview");
JSG.ui.scrollview.Thumb = function () {
    JSG.ui.scrollview.Thumb._super.constructor.apply(this, arguments);
    this._isSelected = !1;
    this._startLocation = new JSG.geometry.Point(0, 0);
    this.getFormat().setFillColor("#CCCCCC");
    this.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE)
};
JSG.extend(JSG.ui.scrollview.Thumb, JSG.ui.Widget);
JSG.ui.scrollview.Thumb.prototype.getMinimumSize = function () {
    return 500
};
JSG.ui.scrollview.Thumb.prototype.handleMouseEvent = function (a) {
    if (!0 === this._isVisible) {
        var b = JSG.ui.events.MouseEventType;
        a.type === b.MOVE && !0 === this._isSelected ? (a.isConsumed = !0, this._dragTo(a.location)) : this._bounds.containsPoint(a.location) ? (a.isConsumed = !0, a.type === b.DOWN ? (this._isSelected = !0, this._startLocation.setTo(a.location)) : this._isSelected = !1) : this._isSelected = !1
    }
};
JSG.ui.scrollview.Thumb.prototype._dragTo = function (a) {
    var b = a.copy().subtract(this._startLocation);
    this._parent.onThumbDrag(b);
    this._startLocation.setTo(a)
};
JSG.namespace("JSG.ui.scrollview");
JSG.ui.scrollview.ScrollBar = function (a) {
    JSG.ui.scrollview.ScrollBar._super.constructor.apply(this, arguments);
    this._isVertical = a;
    var b = !0 === a ? JSG.ui.scrollview.Arrow.NORTH : JSG.ui.scrollview.Arrow.WEST;
    this._arrowStart = new JSG.ui.scrollview.Arrow(b, this);
    this._arrowStart.getFormat().setFillColor(JSG.bkColorScroll);
    this._arrowStart.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    this.add(this._arrowStart);
    this._range = new JSG.ui.scrollview.Range(a, this);
    this._range.getFormat().setFillColor(JSG.bkColorScroll);
    this._range.getFormat().setLineColor(JSG.bkColorScroll);
    this._range.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    this.add(this._range);
    b = !0 === a ? JSG.ui.scrollview.Arrow.SOUTH : JSG.ui.scrollview.Arrow.EAST;
    this._arrowEnd = new JSG.ui.scrollview.Arrow(b, this);
    this._arrowEnd.getFormat().setFillColor(JSG.bkColorScroll);
    this._arrowEnd.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    this.add(this._arrowEnd);
    this.setVisible(!0);
    this.getFormat().setFillColor("#eeeeee");
    this.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    this._rangemodel = void 0;
    this.setMode(JSG.ui.scrollview.ScrollBar.Mode.AUTO);
    this._listeners = []
};
JSG.extend(JSG.ui.scrollview.ScrollBar, JSG.ui.Widget);
JSG.ui.scrollview.ScrollBar.Mode = {AUTO: 0, VISIBLE: 1, HIDDEN: 2};
JSG.ui.scrollview.ScrollBar.SIZE = 450;
JSG.ui.scrollview.ScrollBar.prototype.getRangeModel = function () {
    return this._rangemodel
};
JSG.ui.scrollview.ScrollBar.prototype.setRangeModel = function (a) {
    this._rangemodel && this._rangemodel.removeObserver(this);
    this._rangemodel = a;
    this._rangemodel.addObserver(this)
};
JSG.ui.scrollview.ScrollBar.prototype.addListener = function (a) {
    JSG.Arrays.contains(this._listeners, a) || this._listeners.push(a)
};
JSG.ui.scrollview.ScrollBar.prototype.removeListener = function (a) {
    JSG.Arrays.remove(this._listeners, a)
};
JSG.ui.scrollview.ScrollBar.prototype._notify = function (a) {
    var b, c, d, e = this._listeners, f = arguments, g = a;
    f[0] = this;
    b = 0;
    for (c = e.length; b < c; b++)d = e[b], "function" === typeof d[g] && d[g].apply(d, f)
};
JSG.ui.scrollview.ScrollBar.prototype.isDragThumbFinished = function () {
    return this._range.isDragThumbFinished()
};
JSG.ui.scrollview.ScrollBar.prototype.getMode = function () {
    return this._mode
};
JSG.ui.scrollview.ScrollBar.prototype.setMode = function (a) {
    this._mode = a;
    this.setVisible(this.isVisible())
};
JSG.ui.scrollview.ScrollBar.prototype.setVisible = function (a) {
    this._mode !== JSG.ui.scrollview.ScrollBar.Mode.AUTO && (a = this._mode === JSG.ui.scrollview.ScrollBar.Mode.VISIBLE);
    JSG.ui.scrollview.ScrollBar._super.setVisible.call(this, a)
};
JSG.ui.scrollview.ScrollBar.prototype.layout = function () {
    if (!0 === this.isVisible()) {
        var a = this.getClientArea();
        this._isVertical ? (this._arrowStart._bounds.set(0, 0, a.width, a.width), this._range._bounds.set(0, a.width, a.width, a.height - 2 * a.width), this._arrowEnd._bounds.set(0, a.height - a.width, a.width, a.width)) : (this._arrowStart._bounds.set(0, 0, a.height, a.height), this._range._bounds.set(a.height, 0, a.width - 2 * a.height, a.height), this._arrowEnd._bounds.set(a.width - a.height, 0, a.height, a.height));
        this._range.layout(this)
    }
};
JSG.ui.scrollview.ScrollBar.prototype.doHandleEvent = function (a) {
    return this._range.isThumbSelected() && (a.type === JSG.ui.events.MouseEventType.MOVE || a.type === JSG.ui.events.MouseEventType.UP) || this.isVisible() && this.getBounds().contains(a.location.x, a.location.y)
};
JSG.ui.scrollview.ScrollBar.prototype.handleMouseEvent = function (a) {
    if (!0 === this.isVisible()) {
        var b = a.location.copy();
        this.translateFromParent(a.location);
        this._range.handleMouseEvent(a);
        this._arrowStart.handleMouseEvent(a);
        this._arrowEnd.handleMouseEvent(a);
        a.location = b;
        this._bounds.contains(a.location.x, a.location.y) && (a.isConsumed = !0)
    }
};
JSG.ui.scrollview.ScrollBar.prototype.onThumbDrag = function (a, b) {
    var c = this._rangemodel, d = a.getClientArea(), e = a.getThumb().getBounds(), f, g = c.getMax() - c.getMin() - c.getExtent();
    !0 === this._isVertical ? (f = e.y += b.y, f = f * g / (d.height - e.height) + c.getMin()) : (f = e.x += b.x, f = f * g / (d.width - e.width) + c.getMin());
    this._notify("onThumbDrag", f, b)
};
JSG.ui.scrollview.ScrollBar.prototype.onMouseUp = function (a) {
};
JSG.ui.scrollview.ScrollBar.prototype.onMouseDown = function (a) {
    this._notify(a === this._arrowStart ? "onUp" : "onDown")
};
JSG.ui.scrollview.ScrollBar.prototype.onPageUp = function (a) {
    this._notify("onPageUp")
};
JSG.ui.scrollview.ScrollBar.prototype.onPageDown = function (a) {
    this._notify("onPageDown")
};
JSG.ui.scrollview.ScrollBar.prototype.onRangeChange = function (a) {
    this._range.layout(this)
};
JSG.namespace("JSG.ui.scrollview");
JSG.ui.scrollview.ScrollView = function (a) {
    JSG.ui.scrollview.ScrollView._super.constructor.apply(this, arguments);
    this._cs = a;
    this.getFormat().setFillColor(JSG.bkColorGraph);
    this._hScrollbar = this.add(new JSG.ui.scrollview.ScrollBar(!1));
    this._hScrollbar.addListener(this);
    this._vScrollbar = this.add(new JSG.ui.scrollview.ScrollBar(!0));
    this._vScrollbar.addListener(this);
    this._viewport = this.add(new JSG.ui.scrollview.ViewPort);
    this.setViewPanel(this._viewport.getViewPanel());
    this._vScrollbar.setRangeModel(this._viewport.getVerticalRangeModel());
    this._hScrollbar.setRangeModel(this._viewport.getHorizontalRangeModel());
    this._viewport.getVerticalRangeModel().addObserver(this);
    this._viewport.getHorizontalRangeModel().addObserver(this)
};
JSG.extend(JSG.ui.scrollview.ScrollView, JSG.ui.Widget);
JSG.ui.scrollview.ScrollView.prototype.translateFromViewPort = function (a) {
    return this._viewport.translateFromParent(a)
};
JSG.ui.scrollview.ScrollView.prototype.translateToViewPort = function (a) {
    return this._viewport.translateToParent(a)
};
JSG.ui.scrollview.ScrollView.prototype.getViewPanel = function () {
    return this._viewport.getViewPanel()
};
JSG.ui.scrollview.ScrollView.prototype.setViewPanel = function (a) {
    this._viewport.setViewPanel(a)
};
JSG.ui.scrollview.ScrollView.prototype.getViewPort = function () {
    return this._viewport
};
JSG.ui.scrollview.ScrollView.prototype.invalidate = function () {
    this.setValid(!1)
};
JSG.ui.scrollview.ScrollView.prototype.revalidate = function () {
    this.invalidate();
    this.validate()
};
JSG.ui.scrollview.ScrollView.prototype.validate = function () {
    JSG.ui.scrollview.ScrollView._super.validate.call(this);
    this.layout()
};
JSG.ui.scrollview.ScrollView.prototype.layout = function (a) {
    a = a ? JSG.rectCache.get().setTo(a) : this.getClientArea(JSG.rectCache.get());
    var b = JSG.rectCache.get().setTo(a), c = this._cs ? this._cs.metricToLogYNoZoom(JSG.ui.scrollview.ScrollBar.SIZE) : JSG.ui.scrollview.ScrollBar.SIZE;
    b.width -= c;
    b.height -= c;
    this._viewport.layout();
    var d = this._viewport.getPreferredBounds(b, JSG.rectCache.get()), e = d.width > a.width || d.x < a.x, f = d.height > a.height || d.y < a.y, e = e || f && d.width > b.width, f = f || e && d.height > b.height;
    this._hScrollbar.setVisible(e);
    this._vScrollbar.setVisible(f);
    e = JSG.rectCache.get();
    this._hScrollbar.isVisible() && (a.height -= c);
    this._vScrollbar.isVisible() && (a.width -= c);
    this._viewport.setBoundsTo(a);
    this._viewport.layout();
    this._hScrollbar.isVisible() && (e.setTo(a), e.y += a.height, e.height = c, this._hScrollbar.setBoundsTo(e), this._hScrollbar.layout());
    this._vScrollbar.isVisible() && (e.setTo(a), e.x += a.width, e.width = c, this._vScrollbar.setBoundsTo(e), this._vScrollbar.layout());
    JSG.rectCache.release(a, b, d, e)
};
JSG.ui.scrollview.ScrollView.prototype.setScrollBarsMode = function (a) {
    var b = arguments, c = 0 === b.length ? JSG.ui.scrollview.ScrollBar.Mode.AUTO : b[0], b = 2 === b.length ? b[1] : c;
    this._hScrollbar.setMode(c);
    this._vScrollbar.setMode(b)
};
JSG.ui.scrollview.ScrollView.prototype.isScrollBarEvent = function (a) {
    a = a.location.copy();
    this.translateFromParent(a);
    return this.hitsScrollBar(a)
};
JSG.ui.scrollview.ScrollView.prototype.hitsScrollBar = function (a, b) {
    return !0 === b ? this._hitsScrollBar(this._vScrollbar, a) : !1 === b ? this._hitsScrollBar(this._hScrollbar, a) : this._hitsScrollBar(this._hScrollbar, a) || this._hitsScrollBar(this._vScrollbar, a)
};
JSG.ui.scrollview.ScrollView.prototype._hitsScrollBar = function (a, b) {
    return a.isVisible() && a.getBounds().contains(b.x, b.y)
};
JSG.ui.scrollview.ScrollView.prototype.getScrollPosition = function (a) {
    a = a || new JSG.geometry.Point;
    a.x = this._hScrollbar.getRangeModel().getValue();
    a.y = this._vScrollbar.getRangeModel().getValue();
    return a
};
JSG.ui.scrollview.ScrollView.prototype.setScrollPositionTo = function (a) {
    this.setScrollPosition(a.x, a.y)
};
JSG.ui.scrollview.ScrollView.prototype.setScrollPosition = function (a, b) {
    this.setRangeValue(this._hScrollbar.getRangeModel(), a);
    this.setRangeValue(this._vScrollbar.getRangeModel(), b)
};
JSG.ui.scrollview.ScrollView.prototype.scroll = function (a, b) {
    var c, d;
    a && (d = this._hScrollbar.getRangeModel(), c = d.getValue() + a, this.setRangeValue(d, c));
    b && (d = this._vScrollbar.getRangeModel(), c = d.getValue() + b, this.setRangeValue(d, c))
};
JSG.ui.scrollview.ScrollView.prototype.onViewPanelResized = function (a) {
    this._hScrollbar.layout();
    this._vScrollbar.layout()
};
JSG.ui.scrollview.ScrollView.prototype.handleMouseEvent = function (a) {
    this.doHandleEvent(a) ? this.translateFromParent(a.location) : a.type = JSG.ui.events.MouseEventType.EXIT;
    this._hScrollbar.handleMouseEvent(a);
    this._vScrollbar.handleMouseEvent(a);
    a.type !== JSG.ui.events.MouseEventType.UP && a.type !== JSG.ui.events.MouseEventType.EXIT || !this._hScrollbar.isDragThumbFinished() && !this._vScrollbar.isDragThumbFinished() || this._viewport.revalidate()
};
JSG.ui.scrollview.ScrollView.prototype.handleDragEvent = function (a) {
    if (this._parent.isVisible())return this.doHandleEvent(a) && this.translateFromParent(a.location), JSG.ui.scrollview.ScrollView._super.handleDragEvent.call(this, a)
};
JSG.ui.scrollview.ScrollView.prototype.doHandleEvent = function (a) {
    return this._bounds.contains(a.location.x, a.location.y)
};
JSG.ui.scrollview.ScrollView.prototype.onThumbDrag = function (a, b, c) {
    this.setRangeValue(a.getRangeModel(), b)
};
JSG.ui.scrollview.ScrollView.prototype.onUp = function (a) {
    a = a.getRangeModel();
    this.setRangeValue(a, this._stepUp(a))
};
JSG.ui.scrollview.ScrollView.prototype._stepUp = function (a) {
    return a.getValue() - this._pageDelta(a) / 10
};
JSG.ui.scrollview.ScrollView.prototype.onDown = function (a) {
    a = a.getRangeModel();
    this.setRangeValue(a, this._stepDown(a))
};
JSG.ui.scrollview.ScrollView.prototype._stepDown = function (a) {
    return a.getValue() + this._pageDelta(a) / 10
};
JSG.ui.scrollview.ScrollView.prototype.onPageUp = function (a) {
    a = a.getRangeModel();
    this.setRangeValue(a, a.getValue() - this._pageDelta(a))
};
JSG.ui.scrollview.ScrollView.prototype.onPageDown = function (a) {
    a = a.getRangeModel();
    this.setRangeValue(a, a.getValue() + this._pageDelta(a))
};
JSG.ui.scrollview.ScrollView.prototype._pageDelta = function (a) {
    return 0.8 * a.getExtent()
};
JSG.ui.scrollview.ScrollView.prototype.setRangeValue = function (a, b) {
    a.setValue(b)
};
JSG.ui.scrollview.ScrollView.prototype.onRangeChange = function (a, b) {
};
JSG.namespace("JSG.ui");
JSG.ui.GraphViewPanel = function (a) {
    JSG.ui.GraphViewPanel._super.constructor.call(this);
    this._viewer = a
};
JSG.extend(JSG.ui.GraphViewPanel, JSG.ui.scrollview.ViewPanel);
JSG.ui.GraphViewPanel.prototype.layout = function () {
    var a = this._view;
    a && (a.layout(), a = this._getViewBounds(a, JSG.rectCache.get()), this.setBoundsTo(a), JSG.rectCache.release(a), this._repaint())
};
JSG.ui.GraphViewPanel.prototype._repaint = function () {
    var a = this._viewer && this._viewer.getGraphicSystem ? this._viewer.getGraphicSystem() : void 0;
    a && a.paint()
};
JSG.ui.GraphViewPanel.prototype.getPreferredBounds = function (a, b) {
    var c = this._view, d = b || new JSG.geometry.Rectangle(0, 0, 0, 0);
    c && (this._getViewBounds(c, d), c = c.getItem().getSettings()) && (c.getPage(), d.x -= 500, d.y -= 500, d.width += 1E3, d.height += 1E3);
    return d
};
JSG.ui.GraphViewPanel.prototype._getViewBounds = function (a, b) {
    var c = a.getItem(), d = a.getBoundingBox(JSG.boxCache.get()), e = d.toRectangle(b), f = c.getSettings();
    if (f) {
        var g = f.getPage();
        if (f.getDisplayMode() === JSG.ui.graphics.DisplayMode.PAGE) {
            var f = e.x / g.getUsableWidth(), k = e.y / g.getUsableHeight();
            e.x = f * (g.getWidth() + g.getHorizontalGap());
            e.y = k * (g.getHeight() + g.getVerticalGap());
            e.width = (g.getWidth() + g.getHorizontalGap()) * c.getHorizontalPages() - g.getHorizontalGap();
            e.height = (g.getHeight() + g.getVerticalGap()) *
            c.getVerticalPages() - g.getVerticalGap()
        }
    }
    JSG.boxCache.release(d);
    return e
};
JSG.namespace("JSG.ui");
JSG.ui.ScrollPanel = function (a) {
    JSG.ui.ScrollPanel._super.constructor.call(this, a.getCoordinateSystem());
    this._viewer = a;
    this.getFormat().setFillColor(JSG.bkColorHeader);
    this._hScale = this.add(new JSG.ui.Scale(!1, a));
    this._vScale = this.add(new JSG.ui.Scale(!0, a));
    this._viewport.getVerticalRangeModel().addObserver(this._vScale);
    this._viewport.getHorizontalRangeModel().addObserver(this._hScale);
    this.setScrollBarsMode(JSG.ui.scrollview.ScrollBar.Mode.VISIBLE)
};
JSG.extend(JSG.ui.ScrollPanel, JSG.ui.scrollview.ScrollView);
JSG.ui.ScrollPanel.SCROLL_NOTIFICATION = "scrollpanel.scroll.notification";
JSG.ui.ScrollPanel.prototype.getVisibleGraphRect = function (a) {
    return this.getViewPort().getVisibleViewRect(a)
};
JSG.ui.ScrollPanel.prototype.layout = function () {
    var a = this.getClientArea(JSG.rectCache.get()), b = JSG.rectCache.get().setTo(a), c = JSG.rectCache.get().setTo(a);
    this._hScale.isVisible() && (a.y += this._hScale.getHeight(), a.height -= this._hScale.getHeight(), b.y = 0, b.height = this._hScale.getHeight(), c.y += b.height, c.height -= b.height);
    this._vScale.isVisible() && (a.x += this._vScale.getWidth(), a.width -= this._vScale.getWidth(), c.x = 0, c.width = this._vScale.getWidth(), b.x += c.width, b.width -= c.width);
    this._hScale.setBoundsTo(b);
    this._vScale.setBoundsTo(c);
    JSG.ui.ScrollPanel._super.layout.call(this, a);
    JSG.rectCache.release(a, b, c)
};
JSG.ui.ScrollPanel.prototype.getHorizontalScrollBar = function () {
    return this._hScrollbar
};
JSG.ui.ScrollPanel.prototype.getVerticalScrollBar = function () {
    return this._vScrollbar
};
JSG.ui.ScrollPanel.prototype.showScale = function (a) {
    this._hScale.setVisible(a);
    this._vScale.setVisible(a);
    this.layout()
};
JSG.ui.ScrollPanel.prototype.doHandleEvent = function (a) {
    return a instanceof JSG.ui.events.MouseEvent || JSG.ui.ScrollPanel._super.doHandleEvent.call(this, a)
};
JSG.ui.ScrollPanel.prototype.onRangeChange = function (a, b) {
    JSG.ui.ScrollPanel._super.onRangeChange.call(this, a, b);
    b === JSG.ui.scrollview.RangeModel.CHANGED_VALUE && JSG.graph.notifications.NotificationCenter.getInstance().send(new JSG.graph.notifications.Notification(JSG.ui.ScrollPanel.SCROLL_NOTIFICATION, this))
};
JSG.ui.ScrollPanel.prototype.onThumbDrag = function (a, b, c) {
    JSG.ui.ScrollPanel._super.setRangeValue.call(this, a.getRangeModel(), b)
};
JSG.ui.ScrollPanel.prototype.setRangeValue = function (a, b) {
    b < a.getMin() ? a.setRange(b, a.getMax()) : b + a.getExtent() > a.getMax() && a.setRange(a.getMin(), b + a.getExtent());
    JSG.ui.ScrollPanel._super.setRangeValue.call(this, a, b)
};
JSG.namespace("JSG.graph.model");
JSG.graph.model.ContentNode = function (a) {
    JSG.graph.model.ContentNode._super.constructor.call(this, a || new JSG.graph.model.shapes.RectangleShape);
    this._pin.setLocalCoordinate(new JSG.graph.expr.NumberExpression(0, "WIDTH * 0.5"), new JSG.graph.expr.NumberExpression(0, "HEIGHT * 0.5"));
    this._contentPane = void 0;
    this.setContentPane(new JSG.graph.model.ContentNode.ContentPane);
    this._changed = !1
};
JSG.extend(JSG.graph.model.ContentNode, JSG.graph.model.Node);
JSG.graph.model.ContentNode.prototype.newInstance = function () {
    var a = new JSG.graph.model.ContentNode;
    a.setContentPane(void 0);
    return a
};
JSG.graph.model.ContentNode.prototype._copy = function (a, b, c) {
    a = JSG.graph.model.ContentNode._super._copy.call(this, a, b, c);
    a._contentPane = a.getItemAt(0);
    return a
};
JSG.graph.model.ContentNode.prototype.saveXMLContent = function (a, b) {
    JSG.graph.model.ContentNode._super.saveXMLContent.call(this, a, b);
    a.writeAttributeString("type", "contentnode")
};
JSG.graph.model.ContentNode.prototype._saveSubItemsXML = function (a) {
    (function (b) {
        a.writeStartElement("scrollposition");
        a.writeAttributeString("x", b.x);
        a.writeAttributeString("y", b.y);
        a.writeEndElement()
    })(this._contentPane.getPinPoint());
    (function (b) {
        var c;
        for (c = 0; c < b.length; c++)b[c].saveXML(a)
    })(this._contentPane.getItems())
};
JSG.graph.model.ContentNode.prototype.readXML = function (a) {
    JSG.graph.model.ContentNode._super.readXML.call(this, a);
    this._contentPane.setPinPointTo(function () {
        var b = new JSG.geometry.Point(0, 0), c = JSG.commons.XML.findElementByTagName(a, "scrollposition");
        if (void 0 !== c) {
            var d = c.getAttribute("x"), c = c.getAttribute("y"), d = null !== d ? Number(d) : 0, c = null !== c ? Number(c) : 0;
            b.set(d, c)
        }
        return b
    }());
    this._changed = !0
};
JSG.graph.model.ContentNode.prototype.getContentPane = function () {
    return this._contentPane
};
JSG.graph.model.ContentNode.prototype.setContentPane = function (a) {
    void 0 !== this._contentPane && JSG.graph.model.ContentNode._super.removeItem.call(this, this._contentPane);
    this._contentPane = a;
    void 0 !== this._contentPane && JSG.graph.model.ContentNode._super.addItem.call(this, this._contentPane)
};
JSG.graph.model.ContentNode.prototype.addItem = function (a, b) {
    var c = a.getOrigin();
    this._contentPane.translateFromParent(c);
    a.setOriginTo(c);
    return this._contentPane.addItem(a, b)
};
JSG.graph.model.ContentNode.prototype.removeItem = function (a) {
    this._contentPane.removeItem(a)
};
JSG.graph.model.ContentNode.prototype._doRefresh = function (a) {
    JSG.graph.model.ContentNode._super._doRefresh.call(this, a);
    void 0 !== this._contentPane && this._contentPane.refresh(a);
    this._changed = !1
};
JSG.graph.model.ContentNode.prototype._update = function () {
    return JSG.graph.model.ContentNode._super._update.call(this) || this._changed
};
JSG.graph.model.ContentNode.prototype.evaluate = function () {
    JSG.graph.model.ContentNode._super.evaluate.call(this);
    void 0 !== this._contentPane && this._contentPane.evaluate()
};
JSG.graph.model.ContentNode.prototype.isAddLabelAllowed = function () {
    return !1
};
JSG.graph.model.ContentNode.prototype.getPortById = function (a) {
    var b = JSG.graph.model.ContentNode._super.getPortById.call(this, a);
    return void 0 !== b ? b : this._contentPane.getPortById(a)
};
JSG.graph.model.ContentNode.prototype.getTotalBoundingRect = function (a, b) {
    return this.getTranslatedBoundingBox(void 0 !== a ? a : this).getBoundingRectangle(b)
};
JSG.graph.model.ContentNode.ContentPane = function () {
    JSG.graph.model.ContentNode.ContentPane._super.constructor.call(this, new JSG.graph.model.shapes.RectangleShape);
    this.setSize(0, 0);
    var a = this.getPin(), b = JSG.graph.expr.NumberExpression;
    a.setCoordinate(new b(0), new b(0));
    a.setLocalCoordinate(new b(0), new b(0))
};
JSG.extend(JSG.graph.model.ContentNode.ContentPane, JSG.graph.model.GraphItem);
JSG.graph.model.ContentNode.ContentPane.prototype.newInstance = function () {
    return new JSG.graph.model.ContentNode.ContentPane
};
JSG.graph.model.ContentNode.ContentPane.prototype.setBoundingBoxTo = function (a) {
    this.getBoundingBox().isEqualTo(a, 1) || (this._bounds.width = a.getWidth(), this._bounds.height = a.getHeight())
};
JSG.graph.model.ContentNode.ContentPane.prototype.layoutAll = function (a) {
};
JSG.graph.model.ContentNode.ContentPane.prototype.isAddLabelAllowed = function () {
    return !1
};
JSG.graph.model.ContentNode.ContentPane.prototype.isSelectable = function () {
    return !1
};
JSG.graph.model.ContentNode.ContentPane.prototype.getPortById = function (a) {
    var b, c;
    for (c = this._subItems.length - 1; 0 <= c; c--) {
        var d = this._subItems[c];
        if (d instanceof JSG.graph.model.Node && (b = d.getPortById(a), void 0 !== b))break
    }
    return b
};
JSG.namespace("JSG.graph.view");
JSG.graph.view.ContentNodeView = function (a, b) {
    JSG.graph.view.ContentNodeView._super.constructor.call(this, a);
    this._scrollview = JSG.graph.view.ContentNodeView._super.addView.call(this, new JSG.ui.scrollview.ScrollView(b));
    this._viewpanel = new JSG.graph.view.ContentNodeViewPanel(this);
    this._scrollview.setViewPanel(this._viewpanel);
    this._scrollview.getViewPort().getViewPanelBounds = function (a) {
        var b = this._viewpanel.getPreferredBounds();
        a = JSG.rectCache.get().set(a.x - this._vpOffset.x, a.y - this._vpOffset.y, a.width,
            a.height);
        b.union(a);
        JSG.rectCache.release(a);
        return b
    }
};
JSG.extend(JSG.graph.view.ContentNodeView, JSG.graph.view.NodeView);
JSG.graph.view.ContentNodeView.prototype.setViewPanel = function (a) {
    this._viewpanel = a;
    this._scrollview.setViewPanel(a)
};
JSG.graph.view.ContentNodeView.prototype.getViewPanel = function () {
    return this._viewpanel
};
JSG.graph.view.ContentNodeView.prototype.getContentPane = function () {
    return this._viewpanel.getView()
};
JSG.graph.view.ContentNodeView.prototype.init = function () {
    var a = this._viewpanel.getView().getItem().getPinPoint(JSG.ptCache.get());
    this._scrollview.setScrollPosition(-a.x, -a.y);
    JSG.ptCache.release(a)
};
JSG.graph.view.ContentNodeView.prototype.setContentPaneView = function (a) {
    void 0 !== a && this._viewpanel.setView(a)
};
JSG.graph.view.ContentNodeView.prototype.getScrollView = function () {
    return this._scrollview
};
JSG.graph.view.ContentNodeView.prototype.getViewPort = function () {
    return this._scrollview.getViewPort()
};
JSG.graph.view.ContentNodeView.prototype.getScrollOffset = function () {
    return this._scrollview ? this.getViewPort().getViewPanelOffset().copy() : new JSG.geometry.Point(0, 0)
};
JSG.graph.view.ContentNodeView.prototype.addView = function (a, b) {
    this._viewpanel._addView(a, b);
    return a
};
JSG.graph.view.ContentNodeView.prototype.removeView = function (a) {
    this._viewpanel._removeView(a);
    return a
};
JSG.graph.view.ContentNodeView.prototype.removeAllViews = function () {
    this._viewpanel._removeAllViews()
};
JSG.graph.view.ContentNodeView.prototype.invalidate = function () {
};
JSG.graph.view.ContentNodeView.prototype.layout = function () {
    var a = JSG.boxCache.get(), b = this.getBoundingBox(a).toRectangle(JSG.rectCache.get());
    JSG.boxCache.release(a);
    b.x = 0;
    b.y = 0;
    this._scrollview.setBoundsTo(b);
    this._scrollview.layout();
    JSG.rectCache.release(b)
};
JSG.graph.view.ContentNodeView.prototype.doHandleEventAt = function (a, b) {
    if (this.getItem().isVisible())return this._scrollview.hitsScrollBar(a)
};
JSG.graph.view.ContentNodeView.prototype.handleMouseEvent = function (a) {
    this.getItem().isVisible() && (this._scrollview.handleMouseEvent(a), a.isConsumed && this.getItem().getGraph().markDirty())
};
JSG.graph.view.ContentNodeViewPanel = function (a) {
    JSG.graph.view.ContentNodeViewPanel._super.constructor.apply(this, arguments);
    this.getFormat().setFillColor(JSG.bkColorGraph);
    this.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID);
    this._contentView = a
};
JSG.extend(JSG.graph.view.ContentNodeViewPanel, JSG.ui.scrollview.ViewPanel);
JSG.graph.view.ContentNodeViewPanel.prototype._addView = function (a, b) {
    return this.getView().addView(a, b)
};
JSG.graph.view.ContentNodeViewPanel.prototype._removeView = function (a) {
    return this.getView().removeView(a)
};
JSG.graph.view.ContentNodeViewPanel.prototype._removeAllViews = function () {
    this.getView().removeAllViews()
};
JSG.graph.view.ContentNodeViewPanel.prototype.getGraphView = function () {
    return this._contentView.getGraphView()
};
JSG.graph.view.ContentNodeViewPanel.prototype.getContentView = function () {
    return this._contentView
};
JSG.graph.view.ContentNodeViewPanel.prototype._setSize = function (a, b) {
    this._bounds.width = a;
    this._bounds.height = b
};
JSG.graph.view.ContentNodeViewPanel.prototype.translateFromParent = function (a) {
    return a
};
JSG.graph.view.ContentNodeViewPanel.prototype.translateToParent = function (a) {
    return a
};
JSG.graph.view.ContentPaneView = function (a) {
    JSG.graph.view.ContentPaneView._super.constructor.apply(this, arguments);
    a.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    a.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.NONE);
    this._bboxListener = new JSG.graph.view.ContentPaneView.BBoxListener(this)
};
JSG.extend(JSG.graph.view.ContentPaneView, JSG.graph.view.GraphItemView);
JSG.graph.view.ContentPaneView.prototype.addView = function (a, b) {
    a = JSG.graph.view.ContentPaneView._super.addView.call(this, a, b);
    this._bboxListener.registerTo(a.getItem());
    this.revalidate();
    return a
};
JSG.graph.view.ContentPaneView.prototype.removeView = function (a) {
    this._bboxListener.deregisterFrom(a.getItem());
    a = JSG.graph.view.ContentPaneView._super.removeView.call(this, a);
    !0 === a && this.revalidate();
    return a
};
JSG.graph.view.ContentPaneView.prototype.removeAllViews = function () {
    var a = this._subviews, b;
    for (b = 0; b < a.length; b++)this._bboxListener.deregisterFrom(a[b].getItem());
    JSG.graph.view.ContentPaneView._super.removeAllViews.call(this);
    this.revalidate()
};
JSG.graph.view.ContentPaneView.prototype.getGraphView = function () {
    return this.getParent().getGraphView()
};
JSG.graph.view.ContentPaneView.prototype.getPreferredBounds = function (a, b) {
    var c = b || new JSG.geometry.Rectangle(0, 0, 0, 0);
    if (this.hasSubviews()) {
        var d = JSG.rectCache.get(), e = this.getSubviews(), f, g;
        for (f = 0; f < e.length; f++)g = e[f], g.layout(), c.union(g.getItem().getTotalBoundingRect(void 0, d));
        JSG.rectCache.release(d)
    }
    return c
};
JSG.graph.view.ContentPaneView.prototype.translateToParent = function (a) {
    return a
};
JSG.graph.view.ContentPaneView.prototype.translateFromParent = function (a) {
    return a
};
JSG.graph.view.ContentPaneView.prototype.translateGraphics = function (a) {
};
JSG.graph.view.ContentPaneView.prototype.drawClientArea = function (a) {
    this.drawSubViews(a)
};
JSG.graph.view.ContentPaneView.prototype.onResize = function (a) {
    this.revalidate()
};
JSG.graph.view.ContentPaneView.BBoxListener = function (a) {
    this._cpview = a
};
JSG.graph.view.ContentPaneView.BBoxListener.prototype.registerTo = function (a) {
    a.addEventListener(JSG.graph.model.events.Event.BBOX, this);
    a.addEventListener(JSG.graph.model.events.Event.ANGLE, this);
    a.addEventListener(JSG.graph.model.events.Event.PIN, this);
    a.addEventListener(JSG.graph.model.events.Event.SIZE, this);
    a.addEventListener(JSG.graph.model.events.Event.COLLAPSEDSIZE, this)
};
JSG.graph.view.ContentPaneView.BBoxListener.prototype.deregisterFrom = function (a) {
    a.removeEventListener(JSG.graph.model.events.Event.BBOX, this);
    a.removeEventListener(JSG.graph.model.events.Event.ANGLE, this);
    a.removeEventListener(JSG.graph.model.events.Event.PIN, this);
    a.removeEventListener(JSG.graph.model.events.Event.SIZE, this);
    a.removeEventListener(JSG.graph.model.events.Event.COLLAPSEDSIZE, this)
};
JSG.graph.view.ContentPaneView.BBoxListener.prototype.handlePreEvent = function (a) {
};
JSG.graph.view.ContentPaneView.BBoxListener.prototype.handlePostEvent = function (a) {
    this._cpview.revalidate()
};
JSG.namespace("JSG.graph.controller");
JSG.graph.controller.ContentNodeController = function (a, b) {
    JSG.graph.controller.ContentNodeController._super.constructor.apply(this, arguments);
    this._viewer = b;
    this._contentPaneController = void 0
};
JSG.extend(JSG.graph.controller.ContentNodeController, JSG.graph.controller.NodeController);
JSG.graph.controller.ContentNodeController.prototype.isSelectable = function () {
    return this.getModel().isVisible()
};
JSG.graph.controller.ContentNodeController.prototype.createView = function (a) {
    return JSG.graph.view.worksheet && JSG.graph.view.worksheet.WorksheetView && a instanceof JSG.graph.model.worksheet.WorksheetNode ? new JSG.graph.view.worksheet.WorksheetView(a) : new JSG.graph.view.ContentNodeView(a, this._viewer.getCoordinateSystem())
};
JSG.graph.controller.ContentNodeController.prototype.activate = function () {
    JSG.graph.controller.ContentNodeController._super.activate.call(this);
    var a = this.getModel().getContentPane();
    this._setContentPaneController(new JSG.graph.controller.ContentPaneController(a));
    this.getView().layout();
    JSG.graph.notifications.NotificationCenter.getInstance().register(this, JSG.ui.GraphEditor.ZOOM_NOTIFICATION, "onZoom")
};
JSG.graph.controller.ContentNodeController.prototype.deactivate = function () {
    JSG.graph.controller.ContentNodeController._super.deactivate.call(this);
    JSG.graph.notifications.NotificationCenter.getInstance().unregister(this, JSG.ui.GraphEditor.ZOOM_NOTIFICATION)
};
JSG.graph.controller.ContentNodeController.prototype.onZoom = function (a) {
    this.getView().layout()
};
JSG.graph.controller.ContentNodeController.prototype._setContentPaneController = function (a) {
    void 0 !== this._contentPaneController && this.removeChild(this._contentPaneController);
    this._contentPaneController = a;
    this.addChild(this._contentPaneController)
};
JSG.graph.controller.ContentNodeController.prototype.getContentPaneController = function () {
    return this._contentPaneController
};
JSG.graph.controller.ContentNodeController.prototype.refresh = function () {
    void 0 !== this._contentPaneController && this._contentPaneController.refresh()
};
JSG.graph.controller.ContentNodeController.prototype.addChildView = function (a, b) {
    this.getView().setContentPaneView(a.getView())
};
JSG.graph.controller.ContentNodeController.prototype.onMouseDown = function (a, b, c) {
    var d = this.getView();
    return d.doHandleEventAt(a, c) ? !0 : d.onMouseDown(a, b, c)
};
JSG.graph.controller.ContentNodeController.prototype.handlePostEvent = function (a) {
    JSG.graph.controller.ContentNodeController._super.handlePostEvent.call(this, a);
    var b = this.getView();
    if (b instanceof JSG.graph.view.ContentNodeView) {
        var c = JSG.graph.model.events.Event;
        switch (a.id) {
            case c.ALL:
                b.init();
            case c.BBOX:
            case c.SIZE:
                b.layout()
        }
    }
};
JSG.graph.controller.ContentNodeController.prototype.getModelController = function (a) {
    var b = JSG.graph.controller.ContentNodeController._super.getModelController.call(this, a);
    void 0 === b && (b = void 0 !== this._contentPaneController ? this._contentPaneController.getModelController(a) : void 0);
    return b
};
JSG.graph.controller.ContentNodeController.prototype.findControllerByConditionAndLocation = function (a, b) {
    if (this._isVisible(a))return JSG.graph.controller.ContentNodeController._super.findControllerByConditionAndLocation.call(this, a, b)
};
JSG.graph.controller.ContentNodeController.prototype.findControllerByConditionAndBox = function (a, b) {
    return JSG.graph.controller.ContentNodeController._super.findControllerByConditionAndBox.call(this, a, b)
};
JSG.graph.controller.ContentNodeController.prototype.getControllerAt = function (a, b, c) {
    if (this._isVisible(a))return JSG.graph.controller.ContentNodeController._super.getControllerAt.call(this, a, b, c)
};
JSG.graph.controller.ContentNodeController.prototype._getSubControllerAt = function (a, b, c) {
    if (this._isVisible(a))return JSG.graph.controller.ContentNodeController._super._getSubControllerAt.call(this, a, b, c)
};
JSG.graph.controller.ContentNodeController.prototype._isVisible = function (a) {
    return this.getView().containsPoint(a)
};
JSG.graph.controller.ContentNodeController.prototype._stopLookUp = function (a) {
    a = a.copy();
    this.getView().translateFromParent(a);
    return this.getView().doHandleEventAt(a)
};
JSG.graph.controller.ContentNodeController.prototype._isSelectableInParent = function (a) {
    var b = JSG.graph.controller.ContentNodeController._super._isSelectableInParent.call(this, a);
    if (!0 === b) {
        var c = this.getModel().getParent(), b = this.getModel().getBoundingBox();
        a = a.getModel().getTranslatedBoundingBox(c);
        return b.doesIntersectWith(a)
    }
    return b
};
JSG.graph.controller.ContentPaneController = function (a) {
    JSG.graph.controller.ContentNodeController._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.controller.ContentPaneController, JSG.graph.controller.GraphItemController);
JSG.graph.controller.ContentPaneController.prototype.createFeedback = function () {
    return this.getParent().createFeedback()
};
JSG.graph.controller.ContentPaneController.prototype.isSelectable = function () {
    return !1
};
JSG.graph.controller.ContentPaneController.prototype.createView = function (a) {
    return new JSG.graph.view.ContentPaneView(a)
};
JSG.graph.controller.ContentPaneController.prototype.handlePostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.BBOX:
        case b.SIZE:
            void 0 !== this.getModel().getGraph() && this.getModel().getGraph().markDirty();
            this.getView()._fireOnResize();
            break;
        default:
            JSG.graph.controller.ContentPaneController._super.handlePostEvent.call(this, a)
    }
};
JSG.namespace("JSG.graph.interaction");
JSG.graph.interaction.ViewInteraction = function (a) {
    JSG.graph.interaction.ViewInteraction._super.constructor.apply(this, arguments);
    this._view = a
};
JSG.extend(JSG.graph.interaction.ViewInteraction, JSG.graph.interaction.Interaction);
JSG.graph.interaction.ViewInteraction.prototype.deactivate = function (a) {
    this._view = void 0;
    JSG.graph.interaction.ViewInteraction._super.deactivate.call(this, a)
};
JSG.graph.interaction.ViewInteraction.prototype.setCurrentLocation = function (a) {
    function b(b) {
        b.translateFromParent(a)
    }

    this._view && (JSG.graph.Utils.traverseDown(this._view.getGraphView(), this._view, b), JSG.graph.interaction.ViewInteraction._super.setCurrentLocation.call(this, a))
};
JSG.graph.interaction.ViewInteraction.prototype.onMouseDown = function (a, b) {
    if (this._view && this._view.onMouseDown)this._view.onMouseDown(this.currentLocation, b, a); else this._notifyMouseEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype.onMouseDrag = function (a, b) {
    this._notifyMouseEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype.onMouseUp = function (a, b) {
    this._notifyMouseEvent(a);
    this.finishInteraction(a, b)
};
JSG.graph.interaction.ViewInteraction.prototype.onMouseExit = function (a, b) {
    a.doRepaint = !0;
    this.cancelInteraction(a, b)
};
JSG.graph.interaction.ViewInteraction.prototype.onMouseDoubleClick = function (a, b) {
    this._notifyMouseEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype.onMouseMove = function (a, b) {
    this._notifyMouseEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype.onMouseWheel = function (a, b) {
    this._notifyMouseEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype._notifyMouseEvent = function (a) {
    this._view && (a.location.setTo(this.currentLocation), this._view.handleMouseEvent(a))
};
JSG.graph.interaction.ViewInteraction.prototype.onDragEnter = function (a, b) {
    this._notifyDragEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype.onDragExit = function (a, b) {
    this._notifyDragEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype.onDragLeave = function (a, b) {
    this._notifyDragEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype.onDragOver = function (a, b) {
    this._notifyDragEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype.onDrop = function (a, b) {
    this._notifyDragEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype._notifyDragEvent = function (a) {
    this._view && (a.location.setTo(this.currentLocation), this._view.handleDragEvent(a))
};
JSG.graph.interaction.ViewInteraction.prototype.onKeyDown = function (a, b) {
    this._notifyKeyEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype.onKeyUp = function (a, b) {
    this._notifyKeyEvent(a)
};
JSG.graph.interaction.ViewInteraction.prototype._notifyKeyEvent = function (a) {
    this._view && (a.location.setTo(this.currentLocation), this._view.handleKeyEvent(a))
};
JSG.graph.interaction.ViewInteraction.Activator = function () {
    JSG.graph.interaction.ViewInteraction.Activator._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.graph.interaction.ViewInteraction.Activator, JSG.graph.interaction.InteractionActivator);
JSG.graph.interaction.ViewInteraction.Activator.KEY = "view.activator";
JSG.graph.interaction.ViewInteraction.Activator.prototype.getKey = function () {
    return JSG.graph.interaction.ViewInteraction.Activator.KEY
};
JSG.graph.interaction.ViewInteraction.Activator.prototype.onMouseDown = function (a, b, c) {
    var d = this._getController(a, b, c);
    d && (b.clearSelection(), d = d.getView(), c = this.activateInteraction(new JSG.graph.interaction.ViewInteraction(d), c), d instanceof JSG.graph.view.ContentNodeView ? c._notifyMouseEvent(a) : (c.setCurrentLocation(b.translateFromParent(a.location.copy())), c.onMouseDown(a, b)), a.hasActivated = !0)
};
JSG.graph.interaction.ViewInteraction.Activator.prototype.onMouseDoubleClick = function (a, b, c) {
    a.isConsumed || (b = this._getController(a, b, c), a.isConsumed = !!b)
};
JSG.graph.interaction.ViewInteraction.Activator.prototype._getController = function (a, b, c) {
    var d = JSG.ptCache.get().setTo(a.location);
    c = c.getControllerAt(a.location);
    c = this._getControllerHandlingEvent(a, b.translateFromParent(d), c);
    JSG.ptCache.release(d);
    return c
};
JSG.graph.interaction.ViewInteraction.Activator.prototype._getControllerHandlingEvent = function (a, b, c) {
    var d;
    return c && (d = c.getParent(), d = d instanceof JSG.graph.controller.GraphController ? void 0 : this._getControllerHandlingEvent(a, b, d), !d) ? (d = c.getView(), d.translateFromParent(b), d.doHandleEventAt(b, a) ? c : void 0) : d
};
JSG.namespace("JSG.ui.shapelibrary");
JSG.ui.shapelibrary.ShapeLibrarySelectionView = function () {
    JSG.ui.shapelibrary.ShapeLibrarySelectionView._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.ui.shapelibrary.ShapeLibrarySelectionView, JSG.graph.view.selection.SelectionView);
JSG.ui.shapelibrary.ShapeLibrarySelectionView.prototype.draw = function (a) {
    this.isVisible() && void 0 !== this._selectionHandler && (a.getCoordinateSystem().metricToLogXNoZoom(JSG.graph.view.selection.SelectionView.MARKER_SIZE), this._selectionHandler.refresh(this._views, this._rotationAngle))
};
JSG.ui.shapelibrary.ShapeLibrarySelectionView.prototype.getHandleAt = function (a, b) {
};
JSG.namespace("JSG.ui.shapelibrary");
JSG.ui.shapelibrary.ShapeLibraryViewer = function (a) {
    JSG.ui.shapelibrary.ShapeLibraryViewer._super.constructor.call(this, a, this._createLibScrollView());
    this.setSelectionView(new JSG.ui.shapelibrary.ShapeLibrarySelectionView);
    this._initViewPanel(this.getScrollPanel().getViewPanel())
};
JSG.extend(JSG.ui.shapelibrary.ShapeLibraryViewer, JSG.ui.viewer.ScrollableViewer);
JSG.ui.shapelibrary.ShapeLibraryViewer.prototype._createLibScrollView = function () {
    var a = new JSG.ui.scrollview.ScrollView;
    a.doHandleEvent = function (a) {
        return a instanceof JSG.ui.events.MouseEvent || JSG.ui.ScrollPanel._super._doHandleEvent.call(this, a)
    };
    a.setScrollBarsMode(JSG.ui.scrollview.ScrollBar.Mode.HIDDEN, JSG.ui.scrollview.ScrollBar.Mode.AUTO);
    return a
};
JSG.ui.shapelibrary.ShapeLibraryViewer.prototype._initViewPanel = function (a) {
    a.getPreferredBounds = function (a, c) {
        var d = this._view, e = c || new JSG.geometry.Rectangle(0, 0, 0, 0);
        d && d.getItem().getTotalBoundingRect(void 0, e);
        return e
    }
};
JSG.ui.shapelibrary.ShapeLibraryViewer.prototype.addInteractionFeedback = function (a) {
    a instanceof JSG.graph.view.SelectionFeedbackView && (a.feedbackInfoVisible = !1);
    JSG.ui.shapelibrary.ShapeLibraryViewer._super.addInteractionFeedback.call(this, a)
};
JSG.namespace("JSG.ui.shapelibrary");
JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction = function (a) {
    JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction, JSG.graph.interaction.GraphInteraction);
JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction.prototype.registerActivators = function () {
    this.addActivator(JSG.graph.interaction.DragDropActivator.KEY, new JSG.graph.interaction.DragDropActivator)
};
JSG.namespace("JSG.ui.shapelibrary");
JSG.ui.shapelibrary.ShapeLibraryEditor = function (a) {
    JSG.ui.shapelibrary.ShapeLibraryEditor._super.constructor.apply(this, arguments);
    var b = JSG.graph.model.settings.ViewMode;
    this.registerInteractionForMode(b.DEFAULT, new JSG.ui.shapelibrary.ShapeLibraryDefaultInteraction);
    this.registerInteractionForMode(b.READ_ONLY, void 0);
    this.activateViewMode(b.DEFAULT)
};
JSG.extend(JSG.ui.shapelibrary.ShapeLibraryEditor, JSG.ui.GraphEditor);
JSG.ui.shapelibrary.ShapeLibraryEditor.prototype.createViewer = function (a) {
    a = new JSG.ui.shapelibrary.ShapeLibraryViewer(a);
    a.setControllerFactory(JSG.graph.controller.GraphControllerFactory.getInstance());
    return a
};
JSG.ui.shapelibrary.ShapeLibraryEditor.prototype.showScale = function (a) {
};
JSG.namespace("JSG.ui.shapelibrary");
JSG.ui.shapelibrary.ShapeLibrary = function (a, b, c) {
    this._graphEditor = new JSG.ui.shapelibrary.ShapeLibraryEditor(a);
    this._graphEditor.setGraph(new JSG.graph.model.Graph);
    this._graphEditor.getGraphViewer().getScrollPanel().getViewPort().getFormat().setFillColor(JSG.bkColorShapeLibrary);
    this.shapeWidth = 1400;
    this.shapeHeight = 1E3;
    this.categoryHeight = 600;
    this.margin = 200;
    a = this._graphEditor.getGraph();
    a.getSettings().setSnapToPort(JSG.graph.attr.consts.PortMode.NONE);
    a.getSettings().setAutoScroll(!1);
    a.getSettings().setGridVisible(!1);
    a.getSettings().setSnapToGrid(!1);
    a.getSettings().setSnapToShapes(!1);
    a.getSettings().setDisplayMode(JSG.ui.graphics.DisplayMode.ENDLESS);
    a.getFormat().setFillColor(JSG.bkColorShapeLibrary);
    this._graphEditor.setScrollPosition(0, 0);
    this.resize(b, c);
    this._graphEditor.getGraphViewer().getScrollPanel().getViewPanel().layout = function (a) {
        void 0 !== this._view && (this._view.layout(), a = this._view.getPreferredBounds(void 0, JSG.rectCache.get()), this.setBoundsTo(a), JSG.rectCache.release(a))
    }
};
JSG.ui.shapelibrary.ShapeLibrary.prototype.getInteractionActivator = function (a) {
    return this._graphEditor.getDefaultInteraction().getActivator(a)
};
JSG.ui.shapelibrary.ShapeLibrary.prototype.addCategory = function (a) {
    var b = this._graphEditor.getGraph(), c = new JSG.graph.model.Node(new JSG.graph.model.shapes.RectangleShape);
    b.addItem(c);
    c.setSize(this.shapeWidth, this.categoryHeight);
    c.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID);
    c.getFormat().setFillColor(JSG.bkColorShapeLibraryTitle);
    c.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    c.setItemAttribute(JSG.graph.attr.ItemAttributes.CONTAINER, !1);
    c.setItemAttribute(JSG.graph.attr.ItemAttributes.SELECTIONMODE, JSG.graph.attr.consts.SelectionMode.NONE);
    c.setType("ShapeCategory");
    a = c.addLabel(a);
    a.getTextFormat().setFontSize(8);
    a.getTextFormat().setFontColor(JSG.fontColorShapeLibraryTitle);
    a.getTextFormat().setHorizontalPosition(JSG.graph.attr.TextFormatAttributes.HorizontalTextPosition.LEFT)
};
JSG.ui.shapelibrary.ShapeLibrary.prototype.addShape = function (a, b, c, d) {
    var e = this._graphEditor.getGraph();
    d = new JSG.graph.model.Node(new JSG.graph.model.shapes.RectangleShape);
    e.addItem(d);
    d.setSize(this.shapeWidth, this.shapeHeight);
    d.getFormat().setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.PATTERN);
    d.getFormat().setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.NONE);
    d.getFormat().setPattern(c);
    d.getFormat().setPatternStyle(JSG.graph.attr.FormatAttributes.PatternStyle.CENTER);
    d.setItemAttribute(JSG.graph.attr.ItemAttributes.CONTAINER,
        !1);
    d.setType(a);
    a = d.addLabel(b);
    a.getTextFormat().setVerticalPosition(JSG.graph.attr.TextFormatAttributes.VerticalTextPosition.BELOWBOTTOM);
    a.getTextFormat().setFontColor(JSG.fontColorShapeLibrary);
    a.getTextFormat().setFontSize(7);
    return d
};
JSG.ui.shapelibrary.ShapeLibrary.prototype.resize = function (a, b) {
    this._graphEditor.resizeContent(a, b);
    this.layout(a, b)
};
JSG.ui.shapelibrary.ShapeLibrary.prototype.layout = function (a, b) {
    for (var c = this._graphEditor.getGraph(), d = JSG.ptCache.get(this.margin, this.margin), e = c.getItemCount(), f = 0, g = this._graphEditor.getCoordinateSystem(), k = g.deviceToLogX(a), g = g.deviceToLogY(b); f < e;) {
        var h = c.getItemAt(f);
        "ShapeCategory" === h.getType().getValue() ? (d.x !== this.margin && (d.y += this.shapeHeight + 600 + 2 * this.margin), h.setPinPoint((k - JSG.ui.scrollview.ScrollBar.SIZE) / 2, d.y + this.categoryHeight / 2), h.setSize(k - 2 * this.margin - JSG.ui.scrollview.ScrollBar.SIZE,
            this.categoryHeight), d.x = this.margin, d.y += this.margin + this.categoryHeight) : (h.setPinPoint(d.x + this.shapeWidth / 2, d.y + this.shapeHeight / 2), d.x += this.shapeWidth + this.margin, d.x + this.shapeWidth + this.margin > k - JSG.ui.scrollview.ScrollBar.SIZE && (d.x = this.margin, d.y += this.shapeHeight + 800 + this.margin));
        f++
    }
    JSG.ptCache.release(d);
    this._graphEditor.getGraphViewer().layout(k, g);
    this._graphEditor.repaint()
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.NavigatorGraphView = function (a) {
    JSG.ui.navigator.NavigatorGraphView._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.ui.navigator.NavigatorGraphView, JSG.graph.view.GraphView);
JSG.ui.navigator.NavigatorGraphView.prototype._drawGrid = function (a, b) {
};
JSG.ui.navigator.NavigatorGraphView.prototype._drawSelection = function (a) {
};
JSG.ui.navigator.NavigatorGraphView.prototype._drawFeedback = function (a) {
};
JSG.ui.navigator.NavigatorGraphView.prototype._drawOverlay = function (a) {
};
JSG.ui.navigator.NavigatorGraphView.prototype._refreshModel = function () {
};
JSG.ui.navigator.NavigatorGraphView.prototype.translateFromParent = function (a) {
    return a
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.NavigatorItemView = function (a) {
    JSG.ui.navigator.NavigatorItemView._super.constructor.apply(this, arguments);
    this._shapeRenderer = void 0
};
JSG.extend(JSG.ui.navigator.NavigatorItemView, JSG.graph.view.GraphItemView);
JSG.ui.navigator.NavigatorItemView.FILL_COLOR = "#ffffff";
JSG.ui.navigator.NavigatorItemView.TEXT_COLOR = "#DDDDDD";
JSG.ui.navigator.NavigatorItemView.LINE_COLOR = "#000000";
JSG.ui.navigator.NavigatorItemView.prototype.draw = function (a) {
    this._item.isVisible() && (void 0 === this._shapeRenderer && (this._shapeRenderer = JSG.graph.view.shapes.ShapeRenderer.fromShape(this._item._shape)), a.save(), this.translateGraphics(a), a.setLineStyle(this.getLineStyle()), a.setFillStyle(JSG.graph.attr.FormatAttributes.FillStyle.SOLID), a.setLineColor(JSG.ui.navigator.NavigatorItemView.LINE_COLOR), a.setFillColor(JSG.ui.navigator.NavigatorItemView.FILL_COLOR), a.setLineCorner(0), this._item.isCollapsed() ?
        this.drawCollapsed(a) : this.drawOutline(a), a.restore())
};
JSG.ui.navigator.NavigatorItemView.prototype.getLineStyle = function () {
    var a = !0, b = this._item.getFormat().getLineStyle().getValue();
    b === JSG.graph.attr.FormatAttributes.LineStyle.NONE && (b = (a = (a = (a = this._item.getParent() && !(this._item.getParent()instanceof JSG.graph.model.Graph)) || this._item instanceof JSG.graph.model.TextNode) || this._item.hasReshapeCoordinates()) ? b : JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    return b
};
JSG.ui.navigator.NavigatorItemView.prototype.drawOutline = function (a) {
    this._item.getFormat().getFillStyle().getValue() !== JSG.graph.attr.FormatAttributes.FillStyle.NONE && this._shapeRenderer.drawShapeFill(this._item._shape, this._item.isClosed(), a);
    this._shapeRenderer.drawShapeBorder(this._item._shape, this._item.isClosed(), a);
    this.hasSubviews() && this.drawSubViews(a)
};
JSG.ui.navigator.NavigatorItemView.prototype.drawCollapsed = function (a) {
    var b = this._item.getSize().toRectangle(JSG.rectCache.get());
    a.drawRect(b);
    JSG.rectCache.release(b)
};
JSG.ui.navigator.NavigatorItemView.prototype.translateGraphics = function (a) {
    var b = this._item.getOrigin(JSG.ptCache.get());
    a.translate(b.x, b.y);
    a.rotate(this._item.getAngle().getValue());
    JSG.ptCache.release(b)
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.NavigatorEdgeView = function (a) {
    JSG.ui.navigator.NavigatorEdgeView._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.ui.navigator.NavigatorEdgeView, JSG.graph.view.GraphItemView);
JSG.ui.navigator.NavigatorEdgeView.prototype.drawBorder = function (a, b, c) {
    function d(a) {
        a = a._item.getFormat().getLineStyle().getValue();
        return a === JSG.graph.attr.FormatAttributes.LineStyle.NONE ? a : JSG.graph.attr.FormatAttributes.LineStyle.SOLID
    }

    b.hasBorder() && (a.setLineStyle(d(this)), a.setLineColor(JSG.ui.navigator.NavigatorItemView.LINE_COLOR), a.setLineCorner(0), this._shapeRenderer.drawShapeBorder(this._item._shape, this._item.isClosed(), a))
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.NavigatorContentView = function (a) {
    JSG.ui.navigator.NavigatorContentView._super.constructor.apply(this, arguments)
};
JSG.extend(JSG.ui.navigator.NavigatorContentView, JSG.ui.navigator.NavigatorItemView);
JSG.ui.navigator.NavigatorContentView.prototype.drawSubViews = function (a) {
    var b, c;
    a.save();
    this._shapeRenderer.setClipArea(this._item._shape, a);
    b = 0;
    for (c = this._subviews.length; b < c; b++) {
        var d = this._subviews[b];
        d.isVisible() && d.draw(a)
    }
    a.restore()
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.NavigatorItemController = function (a, b) {
    JSG.ui.navigator.NavigatorItemController._super.constructor.apply(this, arguments);
    this._navigator = b
};
JSG.extend(JSG.ui.navigator.NavigatorItemController, JSG.graph.controller.GraphItemController);
JSG.ui.navigator.NavigatorItemController.prototype.createView = function (a) {
    return a instanceof JSG.graph.model.LineConnection ? new JSG.ui.navigator.NavigatorEdgeView(a) : a instanceof JSG.graph.model.ContentNode ? new JSG.ui.navigator.NavigatorContentView(a) : new JSG.ui.navigator.NavigatorItemView(a)
};
JSG.ui.navigator.NavigatorItemController.prototype.doLayout = function (a) {
};
JSG.ui.navigator.NavigatorItemController.prototype.handlePostEvent = function (a) {
    var b = JSG.graph.model.events.Event;
    switch (a.id) {
        case b.PARENT:
            this._onParentChange(a.value);
            break;
        case b.ITEMADD:
        case b.ITEMREMOVE:
            this.refresh()
    }
};
JSG.ui.navigator.NavigatorItemController.prototype.sendNotification = function (a, b) {
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.NavigatorControllerFactory = function () {
    function a(a) {
        return {
            createController: function (b) {
                return b instanceof JSG.graph.model.Graph ? new JSG.ui.navigator.NavigatorGraphController(b, a) : new JSG.ui.navigator.NavigatorItemController(b, a)
            }
        }
    }

    var b;
    return {
        getInstance: function (c) {
            b || (b = a(c));
            return b
        }
    }
}();
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.NavigatorGraphController = function (a, b) {
    JSG.ui.navigator.NavigatorGraphController._super.constructor.apply(this, arguments);
    this.navigator = b
};
JSG.extend(JSG.ui.navigator.NavigatorGraphController, JSG.graph.controller.GraphController);
JSG.ui.navigator.NavigatorGraphController.prototype.getGraphController = function () {
    return this
};
JSG.ui.navigator.NavigatorGraphController.prototype.createView = function (a) {
    return new JSG.ui.navigator.NavigatorGraphView(a)
};
JSG.ui.navigator.NavigatorGraphController.prototype.isSelectable = function () {
    return !1
};
JSG.ui.navigator.NavigatorGraphController.prototype.select = function (a) {
};
JSG.ui.navigator.NavigatorGraphController.prototype.setSelection = function (a) {
};
JSG.ui.navigator.NavigatorGraphController.prototype.handlePostEvent = function (a) {
    JSG.ui.navigator.NavigatorGraphController._super.handlePostEvent.call(this, a);
    if (a.detailId === JSG.graph.model.Graph.AttributeID.REFRESH)this.navigator.onRefresh()
};
JSG.ui.navigator.NavigatorGraphController.prototype.sendNotification = function (a, b) {
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.NavigatorViewer = function (a) {
    JSG.ui.navigator.NavigatorViewer._super.constructor.apply(this, arguments);
    this._selectionProvider = new JSG.graph.view.SelectionProvider
};
JSG.extend(JSG.ui.navigator.NavigatorViewer, JSG.ui.viewer.ControllerViewer);
JSG.ui.navigator.NavigatorViewer.prototype.setContent = function (a) {
    JSG.ui.navigator.NavigatorViewer._super.setContent.call(this, a);
    this._rootView = a ? a.getView() : void 0
};
JSG.ui.navigator.NavigatorViewer.prototype.getSelectionProvider = function () {
    return this._selectionProvider
};
JSG.ui.navigator.NavigatorViewer.prototype.getGraphSettings = function () {
    var a = this.getGraph();
    return a ? a.getSettings() : void 0
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.Overlay = function (a) {
    JSG.ui.navigator.Overlay._super.constructor.apply(this, arguments);
    this._cs = a;
    this._fgColor = "#0000aa";
    this._bgColor = "rgba(108,148,212,0.5)";
    this._bounds = new JSG.geometry.Rectangle(0, 0, 0, 0);
    this._innerbounds = new JSG.geometry.Rectangle(0, 0, 0, 0);
    this._innerbounds.right = 0;
    this._innerbounds.bottom = 0;
    this._outerbounds = new JSG.geometry.Rectangle(0, 0, 0, 0);
    this._outerbounds.right = 0;
    this._outerbounds.bottom = 0;
    this._selectionHandle = new JSG.graph.view.selection.SelectionHandle
};
JSG.extend(JSG.ui.navigator.Overlay, JSG.ui.View);
JSG.ui.navigator.Overlay.HANDLE_THRESHOLD = 4;
JSG.ui.navigator.Overlay.prototype.setBounds = function (a, b, c, d) {
    var e = this._cs.deviceToLogX(JSG.ui.navigator.Overlay.HANDLE_THRESHOLD);
    this._bounds.set(a, b, c, d);
    this._innerbounds.setTo(this._bounds);
    this._outerbounds.setTo(this._bounds);
    0 !== c && 0 !== d && (this._innerbounds.reduceBy(e), this._innerbounds.right = this._innerbounds.x + this._innerbounds.width, this._innerbounds.bottom = this._innerbounds.y + this._innerbounds.height, this._outerbounds.expandBy(e), this._outerbounds.right = this._outerbounds.x + this._outerbounds.width,
        this._outerbounds.bottom = this._outerbounds.y + this._outerbounds.height)
};
JSG.ui.navigator.Overlay.prototype.move = function (a, b) {
    this._bounds.x += a;
    this._bounds.y += b;
    this.setBounds(this._bounds.x, this._bounds.y, this._bounds.width, this._bounds.height)
};
JSG.ui.navigator.Overlay.prototype.placeAt = function (a) {
    var b = this._bounds;
    this.setBounds(a.x - b.width / 2, a.y - b.height / 2, b.width, b.height)
};
JSG.ui.navigator.Overlay.prototype.getHandleAt = function (a, b) {
    var c, d = -1, e = JSG.ui.Cursor.Style.AUTO;
    this._outerbounds.containsPoint(a) && (this._innerbounds.containsPoint(a) || JSG.touchDevice ? (c = JSG.graph.view.selection.SelectionHandle.TYPE.MOVE, e = JSG.ui.Cursor.Style.MOVE) : (c = JSG.graph.view.selection.SelectionHandle.TYPE.RESIZE, this._outerbounds.y < a.y && a.y < this._innerbounds.y ? this._outerbounds.x < a.x && a.x < this._innerbounds.x ? (e = JSG.ui.Cursor.Style.RESIZE_NW, d = JSG.graph.view.selection.SelectionHandle.INDEX.NW) :
        this._innerbounds.right < a.x && a.x < this._outerbounds.right ? (e = JSG.ui.Cursor.Style.RESIZE_NE, d = JSG.graph.view.selection.SelectionHandle.INDEX.NE) : (e = JSG.ui.Cursor.Style.RESIZE_N, d = JSG.graph.view.selection.SelectionHandle.INDEX.N) : this._innerbounds.right < a.x && a.x < this._outerbounds.right ? this._innerbounds.bottom < a.y && a.y < this._outerbounds.bottom ? (e = JSG.ui.Cursor.Style.RESIZE_SE, d = JSG.graph.view.selection.SelectionHandle.INDEX.SE) : (e = JSG.ui.Cursor.Style.RESIZE_E, d = JSG.graph.view.selection.SelectionHandle.INDEX.E) :
        this._innerbounds.bottom < a.y && a.y < this._outerbounds.bottom ? this._outerbounds.x < a.x && a.x < this._innerbounds.x ? (e = JSG.ui.Cursor.Style.RESIZE_SW, d = JSG.graph.view.selection.SelectionHandle.INDEX.SW) : (e = JSG.ui.Cursor.Style.RESIZE_S, d = JSG.graph.view.selection.SelectionHandle.INDEX.S) : this._outerbounds.x < a.x && a.x < this._innerbounds.x && (e = JSG.ui.Cursor.Style.RESIZE_W, d = JSG.graph.view.selection.SelectionHandle.INDEX.W)));
    this._selectionHandle.setType(c);
    this._selectionHandle.setCursor(e);
    this._selectionHandle.setPointIndex(d);
    return this._selectionHandle
};
JSG.ui.navigator.Overlay.prototype.draw = function (a) {
    this._isVisible && (this.drawBackground(a), this.drawBorder(a))
};
JSG.ui.navigator.Overlay.prototype.drawBackground = function (a) {
    a.setFillColor(this._bgColor);
    a.fillRect(this._bounds)
};
JSG.ui.navigator.Overlay.prototype.drawBorder = function (a) {
    a.setLineStyle(JSG.graph.attr.FormatAttributes.LineStyle.SOLID);
    a.setLineColor(this._fgColor);
    a.drawRect(this._bounds)
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.OverlayInteraction = function (a) {
    JSG.ui.navigator.OverlayInteraction._super.constructor.apply(this, arguments);
    this._offset = new JSG.geometry.Point(0, 0);
    this.lastLocation = new JSG.geometry.Point(0, 0);
    this._activeHandle = void 0;
    this._navigator = a;
    this._overlay = a._overlay;
    this._newBounds = new JSG.geometry.Rectangle(0, 0, 0, 0)
};
JSG.extend(JSG.ui.navigator.OverlayInteraction, JSG.graph.interaction.Interaction);
JSG.ui.navigator.OverlayInteraction.prototype.onPinchStart = function (a, b) {
};
JSG.ui.navigator.OverlayInteraction.prototype.onPinch = function (a, b) {
    this._navigator.zoomGraph(a.gesture.scale, !0)
};
JSG.ui.navigator.OverlayInteraction.prototype.onHoldDragStart = function (a, b) {
    this.lastLocation.setTo(this.currentLocation);
    this._updateCursorAt(a.location, a);
    return !0
};
JSG.ui.navigator.OverlayInteraction.prototype.onHoldDrag = function (a, b) {
    this._update(a);
    return !0
};
JSG.ui.navigator.OverlayInteraction.prototype.onHoldDragEnd = function (a, b) {
    this._moveOverlay(this._offset, a);
    return !0
};
JSG.ui.navigator.OverlayInteraction.prototype.onMouseDown = function (a, b) {
    this.lastLocation.setTo(this.currentLocation);
    this._updateCursorAt(a.location, a)
};
JSG.ui.navigator.OverlayInteraction.prototype.onMouseDoubleClick = function (a, b) {
    this._overlay.placeAt(this.currentLocation);
    this._navigator.scrollGraph()
};
JSG.ui.navigator.OverlayInteraction.prototype.onMouseDrag = function (a, b) {
    this._update(a)
};
JSG.ui.navigator.OverlayInteraction.prototype.onMouseWheel = function (a, b) {
    var c = a.event, d = c.wheelDelta ? c.wheelDelta / 120 : -c.detail, d = this._overlay._cs.deviceToLogX(10 * d);
    this._isVerticalWheelEvent(c) ? this._offset.set(0, -d) : this._offset.set(-d, 0);
    this._moveOverlay(this._offset, a)
};
JSG.ui.navigator.OverlayInteraction.prototype._isVerticalWheelEvent = function (a) {
    return "y" === (a.wheelDeltaX ? "x" : a.axis && a.axis === a.HORIZONTAL_AXIS ? "x" : "y")
};
JSG.ui.navigator.OverlayInteraction.prototype._update = function (a) {
    if (this._activeHandle) {
        var b = this._activeHandle.getType();
        b === JSG.graph.view.selection.SelectionHandle.TYPE.MOVE ? (this._offset.setTo(this.currentLocation).subtract(this.lastLocation), this._moveOverlay(this._offset, a)) : b === JSG.graph.view.selection.SelectionHandle.TYPE.RESIZE && this._resizeOverlay(this.currentLocation, a);
        this.lastLocation.setTo(this.currentLocation)
    }
};
JSG.ui.navigator.OverlayInteraction.prototype._moveOverlay = function (a, b) {
    this._overlay.move(a.x, a.y);
    JSG.touchDevice && b.type !== JSG.ui.events.MouseEventType.UP && b.type !== JSG.ui.events.GestureEventType.HOLDDRAGEND || this._navigator.scrollGraph()
};
JSG.ui.navigator.OverlayInteraction.prototype._resizeOverlay = function (a, b) {
    function c(a) {
        return 50 < a.width && 50 < a.height
    }

    function d(a, c) {
        f._overlay.setBounds(a, c, f._overlay._bounds.width, f._overlay._bounds.height);
        JSG.touchDevice && b.type !== JSG.ui.events.MouseEventType.UP || f._navigator.scrollGraph()
    }

    function e(a, c, d) {
        if (c || 0 === c)a = Math.max(a, c);
        f._overlay.setBounds(f._newBounds.x, f._newBounds.y, f._newBounds.width, f._newBounds.height);
        JSG.touchDevice && b.type !== JSG.ui.events.MouseEventType.UP || f._navigator.zoomGraph(a,
            d)
    }

    var f = this, g = this._overlay._bounds.copy();
    this._newBounds.setTo(g);
    switch (this._activeHandle.getPointIndex()) {
        case JSG.graph.view.selection.SelectionHandle.INDEX.NW:
            this._newBounds.x = a.x;
            this._newBounds.y = a.y;
            this._newBounds.width = g.width + g.x - a.x;
            this._newBounds.height = g.height + g.y - a.y;
            c(this._newBounds) && (e(g.width / this._newBounds.width, g.height / this._newBounds.height), d(this._newBounds.x + this._newBounds.width - this._overlay._bounds.width, this._newBounds.y + this._newBounds.height - this._overlay._bounds.height));
            break;
        case JSG.graph.view.selection.SelectionHandle.INDEX.N:
            this._newBounds.y = a.y;
            this._newBounds.height = g.height + (g.y - a.y);
            c(this._newBounds) && (e(g.height / this._newBounds.height), d(this._newBounds.x, this._newBounds.y + this._newBounds.height - this._overlay._bounds.height));
            break;
        case JSG.graph.view.selection.SelectionHandle.INDEX.NE:
            this._newBounds.y = a.y;
            this._newBounds.width = a.x - g.x;
            this._newBounds.height = g.height + (g.y - a.y);
            c(this._newBounds) && (e(g.width / this._newBounds.width, g.height / this._newBounds.height),
                d(this._newBounds.x, this._newBounds.y + this._newBounds.height - this._overlay._bounds.height));
            break;
        case JSG.graph.view.selection.SelectionHandle.INDEX.E:
            this._newBounds.width = a.x - g.x;
            c(this._newBounds) && e(g.width / this._newBounds.width, void 0, !0);
            break;
        case JSG.graph.view.selection.SelectionHandle.INDEX.SE:
            this._newBounds.width = a.x - g.x;
            this._newBounds.height = a.y - g.y;
            c(this._newBounds) && e(g.width / this._newBounds.width, g.height / this._newBounds.height, !0);
            break;
        case JSG.graph.view.selection.SelectionHandle.INDEX.S:
            this._newBounds.height =
                a.y - g.y;
            c(this._newBounds) && e(g.height / this._newBounds.height, void 0, !0);
            break;
        case JSG.graph.view.selection.SelectionHandle.INDEX.SW:
            this._newBounds.x = a.x;
            this._newBounds.width = g.width + (g.x - a.x);
            this._newBounds.height = a.y - g.y;
            c(this._newBounds) && (e(g.width / this._newBounds.width, g.height / this._newBounds.height), d(this._newBounds.x + this._newBounds.width - this._overlay._bounds.width, this._newBounds.y));
            break;
        case JSG.graph.view.selection.SelectionHandle.INDEX.W:
            this._newBounds.x = a.x, this._newBounds.width =
                g.width + (g.x - a.x), c(this._newBounds) && (e(g.width / this._newBounds.width), d(this._newBounds.x + this._newBounds.width - this._overlay._bounds.width, this._newBounds.y))
    }
};
JSG.ui.navigator.OverlayInteraction.prototype.onMouseMove = function (a, b) {
    this._updateCursorAt(a.location, a)
};
JSG.ui.navigator.OverlayInteraction.prototype._updateCursorAt = function (a, b) {
    var c = (this._activeHandle = this._overlay.getHandleAt(a, b)) ? this._activeHandle.getCursor() : "auto";
    JSG.ui.navigator.OverlayInteraction._super.setCursor.call(this, c)
};
JSG.ui.navigator.OverlayInteraction.prototype.onMouseUp = function (a, b) {
    this._update(a);
    this._activeHandle = void 0;
    JSG.ui.navigator.OverlayInteraction._super.setCursor.call(this, "auto")
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.JSGNavigatorInteractionHandler = function (a) {
    JSG.ui.navigator.JSGNavigatorInteractionHandler._super.constructor.apply(this, arguments);
    this.origin = new JSG.geometry.Point(0, 0)
};
JSG.extend(JSG.ui.navigator.JSGNavigatorInteractionHandler, JSG.graph.interaction.InteractionHandler);
JSG.ui.navigator.JSGNavigatorInteractionHandler.prototype.handleMouseEvent = function (a) {
    a.location.translate(-this.origin.x, -this.origin.y);
    JSG.ui.navigator.JSGNavigatorInteractionHandler._super.handleMouseEvent.call(this, a)
};
JSG.ui.navigator.JSGNavigatorInteractionHandler.prototype.handleGestureEvent = function (a) {
    a.location.translate(-this.origin.x, -this.origin.y);
    JSG.ui.navigator.JSGNavigatorInteractionHandler._super.handleGestureEvent.call(this, a)
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.JSGNavigatorPanel = function (a) {
    JSG.ui.navigator.JSGNavigatorPanel._super.constructor.apply(this, arguments);
    this._cs = a._cs;
    this._navViewer = new JSG.ui.navigator.NavigatorViewer(this);
    this._navViewer.setControllerFactory(JSG.ui.navigator.NavigatorControllerFactory.getInstance(a))
};
JSG.extend(JSG.ui.navigator.JSGNavigatorPanel, JSG.ui.GraphViewPanel);
JSG.ui.navigator.JSGNavigatorPanel.prototype.getViewer = function () {
    return this._navViewer
};
JSG.ui.navigator.JSGNavigatorPanel.prototype.setGraph = function (a) {
    this._navViewer.setGraph(a);
    a = this._navViewer.getRootView();
    this.setView(a)
};
JSG.ui.navigator.JSGNavigatorPanel.prototype.getGraphView = function () {
    return this._navViewer.getRootView()
};
JSG.ui.navigator.JSGNavigatorPanel.prototype.clear = function () {
    this.setView(void 0)
};
JSG.ui.navigator.JSGNavigatorPanel.prototype.drawBackground = function (a) {
};
JSG.ui.navigator.JSGNavigatorPanel.prototype.drawClientArea = function (a) {
    var b = this.getView();
    if (b) {
        var c = this.getBounds(JSG.rectCache.get());
        a.save();
        a.translate(-c.x, -c.y);
        b.draw(a);
        a.restore();
        JSG.rectCache.release(c)
    }
};
JSG.namespace("JSG.ui.navigator");
JSG.ui.navigator.JSGNavigator = function (a, b, c) {
    JSG.ui.navigator.JSGNavigator._super.constructor.apply(this, arguments);
    this._bgColor = JSG.bkColorNavigator;
    this._graphEditor = void 0;
    this._cs = new JSG.ui.graphics.MetricCoordinateSystem;
    this._graphicSystem = new JSG.ui.graphics.GraphicSystem(a, this._cs);
    this._graphicSystem.resize(b, c);
    this._forceRepaint = !0;
    this._requestRepaint = !1;
    this._navigatorPanel = new JSG.ui.navigator.JSGNavigatorPanel(this);
    this._overlay = new JSG.ui.navigator.Overlay(this._cs);
    this._navigatorPanel.getViewer().setDefaultInteraction(new JSG.ui.navigator.OverlayInteraction(this));
    this._offsetToPanel = new JSG.geometry.Point(0, 0);
    this._interactionHandler = new JSG.ui.navigator.JSGNavigatorInteractionHandler(this._navigatorPanel.getViewer());
    this._graphicSystem.setInteractionHandler(this._interactionHandler);
    this._graphicSystem.setContent(this);
    var d = JSG.graph.notifications.NotificationCenter.getInstance();
    d.register(this, JSG.DRAW_DISABLED_NOTIFICATION);
    d.register(this, JSG.ui.GraphEditor.DISPLAY_MODE_NOTIFICATION);
    d.register(this, JSG.ui.ScrollPanel.SCROLL_NOTIFICATION);
    d.register(this,
        JSG.ui.scrollview.ViewPort.BOUNDS_CHANGED_NOTIFICATION)
};
JSG.extend(JSG.ui.navigator.JSGNavigator, JSG.ui.View);
JSG.ui.navigator.JSGNavigator.prototype._INSET = 4;
JSG.ui.navigator.JSGNavigator.prototype.destroy = function () {
    this.clear();
    this._graphicSystem.destroy();
    var a = JSG.graph.notifications.NotificationCenter.getInstance();
    a.unregister(this, JSG.DRAW_DISABLED_NOTIFICATION);
    a.unregister(this, JSG.ui.GraphEditor.DISPLAY_MODE_NOTIFICATION);
    a.unregister(this, JSG.ui.ScrollPanel.SCROLL_NOTIFICATION);
    a.unregister(this, JSG.ui.scrollview.ViewPort.BOUNDS_CHANGED_NOTIFICATION)
};
JSG.ui.navigator.JSGNavigator.prototype.resize = function (a, b) {
    this._graphicSystem.resize(a, b);
    this._handleResize();
    this._graphicSystem.paint(this._forceRepaint)
};
JSG.ui.navigator.JSGNavigator.prototype.onRefresh = function () {
    this._navigatorPanel.layout();
    this._handleResize();
    this._graphicSystem.paint(this._forceRepaint)
};
JSG.ui.navigator.JSGNavigator.prototype.onResize = function () {
    this._handleResize();
    this._graphicSystem.paint(this._forceRepaint)
};
JSG.ui.navigator.JSGNavigator.prototype._handleResize = function () {
    this._navigatorPanel.getGraphView()instanceof JSG.graph.view.GraphView && this._navigatorPanel.getGraphView().clearCache();
    this._setZoom();
    this._adjustOffset();
    this._setOverlayBounds();
    this._setInteractionHandlerOrigin()
};
JSG.ui.navigator.JSGNavigator.prototype._setZoom = function () {
    var a = this._graphicSystem.getSize(), b = this._navigatorPanel.getSize();
    if (0 !== b.x && 0 !== b.y) {
        var c = this._cs.deviceToLogXNoZoom(a.x - 2 * this._INSET) / b.x, a = this._cs.deviceToLogYNoZoom(a.y - 2 * this._INSET) / b.y;
        this._cs.setZoom(Math.min(c, a))
    } else this._cs.setZoom(1)
};
JSG.ui.navigator.JSGNavigator.prototype._adjustOffset = function () {
    var a = this._graphicSystem.getSize(), b = this._navigatorPanel.getBounds();
    0 !== this._cs.getZoom() && (a.x = this._cs.deviceToLogX(a.x), a.y = this._cs.deviceToLogY(a.y));
    this._offsetToPanel.x = (a.x - b.width) / 2;
    this._offsetToPanel.y = (a.y - b.height) / 2
};
JSG.ui.navigator.JSGNavigator.prototype._setOverlayBounds = function () {
    if (this._graphEditor) {
        var a = this._graphEditor.getVisibleGraphRect(), b = this._navigatorPanel.getBounds();
        a.x = b.x - a.x;
        a.y = b.y - a.y;
        this._overlay.setBounds(-a.x, -a.y, a.width, a.height)
    }
};
JSG.ui.navigator.JSGNavigator.prototype._setInteractionHandlerOrigin = function () {
    this._interactionHandler.origin.setTo(this._offsetToPanel)
};
JSG.ui.navigator.JSGNavigator.prototype.scrollGraph = function () {
    var a = this._overlay._bounds, b = this._navigatorPanel.getBounds();
    this._graphEditor.setScrollPosition(a.x + b.x, a.y + b.y)
};
JSG.ui.navigator.JSGNavigator.prototype.zoomGraph = function (a, b) {
    var c = this._graphEditor.getGraphViewer(), d = c.getZoom() * a;
    c.setZoom(d);
    !0 === b && this._graphEditor.repaint()
};
JSG.ui.navigator.JSGNavigator.prototype.onNotification = function (a) {
    switch (a.name) {
        case JSG.DRAW_DISABLED_NOTIFICATION:
        case JSG.ui.ScrollPanel.SCROLL_NOTIFICATION:
        case JSG.ui.scrollview.ViewPort.BOUNDS_CHANGED_NOTIFICATION:
            this._setOverlayBounds();
            this._graphicSystem.paint(this._forceRepaint);
            break;
        case JSG.ui.GraphEditor.DISPLAY_MODE_NOTIFICATION:
            this.getGraph() && (this._navigatorPanel.getGraphView().clearCache(), this._navigatorPanel.layout(), this._handleResize(), this._graphicSystem.paint(this._forceRepaint))
    }
};
JSG.ui.navigator.JSGNavigator.prototype.setGraphEditor = function (a) {
    this._graphEditor = a;
    this._overlay.setVisible(!0);
    this._navigatorPanel.setGraph(a.getGraph());
    this._handleResize();
    this._graphicSystem.paint(this._forceRepaint)
};
JSG.ui.navigator.JSGNavigator.prototype.getGraph = function () {
    return this._graphEditor ? this._graphEditor.getGraph() : void 0
};
JSG.ui.navigator.JSGNavigator.prototype.getGraphSettings = function () {
    var a = this.getGraph();
    return a ? a.getSettings() : void 0
};
JSG.ui.navigator.JSGNavigator.prototype.clear = function () {
    this._graphEditor = void 0;
    this._navigatorPanel.clear();
    this._overlay.setVisible(!1);
    this._overlay.setBounds(0, 0, 0, 0);
    this._graphicSystem.paint(this._forceRepaint)
};
JSG.ui.navigator.JSGNavigator.prototype.draw = function (a) {
    this._drawing ? this._requestRepaint = !0 : (this._drawing = !0, this._requestRepaint = !1, this._clearCanvas(a), a.save(), a.translate(this._offsetToPanel.x, this._offsetToPanel.y), this._navigatorPanel.draw(a), this._overlay.draw(a), a.restore(), this._drawing = void 0)
};
JSG.ui.navigator.JSGNavigator.prototype._clearCanvas = function (a) {
    a = a.getContext();
    a.fillStyle = this._bgColor;
    var b = this._graphicSystem.getSize(JSG.ptCache.get());
    a.fillRect(0, 0, b.x, b.y);
    JSG.ptCache.release(b)
};